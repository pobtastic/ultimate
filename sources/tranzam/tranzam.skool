@org=$4000
@start=$5B80

; Loading screen
;
; #UDGTABLE
; { #SCR(loading) | Tranz Am Loading Screen. }
; TABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels
 $4020 DEFB $00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4040 DEFB $00,$00,$7F,$F0,$0F,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78 ;
 $4060 DEFB $00,$00,$00,$01,$FF,$FC,$0F,$FF,$F0,$FF,$FF,$C0,$FF,$FF,$FF,$00,$3F,$FF,$FE,$00,$00,$FF,$FF,$FF,$80,$7F,$FF,$FF,$FF,$FF,$C0,$00 ;
 $4080 DEFB $00,$00,$00,$20,$00,$80,$4C,$E0,$88,$04,$00,$01,$00,$88,$88,$80,$12,$01,$00,$00,$40,$00,$0E,$01,$00,$40,$04,$40,$22,$00,$40,$00 ;
 $40A0 DEFB $00,$00,$0F,$FF,$F8,$07,$FB,$FF,$FF,$FF,$FF,$FF,$FC,$7F,$FF,$F8,$7E,$7F,$E0,$2F,$FF,$FF,$FF,$FF,$07,$FF,$C7,$FE,$3F,$FE,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$0F,$C0,$1F,$FF,$FF,$1F,$FF,$FF,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$1F,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $4140 DEFB $00,$00,$7F,$E0,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$84 ;
 $4160 DEFB $00,$00,$00,$03,$FF,$F8,$0F,$FF,$F1,$FF,$FF,$E0,$FF,$FF,$FF,$00,$FF,$FF,$FC,$00,$00,$FF,$FF,$FF,$00,$7F,$FF,$FF,$FF,$FF,$E0,$00 ;
 $4180 DEFB $00,$00,$00,$47,$0E,$80,$BF,$FC,$88,$04,$0F,$F2,$FC,$8F,$E8,$80,$24,$00,$80,$00,$80,$00,$FF,$81,$00,$80,$08,$80,$22,$0E,$40,$00 ;
 $41A0 DEFB $00,$00,$FF,$FF,$FF,$0F,$F3,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$FF,$F1,$FF,$FF,$E0,$5F,$FF,$FF,$FF,$FF,$0F,$FF,$8F,$FE,$3F,$FC,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FE,$3F,$FF,$FE,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00 ;
 $4200 DEFB $00,$00,$00,$7F,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$E0 ;
 $4220 DEFB $00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00 ;
 $4240 DEFB $00,$00,$00,$00,$1F,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FC,$00,$00,$00,$00,$00,$01,$32 ;
 $4260 DEFB $00,$00,$00,$03,$FF,$F8,$1F,$FF,$F1,$FF,$FF,$F0,$7F,$FF,$FF,$03,$FF,$FF,$E0,$00,$01,$FF,$FF,$FF,$00,$1F,$FF,$FF,$FF,$FF,$E0,$00 ;
 $4280 DEFB $00,$00,$00,$9F,$FD,$00,$BF,$FE,$89,$F4,$1F,$E2,$FD,$1F,$D1,$3C,$48,$00,$40,$01,$00,$0F,$FF,$D1,$00,$80,$08,$BF,$44,$7E,$80,$00 ;
 $42A0 DEFB $00,$01,$FF,$FF,$FE,$0F,$F3,$FF,$FF,$FF,$FF,$FF,$F8,$FF,$FF,$E3,$FF,$FF,$E0,$FF,$FF,$FD,$FF,$FE,$0F,$FF,$8F,$FC,$7F,$FC,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FC,$7F,$FF,$FC,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00 ;
 $4300 DEFB $00,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$E0 ;
 $4320 DEFB $00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$01,$FE,$00 ;
 $4340 DEFB $00,$00,$00,$00,$3F,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$01,$42 ;
 $4360 DEFB $00,$00,$00,$05,$FF,$F0,$1F,$FF,$F3,$FF,$FF,$F8,$7F,$FF,$FF,$07,$FF,$FF,$C0,$00,$03,$FF,$FF,$FF,$00,$1F,$FF,$FF,$FF,$FF,$E0,$00 ;
 $4380 DEFB $00,$00,$00,$BF,$FD,$01,$7F,$FF,$4B,$FC,$3F,$E7,$FF,$1F,$F1,$7C,$8F,$C0,$40,$02,$00,$7F,$FF,$F9,$01,$7F,$D1,$7F,$C5,$FE,$80,$00 ;
 $43A0 DEFB $00,$03,$FF,$FF,$FE,$1F,$F1,$FF,$FF,$FF,$FF,$FF,$F0,$FF,$FF,$C7,$FF,$FF,$E1,$FF,$FF,$F9,$FF,$FE,$0F,$FF,$1F,$FC,$7F,$F8,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$F0,$FF,$FF,$F8,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00 ;
 $4400 DEFB $00,$00,$00,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$E0 ;
 $4420 DEFB $00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FE,$00 ;
 $4440 DEFB $00,$00,$00,$00,$3F,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$01,$42 ;
 $4460 DEFB $00,$00,$00,$03,$FF,$D0,$2F,$FF,$E7,$FF,$FF,$F8,$FF,$E7,$FE,$0F,$FF,$FF,$80,$00,$07,$FC,$07,$FF,$00,$3F,$FF,$FF,$FF,$FF,$E0,$00 ;
 $4480 DEFB $00,$00,$01,$7F,$FA,$01,$FF,$FF,$EF,$FE,$7F,$E7,$FF,$1F,$FE,$FD,$00,$3F,$A0,$04,$01,$FF,$FF,$FD,$01,$FF,$F1,$FF,$8F,$FF,$00,$00 ;
 $44A0 DEFB $00,$03,$FF,$FF,$FC,$1F,$E1,$FF,$FF,$FF,$FF,$FF,$F0,$FF,$FF,$8F,$FF,$FF,$C3,$FF,$FF,$F1,$FF,$FE,$0F,$FF,$1F,$F8,$FF,$F8,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$81,$FF,$FF,$F0,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00 ;
 $4500 DEFB $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0 ;
 $4520 DEFB $00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FC,$00 ;
 $4540 DEFB $00,$00,$00,$00,$7F,$FE,$00,$00,$00,$07,$F8,$00,$1F,$C0,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$F8,$00,$00,$00,$01,$FC,$01,$32 ;
 $4560 DEFB $00,$00,$00,$03,$FF,$A0,$2F,$07,$A7,$FF,$FF,$E0,$BF,$A3,$FA,$1F,$FF,$7F,$00,$00,$0F,$E0,$00,$FD,$00,$3F,$FE,$7F,$F3,$FF,$A0,$00 ;
 $4580 DEFB $00,$00,$02,$FF,$FC,$03,$FD,$FF,$FF,$FF,$FF,$FF,$FE,$3F,$FF,$FA,$00,$1F,$E0,$05,$FF,$FF,$FF,$FD,$03,$FF,$E3,$FF,$8F,$FF,$00,$00 ;
 $45A0 DEFB $00,$07,$FF,$FF,$FC,$1F,$E0,$FF,$FF,$FF,$FF,$FF,$E0,$7F,$FF,$1F,$FF,$FF,$C7,$FF,$FF,$E1,$FF,$FE,$1F,$FE,$3F,$F8,$FF,$F0,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$E0,$01,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00 ;
 $4600 DEFB $00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0 ;
 $4620 DEFB $00,$00,$3F,$F8,$07,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FC,$00 ;
 $4640 DEFB $00,$00,$00,$00,$FF,$FE,$01,$E0,$00,$1F,$FE,$00,$7F,$F3,$FE,$00,$00,$7F,$FF,$00,$07,$FF,$FF,$FF,$F0,$3F,$FF,$F8,$0F,$FF,$00,$84 ;
 $4660 DEFB $00,$00,$00,$10,$00,$20,$20,$00,$45,$FD,$3F,$81,$00,$44,$14,$2F,$FC,$FF,$00,$00,$17,$00,$00,$01,$00,$2F,$FA,$3F,$D1,$7E,$20,$00 ;
 $4680 DEFB $00,$00,$03,$FF,$FC,$03,$FD,$FF,$FF,$FF,$FF,$FF,$FE,$3F,$FF,$FC,$00,$1F,$E0,$0B,$FF,$FF,$FF,$FF,$03,$FF,$E3,$FF,$1F,$FF,$00,$00 ;
 $46A0 DEFB $00,$0F,$FF,$FF,$F8,$3F,$C0,$7F,$FB,$FF,$FF,$FF,$C0,$7F,$FC,$1F,$FF,$FF,$87,$FF,$FF,$C1,$FF,$FE,$1F,$FE,$3F,$F1,$FF,$F0,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$C0,$01,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00 ;
 $4700 DEFB $00,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4720 DEFB $00,$00,$3F,$F0,$07,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$FF,$FC,$07,$FF,$F0,$7F,$FF,$80,$FF,$FF,$FF,$00,$0F,$FF,$FF,$00,$07,$FF,$FF,$FF,$E0,$3F,$FF,$FF,$3F,$FF,$C0,$78 ;
 $4760 DEFB $00,$00,$00,$20,$00,$40,$40,$00,$48,$02,$3C,$01,$00,$44,$04,$5F,$E9,$3E,$00,$00,$20,$00,$00,$01,$00,$50,$04,$5C,$12,$00,$20,$00 ;
 $4780 DEFB $00,$00,$07,$FF,$F8,$07,$FD,$FF,$FF,$FF,$FF,$FF,$FC,$7F,$FF,$FC,$1C,$1F,$E0,$17,$FF,$FF,$FF,$FF,$07,$FF,$C7,$FF,$1F,$FE,$00,$00 ;
 $47A0 DEFB $00,$0F,$FF,$FF,$F0,$3F,$C0,$1F,$E1,$FF,$1F,$CF,$80,$3F,$F0,$3F,$FF,$FF,$8F,$FF,$FF,$81,$FF,$FE,$1F,$FE,$3F,$F1,$FF,$E0,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$FF,$80,$01,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $C0,$1D,$E7,$BD,$00,$F0,$C0,$38,$00,$01,$80,$00,$00,$00,$0F,$FF,$F8,$7F,$F8,$38,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $FF,$80,$00,$7F,$FF,$FF,$FF,$FF,$FF,$FC,$FF,$FF,$FF,$00,$03,$75,$CF,$9B,$FF,$FF,$F8,$7C,$01,$FD,$80,$3F,$80,$80,$00,$00,$00,$0F ;
 $4880 DEFB $80,$EF,$FF,$E0,$E1,$FF,$FF,$FF,$F7,$FF,$FC,$00,$18,$87,$04,$0B,$3C,$0E,$73,$3F,$FF,$00,$FF,$EE,$3F,$C2,$04,$F7,$66,$00,$00,$FF ;
 $48A0 DEFB $FC,$03,$FF,$FF,$FF,$E0,$10,$00,$0F,$00,$03,$F8,$00,$88,$8C,$42,$47,$EE,$39,$DB,$60,$00,$3F,$EB,$97,$38,$F8,$FD,$B9,$B7,$80,$07 ;
 $48C0 DEFB $FF,$FE,$7F,$7F,$FF,$FF,$FF,$F0,$00,$00,$3F,$FF,$FF,$C4,$00,$A0,$00,$41,$FD,$CF,$19,$E0,$E1,$BF,$3F,$D2,$0E,$42,$17,$64,$60,$00 ;
 $48E0 DEFB $03,$F0,$00,$1C,$07,$80,$07,$00,$FF,$DF,$F8,$1F,$01,$F8,$3F,$F8,$00,$00,$20,$FB,$BF,$FE,$07,$23,$7F,$3B,$B0,$42,$27,$E4,$D0,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$01,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $F0,$30,$3E,$38,$1C,$B4,$F0,$FF,$E0,$07,$F0,$00,$0C,$60,$17,$FF,$F1,$F0,$00,$03,$84,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $F0,$00,$00,$4F,$FF,$FF,$01,$00,$1F,$F8,$0F,$FF,$FC,$01,$F9,$AD,$F3,$CD,$FF,$FF,$C7,$80,$00,$02,$70,$0F,$80,$00,$00,$00,$00,$00 ;
 $4980 DEFB $00,$9F,$FF,$F3,$FB,$FF,$0E,$FF,$FF,$FF,$FF,$00,$E1,$0D,$C2,$0B,$DE,$23,$B9,$B0,$07,$FB,$FF,$EF,$0F,$F8,$05,$37,$58,$60,$00,$2F ;
 $49A0 DEFB $FF,$1F,$FF,$FF,$FF,$FC,$00,$00,$04,$00,$00,$F0,$00,$88,$8C,$42,$23,$F3,$9C,$6F,$B8,$00,$1F,$E8,$2A,$39,$E2,$1E,$7E,$4F,$00,$0F ;
 $49C0 DEFB $FF,$F9,$FC,$7F,$BF,$FF,$7F,$FC,$00,$01,$FF,$FF,$FF,$C3,$01,$40,$00,$30,$7E,$E7,$CE,$7F,$0F,$BF,$3F,$EC,$89,$42,$17,$1E,$D0,$00 ;
 $49E0 DEFB $07,$C0,$00,$1C,$07,$C0,$00,$00,$1F,$E7,$F0,$0F,$00,$7C,$07,$FF,$C0,$00,$10,$7D,$FF,$FF,$88,$3F,$BF,$F7,$B1,$C2,$0F,$DB,$D0,$00 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$00,$17,$80,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $FF,$60,$01,$1C,$54,$D4,$3F,$FF,$F0,$1F,$FC,$00,$1F,$F8,$19,$FF,$C3,$EF,$FF,$E0,$30,$00,$00,$00,$00,$00,$00,$00,$18,$01,$E0,$00 ;
 $4A60 DEFB $00,$00,$00,$0F,$FF,$E4,$00,$00,$03,$FC,$03,$FF,$F8,$06,$06,$CD,$FD,$F6,$FF,$FF,$38,$00,$00,$07,$FE,$01,$C0,$00,$00,$00,$0E,$00 ;
 $4A80 DEFB $01,$78,$FF,$FF,$87,$FE,$0E,$3F,$FB,$FF,$FF,$83,$F1,$0D,$E2,$09,$EF,$11,$DC,$58,$00,$1B,$FF,$EF,$30,$F8,$05,$CE,$5D,$30,$00,$70 ;
 $4AA0 DEFB $F8,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$44,$5C,$42,$10,$FD,$C6,$33,$DC,$00,$0F,$EB,$D0,$39,$C4,$C0,$80,$2E,$80,$1F ;
 $4AC0 DEFB $FF,$F7,$F8,$7F,$BF,$FF,$CF,$FF,$00,$07,$FF,$FF,$FF,$F0,$C3,$80,$00,$08,$3F,$73,$E3,$8F,$FF,$DF,$FF,$F3,$44,$C2,$2E,$FE,$B0,$00 ;
 $4AE0 DEFB $0F,$00,$00,$0C,$01,$C0,$00,$00,$03,$FB,$C0,$02,$00,$1C,$00,$FF,$FC,$00,$08,$3D,$FF,$FF,$C4,$3F,$DF,$F7,$73,$C2,$1F,$A6,$A0,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$F0,$38,$60,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $7C,$80,$78,$00,$5C,$B3,$2F,$C2,$7E,$7E,$3F,$00,$3D,$BE,$06,$7F,$C7,$9F,$FF,$FE,$07,$C0,$00,$00,$00,$00,$03,$80,$7C,$0F,$F8,$00 ;
 $4B60 DEFB $07,$00,$00,$03,$FF,$80,$00,$00,$00,$7E,$01,$C0,$18,$08,$01,$4B,$CE,$79,$7F,$FC,$C0,$00,$00,$28,$FF,$80,$60,$00,$00,$80,$1F,$80 ;
 $4B80 DEFB $02,$C0,$C0,$FE,$06,$40,$1E,$0F,$FE,$FF,$FF,$FF,$E9,$1D,$F1,$04,$F7,$9C,$66,$2C,$0C,$03,$FF,$EF,$30,$38,$00,$32,$BB,$40,$00,$80 ;
 $4BA0 DEFB $E7,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$45,$BC,$42,$08,$7E,$E3,$9D,$E6,$00,$03,$EB,$E5,$79,$CD,$B1,$7F,$9D,$80,$3C ;
 $4BC0 DEFB $FF,$EF,$E0,$7F,$7E,$FF,$F7,$FF,$C0,$1F,$FF,$FF,$FF,$F8,$3E,$00,$00,$04,$1F,$B9,$F8,$F1,$FF,$8F,$F3,$FD,$9B,$C1,$D9,$FE,$30,$00 ;
 $4BE0 DEFB $1C,$00,$00,$0C,$00,$C0,$00,$00,$00,$3C,$C0,$00,$00,$00,$00,$07,$FF,$C0,$04,$3E,$FF,$FF,$F0,$1F,$8F,$EE,$FF,$C2,$3E,$0D,$60,$00 ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FE,$20,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $40,$03,$FE,$00,$D7,$DF,$00,$00,$47,$E4,$03,$F8,$F0,$C1,$0B,$8F,$E3,$BF,$FF,$FF,$FC,$F8,$00,$00,$00,$78,$1F,$E0,$FF,$FF,$FF,$80 ;
 $4C60 DEFB $1F,$80,$00,$00,$BE,$00,$0F,$00,$00,$02,$00,$80,$08,$1F,$80,$93,$E3,$9E,$BF,$F3,$00,$00,$00,$E7,$3F,$C7,$A0,$00,$00,$70,$7F,$C0 ;
 $4C80 DEFB $05,$03,$C0,$00,$02,$00,$1C,$07,$FF,$7F,$FF,$FF,$E1,$1D,$F1,$04,$79,$CE,$3B,$96,$10,$03,$FF,$EC,$33,$48,$03,$3C,$BA,$E3,$80,$60 ;
 $4CA0 DEFB $9F,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$23,$4C,$44,$04,$3F,$38,$C6,$7B,$00,$01,$E7,$FA,$91,$CD,$40,$7F,$BC,$C0,$78 ;
 $4CC0 DEFB $FF,$9F,$C0,$7E,$7F,$7F,$BF,$FF,$F0,$3F,$FF,$FF,$FF,$FC,$00,$00,$00,$02,$0F,$DD,$FE,$3E,$60,$77,$F3,$FE,$E7,$42,$17,$FE,$50,$00 ;
 $4CE0 DEFB $18,$00,$00,$04,$00,$40,$00,$00,$00,$07,$40,$00,$00,$00,$00,$00,$FF,$F0,$02,$1E,$FF,$FF,$FC,$1D,$43,$DD,$FF,$C0,$FD,$3A,$A0,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$33,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$C0,$08,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $07,$E7,$FF,$F0,$FF,$BF,$C0,$7C,$05,$83,$C0,$3F,$C3,$F0,$05,$F3,$F9,$DF,$FF,$FF,$FF,$1E,$00,$00,$03,$9C,$FF,$F1,$A7,$7A,$FD,$C0 ;
 $4D60 DEFB $7F,$C1,$FC,$00,$2C,$00,$FF,$E0,$00,$38,$00,$00,$00,$00,$60,$53,$F0,$EF,$5F,$CC,$00,$00,$03,$C7,$CF,$E7,$FC,$03,$80,$3F,$FF,$F0 ;
 $4D80 DEFB $02,$04,$00,$00,$00,$00,$1C,$01,$FF,$FF,$FF,$FF,$C1,$1D,$08,$84,$3E,$E3,$8D,$DB,$10,$01,$FF,$EC,$F3,$10,$0F,$8B,$76,$D1,$C0,$30 ;
 $4DA0 DEFB $7F,$FF,$EF,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$21,$F4,$44,$02,$1F,$DC,$63,$BD,$C0,$00,$09,$FD,$23,$CD,$40,$03,$B8,$C0,$F0 ;
 $4DC0 DEFB $F3,$7F,$00,$3E,$3F,$9F,$FE,$FF,$FC,$7F,$FF,$FF,$FF,$F4,$00,$00,$00,$01,$07,$EE,$FF,$8F,$8F,$FB,$FF,$FF,$3C,$C2,$2F,$FC,$90,$00 ;
 $4DE0 DEFB $00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$3E,$01,$0E,$FF,$FF,$FE,$02,$BD,$BB,$FF,$01,$FA,$65,$40,$00 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$0E,$00,$7F,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$81,$FC,$04,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $1F,$FF,$FF,$FC,$F1,$DF,$F3,$FF,$80,$1F,$F8,$00,$0F,$FE,$05,$FC,$FC,$6F,$FF,$FF,$FF,$EC,$00,$00,$1C,$7E,$3F,$FF,$09,$38,$43,$E0 ;
 $4E60 DEFB $FF,$E7,$FF,$00,$00,$07,$FF,$FE,$01,$FF,$80,$00,$02,$40,$10,$25,$F0,$73,$8F,$30,$00,$00,$0F,$C7,$E1,$E7,$E4,$00,$C0,$0F,$E7,$FC ;
 $4E80 DEFB $80,$00,$00,$FF,$F0,$00,$18,$00,$3F,$FC,$7F,$FF,$81,$11,$04,$85,$1F,$79,$C6,$6D,$80,$00,$FF,$EC,$23,$2C,$3F,$87,$91,$DA,$40,$1F ;
 $4EA0 DEFB $FF,$FF,$DF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7F,$C0,$10,$F8,$48,$01,$07,$EF,$38,$CE,$70,$01,$49,$FE,$D3,$CE,$41,$EC,$39,$20,$C0 ;
 $4EC0 DEFB $E2,$FE,$00,$3E,$3F,$87,$FF,$1F,$FE,$FF,$FE,$FF,$DF,$E2,$00,$00,$00,$00,$83,$F6,$7F,$E7,$87,$FD,$FF,$FE,$DF,$42,$2F,$F9,$30,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$8E,$F8,$03,$FF,$B1,$FE,$BB,$FC,$C7,$E5,$EA,$80,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$1F,$C1,$FF,$50,$3F,$80,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FE,$00,$07,$C2,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $FF,$FF,$07,$FF,$FF,$FF,$FF,$FF,$FC,$7F,$FE,$7E,$3F,$00,$02,$FB,$3F,$37,$FF,$FF,$FF,$83,$FE,$00,$70,$7F,$0C,$0E,$0D,$0E,$02,$7F ;
 $4F60 DEFB $C0,$FF,$FF,$C0,$00,$FF,$FF,$FF,$C3,$FF,$F0,$00,$0E,$80,$08,$16,$F8,$1D,$E6,$FF,$C0,$00,$3F,$C9,$FE,$37,$84,$07,$0C,$01,$81,$FF ;
 $4F80 DEFB $F0,$00,$3F,$FF,$FF,$00,$38,$00,$1F,$E0,$0F,$FF,$00,$91,$04,$82,$8F,$9C,$F3,$B6,$C0,$00,$7F,$EB,$43,$30,$FE,$3B,$E5,$B7,$80,$07 ;
 $4FA0 DEFB $FF,$FF,$BF,$FF,$FF,$FF,$FF,$C0,$00,$00,$07,$FF,$FE,$08,$00,$90,$00,$83,$F3,$9C,$77,$9F,$3E,$1F,$FF,$2D,$CF,$43,$17,$B2,$20,$80 ;
 $4FC0 DEFB $81,$F8,$00,$3C,$1F,$80,$FF,$03,$FF,$3F,$FC,$3F,$83,$F8,$00,$00,$00,$00,$41,$F7,$7F,$F1,$87,$F8,$FF,$3D,$C4,$42,$27,$F2,$50,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4E,$E7,$30,$7F,$C1,$FE,$37,$FB,$EF,$DB,$34,$80,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$26,$CA,$43,$3F,$E0,$F0,$AF,$E7,$FF,$B6,$C9,$01,$C0 ;
 $5020 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$06,$00,$10,$20,$5F,$C1,$7F,$FD,$FC,$08,$00,$F0,$7C ;
 $5040 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C,$00,$10,$FE,$FC,$30,$30,$F2,$53,$F8,$00,$00,$00,$FC,$1F ;
 $5060 DEFB $38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C,$00,$08,$40,$53,$84,$31,$92,$C0,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$79,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C,$1E,$00,$81,$FE,$08,$72,$20,$00,$3E,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$0F,$F8,$00,$00,$FC,$0F,$E0,$FC,$3F,$8C,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$26,$94,$85,$8F,$E0,$CF,$07,$DF,$FF,$69,$12,$03,$E0 ;
 $5120 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$04,$00,$0D,$81,$8F,$E7,$7F,$F3,$F8,$70,$03,$E0,$F8 ;
 $5140 DEFB $38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$F0,$1F,$80,$1C,$00,$10,$FE,$84,$10,$C3,$C4,$D3,$F0,$00,$00,$00,$18,$3F ;
 $5160 DEFB $38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$62,$F0,$17,$80,$1C,$00,$08,$40,$E3,$84,$C7,$25,$40,$00,$00,$00,$00,$00,$00 ;
 $5180 DEFB $38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C,$21,$00,$40,$7C,$09,$8C,$40,$00,$7C,$0C,$00,$00,$00,$00 ;
 $51A0 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$03,$F8,$1F,$83,$F8,$7F,$1F,$80 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$17,$69,$1A,$07,$F0,$34,$F8,$BF,$FC,$E6,$64,$03,$C6 ;
 $5220 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$00,$08,$00,$03,$06,$03,$FF,$BF,$CF,$F5,$80,$07,$81,$F0 ;
 $5240 DEFB $38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C,$00,$10,$FE,$02,$1B,$07,$89,$B1,$C0,$00,$00,$00,$00,$7E ;
 $5260 DEFB $38,$BF,$FF,$2F,$FF,$2F,$01,$E9,$E8,$BC,$7E,$5E,$0F,$E2,$F0,$17,$FF,$1C,$00,$08,$21,$D7,$87,$1E,$5A,$80,$00,$00,$00,$00,$00,$00 ;
 $5280 DEFB $38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C,$4C,$80,$60,$00,$1E,$31,$80,$01,$F8,$1F,$00,$00,$00,$00 ;
 $52A0 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$00,$00,$00,$00,$00,$07,$F0,$3F,$07,$E0,$FE,$3F,$80 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$16,$52,$2C,$03,$FC,$F3,$FC,$7F,$FB,$D9,$D8,$07,$8F ;
 $5320 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$00,$08,$00,$01,$98,$30,$FF,$DF,$3F,$E8,$00,$0F,$03,$E1 ;
 $5340 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C,$00,$10,$F8,$02,$14,$1E,$33,$51,$80,$00,$00,$00,$00,$FC ;
 $5360 DEFB $38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C,$00,$04,$37,$8B,$84,$79,$A5,$00,$00,$00,$00,$00,$00,$00 ;
 $5380 DEFB $38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$50,$80,$30,$00,$10,$C2,$00,$03,$F0,$3F,$00,$00,$00,$00 ;
 $53A0 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$1F,$C0,$7E,$0F,$C1,$FC,$7F,$1C ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$16,$A4,$50,$19,$FE,$C7,$FB,$FF,$F7,$A2,$20,$0F,$0F ;
 $5420 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$00,$08,$1F,$81,$60,$40,$00,$20,$FF,$D0,$00,$3E,$07,$C1 ;
 $5440 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C,$00,$10,$E1,$03,$08,$7C,$6E,$B1,$00,$00,$00,$00,$00,$1C ;
 $5460 DEFB $38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$00,$04,$16,$1C,$87,$E6,$4A,$00,$00,$00,$00,$00,$00,$00 ;
 $5480 DEFB $38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$50,$80,$08,$00,$27,$0C,$00,$07,$E0,$7E,$0F,$00,$00,$00 ;
 $54A0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$7F,$81,$FC,$1F,$83,$F8,$FE,$3F ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$05,$49,$A0,$66,$FF,$03,$F3,$FF,$CF,$8C,$40,$1E,$1F ;
 $5520 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$00,$08,$3E,$C0,$81,$81,$0E,$5F,$FF,$80,$00,$7C,$0F,$83 ;
 $5540 DEFB $38,$A4,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C,$00,$10,$80,$05,$09,$F1,$99,$60,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$00,$02,$08,$7F,$87,$99,$B4,$00,$00,$00,$00,$00,$00,$00 ;
 $5580 DEFB $38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C,$4C,$80,$06,$00,$58,$30,$00,$0F,$C0,$FC,$1F,$80,$00,$00 ;
 $55A0 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$01,$FE,$03,$F0,$7F,$07,$F1,$FC,$7F ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$06,$BF,$51,$8C,$7F,$83,$CF,$FF,$BF,$31,$80,$3C,$3E ;
 $5620 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$00,$10,$7E,$E0,$46,$06,$1C,$8F,$FF,$00,$00,$F8,$1F,$07 ;
 $5640 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C,$00,$10,$80,$8D,$8F,$C2,$32,$A0,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$02,$04,$FF,$04,$66,$48,$00,$00,$00,$00,$00,$00,$00 ;
 $5680 DEFB $38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$EF,$3D,$FF,$1C,$21,$00,$01,$81,$E1,$C0,$00,$3F,$81,$F8,$3F,$0C,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$0F,$E0,$FC,$1F,$E3,$F8,$FE ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$01,$C0,$EE,$30,$3F,$82,$3F,$FE,$7E,$C6,$00,$78,$3C ;
 $5720 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$00,$10,$7E,$F0,$48,$08,$79,$37,$FE,$00,$00,$30,$7E,$0F ;
 $5740 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C,$00,$10,$40,$3B,$85,$0C,$ED,$60,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$01,$03,$FE,$07,$89,$90,$00,$1E,$00,$00,$00,$00,$00 ;
 $5780 DEFB $38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C,$1E,$00,$00,$7E,$0E,$00,$00,$7F,$03,$F0,$7E,$1F,$80,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$1F,$C3,$F8,$3F,$C7,$F1,$FE ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ; {Attributes
 $5820 DEFB $00,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $5840 DEFB $00,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $5860 DEFB $00,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$00 ;
 $5880 DEFB $00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00 ;
 $58A0 DEFB $00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00 ;
 $58C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$00 ;
 $58E0 DEFB $43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$00 ;
 $5900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$47,$47,$47,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5920 DEFB $00,$46,$46,$46,$46,$46,$46,$00,$00,$00,$00,$00,$00,$00,$47,$47,$47,$47,$47,$47,$47,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5940 DEFB $46,$46,$46,$46,$43,$43,$46,$46,$46,$46,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46 ;
 $5960 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46 ;
 $5980 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46 ;
 $59A0 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46 ;
 $59C0 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$47,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00 ;
 $59E0 DEFB $46,$46,$00,$46,$46,$46,$46,$00,$46,$46,$46,$46,$00,$46,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46 ;
 $5A20 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46 ;
 $5A40 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$00,$00,$00,$46,$46 ;
 $5A60 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$00,$47,$47,$47,$47,$47,$47,$47,$46,$00,$00,$00,$00,$00 ;
 $5A80 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$43,$43,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46,$00 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$00,$00,$47,$47,$46,$46,$46,$46,$46,$46,$46,$46,$46 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

i$5B00

; Game entry point
@label=GameEntry
c$5B80 DI            ; Disable interrupts.
 $5B81 LD HL,$5F01   ; {Moves #N$20FF bytes from #N$5F01 to #N$5F00.
 $5B84 LD DE,$5F00   ;
 $5B87 LD BC,$20FF   ;
 $5B8A LDIR          ; }
 $5B8C JP $5F00      ; Jump to #R$5F00.
; View the equivalent code in;
; #LIST
; { #COOKIE$5B80 }
; { #JETPAC$5B80 }
; { #PSSST$5B80 }
; LIST#
; .
; Later Ultimate games use more advanced decryption mechanisms;
; #LIST
; { #ATICATAC$5B80 }
; { #LUNARJETMAN$5B80 }
; LIST#

; Data block at 5B8F
b$5B8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C77 DEFB $00,$34,$58,$00,$00,$00,$00,$00
 $5C7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAF DEFB $00

; Routine at 5CB0
;
; Used by the routine at #R$5FEF.
c$5CB0 JP (HL)       ;

i$5CB1

; Best Time
@label=BestTime_1
g$5E00 DEFB $00
@label=BestTime_2
 $5E01 DEFB $06
@label=BestTime_3
 $5E02 DEFB $00

; Flag: Best Time
;
; When a value for "Best Time" exists this will be #N$01 else it'll be #N$00.
@label=Flag_BestTime
g$5E03 DEFB $00

; Game status buffer entry at 5E04
g$5E04 DEFB $2C

; Player Map Co-ordinates
@label=PlayerMapPosition
g$5E05 DEFB $30,$0E

; Game status buffer entry at 5E07
g$5E07 DEFB $00

; Game status buffer entry at 5E08
g$5E08 DEFB $00
 $5E09 DEFB $00

; Fuel
@label=Fuel_LSB
g$5E0A DEFB $00
@label=Fuel_MSB
 $5E0B DEFB $00

; Temperature
@label=Temperature
g$5E0C DEFB $3A

; Speed
@label=Speed
g$5E0D DEFB $EF

; Game status buffer entry at 5E0E
g$5E0E DEFB $22,$22

; Player Direction
@label=Player_Direction
g$5E10 DEFB $AF
 $5E11 DEFB $3A

; Game status buffer entry at 5E12
g$5E12 DEFB $F5

; Game status buffer entry at 5E13
g$5E13 DEFB $AC,$36,$0E,$00

; Player X
@label=Player_X
g$5E17 DEFB $00

; Player Y
@label=Player_Y
g$5E18 DEFB $06

; Current Object
;
; The currently processed #R$7811 entry.
@label=CurrentObject
g$5E19 DEFW $0000

; Game status buffer entry at 5E1B
g$5E1B DEFB $2C

; Game status buffer entry at 5E1C
g$5E1C DEFW $0E30

; Game status buffer entry at 5E1E
g$5E1E DEFB $00

; Game status buffer entry at 5E1F
g$5E1F DEFB $00

; Actor Buffer
@label=Actor_Position_X
g$5E20 DEFB $00      ; X Position.
@label=Actor_Position_Y
 $5E21 DEFB $00      ; Y Position.
 $5E22 DEFB $00      ; Movement direction.
@label=HeightPixels
 $5E23 DEFB $3A      ; Height (in pixels).
@label=WidthBytes
 $5E24 DEFB $EF      ; Width (in bytes).
@label=CurrentSpriteHeight
 $5E25 DEFB $22      ; Current Sprite Height
@label=HeightLines
 $5E26 DEFB $22      ; Height lines.

; Actor Screen Position
@label=ActorScreenPosition
g$5E27 DEFB $AF      ; X Position.
 $5E28 DEFB $3A      ; Y Position.

; Game Timer
;
; 16-bit counter starting at 0x0000 and counting +1 (each time a sprite is moved or redrawn), although sometimes
;       it will increment + #N$02. This continues until the whole game is over - for both 1 and 2 player games. Counter
;       loops around after reaching #N$FFFF.
@label=GameTimer
g$5E29 DEFW $ACF5

; Game status buffer entry at 5E2B
g$5E2B DEFB $36

; Width Counter
;
; Temporary counter used when drawing sprites.
@label=WidthCounter
g$5E2C DEFB $0E

; Miles
@label=Miles
g$5E2D DEFB $00,$00,$06

; Unknown
@label=Unknown
g$5E30 DEFB $00

; Time
@label=Time_1
g$5E31 DEFB $00
@label=Time_2
 $5E32 DEFB $2C
@label=Time_3
 $5E33 DEFB $30

; Player World Co-ordinates
@label=PlayerWorldPosition
g$5E34 DEFB $0E,$00  ; Player X/ Y position in relation to the whole "World".

; Game status buffer entry at 5E36
g$5E36 DEFB $00,$00

; Game status buffer entry at 5E38
g$5E38 DEFB $00

; Current Place
;
; This value will either be the current Place ID or #N$FF to indicate being open to entering a new place (to
;       avoid repetition).
@label=CurrentPlaceID
g$5E39 DEFB $00      ; Current Place ID or #N$FF.

; Game status buffer entry at 5E3A
g$5E3A DEFB $3A,$EF

; Cups Collected
@label=Cups_Collected
g$5E3C DEFB $22

; Player Lives
@label=Player_Lives
g$5E3D DEFB $22

; Game Options
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Binary | =h Option }
; { #N$00 | #EVAL($00, $02, $08) | Keyboard }
; { #N$02 | #EVAL($02, $02, $08) | Joystick }
; TABLE#
@label=GameOptions
g$5E3E DEFB $AF

; Current Menu Item Colour attribute
@label=Current_MenuAttr
g$5E3F DEFB $3A

; Game status buffer entry at 5E40
g$5E40 DEFB $F5

; Game status buffer entry at 5E41
g$5E41 DEFB $C0

; Game status buffer entry at 5E42
g$5E42 DEFB $32

; Flag: Day or Night
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Flag }
; { #N$00 | Day }
; { #N$01 | Night }
; TABLE#
@label=Flag_DayNight
g$5E43 DEFB $33

; Background Attribute
@label=Background_Attribute
g$5E44 DEFB $34

; Game status buffer entry at 5E45
g$5E45 DEFB $32

; Sound Counter
;
; Used as a counter for the cup collection and refuelling sounds.
@label=SoundCounter
g$5E46 DEFB $34

; Sound Store
@label=SoundStore
g$5E47 DEFB $0E

; Temporary Text Item X Position
;
; Used for the indent for;
; #LIST
; { #R$5F6C(Game Menu items) }
; { #R$607D(Congratulations Messaging) }
; LIST#
@label=Temp_Text_Pos_X
g$5E48 DEFB $00

; High Score
;
; 3-byte representation of the score.
@label=HighScore_1
g$5E49 DEFB $00      ; Byte #1.
@label=HighScore_2
 $5E4A DEFB $80      ; Byte #2.
@label=HighScore_3
 $5E4B DEFB $5B      ; Byte #3.
; View the equivalent code in;
; #LIST
; { #COOKIE$5F09 }
; { #JETPAC$5CF0 }
; { #LUNARJETMAN$5E06 }
; { #PSSST$5E00 }
; LIST#

; Score
;
; 3-byte representation of the score.
@label=Score_1
g$5E4C DEFB $00      ; Byte #1.
@label=Score_2
 $5E4D DEFB $0D      ; Byte #2.
@label=Score_3
 $5E4E DEFB $00      ; Byte #3.

; Game status buffer entry at 5E4F
g$5E4F DEFB $00

; Objects
;
; .
;
; .
;
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_1_State
g$5E50 DEFB $00      ; Sprite ID.
 $5E51 DEFB $00      ; X Position.
 $5E52 DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_2_State
 $5E53 DEFB $00      ; Sprite ID.
 $5E54 DEFB $00      ; X Position.
 $5E55 DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_3_State
 $5E56 DEFB $00      ; Sprite ID.
 $5E57 DEFB $00      ; X Position.
 $5E58 DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_4_State
 $5E59 DEFB $00      ; Sprite ID.
 $5E5A DEFB $00      ; X Position.
 $5E5B DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_5_State
 $5E5C DEFB $00      ; Sprite ID.
 $5E5D DEFB $00      ; X Position.
 $5E5E DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_6_State
 $5E5F DEFB $00      ; Sprite ID.
 $5E60 DEFB $00      ; X Position.
 $5E61 DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_7_State
 $5E62 DEFB $00      ; Sprite ID.
 $5E63 DEFB $00      ; X Position.
 $5E64 DEFB $00      ; Y Position.
; Object #N($01 + (#PC - $5E50) / $03).
@label=Object_8_State
 $5E65 DEFB $00      ; Sprite ID.
 $5E66 DEFB $00      ; X Position.
 $5E67 DEFB $00      ; Y Position.

; Game status buffer entry at 5E68
g$5E68 DEFB $00,$00,$00,$00
 $5E6C DEFB $00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00

; Game status buffer entry at 5E74
g$5E74 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E7C DEFB $00,$00,$00,$00

; Explosion Entity?
g$5E80 DEFB $00                             ; Frame ID.
 $5E81 DEFB $00                             ; X position.
 $5E82 DEFB $00                             ; Y position.
 $5E83 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E8B DEFB $00

; Game status buffer entry at 5E8C
g$5E8C DEFB $00,$00,$00,$00

; Game status buffer entry at 5E90
g$5E90 DEFW $0000

; Game status buffer entry at 5E92
g$5E92 DEFW $0000

; Game status buffer entry at 5E94
g$5E94 DEFB $00,$00,$00,$00

; Black Car?
g$5E98 DEFB $00      ; Sprite ID.
 $5E99 DEFB $00      ; X Position.
 $5E9A DEFB $00      ; Y Position.
 $5E9B DEFB $00

; Game status buffer entry at 5E9C
g$5E9C DEFB $00,$00

; Game status buffer entry at 5E9E
g$5E9E DEFB $00,$00,$00,$00,$00,$00

; Game status buffer entry at 5EA4
g$5EA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EAC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EBC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ECC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EDC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EEC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EFC DEFB $00,$00,$00,$00

; Security Check
;
; Used by the routine at #R$5B80.
@label=SecurityCheck
c$5F00 DI            ; Disable interrupts.
 $5F01 LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $5F04 CP $58        ; {Return if #REGa is not #N$58.
 $5F06 RET NZ        ; }
; Continue on to #R$5F07.
; .
; View the equivalent code in;
; #LIST
; { #ATICATAC$6000 }
; { #COOKIE$5F00 }
; { #LUNARJETMAN$8000 }
; { #PSSST$61C6 }
; LIST#

; Game Initialisation
;
; .
;
; .
;
; Blank the game configs.
@label=GameInitialisation
c$5F07 LD HL,$5E00   ; {Write #N$00 to #N$00A3 bytes starting from #N($5E00,
 $5F0A LD DE,$5E01   ; $04, $04).
 $5F0D LD BC,$00A3   ;
 $5F10 LD (HL),$00   ;
 $5F12 LDIR          ; }
 $5F14 LD HL,$FFFF   ; {Write #N$FFFF to #R$5E00(BestTime) - this isn't used
 $5F17 LD ($5E00),HL ; anywhere until #R$5E03 is set.}
; This entry point is used by the routine at #R$6353.
@label=Game_Restart
*$5F1A LD HL,$FFFF   ; {Write #N$FFFF to #R$5E34.
 $5F1D LD ($5E34),HL ; }
 $5F20 LD SP,$5E00   ; Set the stack pointer to #N($5E00, $04, $04).
 $5F23 CALL $6175    ; Call #R$6175.
 $5F26 CALL $68A0    ; Call #R$68A0.
@label=GameSelect_Loop
*$5F29 CALL $5F6C    ; Call #R$5F6C.
; The "Best Time Today" banner only shows when one is set. The flag at #R$5E03
; toggles it on/ off.
 $5F2C LD A,($5E03)  ; {If #R$5E03 is not zero, call #R$6483.
 $5F2F AND A         ;
 $5F30 CALL NZ,$6483 ; }
 $5F33 LD A,($5E3E)  ; {#REGd=#R$5E3E.
 $5F36 LD D,A        ; }
 $5F37 LD A,$F7      ; {Read from the keyboard;
 $5F39 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $5F3B IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $5F3D CPL           ; Flip the bits.
; Handle keyboard selection.
@label=GameSelect_CheckKeyboard
 $5F3E BIT 0,A       ; Has key "1" been pressed? ("1 KEYBOARD").
 $5F40 JR Z,$5F44    ; If not jump to #R$5F44.
 $5F42 RES 1,D       ; Set control method = keyboard.
; Handle joystick selection.
@label=GameSelect_CheckJoystick
*$5F44 BIT 1,A       ; Has key "2" been pressed? ("2 JOYSTICK").
 $5F46 JR Z,$5F4A    ; If not jump to #R$5F4A.
 $5F48 SET 1,D       ; Set control method = joystick.
; Handle starting a new game.
@label=GameSelect_CheckStart
*$5F4A BIT 2,A       ; Has key "3" been pressed? ("3 START GAME").
 $5F4C JP NZ,$5FEF   ; If it has then jump to #R$5FEF.
; Handle flashing each selection.
 $5F4F LD A,D        ; {Write #REGd to #R$5E3E.
 $5F50 LD ($5E3E),A  ; }
 $5F53 LD HL,$5FA8   ; #REGhl=#R$5FA8(GameSelection_Attributes) + #N$01 (i.e.
                     ; ignoring "Game Selection" as it doesn't flash).
 $5F56 LD A,($5E3E)  ; {#REGc=#R$5E3E.
 $5F59 LD C,A        ; }
 $5F5A BIT 1,C       ; {If the joystick option is selected, jump to #R$5F65.
 $5F5C JR NZ,$5F65   ; }
; Set the first menu item, unset the second.
@label=MenuAttributeSetFirst
 $5F5E SET 7,(HL)    ; Set the FLASH attribute for the first selection.
 $5F60 INC HL        ; Move onto the next menu attribute.
 $5F61 RES 7,(HL)    ; Unset the FLASH attribute for the second selection.
 $5F63 JR $5F29      ; Jump to #R$5F29.
; Unset the first menu item, set the second.
@label=MenuAttributeSetSecond
*$5F65 RES 7,(HL)    ; Unset the FLASH attribute for the first selection.
 $5F67 INC HL        ; Move onto the next menu attribute.
 $5F68 SET 7,(HL)    ; Set the FLASH attribute for the second selection.
 $5F6A JR $5F29      ; Jump to #R$5F29.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #COOKIE$6298 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$800A }
; { #PSSST$61CD }
; LIST#

; Game Selection Menu
;
; Used by the routine at #R$5F07.
@label=GameMenu
c$5F6C LD A,$68      ; {Write #N$68 to #R$5E48.
 $5F6E LD ($5E48),A  ; }
 $5F71 LD DE,$5FA7   ; #REGde=#R$5FA7.
 $5F74 EXX           ; Switch to the shadow registers.
 $5F75 LD HL,$5FAC   ; #REGhl'=#R$5FAC.
 $5F78 LD DE,$5FB1   ; #REGde'=#R$5FB1.
; There are five lines of text.
 $5F7B LD B,$05      ; #REGb'=#N$05 (counter).
; This entry point is used by the routine at #R$607D.
@label=GameMenu_Loop
*$5F7D EXX           ; Switch back to the normal registers.
 $5F7E LD A,(DE)     ; {Copy a byte from #REGde to #R$5E3F.
 $5F7F LD ($5E3F),A  ; }
 $5F82 INC DE        ; Increment #REGde by one.
 $5F83 EXX           ; Switch to the shadow registers.
 $5F84 PUSH BC       ; Stash #REGbc' on the stack.
 $5F85 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $5F86 INC HL        ; Increment #REGhl' (position data pointer) by one.
 $5F87 PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $5F88 LD H,A        ; #REGh'=#REGa.
 $5F89 LD A,($5E48)  ; {#REGl'=#R$5E48.
 $5F8C LD L,A        ; }
 $5F8D CALL $5F97    ; Call #R$5F97.
 $5F90 EXX           ; Switch back to the normal registers.
 $5F91 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $5F92 POP BC        ; }
 $5F93 INC DE        ; Increase #REGde by one.
 $5F94 DJNZ $5F7D    ; Decrease counter by one and loop back to #R$5F7D until
                     ; counter is zero.
 $5F96 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #COOKIE$6332 }
; { #JETPAC$6260 }
; { #LUNARJETMAN$80D1 }
; { #PSSST$6250 }
; LIST#

; Write Menu Line
;
; Used by the routines at #R$5F6C, #R$6353, #R$63FF and #R$6483.
@label=MenuWriteText
c$5F97 PUSH HL       ; Stash #REGhl containing the co-ordinate on the stack.
 $5F98 CALL $6F10    ; Call #R$6F10.
 $5F9B LD A,($5E3F)  ; #REGa=the menu attribute byte from #R$5E3F.
 $5F9E EX AF,AF'     ; Switch to the shadow #REGaf register.
 $5F9F EXX           ; Switch to the shadow registers.
 $5FA0 POP HL        ; Restore #REGhl from the stack.
 $5FA1 CALL $7097    ; Call #R$7097.
 $5FA4 JP $6524      ; Jump to #R$6524.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D8A }
; { #COOKIE$63E0 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$62E7 }
; LIST#

; Game Select Attribute Table
@label=GameSelection_Attributes
b$5FA7 DEFB $60      ; {#TABLE(default,centre)
 $5FA8 DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $5FA9 DEFB $47      ; { #N$01 | Game Selection }
 $5FAA DEFB $60      ; { #N$02 | 1 Keyboard }
 $5FAB DEFB $70      ; { #N$03 | 2 Joystick }
                     ; { #N$04 | 3 Start Game }
                     ; { #N$05 | © 1983 A.C.G. }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #COOKIE$635E }
; { #JETPAC$628D }
; { #LUNARJETMAN$810E }
; { #PSSST$627C }
; LIST#

; Game Select Y Position Table
@label=GameSelection_Position
b$5FAC DEFB $20      ; {#TABLE(default,centre,centre)
 $5FAD DEFB $48      ; { =h Byte(n) | =h Position | =h Menu Item }
 $5FAE DEFB $58      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | Game Selection }
 $5FAF DEFB $78      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 1 Keyboard }
 $5FB0 DEFB $B8      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 2 Joystick }
                     ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | 3 Start Game }
                     ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | © 1983 A.C.G. }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #COOKIE$6365 }
; { #JETPAC$6293 }
; { #LUNARJETMAN$8115 }
; { #PSSST$6282 }
; LIST#

; Game Selection Screen Text
@label=GameSelection_Text
t$5FB1 DEFM "GAME SELECTIO","N"+$80 ; "GAME SELECTION".
 $5FBF DEFM "1  KEYBOAR","D"+$80    ; "1  KEYBOARD".
 $5FCA DEFM "2  JOYSTIC","K"+$80    ; "2  JOYSTICK".
 $5FD5 DEFM "3  START GAM","E"+$80  ; "3  START GAME".
 $5FE2 DEFM $7F                     ; {"© 1983 A.C.G.".
 $5FE3 DEFM " 1983 A.C.G","."+$80   ; }
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #COOKIE$636C }
; { #JETPAC$6299 }
; { #LUNARJETMAN$811C }
; { #PSSST$6288 }
; LIST#

; Start Game
;
; Used by the routine at #R$5F07.
@label=StartGame
c$5FEF XOR A         ; {#HTML(Write #N$00 to #LIST { <a
 $5FF0 LD ($5C78),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
 $5FF3 LD ($5E74),A  ; } { #R$5E74 } LIST#)}
; Reset the players life count.
 $5FF6 LD A,$03      ; {Write starting lives to #R$5E3D.
 $5FF8 LD ($5E3D),A  ; }
; Reset the players score (#N$03 digits).
 $5FFB LD HL,$5E4C   ; #REGhl=#R$5E4C.
 $5FFE LD B,$03      ; #REGb=#N$03.
@label=ResetScore_Loop
*$6000 LD (HL),$00   ; Write #N$00 to #REGhl.
 $6002 INC HL        ; Increment #REGhl by one.
 $6003 DJNZ $6000    ; Decrease counter by one and loop back to #R$6000 until
                     ; counter is zero.
 $6005 EI            ; Enable interrupts.
 $6006 CALL $6391    ; Call #R$6391.
; This entry point is used by the routines at #R$63FF and #R$6A73.
*$6009 LD IX,$5E80   ; #REGix=#R$5E80.
 $600D LD SP,$5E00   ; Set the stack pointer to #N($5E00, $04, $04).
; This entry point is used by the routine at #R$6A73.
@label=MainLoop
*$6010 LD HL,$6A73   ; #REGhl=#R$6A73.
 $6013 PUSH HL       ; Stash #REGhl on the stack.
 $6014 LD HL,$6028   ; #REGhl=#R$6028.
 $6017 LD A,(IX+$00) ;
 $601A RLCA          ;
 $601B AND %01111110 ; Keep only bits 1-6.
 $601D LD C,A        ; {Create an offset in #REGbc.
 $601E LD B,$00      ; }
 $6020 ADD HL,BC     ; #REGhl=#REGhl + offset.
 $6021 LD A,(HL)     ; {#REGhl=address from #R$6028 + offset.
 $6022 INC HL        ;
 $6023 LD H,(HL)     ;
 $6024 LD L,A        ; }
 $6025 JP $5CB0      ; Jump to #R$5CB0.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D9A }
; { #COOKIE$6428 }
; { #JETPAC$6333 }
; { #LUNARJETMAN$81BB }
; { #PSSST$631E }
; LIST#

; Main Jump Table
@label=JumpTable_Main
w$6028 DEFW $6030
 $602A DEFW $6A9B
 $602C DEFW $6633
 $602E DEFW $6318

; Instant Return
@label=Return
c$6030 RET           ; Return.

; Score/ Hi-Score Text
@label=Text_ScoreHi
t$6031 DEFM $70
 $6032 DEFM "SC         HI      "," "+$80

; Add Points To Score
;
; Used by the routines at #R$63FF, #R$6D12 and #R$6FAC.
;
; BC Points to add to score
@label=AddPointsToScore
c$6046 LD HL,$5E4E   ; #REGhl=#R$5E4E.
 $6049 LD A,(HL)     ; #REGa=score byte #3.
 $604A ADD A,C       ; {Add #REGc to score byte #3 with BCD conversion.
 $604B DAA           ; }
 $604C LD (HL),A     ; Update score byte #3.
 $604D DEC HL        ; Move onto the next score byte.
 $604E LD A,(HL)     ; #REGa=score byte #2.
 $604F ADC A,B       ; {Add (with carry) #REGb to score byte #2 with BCD
 $6050 DAA           ; conversion.}
 $6051 LD (HL),A     ; Update score byte #2.
 $6052 DEC HL        ; Move onto the next score byte.
 $6053 LD A,(HL)     ; #REGa=score byte #1.
 $6054 ADC A,$00     ; Add #N$00 (i.e. just the carry flag) to score byte #1
                     ; with BCD conversion.
 $6056 DAA           ;
 $6057 LD (HL),A     ; Update score byte #1.
 $6058 JP $6CB6      ; Jump to #R$6CB6.
; View the equivalent code in;
; #LIST
; { #JETPAC$70F9 }
; LIST#

; Check High Score
;
; Used by the routine at #R$6353.
@label=CheckHighScore
c$605B LD DE,$5E48   ; #REGde=#R$5E49(#N$5E48) noting due to the INC below this
                     ; is #R$5E49 - #N$01.
 $605E LD HL,$5E4B   ; #REGhl=#R$5E4C(#N$5E4B) noting due to the INC below this
                     ; is #R$5E4C - #N$01.
 $6061 LD B,$03      ; #REGb=#N$03 (scores are held in three digits).
@label=CheckHighScore_Loop
*$6063 INC HL        ; Increment #REGhl by one.
 $6064 INC DE        ; Increment #REGde by one.
 $6065 LD A,(DE)     ; {Check #REGde against #REGhl.
 $6066 CP (HL)       ; }
 $6067 JR C,$606E    ; If the current score digit is higher than the same digit
                     ; of the high score then jump to #R$606E.
 $6069 JR Z,$606C    ; If both the same digits of the current score and high
                     ; score are the same number jump straight onto #R$606C.
 $606B RET NC        ; Return if the current score digit is less than the same
                     ; high score digit.
@label=CheckHighScore_Skip
*$606C DJNZ $6063    ; Decrease counter by one and loop back to #R$6063 until
                     ; counter is zero.
; A new High Score has been made, so update #R$5E49(HighScore).
@label=NewHighScore
*$606E LD B,$03      ; #REGb=#N$03 (scores are held in three digits).
 $6070 LD HL,$5E4C   ; #REGhl=#R$5E4C.
 $6073 LD DE,$5E49   ; #REGde=#R$5E49.
@label=NewHighScore_CopyLoop
*$6076 LD A,(HL)     ; {Copy the byte from #REGhl to #REGde.
 $6077 LD (DE),A     ; }
 $6078 INC HL        ; Increment #REGhl by one.
 $6079 INC DE        ; Increment #REGde by one.
 $607A DJNZ $6076    ; Decrease counter by one and loop back to #R$6076 until
                     ; counter is zero.
 $607C RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$73D3 }
; { #JETPAC$6398 }
; LIST#

; Display Congratulations Messaging
;
; Used by the routine at #R$63FF.
@label=DisplayCongratsMessaging
c$607D LD A,$50             ; {Write #N$50 to #R$5E48.
 $607F LD ($5E48),A         ; }
 $6082 LD DE,$6091          ; #REGde=#R$6091.
 $6085 EXX                  ; Switch to the shadow registers.
 $6086 LD HL,$6095          ; #REGhl'=#R$6095.
 $6089 LD DE,$6099          ; #REGde'=#R$6099.
 $608C LD B,$04             ; #REGb'=#N$04.
 $608E JP $5F7D             ; Jump to #R$5F7D.
@label=CongratsMessaging_Attributes
 $6091 DEFB $70,$70,$70,$70 ;
@label=CongratsMessaging_Position
 $6095 DEFB $10             ; {#TABLE(default,centre,centre)
 $6096 DEFB $20             ; { =h Byte(n) | =h Position | =h Menu Item }
 $6097 DEFB $30             ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | "CONGRATULATIONS YOU" }
 $6098 DEFB $40             ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | " HAVE SUCCESSFULLY" }
                            ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | "COLLECTED THE EIGHT" }
                            ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | " CUPS OF ULTIMATE" }
                            ; TABLE#}

; Text: Congratulations
@label=Message_Congrats
t$6099 DEFM "CONGRATULATIONS YO","U"+$80 ; "CONGRATULATIONS YOU".
 $60AC DEFM " HAVE SUCCESSFULL","Y"+$80  ; " HAVE SUCCESSFULLY".
 $60BE DEFM "COLLECTED THE EIGH","T"+$80 ; "COLLECTED THE EIGHT".
 $60D1 DEFM " CUPS OF ULTIMATE","."+$80  ; " CUPS OF ULTIMATE".

; Sounds: Bounce
;
; Used by the routine at #R$6D12.
@label=SoundsBounce
c$60E3 LD HL,$0000   ; #REGhl=#N($0000, $04, $04).
 $60E6 LD C,$08      ; #REGc=#N$08.
@label=SoundsBounce_Loop
*$60E8 LD E,$04      ; #REGe=#N$04.
 $60EA LD A,(HL)     ; #REGa=the byte pointed to by #REGhl.
 $60EB INC HL        ; Increment #REGhl by one.
 $60EC AND %01111111 ; Keep only bits 0-6.
 $60EE OR %10000000  ; Set bit 7.
 $60F0 LD D,A        ; Store the result in #REGd.
@label=SoundsBounce_Play
*$60F1 CALL $614B    ; Call #R$614B.
 $60F4 DEC E         ; Decrease #REGe by one.
 $60F5 JR NZ,$60F1   ; If #REGe is not zero, jump to #R$60F1.
 $60F7 DEC C         ; Decrease #REGc by one.
 $60F8 JR NZ,$60E8   ; If #REGc is not zero, jump to #R$60E8.
 $60FA RET           ; Return.

; Play Sound
;
; Used by the routines at #R$6106 and #R$614B.
@label=PlaySound
c$60FB LD A,($5E47)  ; #REGa=#R$5E47.
 $60FE XOR $10       ; Flip speaker on/ off (flip bit 4).
 $6100 LD ($5E47),A  ; Write #REGa back to #R$5E47.
 $6103 OUT ($FE),A   ; Play sound.
 $6105 RET           ; Return.

; Routine at 6106
;
; Used by the routine at #R$6633.
c$6106 LD HL,$0000   ;
 $6109 LD BC,$0400   ;
*$610C LD A,(HL)     ;
 $610D INC HL        ;
 $610E AND $10       ;
 $6110 JR Z,$6115    ;
 $6112 CALL $60FB    ;
*$6115 DEC BC        ;
 $6116 LD A,B        ;
 $6117 OR C          ;
 $6118 JR NZ,$610C   ;
 $611A RET           ; Return.

; Sounds: Cup/ Refuel
;
; Used by the routine at #R$6A9B.
@label=SoundsCupRefuel
c$611B LD A,($5E29)  ; #REGa=#R$5E29.
 $611E AND %00000001 ; Keep only bit 0.
 $6120 RET NZ        ; Return every other frame.
 $6121 LD HL,$5E46   ; #REGhl=#R$5E46.
 $6124 LD A,(HL)     ; #REGa=item ID.
 $6125 BIT 7,A       ; {Jump to #R$613E if bit 7 is not set.
 $6127 JR NZ,$613E   ; }
 $6129 AND A         ; {Return if item ID is zero.
 $612A RET Z         ; }
 $612B DEC A         ; Decrease #REGa/ item ID by one.
 $612C LD (HL),A     ; Store #REGa at #R$5E46.
 $612D RET Z         ; Return if the new item ID is zero.
@label=SoundsRefuel
*$612E RLCA          ; {#REGa=#REGa * #N$04.
 $612F RLCA          ; }
 $6130 AND %00011100 ; Keep only bits 2-4.
 $6132 OR %00100000  ; Set bit 5.
 $6134 LD D,A        ; Store the result in #REGd.
 $6135 LD C,$20      ; #REGc=#N$20.
@label=SoundsCupRefuel_Loop
*$6137 CALL $614B    ; Call #R$614B.
 $613A DEC C         ; Decrease #REGc by one.
 $613B JR NZ,$6137   ; Jump back to #R$6137 until #REGc is zero.
 $613D RET           ; Return.
@label=SoundsCup
*$613E AND %01111111 ; Keep only bits 0-6.
 $6140 RET Z         ; Return if #REGa is now zero.
 $6141 DEC A         ; Decrease #REGa by one.
 $6142 OR %10000000  ; Set bit 7.
 $6144 LD (HL),A     ; Store #REGa at #R$5E46.
 $6145 AND %01111111 ; Keep only bits 0-6.
 $6147 RET Z         ; Return if #REGa is now zero.
 $6148 CPL           ; Flip the bits.
 $6149 JR $612E      ; Jump to #R$612E.

; Play square wave sound
;
; Used by the routines at #R$60E3, #R$611B and #R$6158.
;
; D Duration of wave
@label=PlaySquareWave
c$614B CALL $60FB    ; Call #R$60FB.
 $614E LD B,D        ; #REGb=#REGd.
@label=PlaySquareWave_Loop_1
*$614F DJNZ $614F    ; Decrease counter by one and loop back to #R$614F until
                     ; counter is zero.
 $6151 CALL $60FB    ; Call #R$60FB.
 $6154 LD B,D        ; #REGb=#REGd.
@label=PlaySquareWave_Loop_2
*$6155 DJNZ $6155    ; Decrease counter by one and loop back to #R$6155 until
                     ; counter is zero.
 $6157 RET           ; Return.

; Sounds: Engine
;
; Used by the routine at #R$6A73.
@label=SoundsEngine
c$6158 LD A,($5E0D)  ; #REGa=#R$5E0D.
 $615B AND A         ; {Return if #R$5E0D is zero.
 $615C RET Z         ; }
 $615D RRCA          ; {#REGa=#R$5E0D / #N$04.
 $615E RRCA          ; }
 $615F CPL           ; Flip the bits.
 $6160 AND %00111111 ; Keep only bits 0-5.
 $6162 LD D,A        ; Store the result in #REGd.
 $6163 LD C,$04      ; #REGc=#N$04.
 $6165 LD A,($5E80)  ; {If #R$5E80 is #N$03 then jump to #R$616E.
 $6168 CP $03        ;
 $616A JR Z,$616E    ; }
 $616C LD B,$0C      ; #REGb=#N$0C.
@label=SoundsEngine_Loop
*$616E CALL $614B    ; Call #R$614B.
 $6171 DEC C         ; Decrease #REGc by one.
 $6172 JR NZ,$616E   ; If #REGc is not zero, jump to #R$616E.
 $6174 RET           ; Return.

; Set Day Playarea Attributes
;
; Used by the routines at #R$5F07, #R$6353 and #R$63FF.
@label=SetDayAttributes
c$6175 XOR A         ; {Write #N$00 (day) to #R$5E43.
 $6176 LD ($5E43),A  ; }
 $6179 LD A,$70      ; #REGa=#N$70.
; Continue on to #R$617B.

; Set Background Attribute
;
; Used by the routine at #R$617F.
;
; A Background attribute
@label=SetBackgroundAttr
c$617B LD ($5E44),A  ; Write #REGa to #R$5E44.
 $617E RET           ; Return.

; Set Night Playarea Attributes
;
; Used by the routine at #R$6353.
@label=SetNightAttributes
c$617F LD A,$01      ; {Write #N$01 (night) to #R$5E43.
 $6181 LD ($5E43),A  ; }
 $6184 LD A,$40      ; #REGa=#N$40.
 $6186 JR $617B      ; Jump to #R$617B.

; Controls: Kempston Joystick
;
; Used by the routines at #R$618C, #R$61C2 and #R$61E0.
;
; A Joystick controls
@label=ReadKempstonJoystick
c$6188 IN A,($1F)    ; #REGa=controls.
 $618A CPL           ; Flip the bits.
 $618B RET           ; Return.

; Input: Left/ Right
;
; Used by the routine at #R$6D12.
;
; .
;
; Check if this should be read from the Kempston joystick instead?
@label=ReadInputLR
c$618C LD A,($5E3E)  ; {If #R$5E3E indicates the control method is via the
 $618F BIT 1,A       ; Kempston joystick then jump to #R$6188.
 $6191 JR NZ,$6188   ; }
; Check for "Left" and "Right" button inputs for port #N$FE.
 $6193 LD A,$FE      ; {Read from the keyboard;
 $6195 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $6197 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { $FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $6199 AND %00011110 ; Strip out the SHIFT key.
 $619B CP $1E        ; {If none of these keys have been pressed, jump to
 $619D JR Z,$61A7    ; #R$61A7.}
 $619F AND %00010100 ; Keep only bits 2 ("X") and 4 ("V").
 $61A1 CP $14        ; {If neither key is pressed jump to #R$61B9.
 $61A3 JR Z,$61B9    ; }
 $61A5 JR $61BC      ; Jump to #R$61BC.
; Check for "Left" and "Right" button input for port #N$7F.
@label=ReadInputLR_7F
*$61A7 LD A,$7F      ; {Read from the keyboard;
 $61A9 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $61AB IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { $7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#}
 $61AD AND %00011110 ; Strip out the SPACE key.
 $61AF CP $1E        ; {If none of these keys have been pressed, jump to
 $61B1 JR Z,$61BF    ; #R$61BF.}
 $61B3 AND %00010100 ; Keep only bits 2 ("M") and 4 ("B").
 $61B5 CP $14        ; {If neither key is pressed jump to #R$61BC.
 $61B7 JR Z,$61BC    ; }
; Return "Left" button pressed.
@label=Input_Left
*$61B9 LD A,$FD      ; #REGa=#EVAL($FD, $02, $08).
 $61BB RET           ; Return.
; Return "Right" button pressed.
@label=Input_Right
*$61BC LD A,$FE      ; #REGa=#EVAL($FE, $02, $08).
 $61BE RET           ; Return.
; Return "no input".
@label=Input_None
*$61BF LD A,$FF      ; #REGa=#EVAL($FF, $02, $08).
 $61C1 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$733E }
; LIST#

; Input: Brake
;
; Used by the routine at #R$6D12.
;
; .
;
; Check if this should be read from the Kempston joystick instead?
@label=ReadInputBrake
c$61C2 LD A,($5E3E)  ; {If #R$5E3E indicates the control method is via the
 $61C5 BIT 1,A       ; Kempston joystick then jump to #R$6188.
 $61C7 JR NZ,$6188   ; }
; Check for "Brake" button input.
 $61C9 LD B,$02      ; #REGb=#N$02 (counter for checking two ports).
 $61CB LD A,$FD      ; {Read from the keyboard;
@label=ReadInputBrake_Loop
*$61CD OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $61CF IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { $FD | A | S | D | F | G }
                     ; { $BF | ENTER | L | K | J | H }
                     ; TABLE#}
 $61D1 AND %00011111 ; Keep only bits 0-4.
 $61D3 CP $1F        ; {If any buttons were pressed jump to #R$61DD.
 $61D5 JR NZ,$61DD   ; }
 $61D7 LD A,$BF      ; #REGa=switch to port #N$BF.
 $61D9 DJNZ $61CD    ; Decrease counter by one and loop back to #R$61CD until
                     ; counter is zero.
 $61DB JR $61BF      ; Jump to #R$61BF.
; Return "Brake" button pressed.
@label=Input_Brake
*$61DD LD A,$FB      ; #REGa=#EVAL($FB, $02, $08).
 $61DF RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$7374 }
; LIST#

; Input: Accelerate
;
; Used by the routine at #R$6D12.
;
; .
;
; Check if this should be read from the Kempston joystick instead?
@label=ReadInputAccelerate
c$61E0 LD A,($5E3E)  ; {If #R$5E3E indicates the control method is via the
 $61E3 BIT 1,A       ; Kempston joystick then jump to #R$6188.
 $61E5 JR NZ,$6188   ; }
; Check for "Accelerator" button input.
 $61E7 LD B,$02      ; #REGb=#N$02 (counter for checking two ports).
 $61E9 LD A,$FB      ; {Read from the keyboard;
@label=ReadInputAccelerate_Loop
*$61EB OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $61ED IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { $FB | Q | W | E | R | T }
                     ; { $DF | P | O | I | U | Y }
                     ; TABLE#}
 $61EF AND %00011111 ; Keep only bits 0-4.
 $61F1 CP $1F        ; {If any buttons were pressed jump to #R$61FB.
 $61F3 JR NZ,$61FB   ; }
 $61F5 LD A,$DF      ; #REGa=switch to port #N$DF.
 $61F7 DJNZ $61EB    ; Decrease counter by one and loop back to #R$61EB until
                     ; counter is zero.
 $61F9 JR $61BF      ; Jump to #R$61BF.
; Return "Accelerator" button pressed.
@label=Input_Accelerate
*$61FB LD A,$F7      ; #REGa=#EVAL($F7, $02, $08).
 $61FD RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$7393 }
; LIST#

; Routine at 61FE
;
; Used by the routine at #R$6212.
c$61FE CALL $6253    ; Call #R$6253.
 $6201 LD A,$0C      ; #REGa=#N$0C.
 $6203 SUB H         ;
 $6204 JR C,$624D    ;
 $6206 JR $622A      ; Jump to #R$622A.
; This entry point is used by the routine at #R$6212.
*$6208 CALL $6253    ; Call #R$6253.
 $620B LD A,$0E      ; #REGa=#N$0E.
 $620D SUB H         ;
 $620E JR C,$624D    ;
 $6210 JR $6245      ; Jump to #R$6245.

; Routine at 6212
;
; Used by the routines at #R$625C and #R$62DA.
c$6212 LD HL,($5E05) ; #REGhl=#R$5E05.
 $6215 SLA L         ;
 $6217 RL H          ;
 $6219 AND A         ;
 $621A SBC HL,BC     ;
 $621C JR NC,$61FE   ;
 $621E CALL $6BF6    ; Call #R$6BF6.
 $6221 CALL $6253    ; Call #R$6253.
 $6224 LD A,$0C      ; #REGa=#N$0C.
 $6226 CP H          ;
 $6227 JR C,$624D    ;
 $6229 ADD A,H       ;
; This entry point is used by the routine at #R$61FE.
*$622A LD (IX+$02),A ;
 $622D LD HL,($5E08) ; #REGhl=#R$5E08.
 $6230 SLA L         ;
 $6232 RL H          ;
 $6234 AND A         ;
 $6235 SBC HL,DE     ;
 $6237 JR NC,$6208   ;
 $6239 CALL $6BF6    ; Call #R$6BF6.
 $623C CALL $6253    ; Call #R$6253.
 $623F LD A,$0E      ; #REGa=#N$0E.
 $6241 CP H          ;
 $6242 JR C,$624D    ;
 $6244 ADD A,H       ;
; This entry point is used by the routine at #R$61FE.
*$6245 NEG           ;
 $6247 ADD A,$1C     ;
*$6249 LD (IX+$03),A ;
 $624C RET           ; Return.
; This entry point is used by the routines at #R$61FE and #R$62DA.
*$624D XOR A         ;
 $624E LD (IX+$02),A ;
 $6251 JR $6249      ; Jump to #R$6249.
; This entry point is used by the routines at #R$61FE and #R$62DA.
*$6253 LD B,$02      ; #REGb=#N$02.
*$6255 RL L          ;
 $6257 RL H          ;
 $6259 DJNZ $6255    ;
 $625B RET           ; Return.

; Routine at 625C
;
; Used by the routine at #R$6A9B.
c$625C LD HL,$6513   ; #REGhl=#R$6513.
 $625F LD BC,$0202   ; #REGbc=#N($0202, $04, $04).
 $6262 CALL $6991    ; Call #R$6991.
 $6265 LD IX,$5E68   ; #REGix=#R$5E68.
 $6269 LD BC,($5E90) ; #REGbc=#R$5E90.
 $626D LD DE,($5E92) ; #REGde=#R$5E92.
 $6271 CALL $6212    ; Call #R$6212.
 $6274 LD BC,$0004   ; #REGbc=#N($0004, $04, $04).
 $6277 ADD IX,BC     ;
 $6279 LD BC,($5E9C) ; #REGbc=#R$5E9C.
 $627D LD DE,($5E9E) ; #REGde=#R$5E9E.
 $6281 CALL $6212    ; Call #R$6212.
 $6284 LD BC,$0004   ; #REGbc=#N($0004, $04, $04).
 $6287 ADD IX,BC     ;
 $6289 CALL $62DA    ; Call #R$62DA.
 $628C LD IX,$5E68   ; #REGix=#R$5E68.
 $6290 LD C,$03      ; #REGc=#N$03.
*$6292 LD B,$02      ; #REGb=#N$02.
 $6294 LD L,(IX+$00) ;
 $6297 LD H,(IX+$01) ;
*$629A LD A,L        ;
 $629B OR H          ;
 $629C JR Z,$62D5    ;
 $629E LD A,L        ;
 $629F ADD A,$07     ;
 $62A1 LD L,A        ;
 $62A2 LD A,H        ;
 $62A3 ADD A,$57     ;
 $62A5 LD H,A        ;
 $62A6 DEC B         ;
 $62A7 PUSH BC       ; Stash #REGbc on the stack.
 $62A8 JR NZ,$62C6   ;
 $62AA LD BC,$0202   ; #REGbc=#N($0202, $04, $04).
 $62AD CALL $6991    ; Call #R$6991.
 $62B0 POP BC        ; Restore #REGbc from the stack.
*$62B1 LD A,(IX+$02) ;
 $62B4 LD (IX+$00),A ;
 $62B7 LD A,(IX+$03) ;
 $62BA LD (IX+$01),A ;
 $62BD LD DE,$0004   ; #REGde=#N($0004, $04, $04).
 $62C0 ADD IX,DE     ;
 $62C2 DEC C         ;
 $62C3 JR NZ,$6292   ;
 $62C5 RET           ; Return.
*$62C6 LD BC,$0202   ; #REGbc=#N($0202, $04, $04).
 $62C9 CALL $6998    ; Call #R$6998.
 $62CC POP BC        ; Stash #REGbc on the stack.
*$62CD LD L,(IX+$02) ;
 $62D0 LD H,(IX+$03) ;
 $62D3 JR $629A      ;
*$62D5 DEC B         ;
 $62D6 JR Z,$62B1    ;
 $62D8 JR $62CD      ; Jump to #R$62CD.

; Collision: Cups
;
; Used by the routine at #R$625C.
@label=CollisionCup
c$62DA LD HL,($5E05) ; #REGhl=#R$5E05.
 $62DD SLA L         ;
 $62DF RL H          ;
 $62E1 CALL $6253    ; Call #R$6253.
 $62E4 LD C,H        ;
 $62E5 LD HL,$721F   ; #REGhl=pointer to #R$721F.
 $62E8 LD B,$08      ; #REGb=#N$08 (set a counter for the #N$08 cups).
; Fetch the address of the cup from #R$721F.
@label=CollisionCup_Loop
*$62EA LD E,(HL)     ; #REGe=LSB of the cup map address.
 $62EB INC HL        ; Increment #REGhl by one.
 $62EC LD D,(HL)     ; #REGd=MSB of the cup map address.
 $62ED INC HL        ; Increment #REGhl by one, ready to process the next cup.
; Check this is still a valid cup (that it hasn't been collected already).
 $62EE INC DE        ; {Increment #REGde by two (point to the sprite ID).
 $62EF INC DE        ; }
 $62F0 LD A,(DE)     ; {If this is not a cup (the sprite ID is not #N$20), then
 $62F1 CP $20        ; jump to #R$6301.
 $62F3 JR NZ,$6301   ; }
; This is still a valid cup, so process it.
 $62F5 DEC DE        ; {Decrease #REGde by two (go back to the start of the map
 $62F6 DEC DE        ; record).}
 $62F7 LD A,(DE)     ; Fetch the cup X position.
 $62F8 SUB C         ;
 $62F9 JR NC,$62FD   ; {Make sure we have a positive byte.
 $62FB NEG           ; }
@label=CollisionCup_Test_X
*$62FD CP $0C        ; {If #N$0C is jump to #R$6306.
 $62FF JR C,$6306    ; }
@label=CollisionCup_Next
*$6301 DJNZ $62EA    ; Decrease counter by one and loop back to #R$62EA until
                     ; counter is zero.
 $6303 JP $624D      ; Jump to #R$624D.
@label=CollisionCup_Test_Y
*$6306 LD A,(DE)     ; Fetch the cup X position.
 $6307 INC DE        ; Increment #REGde by one.
 $6308 LD H,A        ; #REGh=cup X position.
 $6309 LD A,(DE)     ; Fetch the cup Y position.
 $630A LD D,A        ; #REGd=cup Y position.
 $630B CALL $6B30    ; Call #R$6B30.
 $630E EX DE,HL      ; Swap the #REGde and #REGhl registers.
 $630F CALL $6B2B    ; Call #R$6B2B.
 $6312 EX DE,HL      ; Swap the #REGde and #REGhl registers.
 $6313 LD B,H        ; #REGb=#REGh.
 $6314 LD C,L        ; #REGc=#REGl.
 $6315 JP $6212      ; Jump to #R$6212.
; View the equivalent code in;
; #LIST
; { #PSSST$63AA }
; LIST#

; Routine at 6318
c$6318 LD A,(IX+$0B)   ;
 $631B LD (IX+$00),A   ;
 $631E CALL $71ED      ; Call #R$71ED.
 $6321 CALL $6557      ; Call #R$6557.
 $6324 DEC (IX+$04)    ;
 $6327 JR Z,$6353      ;
 $6329 LD A,(IX+$04)   ;
 $632C AND %00000011   ; Keep only bits 0-1.
 $632E JR NZ,$6340     ;
 $6330 BIT 2,(IX+$04)  ;
 $6334 JR Z,$633C      ;
 $6336 LD (IX+$0B),$21 ;
 $633A JR $6340        ; Jump to #R$6340.

; Routine at 633C
;
; Used by the routine at #R$6318.
c$633C LD (IX+$0B),$22 ;
; This entry point is used by the routine at #R$6318.
*$6340 LD A,(IX+$0B)   ;
 $6343 LD (IX+$00),A   ;
 $6346 CALL $7101      ; Call #R$7101.
 $6349 LD (IX+$00),$03 ;
 $634D LD A,$01        ; {Write #N$01 to #R$5E0D.
 $634F LD ($5E0D),A    ; }
 $6352 RET             ; Return.

; Game Over
;
; Used by the routine at #R$6318.
@label=GameOver
c$6353 CALL $7139    ; Call #R$7139.
 $6356 CALL $617F    ; Call #R$617F.
; Give a 50/50 chance of "Night Driver" mode.
 $6359 LD A,R        ; #REGa=random number.
 $635B AND %00000001 ; Keep only bit 0.
 $635D JR Z,$6362    ; If #REGa is zero jump to #R$6362.
; Else set "day" time.
 $635F CALL $6175    ; Call #R$6175.
; See #LINK:Pokes#infinite_lives(Infinite Lives).
@label=GameOver_Skip
*$6362 LD HL,$5E3D   ; #REGhl=#R$5E3D.
 $6365 DEC (HL)      ; Decrease #R$5E3D by one.
 $6366 JP P,$63A7    ; If lives are still a positive number jump to #R$63A7.
; Else, trigger the game over events.
 $6369 LD (HL),$00   ; Write #N$00 to #R$5E3D.
 $636B POP HL        ; Restore #REGhl from the stack.
 $636C CALL $605B    ; Call #R$605B.
 $636F CALL $6175    ; Call #R$6175.
 $6372 CALL $68A0    ; Call #R$68A0.
; Print the "Game Over" messaging.
 $6375 LD HL,$5878   ; #REGhl=#N($5878, $04, $04) (screen location).
 $6378 LD DE,$63DA   ; #REGde=#R$63DA.
 $637B CALL $5F97    ; Call #R$5F97.
; Display the text for a short time.
 $637E LD B,$04      ; #REGb=#N$04.
 $6380 CALL $6386    ; Call #R$6386.
 $6383 JP $5F1A      ; Jump to #R$5F1A.

; Delay Loop
;
; Used by the routines at #R$6353, #R$63FF and #R$6919.
;
; B Number of times to execute the delay
@label=Delay
c$6386 LD HL,$0000   ; #REGhl=#N($0000, $04, $04) (large counter).
; From #REGhl being set above (and for each loop), decrementing #N($0000, $04,
; $04) by one gives #N$FFFF.
@label=Delay_Loop
*$6389 DEC HL        ; Decrease #REGhl by one.
 $638A LD A,L        ; {Loop back to #R$6389 until #REGhl is zero.
 $638B OR H          ;
 $638C JR NZ,$6389   ; }
 $638E DJNZ $6389    ; Decrease counter by one and loop back to #R$6389 until
                     ; counter is zero.
 $6390 RET           ; Return.

; Initialise New Game
;
; Used by the routine at #R$5FEF.
@label=GameInit
c$6391 LD A,$03      ; {Write starting lives to #R$5E3D (duplicate of #R$5FF6 -
 $6393 LD ($5E3D),A  ; possibly so POKEs would appear to not work?)}
; This entry point is used by the routine at #R$63FF.
*$6396 XOR A         ; {Write #N$00 to #R$5E3C.
 $6397 LD ($5E3C),A  ; }
 $639A CALL $6498    ; Call #R$6498.
; Reset miles and time.
 $639D LD HL,$5E2D   ; #REGhl=#R$5E2D.
 $63A0 LD B,$07      ; #REGb=#N$07 (counter).
@label=GameInit_Reset
*$63A2 LD (HL),$00   ; Write #N$00 to #REGhl.
 $63A4 INC HL        ; Increment #REGhl by one.
 $63A5 DJNZ $63A2    ; Decrease counter by one and loop back to #R$63A2 until
                     ; counter is zero.
; This entry point is used by the routine at #R$6353.
@label=PlayerInit
*$63A7 CALL $68A0    ; Call #R$68A0.
 $63AA CALL $653E    ; Call #R$653E.
 $63AD CALL $656E    ; Call #R$656E.
 $63B0 CALL $6BFE    ; Call #R$6BFE.
 $63B3 CALL $6A09    ; Call #R$6A09.
 $63B6 LD HL,$C000   ; {Write #N($C000, $04, $04) (the maximum value for fuel)
 $63B9 LD ($5E0A),HL ; to #R$5E0A.}
 $63BC LD H,$00      ; {Write #N($0000, $04, $04) to; #LIST { #R$5E0C } {
 $63BE LD ($5E0C),HL ; #R$5E0E } { #R$5E10 } LIST#
 $63C1 LD ($5E0E),HL ;
 $63C4 LD ($5E10),HL ; }
 $63C7 LD HL,$0C40   ; {Write #N($0C40, $04, $04) to #R$5E05.
 $63CA LD ($5E05),HL ; }
 $63CD LD HL,$0640   ; {Write #N($0640, $04, $04) to #R$5E08.
 $63D0 LD ($5E08),HL ; }
 $63D3 XOR A         ; {Write #N$00 to #R$5E4F.
 $63D4 LD ($5E4F),A  ; }
 $63D7 JP $6BFE      ; Jump to #R$6BFE.

; Text: Game Over
@label=Message_GameOver
t$63DA DEFM "GAME OVE","R"+$80       ; "GAME OVER".
@label=Message_YourTime
 $63E3 DEFM "YOUR TIME WA","S"+$80   ; "YOUR TIME WAS".
@label=Message_BestTime
 $63F0 DEFM "BEST TIME TODA","Y"+$80 ; "BEST TIME TODAY".

; Handler: Pick Up Cup
;
; Used by the routine at #R$702A.
;
; .
;
; Calculate number of points to award.
@label=HandlerCup
c$63FF LD A,($5E3C)  ; #REGa=#R$5E3C.
 $6402 INC A         ; {#REGa=(#REGa + #N$01) * #N$02 with BCD conversion.
 $6403 ADD A,A       ;
 $6404 DAA           ; }
; Adds points to score.
 $6405 LD B,A        ; {#REGbc=number of points to award.
 $6406 LD C,$00      ; }
 $6408 CALL $6046    ; Call #R$6046.
; Handle incrementing the cup counter.
 $640B LD HL,$5E3C   ; {Increment #R$5E3C by one.
 $640E INC (HL)      ; }
; Have all the cups been collected?
 $640F LD A,(HL)     ; #REGa=#R$5E3C.
 $6410 CP $08        ; {If #REGa is less than #N$08 jump to #R$646C.
 $6412 JR C,$646C    ; }
; All cups have been collected, display the "congratulations" messaging.
 $6414 CALL $6175    ; Call #R$6175.
 $6417 CALL $68A0    ; Call #R$68A0.
 $641A CALL $607D    ; Call #R$607D.
; Writes the line "YOUR TIME WAS".
 $641D LD HL,$5868   ; #REGhl=#N($5868, $04, $04) (screen location).
 $6420 LD DE,$63E3   ; #REGde=#R$63E3.
 $6423 CALL $5F97    ; Call #R$5F97.
; Set #REGhl to where the time itself will display.
 $6426 LD HL,$6880   ; #REGhl=#N($6880, $04, $04) (screen location).
 $6429 CALL $6F10    ; Call #R$6F10.
 $642C CALL $6CEC    ; Call #R$6CEC.
; Has a new "Best Time" been made?
 $642F LD A,($5E03)  ; {If #R$5E03 is zero then jump to #R$645A.
 $6432 AND A         ;
 $6433 JR Z,$645A    ; }
 $6435 CALL $6483    ; Call #R$6483.
 $6438 LD HL,$5E00   ; #REGhl=#R$5E00.
 $643B LD DE,$5E31   ; #REGde=#R$5E31.
 $643E LD B,$03      ; #REGb=#N$03 (counter).
@label=BestTime_Compare
*$6440 LD A,(DE)     ; {Compare #REGde against #REGhl.
 $6441 CP (HL)       ; }
 $6442 JR C,$645E    ; If it's higher than #REGa then jump to #R$645E.
 $6444 JR Z,$6448    ; If zero then jump to #R$6448.
 $6446 JR $644C      ; Jump to #R$644C.
@label=BestTime_Compare_Next
*$6448 INC HL        ; Move onto the next #R$5E00(BestTime) digit.
 $6449 INC DE        ; Move onto the next #R$5E31(Time) digit.
 $644A DJNZ $6440    ; Decrease counter by one and loop back to #R$6440 until
                     ; counter is zero.
; Create a short pause.
@label=HandlerCup_Delay
*$644C LD B,$0C      ; #REGb=#N$0C.
 $644E CALL $6386    ; Call #R$6386.
 $6451 CALL $6396    ; Call #R$6396.
 $6454 LD SP,$5E00   ; Set the stack pointer to #N($5E00, $04, $04).
 $6457 JP $6009      ; Jump to #R$6009.

; Update "Best Time Today"
;
; Used by the routine at #R$63FF.
@label=BestTime_Set
c$645A INC A         ; Increment #REGa by one.
 $645B LD ($5E03),A  ; Store #REGa at #R$5E03.
; This entry point is used by the routine at #R$63FF.
@label=BestTime_Update
*$645E LD HL,($5E31) ; {Write #R$5E31(Time) to #R$5E00(BestTime).
 $6461 LD ($5E00),HL ;
 $6464 LD A,($5E33)  ;
 $6467 LD ($5E02),A  ; }
 $646A JR $644C      ; Jump to #R$644C.

; Display Cups Collected
;
; Used by the routines at #R$63FF and #R$68A0.
;
; .
;
; Prints the cup sprite to the screen.
@label=DisplayCupsCollected
c$646C LD HL,$672E   ; #REGhl=#N$672E (screen location).
 $646F LD DE,$7F4A   ; #REGde=#R$7F4A(SpriteCup).
 $6472 CALL $70DB    ; Call #R$70DB.
 $6475 CALL $714C    ; Call #R$714C.
; Print the "cups collected" count to the screen.
 $6478 LD DE,$5E3C   ; #REGde=#R$5E3C.
 $647B LD HL,$48C6   ; #REGhl=#N$48C6.
 $647E LD B,$01      ; #REGb=#N$01.
 $6480 JP $6CD2      ; Jump to #R$6CD2.

; Display Best Time
;
; Used by the routines at #R$5F07 and #R$63FF.
;
; .
;
; Writes the line "BEST TIME TODAY".
@label=DisplayBestTime
c$6483 LD HL,$9060   ; #REGhl=#N($9060, $04, $04) (screen location).
 $6486 LD DE,$63F0   ; #REGde=#R$63F0.
 $6489 CALL $5F97    ; Call #R$5F97.
; Set #REGhl to where the time itself will display.
 $648C LD HL,$A080   ; #REGhl=#N($A080, $04, $04) (screen location).
 $648F CALL $6F10    ; Call #R$6F10.
; Point to Best Time.
 $6492 LD DE,$5E00   ; #REGde=#R$5E00.
 $6495 JP $6CFD      ; Jump to #R$6CFD.

; Routine at 6498
;
; Used by the routine at #R$6391.
c$6498 LD BC,$7CD6   ; #REGbc=#R$7CD6 (one byte past the end of #R$7811).
 $649B LD A,R        ; #REGa=random number.
; Limit the number to 0-63.
 $649D AND %00111111 ; Keep only bits 0-5.
 $649F LD D,A        ; Store the result in #REGd.
 $64A0 LD HL,$0000   ; #REGhl=#N($0000, $04, $04).
 $64A3 ADD HL,DE     ; {#REGde=#REGhl + #REGde.
 $64A4 EX DE,HL      ; }
 $64A5 LD HL,$7813   ; #REGhl=#R$7811(#N$7813).
*$64A8 LD A,(HL)     ; #REGa=#REGhl.
 $64A9 CP $20        ; {If #REGa is #N$20 jump to #R$64B3.
 $64AB JR Z,$64B3    ; }
 $64AD CP $60        ; {If #REGa is not #N$60 jump to #R$64BC.
 $64AF JR NZ,$64BC   ; }
 $64B1 LD (HL),$20   ;
@label=HandlerSpriteCup
*$64B3 DEC HL        ; Decrease #REGhl by one.
 $64B4 LD A,(DE)     ; #REGa=#REGde.
 $64B5 INC DE        ; Increment #REGde by one.
 $64B6 AND %01111111 ; Keep only bits 0-6.
 $64B8 ADD A,$20     ; #REGa=#REGa + #N$20.
 $64BA LD (HL),A     ; Store #REGa at #REGhl.
 $64BB INC HL        ; Increment #REGhl by one.
*$64BC INC HL        ; {Increment #REGhl by three.
 $64BD INC HL        ;
 $64BE INC HL        ; }
 $64BF PUSH HL       ; Stash #REGhl on the stack.
 $64C0 AND A         ;
 $64C1 SBC HL,BC     ;
 $64C3 POP HL        ; Restore #REGhl from the stack.
 $64C4 JR C,$64A8    ; If ... jump to #R$64A8.
 $64C6 RET           ; Return.

; Handler: Update Time
;
; Used by the routine at #R$6A9B.
@label=HandlerTime
c$64C7 LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $64CA CP $32        ; {Return if #REGa < #N$32.
 $64CC RET C         ; }
 $64CD SUB $32       ; #REGa = #REGa - #N$32.
 $64CF LD ($5C78),A  ; #HTML(Write #REGa back to <a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
; Update the time from the smallest unit upwards.
; .
; Handles the "seconds".
 $64D2 LD HL,$5E33   ; #REGhl=#R$5E33.
 $64D5 LD A,(HL)     ; Grab the seconds.
 $64D6 INC A         ; Increase seconds by one.
 $64D7 DAA           ; {Write seconds back to #R$5E33.
 $64D8 LD (HL),A     ; }
 $64D9 CP $60        ; {Return unless seconds have reached #N$60.
 $64DB RET NZ        ; }
 $64DC LD (HL),$00   ; Reset seconds to #N$00.
; Handles the "minutes".
 $64DE DEC HL        ; #REGhl=#R$5E32.
 $64DF LD A,(HL)     ; Grab the minutes.
 $64E0 INC A         ; Increase minutes by one.
 $64E1 DAA           ; {Write minutes back to #R$5E32.
 $64E2 LD (HL),A     ; }
 $64E3 CP $60        ; {Return unless minutes have reached #N$60.
 $64E5 RET NZ        ; }
 $64E6 LD (HL),$00   ; Reset minutes to #N$00.
; Handles the "hours".
 $64E8 DEC HL        ; #REGhl=#R$5E31.
 $64E9 LD A,(HL)     ; Grab the hours.
 $64EA INC A         ; Increase hours by one.
 $64EB DAA           ; {Keeping only bits 0-3, write hours back to #R$5E31.
 $64EC AND %00001111 ;
 $64EE LD (HL),A     ; }
 $64EF RET           ; Return.

; Display Place Name
;
; Used by the routine at #R$6FAC.
;
; A Bits 0-6 of #R$5E1F
@label=DisplayPlaceName
c$64F0 BIT 6,A       ; {Return if bit 6 of #REGa is set.
 $64F2 RET Z         ; }
; Strip out the bit which indicates the need to display the place name.
 $64F3 AND %00111111 ; Keep only bits 0-5.
 $64F5 LD DE,$0005   ; #REGde=#N($0005, $04, $04) (the minimum length of a place name without the "end-of-string" bit e.g.
                     ;           "TUCSO(N)").
 $64F8 LD HL,$722F   ; #REGhl=#R$722F.
 $64FB INC A         ; {Write #REGa + #N$01 to #R$5E39.
 $64FC LD ($5E39),A  ; }
 $64FF DEC A         ; {#REGb=original value of #REGa (used as a counter for
 $6500 LD B,A        ; finding the place name text).}
 $6501 JR Z,$650B    ; If #REGa is zero there's no need to search so jump
                     ; immediately to #R$650B.
; Speed up (slightly) searching through place names by adding #REGde (#N($0005,
; $04, $04)) to the start address.
@label=DisplayPlaceName_Search
*$6503 ADD HL,DE     ; Adds #REGde (#N($0005, $04, $04)) to the place name
                     ; pointer.
; Search for the end of the current place name.
@label=DisplayPlaceName_Loop
*$6504 BIT 7,(HL)    ; If bit 7 (the "end-of-string" flag) is not set...
 $6506 INC HL        ; Increment #REGhl by one.
 $6507 JR Z,$6504    ; ...then jump to #R$6504.
; #REGb stores the entry number of the place name, so keep going until we find
; it.
 $6509 DJNZ $6503    ; Decrease counter by one and loop back to #R$6503 until
                     ; counter is zero.
; Output the place name to the screen.
@label=DisplayPlaceName_Print
*$650B EX DE,HL      ; Switch the #REGde and #REGhl registers.
 $650C LD HL,$B868   ; #REGhl=#N$B868 (screen location).
 $650F PUSH HL       ; Stash #REGhl on the stack.
 $6510 CALL $6F10    ; Call #R$6F10.
 $6513 LD A,$70      ; #REGa=#N$70 (attribute byte - BLACK ink on YELLOW
                     ; paper).
 $6515 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $6516 JR $651F      ; Jump to #R$651F.

; Print Colour String
;
; Used by the routines at #R$68A0, #R$6919 and #R$6A9B.
;
; DE Pointer to string data
@label=PrintStringColour
c$6518 PUSH HL       ; Stash #REGhl on the stack.
 $6519 CALL $6F10    ; Call #R$6F10.
 $651C LD A,(DE)     ; Fetch the attribute byte.
 $651D EX AF,AF'     ; Switch to the shadow #REGaf register.
 $651E INC DE        ; Increment #REGde by one to point to the text of the
                     ; string.
; This entry point is used by the routines at #R$64F0 and #R$6919.
*$651F EXX           ; Switch to the shadow registers.
 $6520 POP HL        ; Restore #REGhl from the stack.
 $6521 CALL $7097    ; Call #R$7097.
; This entry point is used by the routine at #R$5F97.
@label=PrintString_Loop
*$6524 EXX           ; Switch back to the normal registers.
 $6525 LD A,(DE)     ; Fetch the character to print.
 $6526 BIT 7,A       ; {If bit 7 is set (which signifies the end of the
 $6528 JR NZ,$6535   ; string), jump to #R$6535.}
 $652A CALL $6C96    ; Call #R$6C96.
 $652D INC DE        ; Increment #REGde by one.
 $652E EXX           ; Switch to the shadow registers.
 $652F EX AF,AF'     ; Switch to the shadow #REGaf register.
 $6530 LD (HL),A     ; Copy the attribute byte to the screen.
 $6531 INC L         ; Increment #REGl by one.
 $6532 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $6533 JR $6524      ; Jump to #R$6524.
; Because the last character contains the terminator, it needs to be handled
; separately.
@label=PrintString_LastCharacter
*$6535 AND %01111111 ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
 $6537 CALL $6C96    ; Call #R$6C96.
 $653A EXX           ; Switch to the shadow registers.
 $653B EX AF,AF'     ; Switch to the shadow #REGaf register.
 $653C LD (HL),A     ; Copy the attribute byte to the screen.
 $653D RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1F3 }
; { #COOKIE$7488 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$8A11 }
; { #PSSST$73ED }
; LIST#

; Routine at 653E
;
; Used by the routines at #R$6391 and #R$6557.
c$653E LD DE,($5E08) ; #REGde=#R$5E08.
 $6542 SLA E         ;
 $6544 RL D          ;
 $6546 LD A,$47      ; #REGa=#N$47.
 $6548 SUB D         ;
 $6549 LD D,A        ;
 $654A LD HL,($5E05) ; #REGhl=#R$5E05.
 $654D SLA L         ;
 $654F RL H          ;
 $6551 LD A,H        ;
 $6552 ADD A,$08     ;
 $6554 LD L,A        ;
 $6555 LD H,D        ;
 $6556 RET           ; Return.

; Routine at 6557
;
; Used by the routines at #R$6318 and #R$6A9B.
c$6557 CALL $653E    ; Call #R$653E.
 $655A PUSH HL       ; Stash #REGhl on the stack.
 $655B LD DE,($5E36) ; #REGde=#R$5E36.
 $655F AND A         ; Reset the carry flag.
 $6560 SBC HL,DE     ; #REGhl=#REGhl - #REGde.
 $6562 POP HL        ; Restore #REGhl from the stack.
 $6563 JR Z,$657A    ; Jump to #R$657A if the result was zero.
 $6565 PUSH HL       ; Stash #REGhl on the stack.
 $6566 LD HL,($5E36) ; #REGhl=#R$5E36.
 $6569 LD A,($5E38)  ; #REGa=#R$5E38.
 $656C LD (HL),A     ; Store #REGa at #REGhl.
 $656D POP HL        ; Restore #REGhl from the stack.
; This entry point is used by the routine at #R$6391.
*$656E PUSH HL       ; Stash #REGhl on the stack.
 $656F CALL $6F10    ; Call #R$6F10.
 $6572 LD ($5E36),HL ; Store #REGhl at #R$5E36.
 $6575 LD A,(HL)     ; #REGa=the byte #REGhl is pointing at.
 $6576 LD ($5E38),A  ; Store #REGa at #R$5E38.
 $6579 POP HL        ; Restore #REGhl from the stack.
*$657A LD BC,$0101   ; #REGbc=#N($0101, $04, $04).
 $657D LD A,($5E29)  ; #REGa=#R$5E29.
 $6580 AND %00001000 ; Keep only bit 3.
 $6582 JP NZ,$6998   ; If the result is not zero, jump to #R$6998.
 $6585 JP $6991      ; Jump to #R$6991.

; Routine at 6588
;
; Used by the routine at #R$6A9B.
c$6588 LD HL,($5E34) ; #REGhl=#R$5E34.
 $658B LD A,($5E05)  ; #REGa=#R$5E05.
 $658E CPL           ;
 $658F LD E,A        ;
 $6590 LD A,($5E08)  ; #REGa=#R$5E08.
 $6593 LD D,A        ;
 $6594 AND A         ;
 $6595 PUSH HL       ; Stash #REGhl on the stack.
 $6596 SBC HL,DE     ;
 $6598 POP HL        ; Restore #REGhl from the stack.
 $6599 RET Z         ;
 $659A PUSH DE       ; Stash #REGde on the stack.
 $659B LD IX,$65FD   ; #REGix=#R$65FD.
 $659F LD B,$10      ; #REGb=#N$10.
*$65A1 PUSH BC       ; Stash #REGbc on the stack.
 $65A2 CALL $65B1    ; Call #R$65B1.
 $65A5 INC IX        ;
 $65A7 INC IX        ;
 $65A9 POP BC        ; Restore #REGbc from the stack.
 $65AA DJNZ $65A1    ;
 $65AC POP HL        ; Restore #REGhl from the stack.
 $65AD LD ($5E34),HL ; Write #REGhl to #R$5E34.
 $65B0 RET           ; Return.

; Routine at 65B1
;
; Used by the routine at #R$6588.
c$65B1 LD BC,$0202    ; #REGbc=#N$0202.
 $65B4 BIT 0,(IX+$00) ;
 $65B8 CALL NZ,$6980  ;
 $65BB LD A,(IX+$00)  ;
 $65BE AND %11111110  ; Keep only bits 1-7.
 $65C0 NEG            ;
 $65C2 ADD A,E        ;
 $65C3 CP $48         ;
 $65C5 RET C          ;
 $65C6 CP $F8         ;
 $65C8 RET NC         ;
 $65C9 LD L,A         ;
 $65CA LD A,D         ;
 $65CB SUB (IX+$01)   ;
 $65CE CP $08         ;
 $65D0 RET C          ;
 $65D1 CP $B8         ;
 $65D3 RET NC         ;
 $65D4 LD H,A         ;
 $65D5 SET 0,(IX+$00) ;
 $65D9 LD BC,$0202    ; #REGbc=#N$0202.
 $65DC PUSH HL        ; Stash #REGhl on the stack.
 $65DD CALL $6998     ; Call #R$6998.
 $65E0 POP HL         ; Restore #REGhl from the stack.
 $65E1 PUSH DE        ; Stash #REGde on the stack.
 $65E2 CALL $7097     ; Call #R$7097.
 $65E5 POP DE         ; Restore #REGde from the stack.
 $65E6 LD A,($5E43)   ; {Jump to #R$65F8 if #R$5E43 is zero.
 $65E9 AND A          ;
 $65EA JR Z,$65F8     ; }
 $65EC LD A,($5E44)   ; #REGa=#R$5E44.
 $65EF OR %00000111   ; Set bits 0-2.
*$65F1 LD C,A         ;
 $65F2 LD A,(HL)      ;
 $65F3 CP $76         ;
 $65F5 RET Z          ;
 $65F6 LD (HL),C      ;
 $65F7 RET            ; Return.
*$65F8 LD A,($5E44)   ; #REGa=#R$5E44.
 $65FB JR $65F1       ; Jump to #R$65F1.

; Terrain Dots
@label=TerrainDots
b$65FD DEFB $00,$E0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $65FF DEFB $10,$A0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6601 DEFB $20,$20  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6603 DEFB $30,$FF  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6605 DEFB $40,$60  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6607 DEFB $60,$E0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6609 DEFB $70,$10  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $660B DEFB $80,$70  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $660D DEFB $90,$B0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $660F DEFB $A0,$20  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6611 DEFB $B0,$FF  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6613 DEFB $C0,$60  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6615 DEFB $D0,$E0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6617 DEFB $E0,$00  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $6619 DEFB $F0,$40  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.
 $661B DEFB $F0,$B0  ; Entity #N($01 + (#PC - $65FD) / $02) X/ Y co-ordinates.

; Routine at 661D
;
; Used by the routine at #R$6633.
c$661D EX DE,HL      ;
 $661E AND A         ;
 $661F SBC HL,DE     ;
 $6621 JR NC,$6659   ;
 $6623 LD HL,$0000   ;
 $6626 JR $6659      ;
; This entry point is used by the routine at #R$6633.
*$6628 EX DE,HL      ;
 $6629 AND A         ;
 $662A SBC HL,DE     ;
 $662C JR NC,$6681   ;
 $662E LD HL,$0000   ;
 $6631 JR $6681      ;

; Routine at 6633
c$6633 LD A,(IX+$0B)   ;
 $6636 LD (IX+$00),A   ;
 $6639 CALL $71ED      ; Call #R$71ED.
 $663C LD D,(IX+$05)   ;
 $663F LD E,(IX+$04)   ;
 $6642 LD A,(IX+$08)   ;
 $6645 BIT 7,(IX+$0A)  ;
 $6649 JR NZ,$664C     ;
 $664B RRA             ;
*$664C RRA             ;
 $664D AND %00001111   ; Keep only bits 0-3.
 $664F LD L,A          ; {Create an offset in #REGhl.
 $6650 LD H,$00        ; }
 $6652 BIT 7,(IX+$08)  ;
 $6656 JR NZ,$661D     ;
 $6658 ADD HL,DE       ;
; This entry point is used by the routine at #R$661D.
*$6659 LD (IX+$05),H   ;
 $665C LD (IX+$04),L   ;
 $665F SRL H           ;
 $6661 RR L            ;
 $6663 PUSH HL         ;
 $6664 LD D,(IX+$07)   ;
 $6667 LD E,(IX+$06)   ;
 $666A LD A,(IX+$09)   ;
 $666D BIT 7,(IX+$0A)  ;
 $6671 JR NZ,$6674     ;
 $6673 RRA             ;
*$6674 RRA             ;
 $6675 AND %00001111   ; Keep only bits 0-3.
 $6677 LD L,A          ; {Create an offset in #REGhl.
 $6678 LD H,$00        ; }
 $667A BIT 7,(IX+$09)  ;
 $667E JR NZ,$6628     ;
 $6680 ADD HL,DE       ;
; This entry point is used by the routine at #R$661D.
*$6681 LD (IX+$07),H   ;
 $6684 LD (IX+$06),L   ;
 $6687 SRL H           ;
 $6689 RR L            ;
 $668B LD DE,($5E08)   ; #REGde=#R$5E08.
 $668F XOR A           ;
 $6690 EX AF,AF'       ;
 $6691 SBC HL,DE       ;
 $6693 JR NC,$669C     ;
 $6695 CALL $6BF6      ; Call #R$6BF6.
 $6698 EX AF,AF'       ;
 $6699 LD A,$01        ;
 $669B EX AF,AF'       ;
*$669C EX (SP),HL      ;
 $669D LD DE,($5E05)   ; #REGde=#R$5E05.
 $66A1 AND A           ;
 $66A2 SBC HL,DE       ;
 $66A4 JR NC,$66AD     ;
 $66A6 CALL $6BF6      ; Call #R$6BF6.
 $66A9 EX AF,AF'       ;
 $66AA OR %00000010    ; Set bit 1.
 $66AC EX AF,AF'       ;
*$66AD POP DE          ;
 $66AE EX AF,AF'       ;
 $66AF LD C,A          ;
 $66B0 LD A,H          ;
 $66B1 OR D            ;
 $66B2 JP NZ,$6741     ;
 $66B5 LD A,L          ;
 $66B6 CP $58          ;
 $66B8 JP NC,$6741     ;
 $66BB LD A,E          ;
 $66BC CP $58          ;
 $66BE JP NC,$6741     ;
 $66C1 BIT 0,C         ;
 $66C3 JR NZ,$66C7     ;
 $66C5 NEG             ;
*$66C7 ADD A,$68       ;
 $66C9 LD (IX+$02),A   ;
 $66CC BIT 1,C         ;
 $66CE LD A,L          ;
 $66CF JR Z,$66D3      ;
 $66D1 NEG             ;
*$66D3 ADD A,$98       ;
 $66D5 LD (IX+$01),A   ;
 $66D8 PUSH BC         ;
 $66D9 LD A,(IX+$09)   ;
 $66DC LD E,A          ;
 $66DD RLCA            ;
 $66DE LD C,(IX+$08)   ;
 $66E1 LD B,C          ;
 $66E2 RLC C           ;
 $66E4 XOR C           ;
 $66E5 AND $01         ;
 $66E7 SLA C           ;
 $66E9 OR C            ;
 $66EA AND $03         ;
 $66EC SLA A           ;
 $66EE SLA A           ;
 $66F0 LD C,A          ;
 $66F1 LD A,B          ;
 $66F2 RRA             ;
 $66F3 RRA             ;
 $66F4 AND $07         ;
 $66F6 LD B,A          ;
 $66F7 LD A,E          ;
 $66F8 RLA             ;
 $66F9 AND $38         ;
 $66FB OR B            ;
 $66FC LD E,A          ;
 $66FD LD D,$00        ;
 $66FF LD HL,$683B     ; #REGhl=#R$683B.
 $6702 ADD HL,DE       ;
 $6703 LD A,(HL)       ;
 $6704 CP $FF          ;
 $6706 JR Z,$671D      ;
 $6708 BIT 2,C         ;
 $670A JR Z,$6712      ;
 $670C NEG             ;
 $670E INC C           ;
 $670F INC C           ;
 $6710 INC C           ;
 $6711 INC C           ;
*$6712 ADD A,C         ;
 $6713 AND $0F         ;
 $6715 ADD A,$10       ;
 $6717 LD (IX+$0B),A   ;
 $671A LD (IX+$00),A   ;
*$671D LD C,(IX+$03)   ;
 $6720 LD A,($5E43)    ; #REGa=#R$5E43.
 $6723 PUSH BC         ;
 $6724 LD B,$00        ;
 $6726 ADD A,C         ;
 $6727 LD C,A          ;
 $6728 LD HL,$6837     ; #REGhl=#R$6837.
 $672B ADD HL,BC       ;
 $672C LD A,(HL)       ;
 $672D LD (IX+$03),A   ;
 $6730 CALL $7101      ;
 $6733 CALL $704B      ;
 $6736 POP BC          ;
 $6737 LD (IX+$03),C   ;
 $673A POP BC          ;
 $673B SET 0,(IX+$0A)  ;
 $673F JR $6750        ;
*$6741 BIT 0,(IX+$0A)  ;
 $6745 JR Z,$6750      ;
 $6747 RES 0,(IX+$0A)  ;
 $674B PUSH BC         ;
 $674C CALL $7139      ;
 $674F POP BC          ;
*$6750 BIT 1,C         ;
 $6752 LD A,(IX+$08)   ;
 $6755 JR NZ,$6799     ;
 $6757 BIT 7,A         ;
 $6759 JR Z,$6786      ;
 $675B AND $1F         ;
*$675D BIT 7,(IX+$0A)  ;
 $6761 JR NZ,$6791     ;
 $6763 CP $1F          ;
*$6765 JR NC,$676A     ;
 $6767 INC (IX+$08)    ;
*$676A BIT 0,C         ;
 $676C LD A,(IX+$09)   ;
 $676F JR NZ,$67B2     ;
 $6771 BIT 7,A         ;
 $6773 JR Z,$67A7      ;
 $6775 AND $1F         ;
*$6777 BIT 7,(IX+$0A)  ;
 $677B JR NZ,$6795     ;
 $677D CP $1F          ;
*$677F JR NC,$67BE     ;
 $6781 INC (IX+$09)    ;
 $6784 JR $67BE        ;
*$6786 DEC (IX+$08)    ;
 $6789 JR NZ,$676A     ;
 $678B SET 7,(IX+$08)  ;
 $678F JR $676A        ;
*$6791 CP $15          ;
 $6793 JR $6765        ;
*$6795 CP $15          ;
 $6797 JR $677F        ;
*$6799 BIT 7,A         ;
 $679B JR Z,$675D      ;
 $679D AND $1F         ;
 $679F JR NZ,$6786     ;
 $67A1 LD (IX+$08),$00 ;
 $67A5 JR $676A        ;
*$67A7 DEC (IX+$09)    ;
 $67AA JR NZ,$67BE     ;
 $67AC SET 7,(IX+$09)  ;
 $67B0 JR $67BE        ;
*$67B2 BIT 7,A         ;
 $67B4 JR Z,$6777      ;
 $67B6 AND $1F         ;
 $67B8 JR NZ,$67A7     ;
 $67BA LD (IX+$09),$00 ;
*$67BE LD (IX+$00),$02 ;
 $67C2 BIT 0,(IX+$0A)  ;
 $67C6 RET Z           ;
 $67C7 LD HL,$5E50     ;
 $67CA LD B,$07        ;
*$67CC BIT 6,(HL)      ;
 $67CE JR NZ,$6807     ;
 $67D0 INC HL          ;
 $67D1 LD A,(HL)       ;
 $67D2 SUB (IX+$01)    ;
 $67D5 JP P,$67DA      ;
 $67D8 NEG             ;
*$67DA CP $0A          ;
 $67DC JR NC,$6808     ;
 $67DE INC HL          ;
 $67DF LD A,(HL)       ;
 $67E0 SUB (IX+$02)    ;
 $67E3 JP P,$67E8      ;
 $67E6 NEG             ;
*$67E8 CP $0A          ;
 $67EA JR NC,$6809     ;
 $67EC LD A,R          ;
 $67EE AND $0F         ;
 $67F0 OR $80          ;
 $67F2 LD B,A          ;
 $67F3 LD A,(IX+$09)   ;
 $67F6 XOR B           ;
 $67F7 LD (IX+$09),A   ;
 $67FA LD A,(IX+$08)   ;
 $67FD XOR $80         ;
 $67FF LD (IX+$08),A   ;
 $6802 CALL $6106      ; Call #R$6106.
 $6805 JR $681A        ; Jump to #R$681A.
*$6807 INC HL          ;
*$6808 INC HL          ;
*$6809 INC HL          ;
 $680A DJNZ $67CC      ;
 $680C LD A,R          ;
 $680E AND $7F         ;
 $6810 JR NZ,$681A     ;
 $6812 LD A,(IX+$08)   ;
 $6815 XOR $0F         ;
 $6817 LD (IX+$08),A   ;
*$681A LD A,(IX+$01)   ;
 $681D SUB $98         ;
 $681F JP P,$6824      ;
 $6822 NEG             ;
*$6824 CP $0C          ;

; Routine at 6826
c$6826 RET NC        ;
 $6827 LD A,(IX+$02) ;
 $682A SUB $68       ;
 $682C JP P,$6831    ;
 $682F NEG           ;
*$6831 CP $0C        ;
 $6833 RET NC        ;
 $6834 JP $703E      ;

; Data block at 6837
b$6837 DEFB $71,$44,$70,$43
 $683B DEFB $FF,$04,$04,$04,$04,$04,$04,$04
 $6843 DEFB $00,$02,$03,$03,$03,$03,$04,$04
 $684B DEFB $00,$01,$02,$02,$03,$03,$03,$03
 $6853 DEFB $00,$01,$01,$02,$02,$03,$03,$03
 $685B DEFB $00,$01,$01,$02,$02,$02,$02,$03
 $6863 DEFB $00,$01,$01,$01,$02,$02,$02,$02
 $686B DEFB $00,$00,$01,$01,$01,$02,$02,$02
 $6873 DEFB $00,$00,$01,$01,$01,$02,$02,$02

; Display Lives
;
; Used by the routine at #R$68A0.
@label=DisplayPlayerLives
c$687B LD A,($5E3D)  ; {Return if #R$5E3D is zero.
 $687E AND A         ;
 $687F RET Z         ; }
 $6880 LD B,A        ; #REGb=#R$5E3D.
 $6881 LD HL,$BC08   ; #REGhl=#N$BC08.
 $6884 XOR A         ; {Write #N$00 to #R$5E41.
 $6885 LD ($5E41),A  ; }
@label=DisplayPlayerLives_Loop
*$6888 LD DE,$7CD6   ; #REGde=#R$7CD6(SpriteCar_1).
 $688B CALL $6891    ; Call #R$6891.
 $688E DJNZ $6888    ; Decrease counter by one and loop back to #R$6888 until
                     ; counter is zero.
 $6890 RET           ; Return.
; Print the player sprite.
@label=DisplayPlayerLives_Print
*$6891 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $6892 PUSH HL       ; }
 $6893 CALL $70DB    ; Call #R$70DB.
 $6896 CALL $714C    ; Call #R$714C.
 $6899 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $689A POP BC        ; }
; Move onto the next life "slot".
 $689B LD A,L        ; {#REGl=#REGl + #N$10.
 $689C ADD A,$10     ;
 $689E LD L,A        ; }
 $689F RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$0000 }
; { #COOKIE$7378 }
; { #JETPAC$70A4 }
; { #LUNARJETMAN$894F }
; { #PSSST$7325 }
; LIST#

; Create Game Window
;
; Used by the routines at #R$5F07, #R$6353, #R$6391 and #R$63FF.
@label=CreateWindow
c$68A0 LD HL,$5E68   ; {Write #N$00 to #N$0C bytes starting from #R$5E68.
 $68A3 LD BC,$0C00   ;
*$68A6 LD (HL),C     ;
 $68A7 INC HL        ;
 $68A8 DJNZ $68A6    ; }
 $68AA LD HL,$FFFF   ; {Write #N$FFFF to #R$5E34.
 $68AD LD ($5E34),HL ; }
 $68B0 LD HL,$65FD   ; #REGhl=#R$65FD.
 $68B3 LD B,$10      ; #REGb=#N$10.
@label=CreateWindow_Terrain
*$68B5 RES 0,(HL)    ; Reset bit 0 of the byte #REGhl is pointing to.
 $68B7 INC HL        ; {Increment #REGhl by two.
 $68B8 INC HL        ; }
 $68B9 DJNZ $68B5    ; Decrease counter by one and loop back to #R$68B5 until
                     ; counter is zero.
 $68BB CALL $7200    ; Call #R$7200.
 $68BE CALL $69BC    ; Call #R$69BC.
 $68C1 CALL $6949    ; Call #R$6949.
 $68C4 CALL $646C    ; Call #R$646C.
 $68C7 CALL $687B    ; Call #R$687B.
 $68CA CALL $6CDE    ; Call #R$6CDE.
 $68CD LD HL,$5808   ; #REGhl=#N$5808 (attribute buffer).
 $68D0 LD BC,$1801   ; #REGbc=#N($1801, $04, $04).
 $68D3 PUSH BC       ; Stash #REGbc on the stack.
 $68D4 CALL $6900    ; Call #R$6900.
 $68D7 LD HL,$5AE8   ; #REGhl=#N$5AE8 (attribute buffer).
 $68DA POP BC        ; Restore #REGbc from the stack.
 $68DB CALL $6900    ; Call #R$6900.
 $68DE LD HL,$5828   ; #REGhl=#N$5828 (attribute buffer).
 $68E1 LD BC,$0116   ; #REGbc=#N($0116, $04, $04).
 $68E4 PUSH BC       ; Stash #REGbc on the stack.
 $68E5 CALL $6900    ; Call #R$6900.
 $68E8 POP BC        ; Restore #REGbc from the stack.
 $68E9 LD HL,$583F   ; #REGhl=#N$583F (attribute buffer).
 $68EC CALL $6900    ; Call #R$6900.
 $68EF LD HL,$0050   ; #REGhl=#N($0050, $04, $04).
 $68F2 LD DE,$6031   ; #REGde=#R$6031.
 $68F5 CALL $6518    ; Call #R$6518.
 $68F8 CALL $6CB6    ; Call #R$6CB6.
 $68FB CALL $6CBE    ; Call #R$6CBE.
 $68FE JR $6919      ; Jump to #R$6919.

; Set PlayArea Attributes
;
; Used by the routine at #R$68A0.
;
; B Count for width
; C Count for height
; HL Attribute address
@label=AttributesPlayArea
c$6900 LD E,B        ; #REGe=#REGb.
*$6901 LD B,E        ; #REGb=#REGe.
 $6902 PUSH HL       ; Stash #REGhl on the stack.
*$6903 LD (HL),$76   ; Write #N$76 to #REGhl.
 $6905 INC HL        ; Increment #REGhl by one.
 $6906 DJNZ $6903    ; Decrease counter by one and loop back to #R$6903 until
                     ; counter is zero.
 $6908 POP HL        ; Restore #REGhl from the stack.
 $6909 CALL $6910    ; Call #R$6910.
 $690C DEC C         ; Decrease #REGc by one.
 $690D JR NZ,$6901   ; Jump back to #R$6901 until #REGc is zero.
 $690F RET           ; Return.

; Screen Address One Pixel Below
;
; Used by the routines at #R$6900 and #R$69BC.
;
;   HL Current position
; O:HL Address for new position
;
; Calculates the new address for writing a sprite pixel, in an downwards
; direction.
c$6910 LD A,L        ; {#REGl=#REGl + #N$20 (one line).
 $6911 ADD A,$20     ;
 $6913 LD L,A        ; }
 $6914 LD A,H        ; {#REGh=#REGh + #N$00 (but include the carry from above).
 $6915 ADC A,$00     ;
 $6917 LD H,A        ; }
 $6918 RET           ; Return.

; Display Night Driver Text
;
; Used by the routine at #R$68A0.
@label=DisplayNightDriver
c$6919 LD A,($5E43)               ; {Return if #R$5E43 is zero (i.e. it is
 $691C AND A                      ; "day").
 $691D RET Z                      ; }
; Else it is night so handle the interlude to display "Night Driver".
 $691E LD HL,$4070                ; #REGhl=#N$4070 (screen location).
 $6921 LD DE,$693C                ; #REGde=#R$693C.
 $6924 CALL $6518                 ; Call #R$6518.
; Display the text for a short time.
 $6927 LD B,$04                   ; #REGb=#N$04 (delay length).
 $6929 CALL $6386                 ; Call #R$6386.
; Remove the messaging.
 $692C LD HL,$4070                ; #REGhl=#N$4070 (screen location).
 $692F PUSH HL                    ; Stash #REGhl on the stack.
 $6930 CALL $6F10                 ; Call #R$6F10.
 $6933 LD A,$00                   ; #REGa=#N$00.
 $6935 EX AF,AF'                  ; Switch to the shadow #REGaf register.
 $6936 LD DE,$6AE5                ; #REGde=#R$6AE5.
 $6939 JP $651F                   ; Jump to #R$651F.
; Messging data.
@label=NightDriver_Text
 $693C DEFM $47                   ; {"NIGHT DRIVER" (#N(#PEEK(#PC)) is the
 $693D DEFM "NIGHT DRIVE","R"+$80 ; attribute).}

; Plot Map Points
;
; Used by the routine at #R$68A0.
@label=PlotMapPoints
c$6949 LD BC,$7811   ; #REGbc=#R$7811.
@label=PlotMapPoints_Loop
*$694C LD HL,$4708   ; #REGhl=#N$4708 (screen buffer location).
; Handle the X co-ordinate.
 $694F LD A,(BC)     ; #REGa=X co-ordinate of map point.
 $6950 INC BC        ; Increment the map pointer in #REGbc by one.
; Scale the X co-ordinate for the smaller map display output.
 $6951 SRL A         ; {#REGa=#REGa / #N$04.
 $6953 SRL A         ; }
 $6955 LD E,A        ; Store the result in #REGe.
; Handle the Y co-ordinate.
 $6956 LD A,(BC)     ; #REGa=Y co-ordinate of map point.
 $6957 INC BC        ; Increment the map pointer in #REGbc by one.
; Scale the Y co-ordinate for the smaller map display output.
 $6958 SRL A         ; {#REGa=#REGa / #N$08.
 $695A SRL A         ;
 $695C SRL A         ; }
 $695E LD D,A        ; Store the result in #REGd.
; Calculate the map screen address of our currently processed map point.
 $695F LD A,H        ; {#REGh=#REGh - #REGd.
 $6960 SUB D         ;
 $6961 LD H,A        ; }
 $6962 LD A,L        ; {#REGl=#REGl + #REGe.
 $6963 ADD A,E       ;
 $6964 LD L,A        ; }
; Handle the map point "type" - place names are excluded.
 $6965 LD A,(BC)     ; #REGa=sprite ID of map point.
 $6966 INC BC        ; Increment the map pointer in #REGbc by one. Now pointing
                     ; to the next record.
 $6967 PUSH BC       ; Stash #REGbc on the stack.
 $6968 LD BC,$0101   ; #REGbc=#N($0101, $04, $04) (used in #R$6998).
; Skip place names - they don't show a marker on the map.
 $696B BIT 6,A       ; {If bit 6 is set then this is a place name so skip and
 $696D JR Z,$6976    ; jump to #R$6976.}
 $696F CP $60        ; {If #REGa is #N$60, jump to #R$6976.
 $6971 JR Z,$6976    ; }
 $6973 CALL $6998    ; Call #R$6998.
; Check if finished. The stack contains the start of the next record, or the
; first byte past the end of the map points.
@label=PlotMapPoints_Continue
*$6976 POP BC        ; Restore #REGbc from the stack.
 $6977 LD HL,$7CD6   ; #REGhl=#R$7CD6 (one byte past the end of #R$7811).
 $697A AND A         ; Reset the carry flag.
 $697B SBC HL,BC     ; #REGhl=#REGhl - #REGbc.
 $697D JR NZ,$694C   ; If the result is not zero then jump to #R$694C.
 $697F RET           ; Return.

; Handler: Terrain Dots
;
; Used by the routine at #R$65B1.
;
; IX One of the #N$10 #R$65FD entities
@label=HandlerTerrainDots
c$6980 RES 0,(IX+$00) ; Reset bit 0 of the given Terrain Dot entity.
 $6984 LD HL,($5E34)  ; #REGhl=#R$5E34.
 $6987 LD A,L         ; {#REGl=player Y - terrain dot Y.
 $6988 SUB (IX+$00)   ;
 $698B LD L,A         ; }
 $698C LD A,H         ; {#REGh=player X - terrain dot X.
 $698D SUB (IX+$01)   ;
 $6990 LD H,A         ; }
; This entry point is used by the routines at #R$625C and #R$6557.
*$6991 LD A,$86       ; {Write #N$86 to #R$69A6(#N$69A7).
 $6993 LD ($69A7),A   ; }
 $6996 JR $699D       ; Jump to #R$699D.
*$6998 LD A,$C6       ; {Write #N$C6 to #R$69A6(#N$69A7).
 $699A LD ($69A7),A   ; }
*$699D PUSH BC        ; {Stash #REGbc and #REGhl on the stack.
 $699E PUSH HL        ; }
 $699F LD A,L         ; #REGa=#REGl.
 $69A0 CPL            ; Flip the bits.
 $69A1 RLCA           ; {#REGa=#REGa * #N$08.
 $69A2 RLCA           ;
 $69A3 RLCA           ; }
 $69A4 AND %00111000  ; Keep only bits 3-5.
; #TABLE(default,centre,centre)
; { =h,c3 Self modifying code }
; { =h Altered From | =h Bytes | =h bits |  }
; { #R$6991 | #N$86 | #EVAL($86, $02) }
; { #R$6998 | #N$C6 | #EVAL($C6, $02) }
; TABLE#
 $69A6 OR %11000110   ; Set bits 1-2, 6-7.
 $69A8 LD ($69AF),A   ; Store #REGa at #R$69AE(#N$69AF).
 $69AB CALL $6F10     ; Call #R$6F10.
*$69AE SET 0,(HL)     ; Set bit 0 of #REGhl.
 $69B0 CALL $6ECB     ; Call #R$6ECB.
 $69B3 DJNZ $69AE     ; Decrease counter by one and loop back to #R$69AE until
                      ; counter is zero.
 $69B5 POP HL         ; {Restore #REGhl and #REGbc from the stack.
 $69B6 POP BC         ; }
 $69B7 INC L          ; Increment #REGl by one.
 $69B8 DEC C          ; {Decrease counter by one and loop back to #R$699D until
 $69B9 JR NZ,$699D    ; counter is zero.}
 $69BB RET            ; Return.

; Draw PlayArea
;
; Used by the routine at #R$68A0.
@label=DrawPlayArea
c$69BC LD HL,($5C36) ; {#HTML(Stash <a
 $69BF PUSH HL       ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                     ; on the stack.)}
 $69C0 LD HL,$74B1   ; {#HTML(Write #R$74B1 to <a
 $69C3 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $69C6 LD HL,$7691   ; #REGhl=#R$7691.
 $69C9 LD DE,$7751   ; #REGde=#R$7751.
 $69CC EXX           ; Switch to the shadow registers.
 $69CD LD HL,$4000   ; #REGhl'=#N$4000 (screen buffer).
 $69D0 LD DE,$5800   ; #REGde'=#N$5800 (attributes buffer).
 $69D3 LD C,$18      ; #REGc'=#N$18 (height of the sidebar).
 $69D5 LD A,$08      ; {Write #N$08 (width of the sidebar) to #R$5E2C.
 $69D7 LD ($5E2C),A  ; }
@label=DrawPlayArea_Loop
*$69DA LD A,($5E2C)  ; {#REGb'=#R$5E2C.
 $69DD LD B,A        ; }
 $69DE PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $69DF PUSH DE       ; }
@label=DrawPlayArea_LineLoop
*$69E0 EXX           ; Switch back to the normal registers.
 $69E1 LD A,(HL)     ; #REGa=fetch the sidebar layout data.
 $69E2 INC HL        ; Increment the sidebar layout data pointer by one.
 $69E3 EXX           ; Switch to the shadow registers.
; Now using the screen data held by the shadow registers.
 $69E4 CALL $6C96    ; Call #R$6C96.
 $69E7 EXX           ; Switch back to the normal registers.
 $69E8 LD A,(DE)     ; #REGa=fetch the sidebar attribute data.
 $69E9 INC DE        ; Increment the sidebar attribute data pointer by one.
 $69EA EXX           ; Switch to the shadow registers.
 $69EB LD (DE),A     ; Write the sidebar attribute data to the attribute
                     ; buffer.
 $69EC INC DE        ; Increment the attribute buffer pointer by one.
 $69ED DJNZ $69E0    ; Decrease counter by one and loop back to #R$69E0 until
                     ; counter is zero.
; Restore the attribute buffer address for the start of this line.
 $69EF POP HL        ; Restore #REGhl from the stack.
 $69F0 CALL $6910    ; Call #R$6910.
 $69F3 EX DE,HL      ; #REGde=#REGhl (ignoring the exchange as #REGhl is
                     ; instantly overwritten below).
; Restore the screen buffer address for the start of this line.
 $69F4 POP HL        ; Restore #REGhl from the stack.
 $69F5 CALL $6910    ; Call #R$6910.
; Account for the Spectrum screen layout in memory.
 $69F8 LD A,L        ; #REGa=#REGl.
 $69F9 AND %11100000 ; Keep only bits 5-7.
 $69FB JR NZ,$6A01   ; Jump to #R$6A01 if we're not crossing a screen section.
 $69FD LD A,H        ; {Else #REGh=#REGh+#N$07.
 $69FE ADD A,$07     ;
 $6A00 LD H,A        ; }
@label=DrawPlayArea_Skip
*$6A01 DEC C         ; Decrease the height counter by one.
 $6A02 JR NZ,$69DA   ; Keep jumping back to #R$69DA until the height counter is
                     ; zero.
; #HTML(All done! Finish by reverting the change to <a
; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a> and
; returning.)
 $6A04 POP HL        ; {#HTML(Restore <a
 $6A05 LD ($5C36),HL ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">CHARSET</a>
                     ; from the stack and write it back to <a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                     ; }
 $6A08 RET           ; Return.

; Routine at 6A09
;
; Used by the routine at #R$6391.
c$6A09 LD HL,$6A15                          ; {Copy #N$24 bytes of data from
 $6A0C LD DE,$5E80                          ; #R$6A15 to #R$5E80.
 $6A0F LD BC,$0024                          ;
 $6A12 LDIR                                 ; }
 $6A14 RET                                  ; Return.
 $6A15 DEFB $01,$98,$68,$72,$C0,$00,$00,$00 ;
 $6A1D DEFB $00,$00,$00,$02,$02,$80,$00,$00 ;
 $6A25 DEFB $80,$00,$80,$00,$00,$00,$00,$02 ;
 $6A2D DEFB $02,$80,$00,$02,$80,$2F,$80,$17 ;
 $6A35 DEFB $00,$00,$80,$02                 ;

; Draw Player
;
; Used by the routine at #R$6A9B.
@label=DrawPlayer
c$6A39 LD HL,($5E10) ; #REGhl=#R$5E10.
 $6A3C LD BC,$0020   ; #REGbc=#N($0020, $04, $04).
 $6A3F ADD HL,BC     ;
 $6A40 LD A,H        ;
 $6A41 AND %00000011 ; Keep only bits 0-1.
 $6A43 RL L          ;
 $6A45 RLA           ;
 $6A46 RL L          ;
 $6A48 RLA           ;
 $6A49 SLA A         ;
 $6A4B LD HL,$7F24   ; #REGhl=#R$7F24.
 $6A4E LD C,A        ; {Create an offset in #REGbc.
 $6A4F LD B,$00      ; }
 $6A51 ADD HL,BC     ; #REGhl=#R$7F24 + offset.
 $6A52 LD E,(HL)     ; {#REGde=pointer to the player sprite for this direction.
 $6A53 INC HL        ;
 $6A54 LD D,(HL)     ; }
; The player is drawn statically in the centre of the play area.
 $6A55 LD HL,$4F93   ; #REGhl=#N$4F93 (screen location).
; The player sprite is #N$02 bytes in width.
 $6A58 LD A,$02      ; {Write #N$02 to #R$5E2C.
 $6A5A LD ($5E2C),A  ; }
 $6A5D LD A,(DE)     ; #REGa=height of the sprite in pixels.
 $6A5E INC DE        ; Increment #REGde by one to point to the sprite data.
 $6A5F LD C,A        ; #REGc=#REGa (height of the sprite).
@label=DrawPlayer_NextRow
*$6A60 LD A,($5E2C)  ; {#REGb=#R$5E2C.
 $6A63 LD B,A        ; }
 $6A64 PUSH HL       ; Push #REGhl on the stack.
@label=DrawPlayer_NextCol
*$6A65 LD A,(DE)     ; {Copy a byte from #REGde (the player sprite data) to
 $6A66 LD (HL),A     ; #REGhl (the screen position).}
 $6A67 INC DE        ; Increment #REGde (the player sprite data pointer) by
                     ; one.
 $6A68 INC L         ; Increment #REGl by one, this moves onto the next
                     ; adjacent screen byte.
 $6A69 DJNZ $6A65    ; Decrease counter by one and loop back to #R$6A65 until
                     ; counter is zero.
 $6A6B POP HL        ; Restore #REGhl from the stack.
 $6A6C CALL $6ECB    ; Call #R$6ECB.
 $6A6F DEC C         ; {Decrease #REGc (height) by one and jump to #R$6A60 if
 $6A70 JR NZ,$6A60   ; it is not zero.}
 $6A72 RET           ; Return.

; Routine at 6A73
c$6A73 LD DE,$000C   ; #REGde=#N($000C, $04, $04).
 $6A76 ADD IX,DE     ;
 $6A78 PUSH IX       ; {#REGhl=#REGix (using the stack to do so).
 $6A7A POP HL        ; }
 $6A7B LD BC,$5EA4   ; #REGbc=#R$5EA4.
 $6A7E AND A         ;
 $6A7F SBC HL,BC     ;
 $6A81 JP C,$6010    ;
 $6A84 CALL $6158    ; Call #R$6158.
; Holding "SHIFT" pauses the game.
@label=Pause_Loop
*$6A87 LD A,$FE      ; {Read from the keyboard;
 $6A89 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $6A8B IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $6A8D BIT 0,A       ; Has the "SHIFT" key been pressed?
 $6A8F JR Z,$6A87    ; If it has then jump to #R$6A87.
 $6A91 LD HL,($5E29) ; #REGhl=#R$5E29.
 $6A94 INC HL        ; Increment #REGhl by one.
 $6A95 LD ($5E29),HL ; Write #REGhl to #R$5E29.
 $6A98 JP $6009      ; Jump to #R$6009.

; Routine at 6A9B
c$6A9B PUSH IX                        ; Stash #REGix on the stack.
 $6A9D LD A,$FF                       ; {Write #N$FF to #R$5E39.
 $6A9F LD ($5E39),A                   ; }
 $6AA2 CALL $6B47                     ; Call #R$6B47.
 $6AA5 CALL $6AF5                     ; Call #R$6AF5.
 $6AA8 CALL $6D12                     ; Call #R$6D12.
 $6AAB CALL $6557                     ; Call #R$6557.
 $6AAE CALL $625C                     ; Call #R$625C.
 $6AB1 CALL $6588                     ; Call #R$6588.
 $6AB4 CALL $611B                     ; Call #R$611B.
 $6AB7 POP IX                         ; Restore #REGix from the stack.
; Draw and colourize the player sprite.
 $6AB9 CALL $6A39                     ; Call #R$6A39.
 $6ABC LD HL,$5993                    ; #REGhl=#N$5993 (attribute buffer
                                      ; location).
 $6ABF LD BC,$0202                    ; #REGbc=#N($0202, $04, $04) (height *
                                      ; width in bytes).
; Merge the player sprite colour in with the current background colour.
 $6AC2 LD A,($5E44)                   ; #REGa=#R$5E44.
 $6AC5 OR %00000010                   ; Set bit 1 (RED).
 $6AC7 LD D,A                         ; Store the result in #REGd.
 $6AC8 CALL $7064                     ; Call #R$7064.
; Handles updating the dashboard values.
 $6ACB CALL $64C7                     ; Call #R$64C7.
 $6ACE CALL $6CDE                     ; Call #R$6CDE.
 $6AD1 LD A,($5E39)                   ; #REGa=#R$5E39.
 $6AD4 AND A                          ; {Return if #R$5E39(#REGa) is zero.
 $6AD5 RET Z                          ; }
 $6AD6 INC A                          ; Increment #R$5E39(#REGa) by one.
 $6AD7 RET NZ                         ; Return if #R$5E39(#REGa) if anything
                                      ; other than zero (see #R$6A9D; #N$FF +
                                      ; #N$01 = #N$00).
 $6AD8 LD ($5E39),A                   ; Write #REGa to #R$5E39.
 $6ADB LD HL,$B868                    ; #REGhl=#N$B868.
 $6ADE LD DE,$6AE4                    ; #REGde=#R$6AE4.
 $6AE1 JP $6518                       ; Call #R$6518.
; Spacing "text" used for overwriting messaging.
@label=Blank_Text_Attribute
 $6AE4 DEFM $76                       ; {Contains #N$0F spaces (#N(#PEEK(#PC))
@label=Blank_Text
 $6AE5 DEFM "               "," "+$80 ; is the attribute).}

; Routine at 6AF5
;
; Used by the routine at #R$6A9B.
c$6AF5 LD HL,$5E50   ; #REGhl=#R$5E50.
 $6AF8 LD B,$07      ; #REGb=#N$07.
*$6AFA BIT 7,(HL)    ;
 $6AFC JR Z,$6B12    ;
 $6AFE RES 7,(HL)    ;
 $6B00 JR $6B0C      ; Jump to #R$6B0C.
; This entry point is used by the routine at #R$6B12.
*$6B02 PUSH HL       ; Stash #REGbc on the stack.
 $6B03 LD HL,$0118   ; #REGhl=#N($0118, $04, $04).
*$6B06 DEC HL        ; Decrease #REGhl by one.
 $6B07 LD A,H        ; {If #REGhl is not zero, jump to #R$6B06.
 $6B08 OR L          ;
 $6B09 JR NZ,$6B06   ; }
 $6B0B POP HL        ; Restore #REGhl from the stack.
*$6B0C INC HL        ; {Increment #REGhl by two.
 $6B0D INC HL        ; }
; This entry point is used by the routine at #R$6B12.
*$6B0E INC HL        ; Increment #REGhl by one.
 $6B0F DJNZ $6AFA    ; Decrease counter by one and loop back to #R$6AFA until
                     ; counter is zero.
 $6B11 RET           ; Return.

; Routine at 6B12
;
; Used by the routine at #R$6AF5.
;
; HL Entity
c$6B12 LD A,(HL)     ; {If the byte held at #REGhl is zero, jump to #R$6B02.
 $6B13 AND A         ;
 $6B14 JR Z,$6B02    ; }
 $6B16 PUSH BC       ; {Push #REGbc and #REGhl on the stack.
 $6B17 PUSH HL       ; }
 $6B18 PUSH HL       ; {#REGix=#REGhl (using the stack to do so).
 $6B19 POP IX        ; }
 $6B1B CALL $71ED    ; Call #R$71ED.
 $6B1E CALL $7139    ; Call #R$7139.
 $6B21 POP HL        ; Restore #REGhl from the stack.
 $6B22 XOR A         ; {Write #N$00 to #REGhl.
 $6B23 LD (HL),A     ; }
 $6B24 INC HL        ; Increment #REGhl by one.
 $6B25 LD (HL),A     ; Write #N$00 to #REGhl.
 $6B26 INC HL        ; Increment #REGhl by one.
 $6B27 LD (HL),A     ; Write #N$00 to #REGhl.
 $6B28 POP BC        ; Restore #REGbc from the stack.
 $6B29 JR $6B0E      ; Jump to #R$6B0E.

; Routine at 6B2B
;
; Used by the routine at #R$62DA.
c$6B2B PUSH BC       ; Stash #REGbc on the stack.
 $6B2C LD B,$02      ; #REGb=#N$02.
 $6B2E JR $6B33      ; Jump to #R$6B33.
; This entry point is used by the routines at #R$62DA, #R$6B47, #R$6BFE and
; #R$6C2D.
*$6B30 PUSH BC       ; Stash #REGbc on the stack.
 $6B31 LD B,$03      ; #REGb=#N$03.
*$6B33 LD E,$00      ; #REGe=#N$00.
*$6B35 SRL D         ;
 $6B37 RR E          ;
 $6B39 DJNZ $6B35    ; Decrease counter by one and loop back to #R$6B35 until
                     ; counter is zero.
 $6B3B POP BC        ; Restore #REGbc from the stack.
 $6B3C RET           ; Return.
; This entry point is used by the routine at #R$6B47.
*$6B3D PUSH BC       ; Stash #REGbc on the stack.
 $6B3E LD B,$04      ; #REGb=#N$04.
 $6B40 JR $6B33      ; Jump to #R$6B33.

; Routine at 6B42
;
; Used by the routine at #R$6B47.
c$6B42 LD HL,$6BE6   ; #REGhl=#R$6BE6.
 $6B45 JR $6B7F      ; Jump to #R$6B7F.

; Draw Objects
;
; Used by the routine at #R$6A9B.
@label=DrawObjects
c$6B47 LD BC,($5E19)                        ; #REGbc=#R$5E19.
*$6B4B XOR A                                ; #REGa=#N$00.
 $6B4C EX AF,AF'                            ;
 $6B4D LD A,(BC)                            ; #REGa'=object X position.
 $6B4E INC BC                               ; Increment #REGbc by one.
 $6B4F LD D,A                               ; #REGd=#REGa'.
 $6B50 CALL $6B30                           ; Call #R$6B30.
 $6B53 LD HL,($5E05)                        ; #REGhl=#R$5E05.
 $6B56 AND A                                ;
 $6B57 SBC HL,DE                            ;
 $6B59 JR NC,$6B62                          ;
 $6B5B CALL $6BF6                           ; Call #R$6BF6.
 $6B5E EX AF,AF'                            ;
 $6B5F XOR $02                              ;
 $6B61 EX AF,AF'                            ;
*$6B62 PUSH HL                              ; Stash #REGhl on the stack.
 $6B63 EX DE,HL                             ;
 $6B64 LD HL,$0060                          ; #REGhl=#N($0060, $04, $04).
 $6B67 AND A                                ;
 $6B68 SBC HL,DE                            ;
 $6B6A POP HL                               ; Restore #REGhl from the stack.
 $6B6B RET C                                ;
 $6B6C LD A,L                               ;
 $6B6D LD ($5E17),A                         ; Store #REGa at #R$5E17.
 $6B70 LD A,(BC)                            ;
 $6B71 INC BC                               ; Increment #REGbc by one.
 $6B72 LD D,A                               ;
 $6B73 CALL $6B3D                           ; Call #R$6B3D.
 $6B76 LD A,($5E43)                         ; #REGa=#R$5E43.
 $6B79 AND A                                ;
 $6B7A JR Z,$6B42                           ;
 $6B7C LD HL,$6BD6                          ; #REGhl=#R$6BD6.
; This entry point is used by the routine at #R$6B42.
*$6B7F LD A,(BC)                            ;
 $6B80 INC BC                               ;
 $6B81 LD ($5E1F),A                         ; Store #REGa at #R$5E1F.
 $6B84 CP $20                               ;
 $6B86 JR Z,$6BD3                           ;
 $6B88 CP $40                               ;
 $6B8A JR NC,$6BD3                          ;
 $6B8C ADD A,L                              ;
 $6B8D LD L,A                               ;
 $6B8E LD A,H                               ;
 $6B8F ADC A,$00                            ;
 $6B91 LD H,A                               ;
*$6B92 LD A,($5E44)                         ; #REGa=#R$5E44.
 $6B95 OR (HL)                              ;
 $6B96 LD ($5E42),A                         ;
 $6B99 LD HL,($5E08)                        ; #REGhl=#R$5E08.
 $6B9C AND A                                ;
 $6B9D SBC HL,DE                            ;
 $6B9F JR NC,$6BA8                          ;
 $6BA1 CALL $6BF6                           ; Call #R$6BF6.
 $6BA4 EX AF,AF'                            ;
 $6BA5 XOR $01                              ;
 $6BA7 EX AF,AF'                            ;
*$6BA8 PUSH HL                              ;
 $6BA9 EX DE,HL                             ;
 $6BAA LD HL,$0060                          ; #REGhl=#N($0060, $04, $04).
 $6BAD AND A                                ;
 $6BAE SBC HL,DE                            ;
 $6BB0 POP HL                               ;
 $6BB1 JR C,$6B4B                           ;
 $6BB3 LD A,L                               ;
 $6BB4 LD ($5E18),A                         ; Store #REGa at #R$5E18.
 $6BB7 EX AF,AF'                            ;
 $6BB8 LD E,A                               ;
 $6BB9 LD D,$00                             ;
 $6BBB LD HL,$6BCF                          ; #REGhl=#R$6BCF.
 $6BBE ADD HL,DE                            ;
 $6BBF LD A,(HL)                            ;
 $6BC0 LD ($5E13),A                         ; Store #REGa at #R$5E13.
 $6BC3 LD ($5E3A),BC                        ; Store #REGbc at #R$5E3A.
 $6BC7 PUSH BC                              ;
 $6BC8 CALL $6F3C                           ;
 $6BCB POP BC                               ;
 $6BCC JP $6B4B                             ;
 $6BCF LD (BC),A                            ;
 $6BD0 INC BC                               ;
 $6BD1 LD BC,$AF00                          ; #REGbc=#N($AF00, $04, $04).
 $6BD4 JR $6B92                             ; Jump to #R$6B92.
 $6BD6 DEFB $43,$46,$45,$44,$47,$42,$44,$44 ;
 $6BDE DEFB $44,$44,$45,$47,$44,$45,$46,$47 ;
 $6BE6 DEFB $43,$40,$41,$42,$42,$41,$40,$40 ;
 $6BEE DEFB $40,$40,$41,$42,$42,$41,$40,$41 ;

; Routine at 6BF6
;
; Used by the routines at #R$6212, #R$6633, #R$6B47 and #R$6C82.
c$6BF6 LD A,L        ;
 $6BF7 CPL           ;
 $6BF8 LD L,A        ;
 $6BF9 LD A,H        ;
 $6BFA CPL           ;
 $6BFB LD H,A        ;
 $6BFC INC HL        ;
 $6BFD RET           ;

; Routine at 6BFE
;
; Used by the routine at #R$6391.
c$6BFE LD BC,$7811   ; #REGbc=#R$7811.
 $6C01 LD HL,($5E05) ; #REGhl=#R$5E05.
 $6C04 LD DE,$0060   ; #REGde=#N($0060, $04, $04).
 $6C07 AND A         ; Clear the carry flag.
 $6C08 SBC HL,DE     ;
 $6C0A EX DE,HL      ;
*$6C0B EX DE,HL      ;
 $6C0C LD A,(BC)     ;
 $6C0D INC BC        ;
 $6C0E LD D,A        ; #REGd=#REGa.
 $6C0F CALL $6B30    ; Call #R$6B30.
 $6C12 EX DE,HL      ;
 $6C13 AND A         ;
 $6C14 SBC HL,DE     ;
 $6C16 JR NC,$6C2A   ;
 $6C18 INC BC        ; {Increment #REGbc twice (move onto the next record).
 $6C19 INC BC        ; }
 $6C1A LD HL,$7CD6   ; #REGhl=#R$7CD6 (one byte past the end of #R$7811).
 $6C1D AND A         ;
 $6C1E SBC HL,BC     ;
 $6C20 JR NZ,$6C0B   ;
 $6C22 LD BC,$7811   ; {Write #R$7811 to #R$5E19.
*$6C25 LD ($5E19),BC ; }
 $6C29 RET           ; Return.
*$6C2A DEC BC        ; Decrease #REGbc by one.
 $6C2B JR $6C25      ; Jump to #R$6C25.

; Routine at 6C2D
;
; Used by the routine at #R$6D12.
c$6C2D XOR A         ; {Write #N$00 to #R$5E1B.
 $6C2E LD ($5E1B),A  ; }
 $6C31 LD BC,($5E19) ; #REGbc=#R$5E19.
*$6C35 DEC BC        ; {Decrease #REGbc by three.
 $6C36 DEC BC        ;
 $6C37 DEC BC        ; }
 $6C38 LD A,(BC)     ; {#REGd=#REGbc.
 $6C39 LD D,A        ; }
 $6C3A CALL $6B30    ; Call #R$6B30.
 $6C3D CALL $6C82    ; Call #R$6C82.
 $6C40 JR NC,$6C49   ;
 $6C42 LD A,$01      ; {Write #N$01 to #R$5E1B.
 $6C44 LD ($5E1B),A  ; }
 $6C47 JR $6C35      ; Jump to #R$6C35.
*$6C49 LD A,($5E1B)  ; {Jump to #R$6C57 if #R$5E1B is zero.
 $6C4C AND A         ;
 $6C4D JR Z,$6C57    ; }
 $6C4F INC BC        ;
 $6C50 INC BC        ;
 $6C51 INC BC        ;
*$6C52 LD ($5E19),BC ;
 $6C56 RET           ; Return.
*$6C57 LD BC,($5E19) ; #REGbc=#R$5E19.
 $6C5B LD A,(BC)     ; {#REGd=#REGbc.
 $6C5C LD D,A        ; }
 $6C5D CALL $6B30    ; Call #R$6B30.
 $6C60 CALL $6C82    ; Call #R$6C82.
 $6C63 RET C         ;
*$6C64 LD ($5E1C),HL ;
*$6C67 INC BC        ;
 $6C68 INC BC        ;
 $6C69 INC BC        ;
 $6C6A LD A,(BC)     ;
 $6C6B LD D,A        ;
 $6C6C CALL $6B30    ; Call #R$6B30.
 $6C6F CALL $6C82    ; Call #R$6C82.
 $6C72 JR C,$6C52    ;
 $6C74 PUSH HL       ; Stash #REGhl on the stack.
 $6C75 LD DE,($5E1C) ; #REGde=#R$5E1C.
 $6C79 AND A         ;
 $6C7A SBC HL,DE     ;
 $6C7C POP HL        ; Restore #REGhl from the stack.
 $6C7D JR Z,$6C67    ;
 $6C7F JR C,$6C64    ;
 $6C81 RET           ; Return.

; Routine at 6C82
;
; Used by the routine at #R$6C2D.
c$6C82 LD HL,($5E05) ; #REGhl=#R$5E05.
 $6C85 AND A         ; Clear the carry flag.
 $6C86 SBC HL,DE     ;
 $6C88 JR NC,$6C8D   ;
 $6C8A CALL $6BF6    ; Call #R$6BF6.
*$6C8D PUSH HL       ;
 $6C8E LD DE,$0060   ; #REGde=#N($0060, $04, $04).
 $6C91 AND A         ; Clear the carry flag.
 $6C92 SBC HL,DE     ;
 $6C94 POP HL        ;
 $6C95 RET           ; Return.

; Print Character
;
; Used by the routines at #R$6518, #R$69BC and #R$6CB6.
;
; A ASCII value to print
; HL Screen address
@label=PrintScreen
c$6C96 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $6C97 PUSH DE       ;
 $6C98 PUSH HL       ; }
 $6C99 LD L,A        ; {Create an offset in #REGhl.
 $6C9A LD H,$00      ; }
 $6C9C ADD HL,HL     ; {Calculate offset for ASCII character (#REGhl=#REGhl *
 $6C9D ADD HL,HL     ; 8).
 $6C9E ADD HL,HL     ; }
 $6C9F LD DE,($5C36) ; #HTML(#REGde=<a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $6CA3 ADD HL,DE     ; {#REGde=#REGhl + #N$3C00. For examples of usage;
 $6CA4 EX DE,HL      ; #TABLE(default,centre,centre,centre,centre,centre)
                     ; { =h Letter | =h ASCII Value | =h * 8 (offset) | =h CHARS + offset }
                     ; #FOREACH($55,$4C,$54,$49,$4D,$41,$54,$45)(value,
                     ; { #LET(result=$3C00 + value * $08) "#CHR(value)" | #N(value) | #N(value * 8) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, $02, $03, $01, $01)()">#N({result})) }
                     ; )
                     ; TABLE#}
; Print the character to the screen.
 $6CA5 POP HL        ; Restore #REGhl, containing the screen buffer location,
                     ; from the stack.
 $6CA6 LD B,$08      ; #REGb=#N$08 (#N$08 rows of pixels).
@label=PrintScreen_Loop
*$6CA8 LD A,(DE)     ; {Copy a byte from the font data to the screen buffer.
 $6CA9 LD (HL),A     ; }
 $6CAA INC DE        ; Increment the font data by one.
 $6CAB INC H         ; Move onto the next pixel line.
 $6CAC DJNZ $6CA8    ; Decrease counter by one and loop back to #R$6CA8 until
                     ; counter is zero.
 $6CAE POP DE        ; {Restore #REGde and #REGbc from the stack.
 $6CAF POP BC        ; }
; Reset #REGhl and move to the next column, ready to print the next character.
 $6CB0 LD A,H        ; {#REGh=#REGh - #N$08 (reset the display line).
 $6CB1 SUB $08       ;
 $6CB3 LD H,A        ; }
 $6CB4 INC L         ; Increment screen column by one.
 $6CB5 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1D3 }
; { #COOKIE$7468 }
; { #JETPAC$714C }
; { #LUNARJETMAN$89EF }
; { #PSSST$73CD }
; LIST#

; Print Scores
;
; Used by the routines at #R$6046 and #R$68A0.
;
; .
;
; Sets up the player score.
@label=Score_Player
c$6CB6 LD HL,$400D   ; #REGhl=#N$400D.
 $6CB9 LD DE,$5E4C   ; #REGde=#R$5E4C.
 $6CBC JR $6CC4      ; Jump to #R$6CC4.
; Sets up the HI score.
@label=Score_HI
*$6CBE LD HL,$4018   ; #REGhl=#N$4018.
 $6CC1 LD DE,$5E49   ; #REGde=#R$5E49.
; Prints the score.
@label=PrintScore
*$6CC4 LD B,$03      ; #REGb=#N$03.
; This entry point is used by the routine at #R$6CDE.
@label=PrintScore_Loop
*$6CC6 LD A,(DE)     ;
 $6CC7 RRCA          ;
 $6CC8 RRCA          ;
 $6CC9 RRCA          ;
 $6CCA RRCA          ;
 $6CCB AND %00001111 ; Keep only bits 0-3.
 $6CCD ADD A,$30     ;
 $6CCF CALL $6C96    ; Call #R$6C96.
; This entry point is used by the routines at #R$646C, #R$6CDE and #R$6CFD.
*$6CD2 LD A,(DE)     ;
 $6CD3 AND %00001111 ; Keep only bits 0-3.
 $6CD5 ADD A,$30     ;
 $6CD7 CALL $6C96    ; Call #R$6C96.
 $6CDA INC DE        ;
 $6CDB DJNZ $6CC6    ;
 $6CDD RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$7438 }
; { #JETPAC$711C }
; { #LUNARJETMAN$89BF }
; { #PSSST$739D }
; LIST#

; Display Miles/ Time.
;
; Used by the routines at #R$68A0 and #R$6A9B.
@label=DisplayMiles
c$6CDE LD HL,$4061   ; #REGhl=#N$4061 (screen position).
 $6CE1 LD DE,$5E2D   ; #REGde=#R$5E2D.
 $6CE4 LD B,$03      ; #REGb=#N$03 ("miles" is #N$03 digits).
 $6CE6 CALL $6CC6    ; Call #R$6CC6.
 $6CE9 LD HL,$4021   ; #REGhl=#N$4021 (screen position).
; This entry point is used by the routine at #R$63FF.
@label=DisplayTime_Minutes
*$6CEC LD DE,$5E31   ; #REGde=#R$5E31.
 $6CEF LD B,$02      ; #REGb=#N$02 ("time/ minutes" is #N$02 digits).
 $6CF1 CALL $6CD2    ; Call #R$6CD2.
 $6CF4 LD DE,$5E33   ; #REGde=#R$5E33.
; This entry point is used by the routine at #R$6CFD.
@label=DisplayTime_Seconds
*$6CF7 INC HL        ; Increment #REGhl (screen position) by one.
 $6CF8 LD B,$01      ; #REGb=#N$01 ("time/ seconds" is #N$01 digit).
 $6CFA JP $6CC6      ; Jump to #R$6CC6.

; Print Best Time
;
; Used by the routine at #R$6483.
;
; .
;
; Print the first two digits.
@label=PrintBestTime
c$6CFD LD B,$02      ; #REGb=#N$02.
 $6CFF CALL $6CD2    ; Call #R$6CD2.
; Print the final digit.
 $6D02 LD DE,$5E02   ; #REGde=#R$5E02.
 $6D05 JR $6CF7      ; Jump to #R$6CF7.

; Routine at 6D07
;
; Used by the routine at #R$6D12.
c$6D07 LD A,($5E0D)  ; {#REGa=#R$5E0D + #N$04.
 $6D0A ADD A,$04     ; }
 $6D0C CP $C0        ; {If #REGa is more than #N$C0 jump to #R$6D76.
 $6D0E JR NC,$6D76   ; }
 $6D10 JR $6D73      ; Else, jump to #R$6D73.

; Routine at 6D12
;
; Used by the routine at #R$6A9B.
c$6D12 LD C,$00      ; #REGc=#N$00.
 $6D14 LD A,($5E0D)  ; #REGa=#R$5E0D.
 $6D17 RLA           ;
 $6D18 RL C          ;
 $6D1A RLA           ;
 $6D1B RL C          ;
 $6D1D LD HL,$5E30   ; #REGhl=#R$5E30.
 $6D20 ADD A,(HL)    ;
 $6D21 LD (HL),A     ;
 $6D22 LD A,C        ;
; Working backwards, add onto the odometer.
 $6D23 LD B,$03      ; #REGb=#N$03 (counter - miles are stored in three bytes).
@label=CalcMiles
*$6D25 DEC HL        ; Decrease the pointer to the miles counter held by #REGhl
                     ; by one.
 $6D26 ADC A,(HL)    ; {Adds #REGa to the miles byte held at #REGhl.
 $6D27 DAA           ; }
 $6D28 LD (HL),A     ; Write #REGa to #REGhl.
 $6D29 LD A,$00      ; Reset #REGa to #N$00 while maintaining the carry flag.
 $6D2B DJNZ $6D25    ; Decrease counter by one and loop back to #R$6D25 until
                     ; counter is zero.
 $6D2D LD A,($5E74)  ; {#REGl=#R$5E74.
 $6D30 LD L,A        ; }
 $6D31 LD A,($5E2E)  ; #REGa=#R$5E2D(#N$5E2E).
 $6D34 CP L          ;
 $6D35 JR Z,$6D40    ;
 $6D37 LD ($5E74),A  ;
 $6D3A LD BC,$0010   ; #REGbc=#N($0010, $04, $04).
 $6D3D CALL $6046    ; Call #R$6046.
*$6D40 LD HL,($5E05) ; #REGhl=#R$5E05.
; Check fuel.
 $6D43 LD A,($5E0B)  ; {If #R$5E0B(Fuel level) is not zero then jump to
 $6D46 AND A         ; #R$6D56.
 $6D47 JR NZ,$6D56   ; }
; Handle being out of fuel.
*$6D49 LD A,($5E0D)  ; #REGa=#R$5E0D.
 $6D4C CP $33        ;
 $6D4E JR C,$6D5D    ;
 $6D50 DEC A         ;
 $6D51 LD ($5E0D),A  ;
 $6D54 JR $6D64      ; Jump to #R$6D64.
; Check temperature.
*$6D56 LD A,($5E0C)  ; #REGa=#R$5E0C.
 $6D59 CP $A0        ;
 $6D5B JR NC,$6D49   ;
*$6D5D CALL $61E0    ; Call #R$61E0.
 $6D60 BIT 3,A       ;
 $6D62 JR Z,$6D07    ;
*$6D64 CALL $61C2    ; Call #R$61C2.
 $6D67 BIT 2,A       ;
 $6D69 JR NZ,$6D76   ;
 $6D6B LD A,($5E0D)  ; #REGa=#R$5E0D.
 $6D6E SUB $10       ;
 $6D70 JR NC,$6D73   ;
 $6D72 XOR A         ; #REGa=#N$00.
; Increase speed (see #R$6D07).
@label=Accelerate
*$6D73 LD ($5E0D),A  ; Write #REGa to #R$5E0D.
; This entry point is used by the routine at #R$6D07.
*$6D76 LD A,($5E0D)  ; #REGa=#R$5E0D.
 $6D79 LD HL,$49E2   ; #REGhl=#N($49E2, $04, $04).
 $6D7C CALL $6EDE    ; Call #R$6EDE.
 $6D7F LD A,($5E11)  ; #REGa=#R$5E11.
 $6D82 INC A         ; Increment #REGa by one.
 $6D83 LD C,A        ; Store the result in #REGc.
 $6D84 LD A,($5E10)  ; #REGa=#R$5E10.
 $6D87 RRA           ; {Shift #REGa right three times.
 $6D88 RRA           ;
 $6D89 RRA           ; }
 $6D8A AND %00011111 ; Keep bits 0-4.
 $6D8C BIT 0,C       ;
 $6D8E JR NZ,$6D92   ;
 $6D90 XOR %00011111 ; Unset bits 0-4.
*$6D92 LD E,A        ; {Create an offset; #REGe=#REGa and #REGd=#N$00.
 $6D93 LD D,$00      ; }
 $6D95 PUSH DE       ; Stash #REGde on the stack.
 $6D96 LD HL,$7F6B   ; {#REGhl=#R$7F6B + offset.
 $6D99 ADD HL,DE     ; }
 $6D9A LD A,($5E0D)  ; {Create an offset; #REGe=#R$5E0D and #REGd=#N$00.
 $6D9D LD E,A        ;
 $6D9E LD D,$00      ; }
 $6DA0 PUSH DE       ; Stash #REGde on the stack.
 $6DA1 LD A,(HL)     ;
 $6DA2 CALL $6F2F    ; Call #R$6F2F.
 $6DA5 LD A,($5E09)  ; #REGa=#R$5E09.
 $6DA8 LD DE,($5E07) ; #REGde=#R$5E07.
 $6DAC CALL $6EC2    ;
 $6DAF BIT 1,C       ;
 $6DB1 JR NZ,$6DEF   ;
 $6DB3 ADD HL,DE     ;
 $6DB4 ADC A,$00     ;
 $6DB6 CP $0C        ;
 $6DB8 JR NC,$6E00   ;
*$6DBA LD ($5E09),A  ;
 $6DBD LD ($5E07),HL ;
*$6DC0 POP HL        ;
 $6DC1 POP DE        ;
 $6DC2 PUSH HL       ;
 $6DC3 LD HL,$7F8A   ;
 $6DC6 AND A         ;
 $6DC7 SBC HL,DE     ;
 $6DC9 LD A,(HL)     ;
 $6DCA POP DE        ;
 $6DCB CALL $6F2F    ;
 $6DCE LD A,($5E06)  ;
 $6DD1 LD DE,($5E04) ;
 $6DD5 CALL $6EC2    ;
 $6DD8 DEC C         ;
 $6DD9 BIT 1,C       ;
 $6DDB JR NZ,$6E32   ;
 $6DDD ADD HL,DE     ;
 $6DDE ADC A,$00     ;
 $6DE0 CP $18        ;
 $6DE2 JR NC,$6E19   ;
*$6DE4 LD ($5E04),HL ;
 $6DE7 LD ($5E06),A  ;
*$6DEA CALL $6C2D    ;
 $6DED JR $6E43      ;
*$6DEF EX DE,HL      ;
 $6DF0 AND A         ;
 $6DF1 SBC HL,DE     ;
 $6DF3 SBC A,$00     ;
 $6DF5 JR NZ,$6DBA   ;
 $6DF7 EX AF,AF'     ;
 $6DF8 LD A,H        ;
 $6DF9 CP $80        ;
 $6DFB JR C,$6E00    ;
 $6DFD EX AF,AF'     ;
 $6DFE JR $6DBA      ;
*$6E00 LD A,($5E11)  ;
 $6E03 XOR $01       ;
 $6E05 LD ($5E11),A  ;
 $6E08 LD A,($5E10)  ;
 $6E0B CPL           ;
 $6E0C LD ($5E10),A  ;
 $6E0F LD A,$05      ;
 $6E11 LD ($5E45),A  ;
 $6E14 CALL $60E3    ;
 $6E17 JR $6DC0      ;
*$6E19 LD A,($5E11)  ;
 $6E1C XOR $03       ;
 $6E1E LD ($5E11),A  ;
 $6E21 LD A,($5E10)  ;
 $6E24 CPL           ;
 $6E25 LD ($5E10),A  ;
 $6E28 LD A,$05      ;
 $6E2A LD ($5E45),A  ;
 $6E2D CALL $60E3    ;
 $6E30 JR $6DEA      ;
*$6E32 EX DE,HL      ;
 $6E33 AND A         ;
 $6E34 SBC HL,DE     ;
 $6E36 SBC A,$00     ;
 $6E38 JR NZ,$6DE4   ;
 $6E3A EX AF,AF'     ;
 $6E3B LD A,H        ;
 $6E3C CP $80        ;
 $6E3E JR C,$6E19    ;
 $6E40 EX AF,AF'     ;
 $6E41 JR $6DE4      ;
*$6E43 LD A,($5E45)  ;
 $6E46 AND A         ;
 $6E47 JR Z,$6E54    ;
 $6E49 DEC A         ;
 $6E4A LD ($5E45),A  ;
 $6E4D JR Z,$6E51    ;
 $6E4F LD A,$02      ;
*$6E51 LD ($5E47),A  ;
*$6E54 CALL $618C    ;
 $6E57 LD HL,($5E10) ;
 $6E5A LD E,$18      ;
 $6E5C BIT 1,A       ;
 $6E5E JP Z,$6E76    ;
 $6E61 BIT 0,A       ;
 $6E63 JP Z,$6E6C    ;
 $6E66 LD E,$00      ; #REGe=#N$00.
 $6E68 JR $6E7E      ; Jump to #R$6E7E.
 $6E6A LD E,$18      ; #REGe=#N$18.
*$6E6C LD D,$00      ; #REGd=#N$00.
 $6E6E ADD HL,DE     ;
 $6E6F LD ($5E10),HL ;
 $6E72 JR $6E7E      ; Jump to #R$6E7E.
 $6E74 LD E,$18      ; #REGe=#N$18.
*$6E76 LD D,$00      ; #REGd=#N$00.
 $6E78 AND A         ;
 $6E79 SBC HL,DE     ;
 $6E7B LD ($5E10),HL ;
; Don't "use fuel" on every frame. This routine uses the last two bits of the #R$5E29(GameTimer) (i.e. a number
;       between 0-3) to only process every fourth frame.
@label=HandlerFuel
*$6E7E LD A,($5E29)  ; #REGa=#R$5E29.
 $6E81 AND %00000011 ; Keep only bits 0-1.
 $6E83 JR NZ,$6E9B   ; If the result is not zero then jump to #R$6E9B.
; Handles "using" fuel.
 $6E85 LD A,($5E0D)  ; {#REGb=#N$00, #REGc=#R$5E0D.
 $6E88 LD C,A        ;
 $6E89 LD B,$00      ; }
 $6E8B LD HL,($5E0A) ; #REGhl=#R$5E0A.
; A higher speed uses more fuel.
 $6E8E SBC HL,BC     ; #REGhl=#REGhl (fuel) - #REGbc (speed).
 $6E90 JR C,$6E95    ; If there's "carry" (i.e. if the player has run out of
                     ; fuel) jump to #R$6E95.
 $6E92 LD ($5E0A),HL ; Write #REGhl to #R$5E0A.
@label=FuelSkipWrite
*$6E95 CP $B0        ; {If the current speed is more than #N$B0 (top speed)
 $6E97 JR NC,$6EAF   ; jump to #R$6EAF.}
 $6E99 CP $60        ; Compare current speed with #N$60.
; Handle the temperature gauge.
@label=HandlerTemperatureGauge
*$6E9B LD A,($5E0C)  ; #REGa=#R$5E0C.
 $6E9E JR C,$6EBC    ; If there's carry set (this could be either from #R$6E99
                     ; or #R$6E81) then jump to #R$6EBC.
@label=DrawTemperatureGauge
*$6EA0 LD HL,$5162   ; #REGhl=#N($5162, $04, $04) (screen location).
 $6EA3 CALL $6EDE    ; Call #R$6EDE.
; Handle the fuel gauge.
 $6EA6 LD A,($5E0B)  ; #REGa=#R$5E0B.
 $6EA9 LD HL,$5122   ; #REGhl=#N($5122, $04, $04) (screen location).
 $6EAC JP $6EDE      ; Jump to #R$6EDE.
; Handle the temperature gauge at maximum speed.
@label=TemperatureMaxSpeed
*$6EAF LD A,($5E0C)  ; #REGa=#R$5E0C.
; Check if the temperature is already at the upper limit.
 $6EB2 CP $C0        ; {If the current temperature is more than #N$C0 jump to
 $6EB4 JR NC,$6EA0   ; #R$6EA0.}
; Go ahead and increase the temperature...
 $6EB6 INC A         ; Increment #REGa by one.
@label=UpdateTemperature
*$6EB7 LD ($5E0C),A  ; Write the updated #REGa (temperature) back to #R$5E0C.
 $6EBA JR $6EA0      ; Jump to #R$6EA0.
; Handles dropping the temperature gauge.
@label=TemperatureDrop
*$6EBC AND A         ; {If the current temperature is at zero jump to #R$6EA0.
 $6EBD JR Z,$6EA0    ; }
 $6EBF DEC A         ; Decrease #REGa (temperature) by one.
 $6EC0 JR $6EB7      ; Jump to #R$6EB7.
*$6EC2 LD B,$05      ; #REGb=#N$05.
*$6EC4 SRL H         ;
 $6EC6 RR L          ;
 $6EC8 DJNZ $6EC4    ; Decrease counter by one and loop back to #R$6EC4 until
                     ; counter is zero.
 $6ECA RET           ; Return.

; Screen Address One Pixel Above
;
; Used by the routines at #R$6980, #R$6A39 and #R$7170.
;
;   HL Current position
; O:HL Address for new position
;
; Calculates the new address for writing a sprite pixel, in an upward
; direction, taking into consideration the screen memory layout.
@label=ScreenPos1PixelAbove
c$6ECB DEC H         ; Decrement #REGh to move up one pixel on screen.
 $6ECC LD A,H        ; {Store the inverted result in #REGa.
 $6ECD CPL           ; }
 $6ECE AND %00000111 ; Keep only bits 0-2.
 $6ED0 RET NZ        ; If a character line has not been crossed then return.
 $6ED1 LD A,L        ; {Else subtract #N$20 from #REGl.
 $6ED2 SUB $20       ;
 $6ED4 LD L,A        ; }
 $6ED5 CPL           ; Invert the bits in #REGa.
 $6ED6 AND %11100000 ; Keep only bits 5-7.
 $6ED8 RET Z         ; If a new section of the screen has not been crossed then
                     ; return.
 $6ED9 LD A,H        ; {Else add #N$08 to #REGh and return.
 $6EDA ADD A,$08     ;
 $6EDC LD H,A        ;
 $6EDD RET           ; }

; Draw Gauge Line
;
; Used by the routine at #R$6D12.
@label=DrawGaugeLine
c$6EDE SRL A                                ; {Shift #REGa right two times
 $6EE0 SRL A                                ; (#REGa / #N$04).}
 $6EE2 LD C,A                               ; Store the result in #REGc.
*$6EE3 LD A,C                               ;
 $6EE4 SUB $08                              ;
 $6EE6 JR C,$6EF0                           ;
 $6EE8 LD C,A                               ;
 $6EE9 LD A,$FF                             ;
 $6EEB CALL $6EFD                           ; Call #R$6EFD.
 $6EEE JR $6EE3                             ; Jump to #R$6EE3.
*$6EF0 LD B,$00                             ; #REGb=#N$00.
 $6EF2 PUSH HL                              ; Stash #REGhl on the stack.
 $6EF3 LD HL,$6F07                          ; #REGhl=#R$6F07.
 $6EF6 ADD HL,BC                            ;
 $6EF7 LD A,(HL)                            ;
 $6EF8 POP HL                               ; Restore #REGhl from the stack.
 $6EF9 CALL $6EFD                           ; Call #R$6EFD.
 $6EFC XOR A                                ; #REGa=#N$00.
*$6EFD PUSH HL                              ; Stash #REGhl on the stack.
 $6EFE LD B,$07                             ; #REGb=#N$07.
*$6F00 LD (HL),A                            ;
 $6F01 INC H                                ;
 $6F02 DJNZ $6F00                           ; Decrease counter by one and loop
                                            ; back to #R$6F00 until counter is
                                            ; zero.
 $6F04 POP HL                               ; Restore #REGhl from the stack.
 $6F05 INC L                                ;
 $6F06 RET                                  ; Return.
 $6F07 DEFB $00,$80,$C0,$E0,$F0,$F8,$FC,$FE ;
 $6F0F DEFB $FF                             ;

; Calculate Screen Address
;
; Used by the routines at #R$5F97, #R$63FF, #R$6483, #R$64F0, #R$6518, #R$6557,
; #R$6919, #R$6980, #R$70B2 and #R$70D2.
@label=ScreenAddress
c$6F10 LD A,L        ; #REGa=#REGl.
 $6F11 RRCA          ; {#REGa=#REGa / #N$08.
 $6F12 RRCA          ;
 $6F13 RRCA          ; }
 $6F14 AND %00011111 ; Keep only bits 0-4.
 $6F16 LD L,A        ; #REGl=#REGa.
 $6F17 LD A,H        ; #REGa=#REGh.
 $6F18 RLCA          ; {#REGa=#REGa * #N$04.
 $6F19 RLCA          ; }
 $6F1A AND %11100000 ; Keep only bits 5-7.
 $6F1C OR L          ;
 $6F1D LD L,A        ; #REGl=#REGa.
 $6F1E LD A,H        ; #REGa=#REGh.
 $6F1F AND %00000111 ; Keep only bits 0-2.
 $6F21 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $6F22 LD A,H        ; #REGa=#REGh.
 $6F23 RRCA          ; {#REGa=#REGa / #N$08.
 $6F24 RRCA          ;
 $6F25 RRCA          ; }
 $6F26 AND %00011000 ; Keep only bits 3-4.
 $6F28 OR %01000000  ; Set bit 6.
 $6F2A LD H,A        ; #REGh=#REGa.
 $6F2B EX AF,AF'     ; Switch to the shadow #REGaf register.
 $6F2C OR H          ;
 $6F2D LD H,A        ; #REGh=#REGa.
 $6F2E RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BA2 }
; { #COOKIE$76E3 }
; { #JETPAC$7308 }
; { #LUNARJETMAN$851E }
; { #PSSST$759A }
; LIST#

; Routine at 6F2F
;
; Used by the routine at #R$6D12.
c$6F2F LD HL,$0000   ; #REGhl=#N($0000, $04, $04).
 $6F32 LD B,$08      ; #REGb=#N$08 (counter).
*$6F34 ADD HL,HL     ;
 $6F35 RLCA          ;
 $6F36 JR NC,$6F39   ;
 $6F38 ADD HL,DE     ;
*$6F39 DJNZ $6F34    ; Decrease counter by one and loop back to #R$6F34 until
                     ; counter is zero.
 $6F3B RET           ; Return.

; Routine at 6F3C
;
; Used by the routine at #R$6B47.
c$6F3C LD A,($5E13)  ; #REGa=#R$5E13.
 $6F3F LD C,A        ;
 $6F40 INC A         ;
 $6F41 AND %00000011 ; Keep only bits 0-1.
 $6F43 BIT 1,A       ;
 $6F45 LD A,($5E18)  ; #REGa=#R$5E18.
 $6F48 JR NZ,$6F4C   ;
 $6F4A NEG           ;
*$6F4C ADD A,$68     ;
 $6F4E CP $C0        ;
 $6F50 RET NC        ;
 $6F51 CP $10        ;
 $6F53 RET C         ;
 $6F54 LD ($5E15),A  ;
 $6F57 LD H,A        ;
 $6F58 LD A,($5E17)  ; #REGa=#R$5E17.
 $6F5B CP $58        ;
 $6F5D RET NC        ;
 $6F5E BIT 1,C       ;
 $6F60 JR Z,$6F64    ;
 $6F62 NEG           ;
*$6F64 ADD A,$98     ;
 $6F66 LD ($5E14),A  ;
 $6F69 LD L,A        ;
 $6F6A LD A,($5E1F)  ; #REGa=#R$5E1F.
 $6F6D CP $60        ;
 $6F6F RET Z         ;
 $6F70 CP $20        ;
 $6F72 JR Z,$6F7A    ;
 $6F74 BIT 6,A       ;
 $6F76 JR Z,$6F7A    ;
 $6F78 LD A,$07      ; #REGa=#N$07.
*$6F7A LD ($5E1E),A  ;
 $6F7D PUSH HL       ; Push #REGhl on the stack.
 $6F7E EX DE,HL      ;
 $6F7F LD B,$07      ; #REGb=#N$07.
 $6F81 LD HL,$5E51   ; #REGhl=#R$5E51.
; This entry point is used by the routine at #R$6FAC.
*$6F84 LD A,(HL)     ;
 $6F85 SUB E         ;
 $6F86 JP P,$6F8B    ;
 $6F89 NEG           ;
*$6F8B CP $0A        ;
 $6F8D JR NC,$6FAC   ;
 $6F8F INC HL        ;
 $6F90 LD A,(HL)     ;
 $6F91 SUB D         ;
 $6F92 JP P,$6F97    ;
 $6F95 NEG           ;
*$6F97 CP $0A        ;
 $6F99 JR NC,$6FAD   ;
 $6F9B PUSH HL       ; Push #REGhl on the stack.
 $6F9C DEC HL        ;
 $6F9D DEC HL        ;
 $6F9E PUSH HL       ; {#REGix=#REGhl (using the stack to do so).
 $6F9F POP IX        ; }
 $6FA1 LD A,($5E1E)  ; #REGa=#R$5E1E.
 $6FA4 LD (HL),A     ;
 $6FA5 CALL $71ED    ; Call #R$71ED.
 $6FA8 POP HL        ; {Restore #REGhl and #REGde from the stack.
 $6FA9 POP DE        ; }
 $6FAA JR $6FC1      ; Jump to #R$6FC1.

; Routine at 6FAC
;
; Used by the routine at #R$6F3C.
c$6FAC INC HL        ;
; This entry point is used by the routine at #R$6F3C.
*$6FAD INC HL        ;
 $6FAE INC HL        ;
 $6FAF DJNZ $6F84    ;
 $6FB1 POP DE        ;
 $6FB2 LD HL,$5E50   ; #REGhl=#R$5E50.
 $6FB5 LD B,$07      ; #REGb=#N$07.
 $6FB7 XOR A         ; {Write #N$00 to #R$5E22.
 $6FB8 LD ($5E22),A  ; }
; This entry point is used by the routine at #R$7024.
*$6FBB LD A,(HL)     ;
 $6FBC AND A         ;
 $6FBD JR NZ,$7024   ;
 $6FBF INC HL        ;
 $6FC0 INC HL        ;
; This entry point is used by the routine at #R$6F3C.
*$6FC1 LD (HL),D     ;
 $6FC2 DEC HL        ;
 $6FC3 LD (HL),E     ;
 $6FC4 DEC HL        ;
 $6FC5 LD A,($5E1E)  ; #REGa=#R$5E1E.
 $6FC8 OR %10000000  ; Set bit 7.
 $6FCA LD (HL),A     ; Write this back to #REGhl.
 $6FCB PUSH HL       ; {#REGix=#REGhl (using the stack to do so).
 $6FCC POP IX        ; }
 $6FCE LD A,($5E1F)  ; #REGa=#R$5E1F.
 $6FD1 CP $20        ;
 $6FD3 JR Z,$6FDA    ;
 $6FD5 AND %01111111 ; Keep only bits 0-6.
 $6FD7 CALL $64F0    ; Call #R$64F0.
*$6FDA CALL $7101    ; Call #R$7101.
 $6FDD LD L,(IX+$01) ; #REGl=
 $6FE0 LD H,(IX+$02) ; #REGh=
 $6FE3 LD A,($5E42)  ; {#REGd=#R$5E42.
 $6FE6 LD D,A        ; }
 $6FE7 CALL $7052    ; Call #R$7052.
 $6FEA LD A,($5E17)  ; {Return if too far from #R$5E17 (i.e. more than #N$0A
 $6FED CP $0A        ; pixels).
 $6FEF RET NC        ; }
 $6FF0 LD A,($5E18)  ; {Return if too far from #R$5E18 (i.e. more than #N$0A
 $6FF3 CP $0A        ; pixels).
 $6FF5 RET NC        ; }
 $6FF6 LD A,($5E1F)  ; #REGa=#R$5E1F.
 $6FF9 CP $20        ;
 $6FFB JR Z,$702A    ;
 $6FFD BIT 6,A       ;
 $6FFF JR Z,$7038    ;
 $7001 LD C,A        ;
 $7002 LD A,($5E4F)  ; #REGa=#R$5E4F.
 $7005 CP C          ;
 $7006 JR Z,$7012    ;
 $7008 LD A,C        ;
 $7009 LD ($5E4F),A  ;
; Add #N($0050, $04, $04) points to the score.
 $700C LD BC,$0050   ; #REGbc=#N($0050, $04, $04).
 $700F CALL $6046    ; Call #R$6046.
*$7012 LD HL,$C0FF   ; {Write #N$C0FF to #R$5E0A.
 $7015 LD ($5E0A),HL ; }
 $7018 LD A,($5E46)  ; #REGa=#R$5E46.
 $701B AND %01111111 ; Keep only bits 0-6.
 $701D RET NZ        ;
 $701E LD A,$07      ; {Write #N$07 to #R$5E46.
 $7020 LD ($5E46),A  ; }
 $7023 RET           ; Return.

; Routine at 7024
;
; Used by the routine at #R$6FAC.
c$7024 INC HL        ;
 $7025 INC HL        ;
 $7026 INC HL        ;
 $7027 DJNZ $6FBB    ;
 $7029 RET           ;

; Routine at 702A
;
; Used by the routine at #R$6FAC.
c$702A LD HL,($5E3A) ; #REGhl=#R$5E3A.
 $702D DEC HL        ;
 $702E LD (HL),$60   ;
 $7030 LD A,$87      ; {Write #N$87 to #R$5E46.
 $7032 LD ($5E46),A  ; }
 $7035 JP $63FF      ; Jump to #R$63FF.

; Routine at 7038
;
; Used by the routine at #R$6FAC.
c$7038 LD HL,($5E3A) ; #REGhl=#R$5E3A.
 $703B DEC HL        ;
 $703C LD (HL),$0F   ;
; This entry point is used by the routine at #R$6826.
*$703E XOR A         ; {Write #N$00 to #LIST { #R$5E8C } { #R$5E98 } LIST#
 $703F LD ($5E8C),A  ;
 $7042 LD ($5E98),A  ; }
 $7045 LD A,$03      ; {Write #N$03 to #R$5E80.
 $7047 LD ($5E80),A  ; }
 $704A RET           ; Return.

; Colourise sprite
;
; Used by the routine at #R$6633.
@label=ColouriseSprite
c$704B EXX           ; Switch to the shadow registers.
 $704C LD HL,($5E27) ; #REGhl'=#R$5E27(actor co-ordinates).
 $704F LD D,(IX+$03) ; #REGd'=object colour attribute.
; This entry point is used by the routine at #R$6FAC.
*$7052 CALL $7097    ; Call #R$7097 - #REGhl' now holds the co-ordinates to an
                     ; attribute file address.
 $7055 LD A,($5E24)  ; {#REGb'=#R$5E24(width loop counter (in pixels)).
 $7058 LD B,A        ; }
 $7059 LD A,($5E23)  ; #REGa=#R$5E23.
 $705C RRCA          ; {#REGa=((#REGa / #N$04) + #N$01) / #N$02.
 $705D RRCA          ;
 $705E INC A         ;
 $705F RRCA          ; }
 $7060 AND %00011111 ; Keep only bits 0-4.
 $7062 INC A         ; Increment #REGa by one.
 $7063 LD C,A        ; #REGc'=height loop counter (in pixels).
; This entry point is used by the routine at #R$6A9B.
*$7064 LD E,B        ; #REGe'=width loop counter (in pixels).
@label=ColouriseSprite_Loop1
*$7065 PUSH HL       ; Stash #REGhl on the stack.
@label=ColouriseSprite_Loop2
*$7066 LD A,H        ; #REGa=actor Y position.
 $7067 CP $5B        ; {Decrement position if address is outside of attribute
 $7069 JR NC,$7089   ; file address range.}
 $706B PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $706C PUSH BC       ; }
 $706D LD BC,$5820   ; #REGbc'=#N$5820.
 $7070 AND A         ; Clear the carry flag.
 $7071 SBC HL,BC     ;
 $7073 POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $7074 POP HL        ; }
 $7075 JR C,$7089    ;
 $7077 LD A,(HL)     ;
 $7078 CP $76        ;
 $707A JR Z,$707D    ;
 $707C LD (HL),D     ;
*$707D INC L         ;
 $707E LD A,L        ;
 $707F AND %00011111 ; Keep only bits 0-4.
 $7081 JR NZ,$7087   ;
 $7083 LD A,L        ;
 $7084 SUB $20       ;
 $7086 LD L,A        ;
*$7087 DJNZ $7066    ; Decrease counter by one and loop back to #R$7066 until
                     ; counter is zero.
*$7089 POP HL        ; Restore #REGhl from the stack.
 $708A PUSH BC       ; Stash #REGbc on the stack.
 $708B AND A         ; Clear the carry flag.
 $708C LD BC,$0020   ; {#REGhl -= 32 tiles. Places address pointer previous
 $708F SBC HL,BC     ; line.}
 $7091 POP BC        ; Restore #REGbc from the stack.
 $7092 LD B,E        ; #REGb=reset to original width counter.
 $7093 DEC C         ; Decrement height counter.
 $7094 JR NZ,$7065   ; Repeat until all tiles have been coloured.
 $7096 RET           ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$5F97, #R$6518, #R$65B1 and #R$704B.
;
;   HL Pixel address co-ordinates
; O:HL Attribute buffer address
;
; Converts a given pixel address to the associated attribute buffer address.
@label=AttributeAddress
c$7097 LD A,L        ; Horizontal co-ordinate.
 $7098 RRCA          ; {Divide by #N$08.
 $7099 RRCA          ;
 $709A RRCA          ; }
 $709B AND %00011111 ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                     ; horizontal screen values).
 $709D LD L,A        ; Store this back in #REGl.
 $709E LD A,H        ; Vertical co-ordinate.
 $709F RLCA          ; {Multiply by #N$04.
 $70A0 RLCA          ; }
 $70A1 LD C,A        ; Store this in #REGc temporarily.
 $70A2 AND %11100000 ; Keep only bits 5-7.
 $70A4 OR L          ; Set the bits from #REGl.
 $70A5 LD L,A        ; #REGl=#REGa.
 $70A6 LD A,C        ; Fetch the stored value from #REGc.
 $70A7 AND %00000011 ; Keep only bits 0-1.
 $70A9 OR %01011000  ; Set MSB of the attribute buffer #N$58. This ensures our
                     ; value is >= #R$5800.
 $70AB LD H,A        ; Store this back in #REGh.
 $70AC RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BD2 }
; { #COOKIE$7534 }
; { #JETPAC$720E }
; { #LUNARJETMAN$8506 }
; { #PSSST$748F }
; LIST#

; Routine at 70AD
;
; Used by the routines at #R$70B2 and #R$70D2.
c$70AD LD A,H        ;
 $70AE SUB $08       ;
 $70B0 LD C,A        ;
 $70B1 RET           ;

; Get Actor Position/ Direction
;
; Used by the routines at #R$7101 and #R$7139.
@label=ActorFindPosDir
c$70B2 CALL $7155    ; Call #R$7155.
 $70B5 LD HL,($5E20) ; #REGhl=#R$5E20.
 $70B8 LD A,L        ; #REGa=#REGl.
 $70B9 NEG           ;
 $70BB AND %00000111 ; Keep only bits 0-2.
 $70BD LD ($5E40),A  ;
 $70C0 CALL $70AD    ; Call #R$70AD.
 $70C3 CALL $6F10    ; Call #R$6F10.
 $70C6 LD A,(DE)     ;
 $70C7 CP C          ;
 $70C8 JR C,$70CB    ;
 $70CA LD A,C        ; #REGa=#REGc.
*$70CB LD ($5E25),A  ;
; Continue on to #R$70CE.

; Routine at 70CE
;
; Used by the routine at #R$70D2.
@label=NextSprite
c$70CE LD C,$00      ; #REGc=#N$00.
 $70D0 INC DE        ; Increment #REGde by one to point to the next sprite
                     ; header value.
 $70D1 RET           ; Return.

; Routine at 70D2
;
; Used by the routines at #R$7101 and #R$7149.
@label=FindActorSpriteAndUpdate
c$70D2 CALL $7168    ; Call #R$7168.
@label=ActorUpdate
 $70D5 LD L,(IX+$01) ; {Fetch actor co-ordinates.
 $70D8 LD H,(IX+$02) ; }
; This entry point is used by the routines at #R$646C and #R$687B.
*$70DB LD A,L        ;
 $70DC NEG           ;
 $70DE AND %00000111 ; Keep only bits 0-2.
 $70E0 LD ($5E41),A  ; Write this to #R$5E41.
 $70E3 LD A,$02      ; #REGa=#N$02.
 $70E5 JR Z,$70E8    ;
 $70E7 INC A         ; Increment #REGa by one.
*$70E8 LD ($5E24),A  ; Write #REGa to #R$5E24.
 $70EB LD ($5E27),HL ; Write #REGhl to #R$5E27.
 $70EE CALL $70AD    ; Call #R$70AD.
 $70F1 CALL $6F10    ; Call #R$6F10.
 $70F4 LD A,(DE)     ;
 $70F5 CP C          ;
 $70F6 JR C,$70F9    ;
 $70F8 LD A,C        ;
*$70F9 LD ($5E26),A  ; Set #R$5E26.
 $70FC LD ($5E23),A  ; Set #R$5E23.
 $70FF JR $70CE      ; Jump to #R$70CE.

; Erase Actor Sprite
;
; Used by the routines at #R$633C, #R$6633 and #R$6FAC.
;
; IX Actor Entity
@label=ActorEraseMovedSprite
c$7101 LD A,($5E22)  ; {Jump to #R$7149 if #R$5E22 is zero.
 $7104 AND A         ;
 $7105 JP Z,$7149    ; }
 $7108 CALL $70D2    ; Call #R$70D2.
 $710B EXX           ;
 $710C CALL $70B2    ; Call #R$70B2.
 $710F LD A,($5E21)  ; #REGa=#R$5E21.
 $7112 SUB (IX+$02)  ; Subtract the actor Y position.
 $7115 JP Z,$71D1    ; Jump to #R$71D1 if the result is zero.
 $7118 JP M,$712A    ; Jump to #R$712A if the result is negative.
 $711B LD C,A        ; Else store the result in #REGc.
 $711C LD A,($5E25)  ; #REGa=#R$5E25.
 $711F CP C          ; {Jump to #R$71D1 if #REGa < #REGc.
 $7120 JP C,$71D1    ;
 $7123 SUB C         ; }
 $7124 LD ($5E25),A  ; Store the result at #R$5E25.
 $7127 JP $7170      ; Jump to #R$7170.
*$712A EXX           ;
 $712B NEG           ;
 $712D LD C,A        ;
 $712E LD A,($5E26)  ; #REGa=#R$5E26.
 $7131 CP C          ;
 $7132 JP C,$71D0    ;
 $7135 SUB C         ;
 $7136 JP $71E4      ; Jump to #R$71E4.

; Erase Destroyed Actor
;
; Used by the routines at #R$6353, #R$6633 and #R$6B12.
@label=ActorEraseDestroyed
c$7139 CALL $70B2    ; Call #R$70B2.
 $713C EXX           ;
 $713D XOR A         ; {#REGc=#N$00.
 $713E LD C,A        ; }
 $713F LD ($5E26),A  ; {Write #N$00 to; #LIST { #R$5E26 } { #R$5E23 } LIST#
 $7142 LD ($5E23),A  ; }
 $7145 EXX           ;
 $7146 JP $7170      ; Jump to #R$7170.

; Routine at 7149
;
; Used by the routine at #R$7101.
c$7149 CALL $70D2    ; Call #R$70D2.
; This entry point is used by the routines at #R$646C and #R$687B.
*$714C EXX           ;
 $714D XOR A         ; {Write #N$00 to #R$5E25.
 $714E LD ($5E25),A  ; }
 $7151 LD C,A        ; #REGc=#N$00.
 $7152 JP $7170      ; Jump to #R$7170.

; Fetch Sprite
;
; Used by the routine at #R$70B2.
@label=GetDefaultSprite
c$7155 LD A,($5E22)  ; #REGa=#R$5E22.
@label=GetSprite
*$7158 DEC A         ; {Calculate offset for sprite lookup table.
 $7159 SLA A         ; }
 $715B AND %01111110 ; Keep only bits 1-6.
 $715D LD HL,$7F06   ; #REGhl=#R$7F06.
 $7160 LD C,A        ; {Create an offset in #REGbc.
 $7161 LD B,$00      ; }
 $7163 ADD HL,BC     ; #REGhl=#R$7F06 + offset.
 $7164 LD E,(HL)     ; {#REGde=fetch sprite address pointed to by #REGhl.
 $7165 INC HL        ;
 $7166 LD D,(HL)     ; }
 $7167 RET           ; Return.
; .
@label=ActorGetSprite
*$7168 LD A,(IX+$00) ; Load the sprite ID from the currently active actor.
 $716B JR $7158      ; Jump to #R$7158.

; Routine at 716D
;
; Used by the routine at #R$7170.
c$716D EX (SP),HL    ; .
 $716E JR $718F      ; Jump to #R$718F.

; Mask Sprite
;
; Used by the routines at #R$7101, #R$7139 and #R$7149.
@label=MaskSprite
c$7170 LD A,C        ; {Jump to #R$71CB if the vertical position is zero.
 $7171 AND A         ;
 $7172 JR Z,$71CB    ; }
 $7174 DEC C         ; Decrease #REGc by one.
 $7175 PUSH HL       ; Stash #REGhl on the stack.
 $7176 LD A,($5E40)  ; {#REGb=#R$5E40.
 $7179 LD B,A        ; }
 $717A EX DE,HL      ;
 $717B PUSH DE       ;
 $717C LD D,(HL)     ;
 $717D INC HL        ;
 $717E LD E,(HL)     ;
 $717F INC HL        ;
 $7180 AND A         ;
 $7181 JR Z,$716D    ;
 $7183 EX DE,HL      ;
 $7184 XOR A         ;
*$7185 ADD HL,HL     ;
 $7186 ADC A,A       ;
 $7187 DJNZ $7185    ;
 $7189 EX DE,HL      ;
 $718A EX (SP),HL    ;
 $718B CPL           ;
 $718C AND (HL)      ;
 $718D LD (HL),A     ;
 $718E INC L         ;
; This entry point is used by the routine at #R$716D.
*$718F LD A,D        ;
 $7190 CPL           ;
 $7191 AND (HL)      ;
 $7192 LD (HL),A     ;
 $7193 INC L         ;
 $7194 LD A,E        ;
 $7195 CPL           ;
 $7196 AND (HL)      ;
 $7197 LD (HL),A     ;
 $7198 POP DE        ;
 $7199 POP HL        ;
 $719A CALL $6ECB    ; Call #R$6ECB.
 $719D EXX           ;
 $719E LD A,C        ;
 $719F AND A         ;
 $71A0 JR Z,$71C8    ;
*$71A2 DEC C         ;
 $71A3 PUSH HL       ;
 $71A4 LD A,($5E41)  ; {#REGb=#R$5E41.
 $71A7 LD B,A        ; }
 $71A8 EX DE,HL      ;
 $71A9 PUSH DE       ; Stash #REGde on the stack.
 $71AA LD D,(HL)     ;
 $71AB INC HL        ;
 $71AC LD E,(HL)     ;
 $71AD INC HL        ;
 $71AE AND A         ;
 $71AF JR Z,$71EA    ;
 $71B1 EX DE,HL      ;
 $71B2 XOR A         ;
*$71B3 ADD HL,HL     ;
 $71B4 ADC A,A       ;
 $71B5 DJNZ $71B3    ;
 $71B7 EX DE,HL      ;
 $71B8 EX (SP),HL    ;
 $71B9 OR (HL)       ;
 $71BA LD (HL),A     ;
 $71BB INC L         ;
*$71BC LD A,D        ;
 $71BD OR (HL)       ;
 $71BE LD (HL),A     ;
 $71BF INC L         ;
 $71C0 LD A,E        ;
 $71C1 OR (HL)       ;
 $71C2 LD (HL),A     ;
 $71C3 POP DE        ;
 $71C4 POP HL        ;
 $71C5 CALL $6ECB    ; Call #R$6ECB.
*$71C8 EXX           ;
 $71C9 JR $7170      ; Jump to #R$7170.
*$71CB EXX           ;
 $71CC LD A,C        ;
 $71CD AND A         ;
 $71CE JR NZ,$71A2   ;
; This entry point is used by the routine at #R$7101.
@label=ActorUpdateSizeFlipReg
*$71D0 EXX           ;
; This entry point is used by the routine at #R$7101.
@label=ActorUpdateSize
*$71D1 LD A,($5E25)  ; {#REGc=#R$5E25.
 $71D4 LD C,A        ; }
 $71D5 LD A,($5E26)  ; #REGa=#R$5E26.
 $71D8 OR C          ;
 $71D9 RET Z         ;
 $71DA XOR A         ;
 $71DB LD ($5E25),A  ;
 $71DE EXX           ;
 $71DF LD A,($5E26)  ; {#REGc=#R$5E26.
 $71E2 LD C,A        ; }
 $71E3 XOR A         ;
; This entry point is used by the routine at #R$7101.
@label=ActorUpdateHeightAndMask
*$71E4 LD ($5E26),A  ;
 $71E7 EXX           ;
 $71E8 JR $7170      ; Jump to #R$7170.
*$71EA EX (SP),HL    ;
 $71EB JR $71BC      ;

; Store Entity
;
; Used by the routines at #R$6318, #R$6633, #R$6B12 and #R$6F3C.
@label=StoreEntity
c$71ED LD A,(IX+$01) ; {Copy actor X position to active actor X position.
 $71F0 LD ($5E20),A  ; }
 $71F3 LD A,(IX+$02) ; {Copy actor Y position to active actor Y position.
 $71F6 LD ($5E21),A  ; }
 $71F9 LD A,(IX+$00) ; {Copy actor movement to active actor movement.
 $71FC LD ($5E22),A  ; }
 $71FF RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9FFB }
; { #COOKIE$0000 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$75B9 }
; LIST#

; Reset Attribute Buffer
;
; Used by the routine at #R$68A0.
@label=ResetAttributes
c$7200 XOR A         ; {Set the border to black.
 $7201 OUT ($FE),A   ; }
 $7203 CALL $7211    ; Call #R$7211.
 $7206 LD HL,$5800   ; #REGhl=#R$5800(attribute buffer).
 $7209 LD B,$5B      ; #REGb=#N$5B (i.e. finish once we reach the end of the
                     ; #R$5800(attribute buffer)).
 $720B LD A,($5E44)  ; {#REGc=#R$5E44.
 $720E LD C,A        ; }
 $720F JR $7218      ; Jump to #R$7218.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80C2 }
; { #COOKIE$74E2 }
; { #JETPAC$71C6 }
; { #LUNARJETMAN$84BB }
; { #PSSST$7447 }
; LIST#

; Reset Screen Buffer
;
; Used by the routine at #R$7200.
@label=ResetScreen
c$7211 LD HL,$4000   ; #REGhl=#R$4000(screen buffer).
 $7214 LD B,$58      ; #REGb=#N$58 (i.e. finish once we reach the start of
                     ; #R$5800(attribute buffer)).
 $7216 LD C,$00      ; #REGc=#N$00 (value to write).
; View the equivalent code in;
; #LIST
; { #ATICATAC$80B4 }
; { #COOKIE$74D4 }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84AD }
; { #PSSST$7439 }
; LIST#
; .
; Continue on to #R$7218 to blank the screen buffer.

; Reset Routine
;
; Used by the routine at #R$7200.
;
; HL Target address
; B Single byte representing the MSB of the end address (will always end on LSB
; . #N$00)
; C Value to write
@label=ResetCopier
c$7218 LD (HL),C     ; Write #REGc to the target address.
 $7219 INC HL        ; Increment the target address by one.
 $721A LD A,H        ; {Are we finished yet? Check the MSB of the target vs.
 $721B CP B          ; #REGb.}
 $721C JR C,$7218    ; Keep looping back to #R$7218 until there is no
                     ; carry-over.
 $721E RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80BB }
; { #COOKIE$74DB }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84B4 }
; { #PSSST$7440 }
; LIST#

; Cup Table
;
; Links to the entry in #R$7811 for every cup.
@label=CupTable
w$721F DEFW $783B    ; Cup #N($01 + (#PC - $721F) / $02).
 $7221 DEFW $78B6    ; Cup #N($01 + (#PC - $721F) / $02).
 $7223 DEFW $796D    ; Cup #N($01 + (#PC - $721F) / $02).
 $7225 DEFW $7A0F    ; Cup #N($01 + (#PC - $721F) / $02).
 $7227 DEFW $7AC9    ; Cup #N($01 + (#PC - $721F) / $02).
 $7229 DEFW $7B5C    ; Cup #N($01 + (#PC - $721F) / $02).
 $722B DEFW $7C0D    ; Cup #N($01 + (#PC - $721F) / $02).
 $722D DEFW $7CAC    ; Cup #N($01 + (#PC - $721F) / $02).

; Place Names
@label=PlaceNames
t$722F DEFM " LOS ANGELE","S"+$80   ; "LOS ANGELES".
 $723B DEFM "SAN FRANCISC","O"+$80  ; "SAN FRANCISCO".
 $7248 DEFM "  SAN DIEG","O"+$80    ; "SAN DIEGO".
 $7253 DEFM "   SEATTL","E"+$80     ; "SEATTLE".
 $725D DEFM "  LAS VEGA","S"+$80    ; "LAS VEGAS".
 $7268 DEFM "    TUCSO","N"+$80     ; "TUCSON".
 $7272 DEFM "SALT LAKE CIT","Y"+$80 ; "SALT LAKE CITY".
 $7280 DEFM "   EL PAS","O"+$80     ; "EL PASO".
 $728A DEFM " GREAT FALL","S"+$80   ; "GREAT FALLS".
 $7296 DEFM " ALBUQUERQU","E"+$80   ; "ALBUQUERQUE".
 $72A2 DEFM "    DENVE","R"+$80     ; "DENVER".
 $72AC DEFM "    DALLA","S"+$80     ; "DALLAS".
 $72B6 DEFM "   WICHIT","A"+$80     ; "WICHITA".
 $72C0 DEFM " KANSAS CIT","Y"+$80   ; "KANSAS CITY".
 $72CC DEFM "    HUSTO","N"+$80     ; "HUSTON".
 $72D6 DEFM " MINNEAPOLI","S"+$80   ; "MINNEAPOLIS".
 $72E2 DEFM "  ST. LOUI","S"+$80    ; "ST. LOUIS".
 $72ED DEFM "   CHICAG","O"+$80     ; "CHICAGO".
 $72F7 DEFM " NEW ORLEAN","S"+$80   ; "NEW ORLEANS".
 $7303 DEFM "  NASHVILL","E"+$80    ; "NASHVILLE".
 $730E DEFM "  CINCINNAT","I"+$80   ; "CINCINNATI".
 $731A DEFM "   DETROI","T"+$80     ; "DETROIT".
 $7324 DEFM "   ATLANT","A"+$80     ; "ATLANTA".
 $732E DEFM "  WASHINGTO","N"+$80   ; "WASHINGTON".
 $733A DEFM " JACKSONVILL","E"+$80  ; "JACKSONVILLE".
 $7347 DEFM "   NEW YOR","K"+$80    ; "NEW YORK".

; Sprite: Cactus
b$7352 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7353 DEFB %00000010,%11000000 ; {#SPRITE$00(cactus)
 $7355 DEFB %00000010,%11000000 ;
 $7357 DEFB %00000010,%11000000 ;
 $7359 DEFB %00011110,%11000000 ;
 $735B DEFB %00110000,%11000000 ;
 $735D DEFB %01101110,%11000000 ;
 $735F DEFB %11011110,%11000000 ;
 $7361 DEFB %10111010,%11111000 ;
 $7363 DEFB %10110010,%11111100 ;
 $7365 DEFB %10110010,%11101110 ;
 $7367 DEFB %10110010,%11110111 ;
 $7369 DEFB %10010010,%11011011 ;
 $736B DEFB %01100010,%11001011 ;
 $736D DEFB %00000010,%11001001 ;
 $736F DEFB %00000010,%01000110 ;
 $7371 DEFB %00000001,%10000000 ; }

; Sprite: USA Sign
b$7373 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7374 DEFB %00000001,%11000000 ; {#SPRITE$01(sign)
 $7376 DEFB %00000001,%11000000 ;
 $7378 DEFB %00000001,%11000000 ;
 $737A DEFB %01100001,%11000000 ;
 $737C DEFB %01111110,%00000000 ;
 $737E DEFB %11111111,%11100000 ;
 $7380 DEFB %11001111,%11111111 ;
 $7382 DEFB %10010100,%01111111 ;
 $7384 DEFB %10010111,%10100101 ;
 $7386 DEFB %10010100,%00100101 ;
 $7388 DEFB %10010100,%11100001 ;
 $738A DEFB %11111110,%00100101 ;
 $738C DEFB %11111111,%11110011 ;
 $738E DEFB %00001111,%11111111 ;
 $7390 DEFB %00000000,%00111111 ;
 $7392 DEFB %00000001,%10000011 ; }

; Sprite: Flower
b$7394 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7395 DEFB %00000000,%00111000 ; {#SPRITE$03(flower)
 $7397 DEFB %00111000,%11111000 ;
 $7399 DEFB %01111110,%11111000 ;
 $739B DEFB %01111111,%11111000 ;
 $739D DEFB %01111100,%00110000 ;
 $739F DEFB %00111011,%11011110 ;
 $73A1 DEFB %00010110,%10101111 ;
 $73A3 DEFB %01110101,%01101111 ;
 $73A5 DEFB %11110110,%10101110 ;
 $73A7 DEFB %11110101,%01101100 ;
 $73A9 DEFB %11111011,%11011000 ;
 $73AB DEFB %00011100,%00111100 ;
 $73AD DEFB %00011111,%11111100 ;
 $73AF DEFB %00011111,%01111100 ;
 $73B1 DEFB %00011110,%00111100 ;
 $73B3 DEFB %00001100,%00000000 ; }

; Sprite: Boulder
b$73B5 DEFB $0F                 ; Height = #N(#PEEK(#PC)) pixels.
 $73B6 DEFB %00001111,%11000000 ; {#SPRITE$04(boulder)
 $73B8 DEFB %00010000,%00111000 ;
 $73BA DEFB %01100000,%00001000 ;
 $73BC DEFB %01111000,%00000110 ;
 $73BE DEFB %11111001,%00000011 ;
 $73C0 DEFB %11000000,%11000001 ;
 $73C2 DEFB %10011100,%11100001 ;
 $73C4 DEFB %11111111,%11110001 ;
 $73C6 DEFB %11111111,%11000001 ;
 $73C8 DEFB %01111111,%11000001 ;
 $73CA DEFB %00111111,%10110001 ;
 $73CC DEFB %00011110,%01111011 ;
 $73CE DEFB %00011101,%11111110 ;
 $73D0 DEFB %00000011,%11111000 ;
 $73D2 DEFB %00000000,%00100000 ; }

; Sprite: Tree
b$73D4 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $73D5 DEFB %00000001,%10000000 ; {#SPRITE$05(tree)
 $73D7 DEFB %00000001,%10000000 ;
 $73D9 DEFB %01111111,%11111110 ;
 $73DB DEFB %00110111,%10101100 ;
 $73DD DEFB %00011011,%11011000 ;
 $73DF DEFB %00001101,%10110000 ;
 $73E1 DEFB %00000111,%11100000 ;
 $73E3 DEFB %00011111,%10111000 ;
 $73E5 DEFB %00001111,%01110000 ;
 $73E7 DEFB %00000111,%11100000 ;
 $73E9 DEFB %00000011,%11000000 ;
 $73EB DEFB %00000110,%11100000 ;
 $73ED DEFB %00000011,%11000000 ;
 $73EF DEFB %00000001,%10000000 ;
 $73F1 DEFB %00000011,%11000000 ;
 $73F3 DEFB %00000001,%10000000 ; }

; Sprite: Fuel Pump
b$73F5 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $73F6 DEFB %00110011,%11111100 ; {#SPRITE$06(fuel-pump)
 $73F8 DEFB %00101011,%00111100 ;
 $73FA DEFB %00101011,%00111100 ;
 $73FC DEFB %00101011,%00001100 ;
 $73FE DEFB %00100111,%00101100 ;
 $7400 DEFB %00010111,%00011100 ;
 $7402 DEFB %00011111,%11111100 ;
 $7404 DEFB %00001011,%00001100 ;
 $7406 DEFB %00001111,%00001100 ;
 $7408 DEFB %00000011,%00001100 ;
 $740A DEFB %00000001,%11111000 ;
 $740C DEFB %00000000,%00000000 ;
 $740E DEFB %00000001,%11111000 ;
 $7410 DEFB %00000001,%01111000 ;
 $7412 DEFB %00000001,%00011000 ;
 $7414 DEFB %00000000,%11110000 ; }

; Sprite: Pylon
b$7416 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7417 DEFB %00010000,%10000100 ; {#SPRITE$0D(pylon)
 $7419 DEFB %00011000,%10001100 ;
 $741B DEFB %00010100,%10010100 ;
 $741D DEFB %00010010,%10100100 ;
 $741F DEFB %00001001,%11001000 ;
 $7421 DEFB %00001000,%10001000 ;
 $7423 DEFB %00001001,%11001000 ;
 $7425 DEFB %00001010,%10101000 ;
 $7427 DEFB %00000100,%10010000 ;
 $7429 DEFB %00000100,%10010000 ;
 $742B DEFB %00000110,%10110000 ;
 $742D DEFB %00000101,%11010000 ;
 $742F DEFB %00000010,%10100000 ;
 $7431 DEFB %00000011,%11100000 ;
 $7433 DEFB %00000011,%11100000 ;
 $7435 DEFB %00000000,%10000000 ; }

; Sprite: Tombstone
b$7437 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7438 DEFB %00111000,%00000000 ; {#SPRITE$0E(tombstone)
 $743A DEFB %01011110,%00000000 ;
 $743C DEFB %10011111,%11000000 ;
 $743E DEFB %10011111,%11110000 ;
 $7440 DEFB %10011011,%11111110 ;
 $7442 DEFB %10011010,%11111111 ;
 $7444 DEFB %10011001,%10111111 ;
 $7446 DEFB %10011010,%10101111 ;
 $7448 DEFB %10011010,%10101111 ;
 $744A DEFB %10101100,%10100011 ;
 $744C DEFB %10001111,%10101011 ;
 $744E DEFB %01001111,%11101011 ;
 $7450 DEFB %01000111,%11110011 ;
 $7452 DEFB %00100011,%11111110 ;
 $7454 DEFB %00010000,%11111100 ;
 $7456 DEFB %00001111,%11110000 ; }

; Sprite: Bush
b$7458 DEFB $0D                 ; Height = #N(#PEEK(#PC)) pixels.
 $7459 DEFB %00000111,%11100000 ; {#SPRITE$02(bush)
 $745B DEFB %00001111,%11111000 ;
 $745D DEFB %00110111,%11111000 ;
 $745F DEFB %00001011,%11010000 ;
 $7461 DEFB %00101011,%10101000 ;
 $7463 DEFB %01010111,%11100110 ;
 $7465 DEFB %00100101,%11010000 ;
 $7467 DEFB %01001111,%10101000 ;
 $7469 DEFB %00011011,%10100100 ;
 $746B DEFB %00101011,%01010010 ;
 $746D DEFB %00010011,%01001000 ;
 $746F DEFB %00000010,%11000000 ;
 $7471 DEFB %00000000,%10100000 ; }

; Sprite: Explosion
;
; .
;
; .
;
; Frame #N$01
b$7473 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7474 DEFB %00000000,%00110000 ; {#SPRITE$20(explosion-01*)
 $7476 DEFB %01110000,%01110000 ;
 $7478 DEFB %01110110,%11110000 ;
 $747A DEFB %00111111,%11011111 ;
 $747C DEFB %00010011,%10111011 ;
 $747E DEFB %00110000,%00000110 ;
 $7480 DEFB %01100000,%00011100 ;
 $7482 DEFB %11000000,%00111000 ;
 $7484 DEFB %11110000,%00011000 ;
 $7486 DEFB %01111100,%10001100 ;
 $7488 DEFB %00011100,%11001100 ;
 $748A DEFB %00001101,%11111100 ;
 $748C DEFB %00001101,%10111110 ;
 $748E DEFB %00001111,%00001111 ;
 $7490 DEFB %00000110,%00000011 ;
 $7492 DEFB %00000100,%00000001 ; }
; Frame #N$02
 $7494 DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7495 DEFB %00000000,%00000000 ; {#SPRITE$21(explosion-02*)
 $7497 DEFB %00100001,%00001000 ;
 $7499 DEFB %00011011,%00111000 ;
 $749B DEFB %00011111,%11110000 ;
 $749D DEFB %00011101,%10111110 ;
 $749F DEFB %00001100,%00111100 ;
 $74A1 DEFB %00001100,%00011000 ;
 $74A3 DEFB %00001100,%00011100 ;
 $74A5 DEFB %00011110,%00000110 ;
 $74A7 DEFB %00111111,%00011111 ;
 $74A9 DEFB %01110011,%11111000 ;
 $74AB DEFB %00000011,%10111000 ;
 $74AD DEFB %00000011,%00011100 ;
 $74AF DEFB %00000010,%00000100 ; }
; #UDGARRAY*explosion-01,$05;explosion-02(explosion-frames)

; UDG Graphics
;
; .
;
; .
;
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
@label=UDG_Tiles
b$74B1 DEFB %00000000               ; {#UDG(#PC)
 $74B2 DEFB %00000000               ; }
 $74B3 DEFB $00,$00,$00,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74B9 DEFB %00001111               ; {#UDG(#PC)
 $74BA DEFB %00111111               ; }
 $74BB DEFB $7F,$7F,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74C1 DEFB %11111111               ; {#UDG(#PC)
 $74C2 DEFB %11111111               ; }
 $74C3 DEFB $FF,$F0,$E8,$C0,$80,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74C9 DEFB %11111111               ; {#UDG(#PC)
 $74CA DEFB %11111111               ; }
 $74CB DEFB $FF,$1F,$00,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74D1 DEFB %11111111               ; {#UDG(#PC)
 $74D2 DEFB %11111111               ; }
 $74D3 DEFB $FF,$FF,$00,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74D9 DEFB %11111111               ; {#UDG(#PC)
 $74DA DEFB %11111111               ; }
 $74DB DEFB $FF,$FF,$00,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74E1 DEFB %11111111               ; {#UDG(#PC)
 $74E2 DEFB %11111111               ; }
 $74E3 DEFB $FF,$FF,$7F,$3F,$0F,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74E9 DEFB %11111111               ; {#UDG(#PC)
 $74EA DEFB %11111111               ; }
 $74EB DEFB $FF,$FE,$FC,$F8,$E0,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74F1 DEFB %11110000               ; {#UDG(#PC)
 $74F2 DEFB %11011100               ; }
 $74F3 DEFB $8E,$0E,$0F,$0F,$0F,$1F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $74F9 DEFB %11111110               ; {#UDG(#PC)
 $74FA DEFB %11111110               ; }
 $74FB DEFB $FC,$FC,$FC,$FC,$FC,$F8
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7501 DEFB %11111000               ; {#UDG(#PC)
 $7502 DEFB %11111000               ; }
 $7503 DEFB $F8,$F8,$F8,$F8,$F8,$FE
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7509 DEFB %11111000               ; {#UDG(#PC)
 $750A DEFB %11111000               ; }
 $750B DEFB $FC,$FC,$FC,$FE,$FE,$FE
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7511 DEFB %11111111               ; {#UDG(#PC)
 $7512 DEFB %11111111               ; }
 $7513 DEFB $FF,$FF,$7F,$7F,$3F,$0F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7519 DEFB %00000000               ; {#UDG(#PC)
 $751A DEFB %00110000               ; }
 $751B DEFB $F8,$FF,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7521 DEFB %00000000               ; {#UDG(#PC)
 $7522 DEFB %00000000               ; }
 $7523 DEFB $07,$FF,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7529 DEFB %00000000               ; {#UDG(#PC)
 $752A DEFB %00000000               ; }
 $752B DEFB $00,$90,$FC,$FE,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7531 DEFB %00000000               ; {#UDG(#PC)
 $7532 DEFB %00000011               ; }
 $7533 DEFB $07,$0F,$1F,$1F,$3F,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7539 DEFB %00000000               ; {#UDG(#PC)
 $753A DEFB %11001111               ; }
 $753B DEFB $EF,$FF,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7541 DEFB %00000000               ; {#UDG(#PC)
 $7542 DEFB %10011000               ; }
 $7543 DEFB $FC,$FC,$FE,$FE,$FE,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7549 DEFB %01111111               ; {#UDG(#PC)
 $754A DEFB %01111111               ; }
 $754B DEFB $3F,$3F,$1E,$1E,$1C,$F0
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7551 DEFB %00011111               ; {#UDG(#PC)
 $7552 DEFB %00011111               ; }
 $7553 DEFB $3F,$3F,$3F,$7F,$7F,$7F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7559 DEFB %01111111               ; {#UDG(#PC)
 $755A DEFB %00111111               ; }
 $755B DEFB $3F,$3F,$3F,$3F,$1F,$1F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7561 DEFB %00001111               ; {#UDG(#PC)
 $7562 DEFB %00001111               ; }
 $7563 DEFB $0F,$1F,$1F,$3F,$3F,$7F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7569 DEFB %00111111               ; {#UDG(#PC)
 $756A DEFB %01000000               ; }
 $756B DEFB $87,$88,$90,$A0,$A0,$A0
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7571 DEFB %11111100               ; {#UDG(#PC)
 $7572 DEFB %00000010               ; }
 $7573 DEFB $E1,$11,$09,$65,$25,$85
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7579 DEFB %10100001               ; {#UDG(#PC)
 $757A DEFB %10100000               ; }
 $757B DEFB $A0,$92,$8A,$82,$40,$3F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7581 DEFB %00000101               ; {#UDG(#PC)
 $7582 DEFB %00000101               ; }
 $7583 DEFB $05,$49,$51,$21,$02,$FC
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7589 DEFB %00111111               ; {#UDG(#PC)
 $758A DEFB %01000000               ; }
 $758B DEFB $81,$83,$83,$80,$83,$8E
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7591 DEFB %11111100               ; {#UDG(#PC)
 $7592 DEFB %00000010               ; }
 $7593 DEFB $C1,$E1,$E1,$01,$E1,$31
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7599 DEFB %10010110               ; {#UDG(#PC)
 $759A DEFB %10010011               ; }
 $759B DEFB $95,$95,$95,$8B,$40,$3F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75A1 DEFB %00110001               ; {#UDG(#PC)
 $75A2 DEFB %11110001               ; }
 $75A3 DEFB $F1,$F1,$F1,$F1,$02,$FC
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75A9 DEFB %00111111               ; {#UDG(#PC)
 $75AA DEFB %01000000               ; }
 $75AB DEFB $80,$80,$80,$80,$80,$81
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75B1 DEFB %11111100               ; {#UDG(#PC)
 $75B2 DEFB %00000010               ; }
 $75B3 DEFB $09,$1D,$29,$51,$A1,$41
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75B9 DEFB %10000010               ; {#UDG(#PC)
 $75BA DEFB %10011101               ; }
 $75BB DEFB $A6,$AE,$BE,$9C,$40,$3F
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75C1 DEFB %10000001               ; {#UDG(#PC)
 $75C2 DEFB %00000001               ; }
 $75C3 DEFB $01,$01,$01,$01,$02,$FC
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75C9 DEFB %00000001               ; {#UDG(#PC)
 $75CA DEFB %00000000               ; }
 $75CB DEFB $01,$03,$03,$03,$01,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75D1 DEFB %10000001               ; {#UDG(#PC)
 $75D2 DEFB %00000001               ; }
 $75D3 DEFB $80,$40,$40,$40,$80,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75D9 DEFB %10000001               ; {#UDG(#PC)
 $75DA DEFB %10000001               ; }
 $75DB DEFB $00,$00,$00,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75E1 DEFB %10000001               ; {#UDG(#PC)
 $75E2 DEFB %10000000               ; }
 $75E3 DEFB $61,$63,$6B,$7B,$09,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75E9 DEFB %10000000               ; {#UDG(#PC)
 $75EA DEFB %00000000               ; }
 $75EB DEFB $8C,$5A,$5A,$5A,$8C,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75F1 DEFB %00000001               ; {#UDG(#PC)
 $75F2 DEFB %00000000               ; }
 $75F3 DEFB $07,$06,$07,$06,$07,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $75F9 DEFB %10000001               ; {#UDG(#PC)
 $75FA DEFB %00000001               ; }
 $75FB DEFB $C0,$00,$80,$00,$C0,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7601 DEFB %10000001               ; {#UDG(#PC)
 $7602 DEFB %10000000               ; }
 $7603 DEFB $07,$06,$07,$06,$06,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7609 DEFB %10000000               ; {#UDG(#PC)
 $760A DEFB %00000000               ; }
 $760B DEFB $C0,$00,$80,$00,$00,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7611 DEFB %00000001               ; {#UDG(#PC)
 $7612 DEFB %00000000               ; }
 $7613 DEFB $06,$06,$06,$06,$07,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7619 DEFB %10000001               ; {#UDG(#PC)
 $761A DEFB %00000001               ; }
 $761B DEFB $00,$00,$00,$00,$C0,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7621 DEFB %10000001               ; {#UDG(#PC)
 $7622 DEFB %10000000               ; }
 $7623 DEFB $06,$06,$07,$06,$06,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7629 DEFB %10000000               ; {#UDG(#PC)
 $762A DEFB %00000000               ; }
 $762B DEFB $C0,$C0,$C0,$C0,$C0,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7631 DEFB %11111111               ; {#UDG(#PC)
 $7632 DEFB %11111111               ; }
 $7633 DEFB $FF,$FF,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7639 DEFB %00000000               ; {#UDG(#PC)
 $763A DEFB %00001111               ; }
 $763B DEFB $0F,$03,$03,$03,$03,$03
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7641 DEFB %00000000               ; {#UDG(#PC)
 $7642 DEFB %11011011               ; }
 $7643 DEFB $DB,$1B,$1B,$1B,$1B,$1B
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7649 DEFB %00000000               ; {#UDG(#PC)
 $764A DEFB %11111101               ; }
 $764B DEFB $FD,$6D,$6D,$6D,$6D,$6D
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7651 DEFB %00000000               ; {#UDG(#PC)
 $7652 DEFB %11110000               ; }
 $7653 DEFB $F0,$80,$E0,$80,$F0,$F0
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7659 DEFB %00000000               ; {#UDG(#PC)
 $765A DEFB %00011000               ; }
 $765B DEFB $18,$00,$00,$18,$18,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7661 DEFB %11110000               ; {#UDG(#PC)
 $7662 DEFB %11111100               ; }
 $7663 DEFB $FE,$FE,$FF,$FF,$FF,$FF
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7669 DEFB %01111111               ; {#UDG(#PC)
 $766A DEFB %01111111               ; }
 $766B DEFB $6D,$6D,$6D,$6D,$6D,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7671 DEFB %10110110               ; {#UDG(#PC)
 $7672 DEFB %10110110               ; }
 $7673 DEFB $B6,$B6,$B6,$B7,$B7,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7679 DEFB %00011111               ; {#UDG(#PC)
 $767A DEFB %00011111               ; }
 $767B DEFB $18,$1E,$18,$DF,$DF,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7681 DEFB %00111100               ; {#UDG(#PC)
 $7682 DEFB %01111110               ; }
 $7683 DEFB $70,$3C,$0E,$7E,$3C,$00
; Tile ID: "#N(#EVAL((#PC - $74B1) / $08))".
 $7689 DEFB %11111111               ; {#UDG(#PC)
 $768A DEFB %11111111               ; }
 $768B DEFB $FF,$FF,$FE,$FE,$FC,$F0

; Sidebar Layout
@label=SidebarLayoutData
b$7691 DEFB $01,$30,$31,$32,$33,$34,$30,$36 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7699 DEFB $30,$00,$00,$00,$35,$00,$00,$30 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76A1 DEFB $30,$30,$30,$30,$30,$30,$30,$30 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76A9 DEFB $30,$00,$00,$00,$00,$00,$00,$30 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76B1 DEFB $0C,$30,$37,$38,$39,$3A,$30,$3B ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76B9 DEFB $01,$02,$03,$04,$05,$06,$07,$08 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76C1 DEFB $09,$00,$00,$00,$00,$00,$00,$14 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76C9 DEFB $0A,$00,$00,$00,$00,$00,$00,$15 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76D1 DEFB $0B,$00,$00,$00,$00,$00,$00,$16 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76D9 DEFB $0C,$0D,$0E,$0F,$10,$11,$12,$13 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76E1 DEFB $01,$30,$30,$30,$36,$01,$00,$36 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76E9 DEFB $30,$30,$30,$30,$30,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76F1 DEFB $30,$30,$30,$30,$30,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $76F9 DEFB $30,$30,$30,$30,$30,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7701 DEFB $0C,$30,$30,$30,$3B,$0C,$00,$3B ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7709 DEFB $17,$18,$00,$00,$00,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7711 DEFB $19,$1A,$23,$24,$25,$25,$26,$27 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7719 DEFB $1B,$1C,$00,$00,$00,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7721 DEFB $1D,$1E,$28,$29,$25,$25,$2A,$2B ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7729 DEFB $1F,$20,$00,$00,$00,$00,$00,$00 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7731 DEFB $21,$22,$2C,$2D,$25,$25,$2E,$2F ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7739 DEFB $01,$00,$00,$00,$00,$00,$00,$36 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7741 DEFB $30,$00,$00,$00,$00,$00,$00,$30 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||
 $7749 DEFB $0C,$00,$00,$00,$00,$00,$00,$3B ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(#PC + n) * $08)||

; Sidebar Attributes
@label=SidebarAttributes
b$7751 DEFB $42,$42,$56,$56,$56,$56,$42,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7759 DEFB $42,$47,$47,$47,$47,$47,$47,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7761 DEFB $42,$42,$42,$42,$42,$42,$42,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7769 DEFB $42,$47,$47,$47,$47,$47,$47,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7771 DEFB $42,$42,$56,$56,$56,$56,$42,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7779 DEFB $45,$45,$45,$45,$45,$45,$45,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7781 DEFB $45,$47,$47,$47,$47,$47,$47,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7789 DEFB $45,$47,$47,$47,$47,$47,$47,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7791 DEFB $45,$47,$47,$47,$47,$47,$47,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7799 DEFB $45,$45,$45,$45,$45,$45,$45,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77A1 DEFB $47,$47,$47,$47,$47,$41,$4E,$41 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77A9 DEFB $47,$47,$47,$47,$47,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77B1 DEFB $47,$47,$47,$47,$47,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77B9 DEFB $47,$47,$47,$47,$47,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77C1 DEFB $47,$47,$47,$47,$47,$41,$4F,$41 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77C9 DEFB $4F,$4F,$44,$44,$44,$46,$46,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77D1 DEFB $4F,$4F,$4E,$4E,$4E,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77D9 DEFB $4F,$4F,$42,$42,$45,$45,$45,$45 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77E1 DEFB $4F,$4F,$4E,$4E,$4E,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77E9 DEFB $4F,$4F,$44,$44,$44,$46,$42,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77F1 DEFB $4F,$4F,$4E,$4E,$4E,$4E,$4E,$4E ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $77F9 DEFB $42,$57,$57,$57,$57,$57,$57,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7801 DEFB $42,$57,$57,$57,$57,$57,$57,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||
 $7809 DEFB $42,$57,$57,$57,$57,$57,$57,$42 ; #FOR($00,$07)||n|#UDG($74B1 +
                                            ; #PEEK(n + #PC - $C0) *
                                            ; $08,attr=#PEEK(#PC + n))||

; Map Points
@label=MapPoints
b$7811 DEFB $05,$22,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7814 DEFB $06,$23,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7817 DEFB $06,$2C,$40 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $781A DEFB $06,$54,$41 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $781D DEFB $06,$60,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7820 DEFB $07,$9C,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7823 DEFB $08,$38,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7826 DEFB $08,$50,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7829 DEFB $09,$B0,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $782C DEFB $0A,$14,$42 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $782F DEFB $0A,$9A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7832 DEFB $0A,$B4,$43 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7835 DEFB $0B,$70,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7838 DEFB $0B,$74,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $783B DEFB $0C,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $783E DEFB $0D,$70,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7841 DEFB $0E,$7C,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7844 DEFB $0F,$1C,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7847 DEFB $10,$28,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $784A DEFB $10,$72,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $784D DEFB $12,$2E,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7850 DEFB $12,$60,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7853 DEFB $13,$3C,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7856 DEFB $14,$18,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7859 DEFB $14,$22,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $785C DEFB $14,$50,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $785F DEFB $14,$90,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7862 DEFB $16,$32,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7865 DEFB $17,$2E,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7868 DEFB $17,$8A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $786B DEFB $18,$1E,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $786E DEFB $18,$28,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7871 DEFB $18,$44,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7874 DEFB $18,$56,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7877 DEFB $18,$A0,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $787A DEFB $1A,$16,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $787D DEFB $1A,$2C,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7880 DEFB $1A,$78,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7883 DEFB $1B,$32,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7886 DEFB $1C,$2A,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7889 DEFB $1C,$68,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $788C DEFB $1D,$26,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $788F DEFB $1D,$8E,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7892 DEFB $1E,$1C,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7895 DEFB $1E,$30,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7898 DEFB $1E,$44,$44 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $789B DEFB $1E,$88,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $789E DEFB $1F,$12,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78A1 DEFB $20,$2A,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78A4 DEFB $20,$3A,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78A7 DEFB $20,$52,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78AA DEFB $20,$90,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78AD DEFB $22,$5C,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78B0 DEFB $23,$50,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78B3 DEFB $23,$62,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78B6 DEFB $24,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78B9 DEFB $25,$56,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78BC DEFB $25,$5A,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78BF DEFB $25,$80,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78C2 DEFB $25,$84,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78C5 DEFB $26,$14,$45 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78C8 DEFB $26,$A8,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78CB DEFB $27,$4E,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78CE DEFB $27,$5E,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78D1 DEFB $27,$86,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78D4 DEFB $28,$28,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78D7 DEFB $28,$40,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78DA DEFB $28,$70,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78DD DEFB $28,$82,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78E0 DEFB $29,$B2,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78E3 DEFB $2A,$10,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78E6 DEFB $2A,$54,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78E9 DEFB $2A,$86,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78EC DEFB $2A,$8C,$46 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78EF DEFB $2A,$AC,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78F2 DEFB $2B,$5D,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78F5 DEFB $2B,$BA,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78F8 DEFB $2C,$26,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78FB DEFB $2C,$30,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $78FE DEFB $2C,$B0,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7901 DEFB $2E,$8A,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7904 DEFB $30,$60,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7907 DEFB $31,$84,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $790A DEFB $31,$8C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $790D DEFB $31,$94,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7910 DEFB $31,$B4,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7913 DEFB $32,$34,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7916 DEFB $32,$46,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7919 DEFB $32,$9A,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $791C DEFB $33,$54,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $791F DEFB $33,$90,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7922 DEFB $33,$A0,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7925 DEFB $34,$28,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7928 DEFB $34,$4E,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $792B DEFB $34,$6E,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $792E DEFB $34,$88,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7931 DEFB $34,$98,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7934 DEFB $36,$48,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7937 DEFB $36,$92,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $793A DEFB $36,$9E,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $793D DEFB $36,$B0,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7940 DEFB $37,$10,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7943 DEFB $37,$58,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7946 DEFB $37,$9A,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7949 DEFB $38,$28,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $794C DEFB $38,$50,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $794F DEFB $38,$60,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7952 DEFB $38,$78,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7955 DEFB $38,$8C,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7958 DEFB $38,$96,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $795B DEFB $39,$18,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $795E DEFB $39,$A0,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7961 DEFB $3A,$34,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7964 DEFB $3A,$64,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7967 DEFB $3A,$9C,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $796A DEFB $3B,$96,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $796D DEFB $3C,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7970 DEFB $3D,$24,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7973 DEFB $3D,$68,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7976 DEFB $3D,$9A,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7979 DEFB $3D,$9E,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $797C DEFB $3E,$14,$47 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $797F DEFB $3E,$42,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7982 DEFB $3E,$54,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7985 DEFB $3E,$6C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7988 DEFB $3E,$A0,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $798B DEFB $3E,$B4,$48 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $798E DEFB $3F,$10,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7991 DEFB $3F,$32,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7994 DEFB $3F,$98,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7997 DEFB $40,$20,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $799A DEFB $40,$70,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $799D DEFB $41,$2A,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79A0 DEFB $41,$4C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79A3 DEFB $41,$74,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79A6 DEFB $42,$1A,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79A9 DEFB $42,$3A,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79AC DEFB $42,$78,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79AF DEFB $43,$41,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79B2 DEFB $43,$7C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79B5 DEFB $44,$30,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79B8 DEFB $44,$54,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79BB DEFB $45,$12,$01 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79BE DEFB $45,$24,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79C1 DEFB $45,$7E,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79C4 DEFB $46,$44,$49 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79C7 DEFB $46,$82,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79CA DEFB $47,$4E,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79CD DEFB $48,$84,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79D0 DEFB $48,$9C,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79D3 DEFB $49,$18,$08 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79D6 DEFB $4A,$28,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79D9 DEFB $4A,$38,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79DC DEFB $4A,$62,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79DF DEFB $4A,$7C,$4A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79E2 DEFB $4B,$6E,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79E5 DEFB $4C,$48,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79E8 DEFB $4D,$1A,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79EB DEFB $4D,$66,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79EE DEFB $4D,$76,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79F1 DEFB $4E,$24,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79F4 DEFB $4F,$2C,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79F7 DEFB $50,$3A,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79FA DEFB $50,$60,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $79FD DEFB $50,$72,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A00 DEFB $51,$14,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A03 DEFB $51,$6C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A06 DEFB $51,$7E,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A09 DEFB $53,$22,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A0C DEFB $53,$74,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A0F DEFB $54,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A12 DEFB $55,$30,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A15 DEFB $55,$84,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A18 DEFB $56,$62,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A1B DEFB $56,$7A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A1E DEFB $56,$94,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A21 DEFB $57,$6C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A24 DEFB $57,$8C,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A27 DEFB $58,$12,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A2A DEFB $58,$88,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A2D DEFB $58,$9E,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A30 DEFB $59,$50,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A33 DEFB $59,$72,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A36 DEFB $5A,$16,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A39 DEFB $5A,$82,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A3C DEFB $5B,$5E,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A3F DEFB $5C,$30,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A42 DEFB $5C,$58,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A45 DEFB $5C,$68,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A48 DEFB $5C,$90,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A4B DEFB $5D,$4A,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A4E DEFB $5D,$52,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A51 DEFB $5D,$76,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A54 DEFB $5D,$9A,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A57 DEFB $5E,$84,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A5A DEFB $5E,$B4,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A5D DEFB $60,$28,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A60 DEFB $60,$40,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A63 DEFB $60,$7A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A66 DEFB $60,$9E,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A69 DEFB $61,$36,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A6C DEFB $61,$5A,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A6F DEFB $61,$76,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A72 DEFB $61,$8E,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A75 DEFB $62,$52,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A78 DEFB $63,$84,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A7B DEFB $64,$8A,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A7E DEFB $64,$96,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A81 DEFB $65,$20,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A84 DEFB $65,$48,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A87 DEFB $65,$6C,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A8A DEFB $65,$7C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A8D DEFB $66,$2A,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A90 DEFB $66,$2C,$4B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A93 DEFB $66,$3A,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A96 DEFB $66,$56,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A99 DEFB $66,$5C,$4C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A9C DEFB $66,$84,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7A9F DEFB $67,$2C,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AA2 DEFB $67,$5A,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AA5 DEFB $67,$98,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AA8 DEFB $68,$18,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AAB DEFB $68,$34,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AAE DEFB $68,$62,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AB1 DEFB $68,$90,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AB4 DEFB $69,$28,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AB7 DEFB $69,$6C,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ABA DEFB $6A,$3E,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ABD DEFB $6A,$84,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AC0 DEFB $6A,$9E,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AC3 DEFB $6B,$68,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AC6 DEFB $6B,$92,$04 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AC9 DEFB $6C,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ACC DEFB $6D,$20,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ACF DEFB $6E,$2E,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AD2 DEFB $6E,$58,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AD5 DEFB $6F,$26,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AD8 DEFB $6F,$3E,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ADB DEFB $70,$1A,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7ADE DEFB $71,$38,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AE1 DEFB $71,$48,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AE4 DEFB $72,$30,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AE7 DEFB $72,$74,$4D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AEA DEFB $74,$60,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AED DEFB $74,$9C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AF0 DEFB $75,$6C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AF3 DEFB $75,$84,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AF6 DEFB $76,$0C,$4E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AF9 DEFB $76,$58,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AFC DEFB $76,$90,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7AFF DEFB $76,$B4,$4F ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B02 DEFB $78,$28,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B05 DEFB $78,$3C,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B08 DEFB $78,$98,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B0B DEFB $79,$4C,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B0E DEFB $79,$84,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B11 DEFB $7A,$8E,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B14 DEFB $7B,$7C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B17 DEFB $7C,$26,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B1A DEFB $7C,$38,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B1D DEFB $7C,$8C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B20 DEFB $7C,$A8,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B23 DEFB $7D,$58,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B26 DEFB $7D,$7C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B29 DEFB $7E,$16,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B2C DEFB $7E,$8A,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B2F DEFB $7E,$94,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B32 DEFB $7F,$20,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B35 DEFB $7F,$48,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B38 DEFB $7F,$70,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B3B DEFB $7F,$74,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B3E DEFB $7F,$9C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B41 DEFB $80,$80,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B44 DEFB $81,$28,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B47 DEFB $81,$94,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B4A DEFB $82,$0C,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B4D DEFB $82,$1A,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B50 DEFB $82,$70,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B53 DEFB $82,$9A,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B56 DEFB $83,$28,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B59 DEFB $83,$8A,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B5C DEFB $84,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B5F DEFB $85,$38,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B62 DEFB $85,$95,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B65 DEFB $86,$16,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B68 DEFB $86,$7C,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B6B DEFB $87,$26,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B6E DEFB $88,$1E,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B71 DEFB $88,$30,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B74 DEFB $88,$58,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B77 DEFB $88,$68,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B7A DEFB $88,$8A,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B7D DEFB $89,$A8,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B80 DEFB $8A,$74,$50 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B83 DEFB $8A,$93,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B86 DEFB $8B,$1C,$0B ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B89 DEFB $8B,$48,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B8C DEFB $8C,$B8,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B8F DEFB $8D,$36,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B92 DEFB $8D,$9C,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B95 DEFB $8E,$2A,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B98 DEFB $8E,$50,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B9B DEFB $8E,$9C,$51 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7B9E DEFB $8E,$A6,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BA1 DEFB $8E,$B4,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BA4 DEFB $8F,$22,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BA7 DEFB $90,$34,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BAA DEFB $90,$60,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BAD DEFB $90,$88,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BB0 DEFB $91,$24,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BB3 DEFB $91,$70,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BB6 DEFB $92,$0C,$52 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BB9 DEFB $92,$36,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BBC DEFB $92,$40,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BBF DEFB $92,$AC,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BC2 DEFB $93,$2E,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BC5 DEFB $93,$B4,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BC8 DEFB $94,$28,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BCB DEFB $94,$80,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BCE DEFB $95,$30,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BD1 DEFB $95,$6E,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BD4 DEFB $95,$90,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BD7 DEFB $95,$A4,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BDA DEFB $96,$34,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BDD DEFB $96,$44,$53 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BE0 DEFB $96,$84,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BE3 DEFB $97,$22,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BE6 DEFB $97,$76,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BE9 DEFB $97,$AC,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BEC DEFB $98,$2C,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BEF DEFB $98,$50,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BF2 DEFB $98,$68,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BF5 DEFB $98,$B6,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BF8 DEFB $99,$36,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BFB DEFB $99,$98,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7BFE DEFB $99,$A4,$0A ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C01 DEFB $9A,$28,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C04 DEFB $9A,$7C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C07 DEFB $9B,$3A,$03 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C0A DEFB $9B,$8A,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C0D DEFB $9C,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C10 DEFB $9D,$58,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C13 DEFB $9D,$68,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C16 DEFB $9E,$7C,$54 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C19 DEFB $9E,$94,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C1C DEFB $9F,$10,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C1F DEFB $9F,$84,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C22 DEFB $A0,$40,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C25 DEFB $A0,$5C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C28 DEFB $A0,$78,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C2B DEFB $A1,$22,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C2E DEFB $A1,$72,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C31 DEFB $A2,$62,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C34 DEFB $A2,$88,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C37 DEFB $A2,$A4,$55 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C3A DEFB $A3,$98,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C3D DEFB $A4,$30,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C40 DEFB $A4,$60,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C43 DEFB $A5,$68,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C46 DEFB $A5,$6E,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C49 DEFB $A5,$8C,$06 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C4C DEFB $A6,$14,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C4F DEFB $A6,$76,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C52 DEFB $A7,$4E,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C55 DEFB $A7,$B6,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C58 DEFB $A8,$20,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C5B DEFB $A8,$48,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C5E DEFB $A8,$54,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C61 DEFB $A8,$72,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C64 DEFB $A9,$4A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C67 DEFB $AA,$56,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C6A DEFB $AA,$78,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C6D DEFB $AB,$1C,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C70 DEFB $AB,$3C,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C73 DEFB $AB,$4E,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C76 DEFB $AB,$80,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C79 DEFB $AB,$9E,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C7C DEFB $AC,$48,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C7F DEFB $AC,$B0,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C82 DEFB $AD,$56,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C85 DEFB $AE,$0C,$0E ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C88 DEFB $AE,$2E,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C8B DEFB $AE,$4C,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C8E DEFB $AF,$52,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C91 DEFB $AF,$84,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C94 DEFB $B0,$48,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C97 DEFB $B0,$8A,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C9A DEFB $B1,$18,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7C9D DEFB $B1,$74,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CA0 DEFB $B2,$34,$56 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CA3 DEFB $B2,$50,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CA6 DEFB $B2,$8E,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CA9 DEFB $B3,$4A,$0D ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CAC DEFB $B4,$00,$20 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CAF DEFB $B5,$92,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CB2 DEFB $B6,$64,$57 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CB5 DEFB $B8,$20,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CB8 DEFB $B8,$46,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CBB DEFB $B8,$56,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CBE DEFB $B8,$B0,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CC1 DEFB $B9,$0C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CC4 DEFB $B9,$2C,$0C ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CC7 DEFB $BA,$0C,$58 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CCA DEFB $BA,$8C,$59 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CCD DEFB $BB,$1C,$05 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CD0 DEFB $BB,$7A,$02 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).
 $7CD3 DEFB $BC,$9A,$09 ; Map Point #N((#PC - $7811) / $03, $03, $03):
                        ; #SPRITENAME(#PEEK(#PC + $02) - $01).

; Sprite: Car
;
; .
;
; .
;
; Frame #N$01.
b$7CD6 DEFB $11                 ; Width = #N(#PEEK(#PC)) bytes.
 $7CD7 DEFB %00000010,%01000000 ; {#CAR$00(car-01*)
 $7CD9 DEFB %01111011,%11011110 ;
 $7CDB DEFB %01110111,%11101110 ;
 $7CDD DEFB %01110100,%00101110 ;
 $7CDF DEFB %01110111,%11101110 ;
 $7CE1 DEFB %01110100,%00101110 ;
 $7CE3 DEFB %00001111,%11110000 ;
 $7CE5 DEFB %00001100,%00110000 ;
 $7CE7 DEFB %00001100,%00110000 ;
 $7CE9 DEFB %00000110,%01100000 ;
 $7CEB DEFB %00000011,%11000000 ;
 $7CED DEFB %00011011,%11011000 ;
 $7CEF DEFB %00011011,%11011000 ;
 $7CF1 DEFB %00011011,%11011000 ;
 $7CF3 DEFB %00011011,%11011000 ;
 $7CF5 DEFB %00000001,%10000000 ;
 $7CF7 DEFB %00000000,%00000000 ; }
; Frame #N$02.
 $7CF9 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7CFA DEFB %00000000,%00110000 ; {#CAR$01(car-02*)
 $7CFC DEFB %00000010,%01111000 ;
 $7CFE DEFB %00010111,%10111000 ;
 $7D00 DEFB %00001110,%10111000 ;
 $7D02 DEFB %11011001,%11011000 ;
 $7D04 DEFB %11010111,%01010000 ;
 $7D06 DEFB %11101100,%11110000 ;
 $7D08 DEFB %11110111,%00010000 ;
 $7D0A DEFB %01101100,%00110000 ;
 $7D0C DEFB %00001100,%00100110 ;
 $7D0E DEFB %00000111,%01110110 ;
 $7D10 DEFB %00000001,%11110111 ;
 $7D12 DEFB %00000010,%11111011 ;
 $7D14 DEFB %00000111,%01111010 ;
 $7D16 DEFB %00000011,%00111000 ;
 $7D18 DEFB %00000011,%10110000 ;
 $7D1A DEFB %00000001,%00000000 ; }
; Frame #N$03.
 $7D1C DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D1D DEFB %00000000,%11100000 ; {#CAR$02(car-03*)
 $7D1F DEFB %00000001,%11110000 ;
 $7D21 DEFB %00001000,%11110000 ;
 $7D23 DEFB %00001111,%01110000 ;
 $7D25 DEFB %00111101,%10100000 ;
 $7D27 DEFB %00011011,%11100000 ;
 $7D29 DEFB %00010110,%11110000 ;
 $7D2B DEFB %01011101,%10110010 ;
 $7D2D DEFB %11101111,%00010111 ;
 $7D2F DEFB %11110110,%00010011 ;
 $7D31 DEFB %11111111,%00111001 ;
 $7D33 DEFB %01110011,%11111100 ;
 $7D35 DEFB %00000000,%00111110 ;
 $7D37 DEFB %00000000,%10011110 ;
 $7D39 DEFB %00000001,%11001100 ;
 $7D3B DEFB %00000000,%11100000 ;
 $7D3D DEFB %00000000,%01000000 ; }
; Frame #N$04.
 $7D3F DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D40 DEFB %00001111,%00000000 ; {#CAR$03(car-04*)
 $7D42 DEFB %00001111,%10000000 ;
 $7D44 DEFB %00000011,%10000000 ;
 $7D46 DEFB %00101101,%00000000 ;
 $7D48 DEFB %00011010,%11000000 ;
 $7D4A DEFB %00110111,%11100100 ;
 $7D4C DEFB %01110101,%00101111 ;
 $7D4E DEFB %00101101,%00110111 ;
 $7D50 DEFB %00111010,%00011001 ;
 $7D52 DEFB %01001110,%00111100 ;
 $7D54 DEFB %11110010,%11111111 ;
 $7D56 DEFB %11111111,%10111111 ;
 $7D58 DEFB %01111000,%00001110 ;
 $7D5A DEFB %00000000,%01110000 ;
 $7D5C DEFB %00000000,%01111100 ;
 $7D5E DEFB %00000000,%00011000 ;
 $7D60 DEFB %00000000,%00000000 ; }
; Frame #N$05.
 $7D62 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D63 DEFB %00000000,%00000000 ; {#CAR$04(car-05*)
 $7D65 DEFB %01111100,%00000000 ;
 $7D67 DEFB %01111100,%00000000 ;
 $7D69 DEFB %01111100,%00011110 ;
 $7D6B DEFB %01000011,%10011110 ;
 $7D6D DEFB %00111111,%11000000 ;
 $7D6F DEFB %11101010,%01111110 ;
 $7D71 DEFB %01101010,%00111111 ;
 $7D73 DEFB %01101010,%00111111 ;
 $7D75 DEFB %11101010,%01111110 ;
 $7D77 DEFB %00111111,%11000000 ;
 $7D79 DEFB %01000011,%10011110 ;
 $7D7B DEFB %01111100,%00011110 ;
 $7D7D DEFB %01111100,%00000000 ;
 $7D7F DEFB %01111100,%00000000 ;
 $7D81 DEFB %00000000,%00000000 ;
 $7D83 DEFB %00000000,%00000000 ; }
; Frame #N$06.
 $7D85 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D86 DEFB %00000000,%00011000 ; {#CAR$05(car-06*)
 $7D88 DEFB %00000000,%01111100 ;
 $7D8A DEFB %00000000,%01110000 ;
 $7D8C DEFB %01111000,%00001110 ;
 $7D8E DEFB %11111111,%10111111 ;
 $7D90 DEFB %11110010,%11111111 ;
 $7D92 DEFB %01001110,%00111100 ;
 $7D94 DEFB %00111010,%00011001 ;
 $7D96 DEFB %00101101,%00110111 ;
 $7D98 DEFB %01110101,%00101110 ;
 $7D9A DEFB %00110111,%11100100 ;
 $7D9C DEFB %00011010,%11000000 ;
 $7D9E DEFB %00101101,%00000000 ;
 $7DA0 DEFB %00000011,%10000000 ;
 $7DA2 DEFB %00001111,%10000000 ;
 $7DA4 DEFB %00001111,%00000000 ;
 $7DA6 DEFB %00000000,%00000000 ; }
; Frame #N$07.
 $7DA8 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DA9 DEFB %00000000,%01000000 ; {#CAR$06(car-07*)
 $7DAB DEFB %00000000,%11100000 ;
 $7DAD DEFB %00000001,%11001100 ;
 $7DAF DEFB %00000000,%10011110 ;
 $7DB1 DEFB %00000000,%00111110 ;
 $7DB3 DEFB %01110011,%11111100 ;
 $7DB5 DEFB %11111111,%00111001 ;
 $7DB7 DEFB %11110110,%00010011 ;
 $7DB9 DEFB %11101111,%00010111 ;
 $7DBB DEFB %01011101,%10110010 ;
 $7DBD DEFB %00010110,%11110000 ;
 $7DBF DEFB %00011011,%11100000 ;
 $7DC1 DEFB %00111101,%10100000 ;
 $7DC3 DEFB %00001111,%01110000 ;
 $7DC5 DEFB %00001000,%11110000 ;
 $7DC7 DEFB %00000001,%11110000 ;
 $7DC9 DEFB %00000000,%11100000 ; }
; Frame #N$08.
 $7DCB DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DCC DEFB %00000001,%00000000 ; {#CAR$07(car-08*)
 $7DCE DEFB %00000001,%10110000 ;
 $7DD0 DEFB %00000011,%10111000 ;
 $7DD2 DEFB %00000111,%01111010 ;
 $7DD4 DEFB %00000010,%11111011 ;
 $7DD6 DEFB %00000001,%11110111 ;
 $7DD8 DEFB %00000111,%01110110 ;
 $7DDA DEFB %00001100,%00100110 ;
 $7DDC DEFB %01101100,%00110000 ;
 $7DDE DEFB %11110111,%00010000 ;
 $7DE0 DEFB %11101100,%11110000 ;
 $7DE2 DEFB %11010111,%01010000 ;
 $7DE4 DEFB %11011001,%11011000 ;
 $7DE6 DEFB %00001110,%10111000 ;
 $7DE8 DEFB %00010111,%10111000 ;
 $7DEA DEFB %00000010,%01111000 ;
 $7DEC DEFB %00000000,%00110000 ; }
; Frame #N$09.
 $7DEE DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DEF DEFB %00000001,%10000000 ; {#CAR$08(car-09*)
 $7DF1 DEFB %00011011,%11011000 ;
 $7DF3 DEFB %00011011,%11011000 ;
 $7DF5 DEFB %00011011,%11011000 ;
 $7DF7 DEFB %00011011,%11011000 ;
 $7DF9 DEFB %00000011,%11000000 ;
 $7DFB DEFB %00000110,%01100000 ;
 $7DFD DEFB %00001100,%00110000 ;
 $7DFF DEFB %00001100,%00110000 ;
 $7E01 DEFB %00001111,%11110000 ;
 $7E03 DEFB %01110100,%00101110 ;
 $7E05 DEFB %01110111,%11101110 ;
 $7E07 DEFB %01110100,%00101110 ;
 $7E09 DEFB %11111111,%11101110 ;
 $7E0B DEFB %01111011,%11011110 ;
 $7E0D DEFB %00000010,%01000000 ;
 $7E0F DEFB %00000000,%00000000 ; }
; Frame #N$0A.
 $7E11 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E12 DEFB %00000000,%10000000 ; {#CAR$09(car-0A*)
 $7E14 DEFB %00001101,%11000000 ;
 $7E16 DEFB %00011100,%11000000 ;
 $7E18 DEFB %01011110,%11100000 ;
 $7E1A DEFB %11011111,%01000000 ;
 $7E1C DEFB %11101111,%10000000 ;
 $7E1E DEFB %01101110,%11100000 ;
 $7E20 DEFB %01100100,%00110000 ;
 $7E22 DEFB %00001100,%00110110 ;
 $7E24 DEFB %00001000,%11101111 ;
 $7E26 DEFB %00001111,%00110111 ;
 $7E28 DEFB %00001010,%11101011 ;
 $7E2A DEFB %00011011,%10011011 ;
 $7E2C DEFB %00011101,%01110000 ;
 $7E2E DEFB %00011101,%11101000 ;
 $7E30 DEFB %00011110,%01000000 ;
 $7E32 DEFB %00001100,%00000000 ; }
; Frame #N$0B.
 $7E34 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E35 DEFB %00000010,%00000000 ; {#CAR$0A(car-0B*)
 $7E37 DEFB %00000111,%00000000 ;
 $7E39 DEFB %00110011,%10000000 ;
 $7E3B DEFB %01111001,%00000000 ;
 $7E3D DEFB %01111100,%00000000 ;
 $7E3F DEFB %00111111,%11001110 ;
 $7E41 DEFB %10011100,%11111111 ;
 $7E43 DEFB %11001000,%01101111 ;
 $7E45 DEFB %11101000,%11110111 ;
 $7E47 DEFB %01001101,%10111010 ;
 $7E49 DEFB %00001111,%01101000 ;
 $7E4B DEFB %00000111,%11011000 ;
 $7E4D DEFB %00000101,%10111100 ;
 $7E4F DEFB %00001110,%11110000 ;
 $7E51 DEFB %00001111,%00010000 ;
 $7E53 DEFB %00001111,%10000000 ;
 $7E55 DEFB %00000111,%00000000 ; }
; Frame #N$0C.
 $7E57 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E58 DEFB %00011000,%00000000 ; {#CAR$0B(car-0C*)
 $7E5A DEFB %00111110,%00000000 ;
 $7E5C DEFB %00001110,%00000000 ;
 $7E5E DEFB %01110000,%00011110 ;
 $7E60 DEFB %11111101,%11111111 ;
 $7E62 DEFB %11111111,%01001111 ;
 $7E64 DEFB %00111100,%01110010 ;
 $7E66 DEFB %10011000,%10101100 ;
 $7E68 DEFB %11101100,%10110100 ;
 $7E6A DEFB %11110100,%10101110 ;
 $7E6C DEFB %00100111,%11101100 ;
 $7E6E DEFB %00000011,%01011000 ;
 $7E70 DEFB %00000000,%10110100 ;
 $7E72 DEFB %00000001,%11000000 ;
 $7E74 DEFB %00000001,%11110000 ;
 $7E76 DEFB %00000000,%11110000 ;
 $7E78 DEFB %00000000,%00000000 ; }
; Frame #N$0D.
 $7E7A DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E7B DEFB %00000000,%00000000 ; {#CAR$0C(car-0D*)
 $7E7D DEFB %00000000,%00111110 ;
 $7E7F DEFB %00000000,%00111110 ;
 $7E81 DEFB %01111000,%00111110 ;
 $7E83 DEFB %01111001,%11000010 ;
 $7E85 DEFB %00000011,%11111100 ;
 $7E87 DEFB %01111110,%01010111 ;
 $7E89 DEFB %11111100,%01010110 ;
 $7E8B DEFB %11111100,%01010110 ;
 $7E8D DEFB %01111110,%01010111 ;
 $7E8F DEFB %00000011,%11111100 ;
 $7E91 DEFB %01111001,%11000010 ;
 $7E93 DEFB %01111000,%00111110 ;
 $7E95 DEFB %00000000,%00111110 ;
 $7E97 DEFB %00000000,%00111110 ;
 $7E99 DEFB %00000000,%00000000 ;
 $7E9B DEFB %00000000,%00000000 ; }
; Frame #N$0E.
 $7E9D DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E9E DEFB %00000000,%11110000 ; {#CAR$0D(car-0E*)
 $7EA0 DEFB %00000001,%11110000 ;
 $7EA2 DEFB %00000001,%11000000 ;
 $7EA4 DEFB %00000000,%10110100 ;
 $7EA6 DEFB %00000011,%01011000 ;
 $7EA8 DEFB %00100111,%11101100 ;
 $7EAA DEFB %01110100,%10101110 ;
 $7EAC DEFB %11101100,%10110100 ;
 $7EAE DEFB %10011000,%01011100 ;
 $7EB0 DEFB %00111100,%01110010 ;
 $7EB2 DEFB %11111111,%01001111 ;
 $7EB4 DEFB %11111101,%11111111 ;
 $7EB6 DEFB %01110000,%00011110 ;
 $7EB8 DEFB %00001110,%00000000 ;
 $7EBA DEFB %00111110,%00000000 ;
 $7EBC DEFB %00011000,%00000000 ;
 $7EBE DEFB %00000000,%00000000 ; }
; Frame #N$0F.
 $7EC0 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7EC1 DEFB %00000111,%00000000 ; {#CAR$0E(car-0F*)
 $7EC3 DEFB %00001111,%10000000 ;
 $7EC5 DEFB %00001111,%00010000 ;
 $7EC7 DEFB %00001110,%11110000 ;
 $7EC9 DEFB %00000101,%10111100 ;
 $7ECB DEFB %00000111,%11011000 ;
 $7ECD DEFB %00001111,%01101000 ;
 $7ECF DEFB %01001101,%10111010 ;
 $7ED1 DEFB %11101000,%11110111 ;
 $7ED3 DEFB %11001000,%01101111 ;
 $7ED5 DEFB %10011100,%11111111 ;
 $7ED7 DEFB %00111111,%11001110 ;
 $7ED9 DEFB %01111100,%00000000 ;
 $7EDB DEFB %01111001,%00000000 ;
 $7EDD DEFB %00110011,%10000000 ;
 $7EDF DEFB %00000111,%00000000 ;
 $7EE1 DEFB %00000010,%00000000 ; }
; Frame #N$10.
 $7EE3 DEFB $11                 ; Height = #N(#PEEK(#PC)) pixels.
 $7EE4 DEFB %00001100,%00000000 ; {#CAR$0F(car-10*)
 $7EE6 DEFB %00011110,%01000000 ;
 $7EE8 DEFB %00011101,%11101000 ;
 $7EEA DEFB %00011101,%01110000 ;
 $7EEC DEFB %00011011,%10011011 ;
 $7EEE DEFB %00001010,%11101011 ;
 $7EF0 DEFB %00001111,%00110111 ;
 $7EF2 DEFB %00001000,%11101111 ;
 $7EF4 DEFB %00001100,%00110110 ;
 $7EF6 DEFB %01100100,%00110000 ;
 $7EF8 DEFB %01101110,%11100000 ;
 $7EFA DEFB %11101111,%10000000 ;
 $7EFC DEFB %11011111,%01000000 ;
 $7EFE DEFB %01011110,%11100000 ;
 $7F00 DEFB %00011101,%11000000 ;
 $7F02 DEFB %00001101,%10000000 ;
 $7F04 DEFB %00000000,%10000000 ; }
; #UDGARRAY*car-01,10;car-02;car-03;car-04;car-05;car-06;car-07;car-08;car-09;car-0A;car-0B;car-0C;car-0D;car-0E;car-0F;car-10(car-ani)

; Sprites Table
@label=SpritesTable
w$7F06 DEFW $7352    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F08 DEFW $7373    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F0A DEFW $7458    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F0C DEFW $7394    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F0E DEFW $73B5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F10 DEFW $73D4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F12 DEFW $73F5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F14 DEFW $7352    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F16 DEFW $7373    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F18 DEFW $7458    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F1A DEFW $7394    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F1C DEFW $73B5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F1E DEFW $73D4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F20 DEFW $7416    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F22 DEFW $7437    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$0000 }
; LIST#

; Player Sprite Table
@label=PlayerSpriteTable
w$7F24 DEFW $7CD6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F26 DEFW $7CF9    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F28 DEFW $7D1C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F2A DEFW $7D3F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F2C DEFW $7D62    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F2E DEFW $7D85    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F30 DEFW $7DA8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F32 DEFW $7DCB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F34 DEFW $7DEE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F36 DEFW $7E11    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F38 DEFW $7E34    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F3A DEFW $7E57    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F3C DEFW $7E7A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F3E DEFW $7E9D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F40 DEFW $7EC0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).
 $7F42 DEFW $7EE3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F24) / $02)) #CARNAME((#PC - $7F24) /
                     ; $02).

; Sprites Table #N$02
;
; This isn't a separate table; it's a continuation of #R$7F06 just, the player sprites have a "special" zero-based
;       reference of their own.
@label=SpritesTable2
w$7F44 DEFW $7F4A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F46 DEFW $7473    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).
 $7F48 DEFW $7494    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $7F06) / $02)) #SPRITENAME((#PC - $7F06)
                     ; / $02).

; Sprite: Cup
b$7F4A DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F4B DEFB %00110111,%11000000 ; {#SPRITE$1F(cup)
 $7F4D DEFB %00001111,%00000000 ;
 $7F4F DEFB %00000110,%00000000 ;
 $7F51 DEFB %00000110,%00000000 ;
 $7F53 DEFB %00000110,%00000000 ;
 $7F55 DEFB %00001111,%00000000 ;
 $7F57 DEFB %00011011,%10000000 ;
 $7F59 DEFB %00111011,%11000000 ;
 $7F5B DEFB %00110111,%11000000 ;
 $7F5D DEFB %01010111,%10100000 ;
 $7F5F DEFB %01010111,%10100000 ;
 $7F61 DEFB %01010111,%10100000 ;
 $7F63 DEFB %10010111,%10010000 ;
 $7F65 DEFB %10010111,%10010000 ;
 $7F67 DEFB %10110111,%11010000 ;
 $7F69 DEFB %11011111,%10110000 ; }

; Data block at 7F6B
b$7F6B DEFB $FF,$FF,$FE,$FC,$FA,$F7,$F4,$F0
 $7F73 DEFB $EB,$E6,$E1,$DA,$D3,$CC,$C4,$BC
 $7F7B DEFB $B3,$AA,$A1,$97,$8C,$82,$77,$6C
 $7F83 DEFB $60,$54,$48,$3C,$30,$24,$17,$0A
 $7F8B DEFB $43,$4F,$50,$59,$52,$49,$47,$48
 $7F93 DEFB $54,$20,$31,$39,$38,$33,$20,$41
 $7F9B DEFB $2E,$43,$2E,$47,$2E,$20,$41,$4C
 $7FA3 DEFB $4C,$20,$52,$49,$47,$48,$54,$53
 $7FAB DEFB $20,$52,$45,$53,$45,$52,$56,$45
 $7FB3 DEFB $44,$77,$2C,$18,$BF,$DD,$7E,$01
 $7FBB DEFB $32,$14,$5F,$DD,$7E,$02,$32,$15
 $7FC3 DEFB $5F,$DD,$7E,$00,$32,$16,$5F,$C9
 $7FCB DEFB $7D,$0F,$0F,$0F,$E6,$1F,$6F,$7C
 $7FD3 DEFB $07,$07,$E6,$E0,$B5,$6F,$7C,$E6
 $7FDB DEFB $07,$08,$7C,$0F,$0F,$0F,$E6,$18
 $7FE3 DEFB $F6,$40,$67,$08,$B4,$67,$C9,$83
 $7FEB DEFB $78,$AC,$78,$1C,$79,$33,$79,$4E
 $7FF3 DEFB $79,$07,$78,$07,$78,$AF,$79,$CE
 $7FFB DEFB $79,$07,$78,$07,$07

i$8000

; Data block at B868
b$B868 DEFB $00

