@org=$4000
@start=$5B80

; Loading screen
;
; #UDGTABLE
; { =h PSSST Loading Screen }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels
 $4020 DEFB $00,$00,$0F,$F1,$EA,$DD,$7B,$BE,$3F,$5D,$2F,$0D,$B3,$45,$8A,$78,$FF,$FF,$E7,$FF,$FC,$00,$03,$00,$00,$00,$00,$FB,$C0,$00,$00,$03 ;
 $4040 DEFB $00,$3F,$F6,$50,$00,$00,$00,$00,$00,$7F,$FE,$00,$00,$00,$00,$00,$41,$55,$57,$EF,$FF,$F8,$00,$00,$00,$01,$FF,$87,$FE,$00,$0F,$80 ;
 $4060 DEFB $03,$FE,$76,$00,$30,$1F,$FF,$0A,$0F,$FF,$FF,$09,$81,$FF,$F8,$0E,$01,$08,$1F,$FF,$7F,$FC,$00,$00,$1E,$00,$F8,$FF,$FF,$FF,$C0,$00 ;
 $4080 DEFB $07,$FA,$91,$06,$3F,$F8,$00,$28,$FF,$84,$07,$D1,$FF,$C0,$04,$20,$00,$04,$55,$FF,$EF,$80,$00,$00,$FF,$06,$01,$FF,$FF,$FF,$FC,$00 ;
 $40A0 DEFB $00,$74,$00,$04,$3F,$FF,$FF,$81,$9F,$FF,$FF,$E2,$FF,$FC,$01,$8C,$E0,$00,$10,$5F,$FF,$FF,$FE,$00,$18,$7C,$FF,$C7,$FF,$F8,$00,$00 ;
 $40C0 DEFB $00,$01,$C0,$00,$0C,$00,$00,$FF,$E7,$C0,$43,$FF,$0C,$00,$FF,$F7,$FF,$80,$E0,$00,$1F,$80,$0F,$98,$0D,$B6,$00,$66,$38,$00,$00,$00 ;
 $40E0 DEFB $04,$3F,$FF,$FF,$FF,$18,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$83,$FF,$E2,$7F,$FF,$FF,$08,$00,$3F,$EC,$30,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$3F,$FD,$F5,$AE,$D6,$EF,$3F,$AA,$D7,$9B,$4D,$92,$75,$FD,$F6,$BB,$EF,$FF,$FF,$00,$03,$80,$00,$00,$00,$1F,$00,$00,$00,$06 ;
 $4140 DEFB $00,$7F,$FD,$DA,$00,$00,$00,$00,$03,$C0,$03,$E0,$00,$00,$00,$00,$14,$AA,$BF,$DF,$FF,$F8,$00,$00,$00,$FF,$FF,$FF,$FF,$07,$FE,$00 ;
 $4160 DEFB $07,$F7,$E8,$00,$60,$7F,$FF,$1E,$1F,$FF,$FF,$1B,$07,$FF,$FF,$1E,$08,$00,$D3,$FF,$BF,$F8,$00,$00,$0C,$71,$FC,$FF,$FF,$FF,$80,$00 ;
 $4180 DEFB $03,$F5,$40,$04,$3F,$F0,$00,$28,$FF,$87,$F8,$31,$FF,$80,$00,$60,$00,$00,$2B,$BF,$DF,$00,$00,$03,$FF,$FF,$87,$FF,$FF,$FF,$F0,$00 ;
 $41A0 DEFB $00,$30,$00,$06,$3F,$FF,$FF,$F0,$47,$FF,$FF,$F2,$7F,$FF,$E0,$CA,$38,$00,$0F,$9F,$FF,$7F,$FF,$00,$18,$78,$7F,$87,$FC,$F8,$00,$00 ;
 $41C0 DEFB $00,$07,$01,$FF,$82,$00,$00,$7F,$E4,$7F,$C3,$FF,$03,$80,$7F,$E7,$FF,$E0,$38,$00,$2F,$01,$F3,$C0,$07,$B6,$00,$6C,$60,$00,$00,$00 ;
 $41E0 DEFB $06,$3F,$FF,$C1,$FF,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E3,$87,$FF,$FF,$18,$00,$7F,$D8,$18,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$3F,$80,$00,$00,$00,$00,$00,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$FF,$FB,$AA,$A9,$01,$57,$72,$44,$09,$9C,$90,$01,$24,$5D,$EB,$EF,$DF,$FF,$FF,$80,$00,$E0,$00,$00,$00,$0C,$00,$00,$00,$06 ;
 $4240 DEFB $00,$FF,$FA,$10,$00,$00,$00,$00,$0E,$00,$00,$38,$00,$00,$00,$00,$02,$0C,$D5,$DF,$FF,$F8,$00,$00,$01,$FF,$FF,$FF,$FF,$3F,$F0,$00 ;
 $4260 DEFB $07,$FD,$42,$00,$C1,$FF,$FF,$14,$3F,$FF,$FF,$16,$1F,$FF,$FF,$E6,$00,$2A,$2E,$FF,$DF,$F8,$00,$01,$FC,$FB,$FE,$7F,$FF,$FF,$00,$00 ;
 $4280 DEFB $03,$DD,$24,$04,$7F,$E1,$FF,$E8,$FF,$C0,$0F,$A1,$FF,$0F,$C0,$40,$04,$81,$5A,$7F,$D0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00 ;
 $42A0 DEFB $00,$18,$00,$02,$1F,$FF,$FF,$FC,$21,$FF,$FF,$F9,$3F,$FF,$F8,$72,$0E,$00,$08,$EF,$FF,$3F,$FF,$00,$30,$F8,$7F,$83,$EC,$78,$00,$00 ;
 $42C0 DEFB $00,$1C,$07,$FF,$E1,$FF,$FC,$3F,$EA,$03,$83,$FF,$38,$70,$7F,$FF,$FF,$F8,$0E,$00,$9E,$07,$FD,$E0,$03,$1C,$00,$DC,$C0,$00,$00,$00 ;
 $42E0 DEFB $02,$1F,$FF,$01,$FF,$7F,$FF,$FF,$5F,$FF,$FF,$F7,$FF,$FF,$FF,$C3,$0F,$FF,$FE,$10,$00,$FF,$D8,$18,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$01,$FF,$F0,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FE,$00 ;
 $4320 DEFB $00,$01,$FF,$F7,$4A,$00,$AA,$57,$DC,$11,$23,$D2,$44,$4A,$11,$BF,$96,$77,$BF,$FF,$FF,$C0,$00,$78,$00,$00,$18,$38,$00,$00,$00,$0C ;
 $4340 DEFB $01,$FF,$EC,$94,$00,$0F,$FF,$F0,$38,$00,$00,$06,$00,$FF,$E0,$00,$01,$52,$2F,$BF,$FF,$FC,$00,$00,$00,$3F,$FF,$FF,$FF,$FE,$00,$00 ;
 $4360 DEFB $07,$FF,$A8,$01,$83,$FF,$FF,$14,$7F,$FE,$1E,$3C,$3F,$FF,$FF,$84,$80,$02,$5B,$FF,$DF,$F0,$00,$00,$FC,$FB,$FE,$7F,$FF,$FE,$00,$00 ;
 $4380 DEFB $03,$F2,$00,$04,$7F,$E1,$00,$08,$FF,$E0,$00,$E1,$FF,$08,$78,$C0,$00,$10,$05,$FF,$8F,$FC,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$03,$0F,$FF,$FF,$FF,$10,$3F,$FF,$FC,$9F,$FF,$FC,$32,$03,$80,$41,$57,$FE,$CF,$F6,$30,$30,$F8,$FD,$83,$CC,$38,$00,$00 ;
 $43C0 DEFB $00,$70,$1F,$FF,$F0,$40,$04,$3F,$EA,$00,$07,$FF,$67,$0C,$3F,$FF,$FF,$FE,$03,$80,$5C,$08,$1E,$78,$00,$0C,$00,$FF,$80,$00,$00,$00 ;
 $43E0 DEFB $03,$1F,$FC,$1C,$FF,$FF,$FF,$FE,$47,$FF,$FF,$93,$FF,$FF,$FF,$87,$0F,$FF,$FE,$30,$00,$FF,$B0,$38,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$0F,$FF,$FE,$00,$00,$3F,$80,$00,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FE,$00,$00,$00,$FF,$FF,$F0 ;
 $4420 DEFB $00,$03,$FF,$F7,$24,$50,$00,$2B,$E0,$80,$04,$D8,$0A,$00,$44,$6B,$69,$9F,$6F,$FF,$FF,$E0,$00,$1F,$00,$00,$38,$70,$00,$00,$00,$18 ;
 $4440 DEFB $01,$FF,$B5,$00,$00,$F8,$00,$1C,$60,$0F,$F8,$3E,$0F,$80,$3E,$00,$48,$20,$BF,$7F,$FF,$FC,$00,$00,$01,$FF,$FF,$FF,$FF,$FE,$00,$00 ;
 $4460 DEFB $07,$FA,$C4,$01,$07,$FF,$FE,$1C,$7F,$F0,$02,$28,$7F,$FF,$FF,$0C,$00,$89,$2F,$BF,$DF,$F0,$00,$00,$3C,$CB,$C6,$7F,$FF,$FF,$C0,$00 ;
 $4480 DEFB $01,$EA,$90,$04,$7F,$E1,$FF,$F8,$7F,$F8,$00,$11,$FF,$0F,$0E,$80,$00,$00,$FB,$FF,$BF,$FF,$80,$00,$1F,$FF,$FF,$FF,$FF,$FF,$80,$00 ;
 $44A0 DEFB $00,$08,$01,$FF,$87,$FF,$FF,$FF,$88,$00,$3F,$FE,$47,$FF,$FE,$11,$80,$E0,$00,$88,$F1,$E3,$80,$48,$30,$D1,$B8,$C7,$8C,$30,$00,$00 ;
 $44C0 DEFB $01,$C0,$7F,$FF,$F8,$7E,$1C,$3F,$EB,$80,$0F,$FF,$A0,$E2,$3F,$F9,$FF,$FF,$80,$E0,$30,$07,$E7,$B0,$00,$00,$00,$06,$00,$00,$00,$00 ;
 $44E0 DEFB $01,$0F,$FF,$E4,$FF,$FF,$FF,$FC,$20,$FF,$FE,$10,$FF,$FF,$FF,$07,$1F,$EB,$FC,$20,$01,$FF,$62,$B8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$C0,$01,$FF,$E0,$01,$FF,$FF,$FF,$80,$03,$FC,$00,$00,$00,$00,$00,$1F,$FF,$FF,$E0,$00,$0F,$F8,$01,$FC ;
 $4520 DEFB $00,$07,$FF,$EE,$80,$04,$08,$20,$CA,$02,$11,$55,$40,$22,$10,$01,$0E,$6A,$BF,$EF,$FF,$F0,$00,$07,$E0,$00,$7C,$E0,$0C,$00,$00,$30 ;
 $4540 DEFB $01,$FF,$9D,$42,$03,$80,$00,$1C,$C0,$7F,$FF,$C4,$38,$00,$03,$C0,$01,$4D,$0B,$1F,$FF,$FC,$00,$00,$0F,$FF,$FF,$FF,$FF,$FE,$00,$00 ;
 $4560 DEFB $07,$FF,$20,$03,$0F,$FF,$FE,$18,$FF,$E0,$01,$68,$FF,$FF,$FF,$18,$00,$02,$0A,$EF,$EF,$E0,$00,$00,$0C,$83,$82,$7F,$FF,$FF,$F0,$00 ;
 $4580 DEFB $00,$F4,$44,$04,$7F,$E0,$00,$18,$7F,$FF,$00,$09,$FF,$81,$E3,$80,$10,$00,$77,$FF,$FF,$FF,$E0,$00,$3F,$BF,$FF,$FF,$FF,$FF,$E0,$00 ;
 $45A0 DEFB $00,$04,$07,$00,$81,$FF,$FF,$FF,$C4,$00,$0F,$FE,$41,$FF,$FF,$11,$E0,$38,$22,$5A,$0F,$E0,$00,$A4,$19,$B3,$30,$C7,$0C,$00,$00,$00 ;
 $45C0 DEFB $07,$01,$FF,$FF,$FC,$43,$F0,$3F,$E7,$E0,$3F,$FE,$20,$1C,$3F,$F4,$7F,$FF,$E0,$38,$40,$08,$7B,$D0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $01,$8F,$F8,$98,$FF,$FF,$FF,$F8,$20,$0F,$E0,$10,$3F,$FF,$FE,$0E,$1F,$E8,$FC,$60,$03,$FF,$65,$D8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$7F,$FD,$5F,$F0,$07,$FF,$F8,$07,$FA,$EA,$AF,$C0,$1F,$FF,$80,$3F,$00,$00,$00,$FF,$80,$01,$FF,$00,$3F,$00,$00,$0F ;
 $4620 DEFB $00,$0F,$FF,$EE,$11,$00,$40,$00,$80,$10,$00,$20,$11,$04,$02,$24,$52,$9E,$F7,$EF,$FF,$F0,$00,$00,$FF,$FF,$7E,$C0,$3E,$00,$00,$60 ;
 $4640 DEFB $03,$FE,$F2,$01,$0E,$00,$00,$69,$81,$FF,$FF,$8C,$60,$00,$00,$70,$00,$00,$57,$E1,$FF,$FC,$00,$00,$7F,$FF,$07,$FF,$FF,$FF,$F0,$00 ;
 $4660 DEFB $07,$FE,$CA,$02,$1F,$FF,$82,$38,$FF,$C0,$01,$58,$FF,$FF,$FE,$10,$00,$00,$8A,$1F,$EF,$E0,$00,$00,$0C,$83,$80,$7F,$FF,$FF,$FC,$00 ;
 $4680 DEFB $00,$EA,$00,$04,$7F,$F0,$00,$04,$3F,$FF,$FE,$09,$FF,$C0,$3C,$06,$00,$00,$3F,$FF,$FF,$FF,$F8,$00,$7C,$3F,$FF,$FF,$FF,$FF,$C0,$00 ;
 $46A0 DEFB $00,$00,$1C,$00,$60,$3F,$FF,$FF,$C3,$80,$07,$FF,$20,$1F,$FF,$93,$F8,$0E,$08,$00,$FF,$C0,$05,$8C,$19,$B3,$00,$C6,$0C,$00,$00,$00 ;
 $46C0 DEFB $0E,$07,$FF,$FF,$FE,$20,$00,$7F,$EF,$FF,$FF,$FE,$F8,$00,$7F,$F4,$1F,$FF,$F8,$0C,$00,$07,$9C,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$87,$FC,$E0,$FF,$FF,$FF,$F0,$78,$00,$00,$3C,$0F,$FF,$FC,$1E,$3F,$C8,$38,$C0,$03,$FE,$C3,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$FD,$76,$AE,$FC,$0F,$E5,$7E,$07,$7E,$B0,$75,$F0,$7F,$FF,$E1,$FF,$E0,$00,$01,$E0,$00,$00,$0F,$E0,$F0,$00,$00,$03 ;
 $4720 DEFB $00,$1F,$FF,$DE,$80,$04,$00,$00,$00,$00,$80,$44,$00,$00,$20,$00,$08,$6D,$6F,$EF,$FF,$F8,$00,$00,$1F,$FF,$FE,$80,$FC,$00,$01,$C0 ;
 $4740 DEFB $03,$FF,$A8,$84,$18,$01,$FF,$8B,$07,$FF,$FF,$88,$C0,$3F,$80,$18,$00,$22,$A9,$5E,$FF,$FC,$00,$00,$3F,$06,$01,$FF,$FF,$FF,$E0,$00 ;
 $4760 DEFB $07,$F5,$00,$02,$1F,$FE,$00,$28,$FF,$87,$FC,$D0,$FF,$F0,$1E,$30,$09,$21,$2A,$EF,$EF,$C0,$00,$00,$3E,$00,$80,$FF,$FF,$FF,$FE,$00 ;
 $4780 DEFB $00,$51,$00,$04,$7F,$FC,$00,$02,$3F,$FF,$FF,$C4,$FF,$F0,$0F,$07,$00,$04,$0F,$9F,$FF,$FF,$FC,$00,$0C,$7F,$FF,$EF,$FF,$FC,$00,$00 ;
 $47A0 DEFB $00,$00,$70,$00,$10,$00,$03,$FF,$E1,$7F,$C3,$FF,$10,$03,$FF,$D3,$FE,$03,$80,$04,$3F,$80,$06,$78,$19,$B6,$00,$66,$18,$00,$00,$00 ;
 $47C0 DEFB $09,$9F,$FF,$FF,$FE,$20,$01,$FF,$DF,$FF,$FF,$FD,$FE,$00,$FF,$F2,$07,$FF,$FE,$7C,$00,$3F,$EE,$70,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$C7,$FC,$41,$FF,$8F,$FF,$80,$CF,$00,$00,$E6,$03,$FF,$F0,$34,$3F,$C4,$09,$80,$00,$7D,$8D,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$43,$FE,$87,$FF,$40,$00,$01,$81,$FC,$0F,$83,$80,$3F,$80,$6C,$7F,$87,$85,$10,$0F,$8D,$85,$F0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $0A,$04,$3F,$FE,$06,$0F,$3F,$0E,$0F,$8F,$9F,$9E,$E7,$3F,$00,$C7,$F8,$40,$00,$38,$E5,$07,$03,$E7,$81,$E1,$E0,$3C,$00,$00,$19,$F0 ;
 $4840 DEFB $76,$80,$43,$FC,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$7F,$84,$04,$05,$70,$00,$7C,$00,$0D,$3E,$1C,$50,$73,$F0,$1B,$03,$C0 ;
 $4860 DEFB $7F,$40,$04,$3F,$C6,$03,$F8,$1F,$80,$0F,$12,$07,$0E,$00,$F0,$78,$40,$24,$D8,$F0,$00,$00,$01,$AF,$E3,$5F,$69,$ED,$C3,$83,$4B,$07 ;
 $4880 DEFB $03,$F2,$80,$63,$C0,$0C,$00,$00,$3F,$FF,$3E,$00,$F0,$00,$00,$00,$41,$16,$DF,$C0,$00,$00,$03,$CF,$FA,$F3,$7F,$7B,$76,$CF,$0D,$DE ;
 $48A0 DEFB $00,$00,$3D,$A0,$04,$00,$00,$3F,$C0,$0E,$38,$C1,$F0,$00,$03,$DD,$EF,$E3,$F0,$00,$00,$03,$FB,$41,$AF,$FF,$FF,$98,$FB,$B8,$00,$00 ;
 $48C0 DEFB $00,$00,$01,$FF,$FB,$50,$00,$1D,$F0,$FF,$FF,$FF,$F1,$80,$00,$00,$00,$00,$00,$00,$01,$00,$FF,$37,$F7,$F9,$8F,$97,$7D,$FE,$F8,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$E0,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8F,$2E,$DC,$D3,$D9,$DD,$89,$80,$00,$80,$00 ;
 $4900 DEFB $00,$63,$FE,$9F,$FE,$40,$00,$07,$00,$07,$F8,$00,$E0,$00,$00,$C8,$7F,$8C,$E7,$58,$00,$F3,$05,$F0,$00,$00,$00,$00,$00,$00,$00,$07 ;
 $4920 DEFB $18,$06,$3F,$F8,$1C,$06,$7E,$0E,$1D,$DF,$DD,$CC,$E7,$7F,$00,$87,$F8,$C0,$44,$70,$6F,$A3,$21,$DB,$CB,$E1,$DF,$DE,$00,$00,$77,$C0 ;
 $4940 DEFB $7C,$20,$63,$FC,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$7F,$8C,$20,$94,$F0,$00,$00,$00,$0B,$1F,$87,$AF,$9F,$C0,$1B,$0F,$03 ;
 $4960 DEFB $3C,$80,$06,$3F,$C2,$0F,$00,$03,$E0,$1C,$37,$0F,$07,$00,$70,$18,$C0,$01,$7E,$E0,$00,$00,$03,$47,$F8,$BE,$EE,$76,$2C,$81,$B2,$0F ;
 $4980 DEFB $01,$FF,$58,$6F,$00,$07,$00,$00,$1F,$FE,$7F,$2C,$7E,$00,$28,$40,$16,$45,$7F,$C0,$00,$00,$00,$F7,$F5,$FD,$9F,$7B,$76,$FC,$0C,$FD ;
 $49A0 DEFB $00,$00,$3E,$10,$00,$00,$01,$FF,$80,$1F,$00,$FF,$F8,$00,$03,$B7,$FF,$E0,$00,$00,$3F,$83,$FB,$50,$2F,$3F,$FF,$71,$F5,$BC,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$FF,$FF,$D0,$00,$3F,$FC,$FF,$FF,$C3,$FC,$C0,$00,$00,$00,$00,$00,$7F,$F0,$00,$9B,$36,$79,$F7,$1F,$77,$6C,$FE,$FE,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$7F,$25,$87,$21,$D2,$DD,$09,$80,$00,$00,$00 ;
 $4A00 DEFB $01,$21,$FF,$FF,$FE,$40,$00,$3C,$00,$00,$00,$00,$38,$00,$03,$98,$FF,$08,$3A,$28,$1F,$3E,$05,$F0,$00,$00,$00,$00,$00,$00,$00,$0C ;
 $4A20 DEFB $14,$02,$1F,$E0,$70,$06,$70,$0E,$1D,$DD,$DD,$CC,$F7,$70,$01,$8F,$F0,$80,$12,$70,$76,$E3,$C0,$3D,$3C,$31,$DF,$EE,$00,$00,$CF,$81 ;
 $4A40 DEFB $7A,$00,$21,$FE,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$FF,$08,$00,$6B,$70,$00,$00,$00,$1A,$C7,$EB,$D0,$FE,$3C,$1B,$9E,$07 ;
 $4A60 DEFB $3E,$52,$02,$1F,$E3,$3E,$00,$00,$70,$30,$7F,$9F,$0E,$00,$1C,$04,$80,$01,$17,$40,$00,$00,$03,$59,$FE,$3E,$DF,$B8,$E9,$C1,$EA,$3E ;
 $4A80 DEFB $00,$7F,$F2,$3C,$00,$03,$C0,$00,$0F,$FC,$FF,$BE,$7C,$00,$14,$14,$6B,$1B,$EF,$C0,$00,$3F,$80,$39,$F5,$FE,$67,$7B,$46,$78,$06,$F3 ;
 $4AA0 DEFB $00,$00,$3F,$EA,$92,$20,$00,$FF,$3F,$1F,$C3,$FF,$FC,$00,$01,$FF,$FF,$C0,$00,$00,$FF,$E1,$F8,$BC,$0E,$CF,$FC,$C7,$CD,$84,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$7F,$FF,$A0,$00,$7F,$FF,$FF,$FF,$81,$C7,$C0,$00,$00,$00,$00,$03,$FF,$FF,$00,$E5,$36,$BE,$4C,$7E,$37,$46,$FE,$FF,$80 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$01,$FF,$1A,$00,$C1,$E0,$00,$09,$80,$C0,$FC,$00 ;
 $4B00 DEFB $00,$31,$FF,$FF,$FC,$3E,$03,$E0,$00,$00,$00,$00,$0F,$80,$3E,$10,$FF,$18,$07,$0C,$7F,$CE,$05,$E0,$00,$00,$00,$00,$00,$00,$00,$3B ;
 $4B20 DEFB $19,$03,$1F,$E0,$C0,$06,$3E,$0E,$1D,$DF,$DD,$CC,$FF,$77,$01,$0F,$F1,$80,$0B,$E0,$39,$D9,$80,$1E,$F3,$D3,$87,$EF,$00,$03,$BE,$07 ;
 $4B40 DEFB $75,$00,$31,$FE,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$FF,$18,$00,$2D,$F8,$00,$00,$00,$35,$F1,$D7,$EF,$71,$FE,$1B,$B8,$1E ;
 $4B60 DEFB $1F,$80,$03,$8F,$DD,$70,$00,$00,$18,$60,$7F,$FF,$38,$00,$07,$05,$80,$24,$BF,$00,$00,$00,$06,$BC,$FD,$7D,$DF,$DA,$D3,$C3,$9A,$78 ;
 $4B80 DEFB $00,$1F,$F0,$30,$00,$00,$F0,$00,$07,$FC,$FF,$BE,$78,$00,$11,$09,$1A,$75,$5F,$80,$00,$1F,$E0,$48,$EB,$FF,$98,$FB,$37,$60,$03,$0E ;
 $4BA0 DEFB $00,$00,$1F,$B4,$01,$40,$00,$3F,$FF,$FF,$FF,$1F,$FE,$00,$00,$FF,$FF,$80,$00,$03,$FF,$F8,$FC,$BF,$1E,$F3,$FB,$8F,$BB,$EE,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$1F,$FF,$80,$00,$7F,$FF,$FF,$FF,$81,$81,$C0,$00,$00,$00,$00,$07,$F0,$3F,$00,$FE,$E9,$0F,$B8,$F8,$C5,$86,$7C,$03,$C0 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$03,$F8,$04,$00,$00,$C0,$00,$09,$90,$E0,$FF,$80 ;
 $4C00 DEFB $00,$10,$FF,$FF,$F8,$63,$FE,$00,$00,$00,$00,$00,$00,$FF,$E0,$31,$FE,$10,$00,$3C,$F1,$E0,$05,$E8,$00,$00,$F0,$00,$00,$00,$00,$67 ;
 $4C20 DEFB $34,$01,$0F,$F0,$80,$06,$07,$0E,$1D,$DF,$DD,$CC,$EF,$73,$03,$1F,$E1,$00,$01,$C0,$1E,$F9,$80,$0C,$CC,$2C,$43,$EF,$00,$06,$7C,$0F ;
 $4C40 DEFB $7C,$90,$10,$FF,$18,$00,$00,$00,$00,$00,$0F,$F8,$00,$00,$31,$FE,$10,$09,$5B,$F8,$00,$00,$00,$68,$F8,$B7,$F0,$27,$FE,$0D,$D0,$38 ;
 $4C60 DEFB $1E,$68,$01,$0F,$03,$C0,$00,$00,$0C,$C0,$FF,$FE,$F0,$00,$01,$C3,$00,$05,$57,$80,$00,$00,$0E,$BE,$3D,$7D,$BF,$9A,$DF,$C6,$3A,$F0 ;
 $4C80 DEFB $00,$00,$7C,$00,$00,$00,$3E,$00,$3F,$FC,$F8,$BE,$78,$00,$1B,$53,$77,$7B,$FF,$80,$00,$0F,$F0,$D6,$2B,$FF,$E6,$FA,$63,$60,$03,$FC ;
 $4CA0 DEFB $00,$00,$0F,$FA,$AE,$04,$00,$1F,$FF,$FF,$FE,$0E,$3F,$00,$00,$3F,$FF,$00,$00,$03,$FF,$FE,$FD,$DF,$5D,$FC,$E6,$3E,$76,$1E,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$07,$FE,$00,$00,$03,$FF,$FF,$FF,$00,$C0,$00,$00,$00,$00,$00,$0F,$FF,$C3,$00,$07,$1F,$C3,$63,$F3,$F1,$83,$78,$FC,$60 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F0,$0F,$0F,$C7,$00,$00,$00,$00,$00,$09,$BC,$F0,$FF,$E0 ;
 $4D00 DEFB $02,$18,$FF,$FF,$F0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$21,$FE,$30,$00,$4C,$E0,$78,$0D,$D8,$00,$07,$38,$00,$00,$00,$01,$DF ;
 $4D20 DEFB $32,$01,$8F,$F0,$80,$06,$7F,$0F,$DD,$DD,$DD,$CC,$E7,$7F,$02,$1F,$E3,$00,$44,$E0,$0F,$39,$80,$05,$3F,$D3,$C3,$EF,$00,$0D,$F0,$3C ;
 $4D40 DEFB $7A,$00,$18,$FF,$08,$00,$00,$00,$00,$00,$7F,$FF,$80,$00,$21,$FE,$30,$00,$6D,$F8,$00,$00,$00,$56,$7E,$0F,$FF,$D7,$FF,$0D,$E0,$F0 ;
 $4D60 DEFB $1F,$90,$01,$8C,$0F,$60,$00,$00,$07,$80,$FF,$FE,$C0,$00,$00,$73,$00,$22,$EB,$C0,$00,$00,$0D,$7F,$8A,$FB,$BF,$BB,$5F,$DC,$77,$41 ;
 $4D80 DEFB $00,$00,$79,$00,$00,$00,$0F,$FE,$FF,$FC,$F0,$07,$70,$00,$12,$4D,$5E,$BF,$FF,$00,$00,$0F,$F8,$D7,$07,$FF,$F8,$F9,$C3,$60,$01,$F0 ;
 $4DA0 DEFB $00,$00,$0F,$FA,$A8,$B0,$00,$0F,$E0,$7F,$FE,$0E,$0E,$00,$00,$0F,$F8,$00,$00,$07,$FF,$FF,$3C,$E7,$5D,$FF,$1C,$7D,$6B,$7E,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$F0,$00,$00,$01,$FE,$FF,$FF,$C0,$60,$00,$00,$00,$00,$00,$00,$7F,$FD,$00,$0F,$FF,$E0,$C7,$CD,$F9,$80,$30,$FF,$B0 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F1,$1F,$3E,$00,$00,$00,$00,$07,$F9,$BA,$88,$FF,$F0 ;
 $4E00 DEFB $04,$08,$7F,$FF,$E1,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$63,$FC,$20,$00,$3C,$C0,$1C,$1C,$34,$00,$0F,$DC,$00,$00,$00,$03,$3E ;
 $4E20 DEFB $3C,$00,$87,$F8,$C0,$0F,$7E,$0F,$CF,$9D,$DF,$9E,$E7,$3E,$06,$3F,$C2,$00,$0B,$E0,$03,$C7,$80,$03,$42,$EC,$43,$EE,$00,$0B,$E0,$78 ;
 $4E40 DEFB $7E,$80,$08,$7F,$8C,$00,$07,$E0,$00,$00,$F0,$07,$F0,$00,$63,$FC,$20,$01,$97,$F0,$00,$00,$00,$D7,$1F,$8F,$9F,$DD,$FF,$86,$E1,$C0 ;
 $4E60 DEFB $0F,$EA,$00,$90,$3C,$30,$00,$00,$03,$80,$C1,$FF,$00,$00,$00,$1E,$00,$0A,$5F,$C0,$00,$00,$0D,$7F,$E0,$FB,$7F,$BB,$6F,$F8,$E7,$83 ;
 $4E80 DEFB $00,$00,$7A,$00,$00,$00,$01,$FE,$FF,$FC,$F0,$06,$60,$00,$0D,$B5,$F7,$DF,$FE,$00,$00,$07,$FD,$AF,$C7,$FF,$FF,$F3,$1B,$70,$00,$00 ;
 $4EA0 DEFB $00,$00,$07,$FF,$BA,$42,$00,$07,$00,$7F,$FF,$1F,$06,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$DD,$39,$5B,$FF,$38,$F3,$6C,$FE,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$F8,$FE,$7F,$FE,$30,$00,$00,$00,$00,$00,$00,$0F,$FF,$01,$1F,$CF,$F3,$1F,$1D,$79,$80,$00,$FF,$F8 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$C3,$FE,$3C,$FD,$00,$00,$00,$00,$09,$C9,$A4,$7C,$80,$F8 ;
 $4F00 DEFB $08,$0C,$7F,$FF,$83,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$43,$FC,$60,$00,$A8,$C0,$0E,$1F,$F6,$00,$03,$E9,$F0,$00,$00,$0E,$F8 ;
 $4F20 DEFB $7A,$00,$C7,$F8,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$3F,$C6,$00,$AA,$F0,$01,$FF,$00,$06,$98,$72,$A7,$9D,$E0,$1B,$81,$E0 ;
 $4F40 DEFB $7D,$20,$0C,$7F,$84,$00,$7F,$FC,$00,$03,$C0,$00,$7C,$00,$4D,$FC,$60,$80,$E7,$F0,$00,$00,$00,$AF,$CF,$5F,$67,$ED,$FC,$03,$77,$81 ;
 $4F60 DEFB $07,$EC,$00,$D0,$F0,$18,$00,$00,$00,$00,$00,$C1,$00,$00,$00,$06,$00,$99,$2F,$C0,$00,$00,$06,$BF,$F0,$F0,$7F,$7B,$76,$E3,$9B,$8F ;
 $4F80 DEFB $00,$00,$3C,$00,$00,$00,$00,$00,$70,$0E,$70,$04,$C0,$00,$0E,$EA,$BF,$EF,$FC,$00,$00,$07,$FD,$B3,$D7,$FF,$FF,$EE,$3B,$30,$00,$00 ;
 $4FA0 DEFB $00,$00,$03,$FF,$F7,$A8,$00,$0E,$00,$7F,$FF,$FF,$03,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$ED,$0E,$1B,$FE,$E3,$E7,$6F,$FE,$C0,$00 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$01,$E1,$F8,$1F,$83,$F0,$00,$00,$00,$00,$00,$00,$03,$FF,$07,$1F,$13,$EB,$BE,$DD,$C9,$80,$00,$E0,$08 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$FF,$7B,$F3,$00,$00,$00,$00,$0E,$29,$B8,$FC,$FF,$1C ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$00,$F7,$EF,$FC,$FF,$DF,$FF,$03,$F7,$70,$FE,$FF,$E6 ;
 $5020 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$04,$9F,$6F,$FD,$FF,$DF,$FE,$FF,$3D,$FF,$FF,$FC,$07,$E0 ;
 $5040 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C,$83,$FD,$7F,$7F,$F7,$FF,$79,$FD,$FF,$AF,$FE,$FF,$FB,$9F ;
 $5060 DEFB $38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C,$FF,$2F,$F7,$FF,$DF,$E3,$FF,$DD,$FF,$80,$FF,$FF,$8F,$E7 ;
 $5080 DEFB $38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$79,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C,$07,$DF,$FF,$FF,$FF,$FF,$FF,$CF,$FF,$CF,$E7,$BF,$7E,$10 ;
 $50A0 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$05,$9E,$F3,$FC,$FD,$FE,$FE,$1F,$78,$1F,$7D,$FB,$F7,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$CF,$DF,$80,$07,$BF,$FE,$00,$78,$FC,$FE,$FF,$FF ;
 $5120 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$F3,$3C,$DF,$FB,$FF,$BF,$FD,$FF,$DB,$FF,$97,$FC,$F8,$F0 ;
 $5140 DEFB $38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$F0,$1F,$80,$1C,$0F,$F8,$FF,$7F,$F7,$FE,$7E,$FB,$FF,$DF,$FC,$FF,$FD,$E7 ;
 $5160 DEFB $38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$C2,$F0,$17,$80,$1C,$FF,$1F,$C7,$FF,$BF,$FB,$FF,$DD,$FC,$00,$FE,$7F,$C7,$E3 ;
 $5180 DEFB $38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C,$03,$B7,$FF,$FF,$FF,$FF,$BF,$D0,$5F,$37,$11,$7F,$BE,$10 ;
 $51A0 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$05,$3E,$85,$F1,$FE,$FE,$FE,$0C,$78,$0F,$BD,$FD,$FB,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$03,$BF,$A0,$77,$F8,$3F,$FD,$00,$FF,$FE,$FF,$FE,$0F ;
 $5220 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$CB,$3B,$DF,$F7,$FF,$BF,$FB,$FF,$E7,$FF,$7B,$F8,$FF,$38 ;
 $5240 DEFB $38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C,$3F,$FB,$FE,$FF,$EF,$FE,$FF,$7B,$FF,$CF,$F0,$FF,$FE,$FB ;
 $5260 DEFB $38,$BF,$FF,$2F,$FF,$2F,$01,$E9,$E8,$BC,$7E,$5E,$0F,$E2,$F0,$17,$FF,$1C,$FF,$0F,$B7,$FF,$BF,$F8,$FF,$DF,$F0,$00,$FD,$9C,$63,$F3 ;
 $5280 DEFB $38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C,$04,$77,$FF,$F8,$7F,$FF,$BF,$DB,$77,$F8,$F6,$FF,$BE,$00 ;
 $52A0 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$06,$3E,$EE,$C1,$FE,$FE,$3C,$0B,$70,$07,$3C,$FC,$FB,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$07,$7F,$1F,$EF,$FE,$C1,$F3,$01,$FC,$FF,$FF,$F0,$00 ;
 $5320 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$3B,$77,$BF,$E0,$00,$7F,$FB,$FF,$E7,$FE,$FD,$F0,$FF,$DC ;
 $5340 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C,$FF,$F7,$FE,$FF,$EF,$FE,$FF,$B7,$FF,$AF,$E0,$DF,$FF,$7D ;
 $5360 DEFB $38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C,$FE,$07,$77,$FF,$BF,$FB,$7F,$FF,$80,$00,$FB,$E3,$F1,$F1 ;
 $5380 DEFB $38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$0F,$77,$CF,$C7,$FD,$FF,$7D,$DD,$F5,$FD,$FB,$7F,$5F,$00 ;
 $53A0 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$04,$3C,$EF,$00,$FE,$FD,$CC,$0F,$70,$06,$BC,$FC,$7A,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$E7,$0E,$FC,$FF,$DF,$FD,$FE,$2F,$01,$F1,$3E,$E1,$C0,$00 ;
 $5420 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$FB,$6F,$7F,$8F,$FE,$83,$F7,$FF,$DB,$FD,$FD,$E0,$0F,$EC ;
 $5440 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C,$FF,$EF,$FD,$FF,$EF,$FD,$FF,$D7,$FF,$B7,$80,$E7,$FF,$BE ;
 $5460 DEFB $38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$F9,$01,$F7,$FF,$BF,$FB,$9F,$FC,$00,$00,$F7,$F7,$F8,$F8 ;
 $5480 DEFB $38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$0E,$F7,$1F,$2F,$FD,$FF,$0E,$FE,$FB,$FE,$FB,$BC,$C3,$00 ;
 $54A0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$30,$EE,$00,$FF,$71,$F8,$07,$60,$03,$B8,$7C,$1E,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$9B,$0D,$F1,$FF,$BF,$FB,$FF,$CF,$03,$ED,$CD,$DF,$F0,$00 ;
 $5520 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$FB,$5F,$7C,$5F,$FD,$FC,$6F,$FF,$BD,$FB,$FE,$C0,$D1,$F6 ;
 $5540 DEFB $38,$A4,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C,$FF,$CF,$FD,$F8,$01,$FD,$FF,$EF,$FF,$B7,$00,$F9,$FF,$BE ;
 $5560 DEFB $38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$E1,$00,$7F,$FF,$BF,$FB,$FF,$C0,$00,$00,$6F,$FB,$FC,$78 ;
 $5580 DEFB $38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C,$0E,$FC,$B0,$EF,$F1,$FF,$72,$7E,$09,$F8,$FD,$DB,$EF,$00 ;
 $55A0 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$DC,$00,$FE,$2D,$F0,$06,$C0,$03,$B8,$7C,$04,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$7D,$1B,$CB,$FF,$7F,$F7,$FF,$B3,$02,$58,$72,$FE,$FE,$00 ;
 $5620 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$FF,$DE,$E3,$BF,$FB,$FF,$9F,$FF,$7E,$F7,$FE,$80,$EC,$7E ;
 $5640 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C,$FF,$AF,$FB,$07,$DE,$7D,$FF,$E7,$FF,$BC,$00,$FE,$FF,$BE ;
 $5660 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$83,$04,$00,$FF,$BF,$FF,$F8,$00,$00,$00,$BF,$F1,$FC,$38 ;
 $5680 DEFB $38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$E7,$3D,$FF,$1C,$0C,$73,$7D,$EF,$CD,$F0,$7E,$31,$78,$77,$7D,$EF,$EF,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D8,$00,$F8,$1D,$C0,$05,$80,$03,$B0,$38,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$BE,$17,$B7,$FE,$FF,$EF,$FF,$7C,$01,$A0,$C0,$FE,$FF,$80 ;
 $5720 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$C7,$BD,$9F,$BF,$FB,$FF,$A7,$FE,$FF,$6F,$FF,$00,$F7,$7B ;
 $5740 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C,$FF,$6F,$F8,$FF,$DF,$9D,$FF,$EB,$FF,$B0,$00,$FF,$3F,$CF ;
 $5760 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$02,$07,$00,$00,$FF,$FF,$00,$00,$00,$00,$DF,$CE,$06,$10 ;
 $5780 DEFB $38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C,$05,$CF,$7B,$EF,$3D,$07,$FE,$1F,$78,$2F,$05,$F7,$F7,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D0,$00,$60,$0F,$80,$02,$00,$03,$B0,$38,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$00,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ; {Attributes
 $5820 DEFB $00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$00,$43,$00,$00,$43,$43 ;
 $5840 DEFB $47,$47,$47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$47,$00,$00,$46,$46,$46,$46,$46,$46,$46,$46 ;
 $5860 DEFB $47,$47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$47,$00,$46,$46,$47,$47,$46,$46,$46,$46,$00 ;
 $5880 DEFB $47,$47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46,$46,$46,$00 ;
 $58A0 DEFB $00,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$45,$46,$46,$46,$46,$46,$46,$00,$00 ;
 $58C0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$45,$45,$45,$46,$46,$00,$46,$46,$00,$00,$00 ;
 $58E0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$45,$45,$45,$47,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5900 DEFB $47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$45,$45,$47,$47,$00,$45,$45,$45,$00,$00,$46,$46 ;
 $5920 DEFB $47,$42,$42,$42,$42,$43,$43,$43,$43,$43,$43,$43,$43,$43,$42,$42,$42,$42,$47,$47,$45,$45,$47,$47,$47,$45,$45,$45,$47,$46,$46,$46 ;
 $5940 DEFB $47,$47,$42,$42,$42,$00,$46,$46,$00,$46,$46,$46,$46,$00,$42,$42,$42,$47,$47,$47,$00,$45,$00,$47,$47,$47,$47,$47,$47,$46,$46,$46 ;
 $5960 DEFB $47,$47,$42,$42,$42,$46,$46,$46,$46,$46,$44,$44,$46,$00,$42,$42,$42,$47,$47,$47,$00,$00,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46 ;
 $5980 DEFB $47,$47,$47,$42,$42,$46,$46,$46,$44,$44,$47,$47,$44,$00,$47,$47,$47,$47,$47,$47,$00,$44,$44,$47,$47,$47,$47,$47,$47,$47,$46,$46 ;
 $59A0 DEFB $00,$00,$47,$47,$47,$47,$00,$44,$44,$44,$44,$44,$44,$00,$47,$47,$47,$47,$47,$44,$44,$44,$44,$47,$47,$47,$47,$47,$47,$47,$44,$00 ;
 $59C0 DEFB $00,$00,$47,$47,$47,$47,$47,$44,$44,$44,$44,$44,$44,$00,$00,$00,$00,$00,$44,$44,$44,$63,$5F,$5F,$5F,$47,$47,$47,$67,$67,$44,$44 ;
 $59E0 DEFB $00,$00,$00,$00,$00,$47,$47,$44,$44,$44,$44,$44,$00,$00,$00,$00,$00,$44,$44,$44,$63,$63,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$63,$44,$44 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$63,$43,$43,$43,$43,$43,$43,$5F,$5F,$5F,$63,$44,$44 ;
 $5A20 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$44,$63,$43,$43,$43,$43,$43,$43,$43,$43,$43,$63,$44,$44 ;
 $5A40 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$44,$63,$43,$43,$43,$43,$43,$43,$43,$63,$63,$44,$44,$44 ;
 $5A60 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$44,$63,$63,$63,$43,$43,$63,$63,$63,$63,$44,$44,$44,$44 ;
 $5A80 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$00 ;
 $5AC0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5AE0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

@replace=/#DIMENSIONS/Dimensions #EVAL(#PEEK(#PC + $01) * $08) pixels x #EVAL(#PEEK(#PC + $02), $0A, $02) pixels.
@expand=#DEF(#SPRITE(addr,attr) #UDGARRAY2,attr=$attr,scale=4,step=2,mask=1,flip=2;($addr)-($addr+$11)-$01-$10{0,($10-#PEEK($addr-1))*4,$10*4,#PEEK($addr-1)*4})
@expand=#DEF(#FONT(id) #EVAL($7B4A + $id * $08))
i$5B00

; Game entry point
@label=GameEntry
c$5B80 DI            ; Disable interrupts.
 $5B81 LD HL,$5EED   ; {Copy #N$2114 bytes from #N$5EED to #N$5EEC.
 $5B84 LD DE,$5EEC   ;
 $5B87 LD BC,$2114   ;
 $5B8A LDIR          ; }
 $5B8C JP $61C6      ; Jump to #R$61C6.
; View the equivalent code in;
; #LIST
; { #COOKIE$5B80 }
; { #JETPAC$5B80 }
; { #TRANZAM$5B80 }
; LIST#
; .
; Later Ultimate games use more advanced decryption mechanisms;
; #LIST
; { #ATICATAC$5B80 }
; { #LUNARJETMAN$5B80 }
; LIST#

; Data block at 5B8F
b$5B8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C77 DEFB $00,$40,$65,$00,$00,$00,$00,$00
 $5C7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAF DEFB $00

; Routine at 5CB0
;
; Used by the routine at #R$631E.
c$5CB0 JP (HL)       ;

; Game status buffer entry at 5CB1
g$5CB1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CC1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CC9 DEFB $00,$00,$00,$01,$77,$01,$FD,$32
 $5CD1 DEFB $34,$32,$39,$39,$0E,$00,$00,$EB
 $5CD9 DEFB $5E,$00,$3A,$D7,$2E,$31,$0E,$7D
 $5CE1 DEFB $4C,$CC,$CC,$CC,$2C,$31,$0E,$00
 $5CE9 DEFB $00,$01,$00,$00,$3A,$D7,$2E,$31
 $5CF1 DEFB $0E,$7D,$4C,$CC,$CC,$CC,$2C,$32
 $5CF9 DEFB $0E,$00,$00,$02,$00,$00,$3A,$D7
 $5D01 DEFB $2E,$31,$0E,$7D,$4C,$CC,$CC,$CC
 $5D09 DEFB $2C,$33,$0E,$00,$00,$03,$00,$00
 $5D11 DEFB $3A,$D7,$2E,$31,$0E,$7D,$4C,$CC
 $5D19 DEFB $CC,$CC,$2C,$34,$0E,$00,$00,$04
 $5D21 DEFB $00,$00,$3A,$D7,$2E,$31,$0E,$7D
 $5D29 DEFB $4C,$CC,$CC,$CC,$2C,$35,$0E,$00
 $5D31 DEFB $00,$05,$00,$00,$3A,$DA,$30,$0E
 $5D39 DEFB $00,$00,$00,$00,$00,$3A,$D9,$37
 $5D41 DEFB $0E,$00,$00,$07,$00,$00,$3A,$DC
 $5D49 DEFB $31,$0E,$00,$00,$01,$00,$00,$3A
 $5D51 DEFB $FB,$3A,$F5,$DC,$31,$0E,$00,$00
 $5D59 DEFB $01,$00,$00,$3B,$D9,$37,$0E,$00
 $5D61 DEFB $00,$07,$00,$00,$3B,$AC,$39,$0E
 $5D69 DEFB $00,$00,$09,$00,$00,$2C,$37,$0E
 $5D71 DEFB $00,$00,$07,$00,$00,$3B,$22,$50
 $5D79 DEFB $53,$53,$53,$54,$20,$49,$53,$20
 $5D81 DEFB $4C,$4F,$41,$44,$49,$4E,$47,$22
 $5D89 DEFB $3B,$AC,$31,$32,$0E,$00,$00,$0C
 $5D91 DEFB $00,$00,$2C,$31,$30,$0E,$00,$00
 $5D99 DEFB $0A,$00,$00,$3B,$22,$14,$01,$50
 $5DA1 DEFB $4C,$45,$41,$53,$45,$20,$57,$41
 $5DA9 DEFB $49,$54,$22,$14,$00,$3A,$F5,$AC
 $5DB1 DEFB $30,$0E,$00,$00,$00,$00,$00,$2C
 $5DB9 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5DC1 DEFB $EF,$22,$22,$AA,$3A,$D9,$30,$0E
 $5DC9 DEFB $00,$00,$00,$00,$00,$3A,$DA,$30
 $5DD1 DEFB $0E,$00,$00,$00,$00,$00,$3A,$F5
 $5DD9 DEFB $AC,$31,$33,$0E,$00,$00,$0D,$00
 $5DE1 DEFB $00,$2C,$30,$0E,$00,$00,$00,$00
 $5DE9 DEFB $00,$3A,$EF,$22,$22,$AF,$3A,$F5
 $5DF1 DEFB $AC,$31,$33,$0E,$00,$00,$0D,$00
 $5DF9 DEFB $00,$2C,$30,$0E,$00,$00,$00

; High Score
;
; 3-byte representation of the score.
@label=High_Score
g$5E00 DEFB $00,$00,$3A
; View the equivalent code in;
; #LIST
; { #COOKIE$5F09 }
; { #JETPAC$5CF0 }
; { #LUNARJETMAN$5E06 }
; LIST#

; Game Options
;
; Holds the number of players and the chosen control method.
; #TABLE(default,centre,centre)
; { =h Byte | =h Binary | =h Option }
; { #N$00 | #EVAL($00, $02, $08) | 1UP Game + Keyboard }
; { #N$01 | #EVAL($01, $02, $08) | 2UP Game + Keyboard }
; { #N$02 | #EVAL($02, $02, $08) | 1UP Game + Kempston Joystick }
; { #N$03 | #EVAL($03, $02, $08) | 2UP Game + Kempston Joystick }
; TABLE#
;
; .
;
; "Number of Players" on Bit #N$00.
; .
; "Control Method" on Bit #N$01.
@label=GameOptions
g$5E03 DEFB $EF
; View the equivalent code in;
; #LIST
; { #ATICATAC$5E00 }
; { #COOKIE$5F0C }
; { #JETPAC$5CF3 }
; { #LUNARJETMAN$5E00 }
; LIST#

; Sound On/ Off
;
; Either #N$00 or #N$01.
@label=Sound_Enable
g$5E04 DEFB $22

; 1UP Score
;
; 3-byte representation of the score.
@label=1UP_Score_1
g$5E05 DEFB $22      ; Byte #1.
@label=1UP_Score_2
 $5E06 DEFB $AF      ; Byte #2.
@label=1UP_Score_3
 $5E07 DEFB $3A      ; Byte #3.

; 2UP Score
;
; 3-byte representation of the score.
@label=2UP_Score_1
g$5E08 DEFB $F5      ; Byte #1.
@label=2UP_Score_2
 $5E09 DEFB $AC      ; Byte #2.
@label=2UP_Score_3
 $5E0A DEFB $31      ; Byte #3.

; Temporary Actor State
@label=Actor
g$5E0B DEFB $33      ; Actor X position.
 $5E0C DEFB $0E      ; Actor Y position.
 $5E0D DEFB $00      ; Actor movement direction.
 $5E0E DEFB $00      ; Height in pixels.
 $5E0F DEFB $0D      ; Width in tiles.
 $5E10 DEFB $00      ; Current sprite height value.
 $5E11 DEFB $00      ; Sprite graphic data height value.
 $5E12 DEFB $2C      ; Todo.
 $5E13 DEFB $30      ; Todo.
 $5E14 DEFB $0E      ; Todo.
 $5E15 DEFB $00      ; Todo.

; Current Bug ID
;
; Values are #N$00 (no bug update?) up to the max number of bugs: #N$01 to #N$06.
;       Used by all bug update routines and in a few other places.
@label=CurrentBug_ID
g$5E16 DEFB $00

; Game Timer
;
; 16-bit counter starting at 0x0000 and counting +1 (each time a sprite is moved or redrawn), although sometimes
;       it will increment + #N$02. This continues until the whole game is over - for both 1 and 2 player games. Counter
;       loops around after reaching #N$FFFF.
@label=GameTimer
g$5E17 DEFW $0000

; Random Number
;
; Value is calculated using the 16-bit game timer LSB value, which is used to
; fetch a byte from the ROM (between addresses #N$00 and #N$FF), then by adding
; the current #REGr.
@label=RandomNumber
g$5E19 DEFB $00,$3A,$EF,$22,$22

; Current Player
;
; Either #N$00 for 1UP or #N$FF for 2UP.
@label=Current_Player
g$5E1E DEFB $AF

; Last Frame
;
; #HTML(Holds a copy of the last <a
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> counter.)
@label=LastFrame
g$5E1F DEFB $3A

; Frame Updated
;
; Has the frame been updated? #N$00=No #N$01=Yes.
@label=FrameUpdated
g$5E20 DEFB $F5

; Menu Item Attribute
;
; Current menu item colour attribute.
@label=Current_MenuAttr
g$5E21 DEFB $AC

; "Get Ready" Delay Counter
@label=PlayDelay_Counter
g$5E22 DEFB $31

; Game status buffer entry at 5E23
g$5E23 DEFB $33
 $5E24 DEFB $0E
 $5E25 DEFB $00
 $5E26 DEFB $00
 $5E27 DEFB $0D
 $5E28 DEFB $00
 $5E29 DEFB $00
 $5E2A DEFB $2C
 $5E2B DEFB $30
 $5E2C DEFB $0E
 $5E2D DEFB $00,$00,$00,$00,$00,$3A,$EF,$22
 $5E35 DEFB $22,$AF

; Active Player Level
;
; Note that level 1 is #N$00.
@label=ActivePlayer_Level
g$5E37 DEFB $3A

; Active Player Lives
;
; The currently active players remaining lives.
@label=CurrentPlayer_Lives
g$5E38 DEFB $F5

; Inactive Player Level
;
; Note that level 1 is #N$00.
@label=InactivePlayer_Level
g$5E39 DEFB $C0

; Inactive Player Lives
;
; The inactive players remaining lives.
@label=InactivePlayer_Lives
g$5E3A DEFB $32

; Game status buffer entry at 5E3B
g$5E3B DEFB $33

; Game status buffer entry at 5E3C
g$5E3C DEFB $34,$32,$34,$0E,$00,$00,$80,$5B

; Game status buffer entry at 5E44
g$5E44 DEFB $00,$0D,$00,$00,$00,$00,$00,$00
 $5E4C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E54 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E5C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E64 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Robbie State
@label=State_Robbie_Active
g$5E6C DEFB $00      ; Is Robbie dead #N$00, alive #N$01 or alive and carrying
                     ; a can of pesticide #N$02?
@label=State_Robbie_Pos_X
 $5E6D DEFB $00      ; X position.
@label=State_Robbie_Pos_Y
 $5E6E DEFB $00      ; Y position.
@label=State_Robbie_Colour
 $5E6F DEFB $00      ; Colour attribute.
 $5E70 DEFB $00
 $5E71 DEFB $00
 $5E72 DEFB $00
 $5E73 DEFB $00

; Game status buffer entry at 5E74
g$5E74 DEFB $00,$00,$00

; Game status buffer entry at 5E77
g$5E77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E87 DEFB $00,$00,$00,$00,$00

; Flower State
@label=State_Flower
g$5E8C DEFB $00                         ; Dunno.
 $5E8D DEFB $00,$00,$00,$00,$00,$00,$00

; Leaf Data
;
; .
;
; .
;
; Leaf 1 data.
@label=Leaf_1_State
g$5E94 DEFB $00      ; Leaf "1" state.
                     ; #TABLE(default,centre,centre) { =h Value | =h State }
                     ; { #N$00 | Inactive }
                     ; { #N$11 | Right-hand side }
                     ; { #N$51 | Left-hand side }
                     ; TABLE#
@label=Leaf_1_Pos_X
 $5E95 DEFB $00      ; Leaf "1" X position in pixels.
@label=Leaf_1_Pos_Y
 $5E96 DEFB $00      ; Leaf "1" Y position in pixels.
@label=Leaf_1_Colour
 $5E97 DEFB $00      ; Leaf "1" colour attribute.
 $5E98 DEFB $00,$00  ; #N$00 or #N$01... Todo.
@label=Leaf_1_Frame
 $5E9A DEFB $00      ; Leaf "1" frame ID.
 $5E9B DEFB $00      ; Unused?
; Leaf 2 data.
@label=Leaf_2_State
 $5E9C DEFB $00      ; Leaf "2" state.
                     ; #TABLE(default,centre,centre) { =h Value | =h State }
                     ; { #N$00 | Inactive }
                     ; { #N$11 | Right-hand side }
                     ; { #N$51 | Left-hand side }
                     ; TABLE#
@label=Leaf_2_Pos_X
 $5E9D DEFB $00      ; Leaf "2" X position in pixels.
@label=Leaf_2_Pos_Y
 $5E9E DEFB $00      ; Leaf "2" Y position in pixels.
@label=Leaf_2_Colour
 $5E9F DEFB $00      ; Leaf "2" colour attribute.
 $5EA0 DEFB $00,$00  ; #N$00 or #N$01... Todo.
@label=Leaf_2_Frame
 $5EA2 DEFB $00      ; Leaf "2" frame ID.
 $5EA3 DEFB $00      ; Unused?
; Leaf 3 data.
@label=Leaf_3_State
 $5EA4 DEFB $00      ; Leaf "3" state.
                     ; #TABLE(default,centre,centre) { =h Value | =h State }
                     ; { #N$00 | Inactive }
                     ; { #N$11 | Right-hand side }
                     ; { #N$51 | Left-hand side }
                     ; TABLE#
@label=Leaf_3_Pos_X
 $5EA5 DEFB $00      ; Leaf "3" X position.
@label=Leaf_3_Pos_Y
 $5EA6 DEFB $00      ; Leaf "3" Y position.
@label=Leaf_3_Colour
 $5EA7 DEFB $00      ; Leaf "3" colour attribute.
 $5EA8 DEFB $00,$00  ; #N$00 or #N$01... Todo.
@label=Leaf_3_Frame
 $5EAA DEFB $00      ; Leaf "3" frame ID.
 $5EAB DEFB $00      ; Unused?
; Leaf 4 data.
@label=Leaf_4_State
 $5EAC DEFB $00      ; Leaf "4" state.
                     ; #TABLE(default,centre,centre) { =h Value | =h State }
                     ; { #N$00 | Inactive }
                     ; { #N$11 | Right-hand side }
                     ; { #N$51 | Left-hand side }
                     ; TABLE#
@label=Leaf_4_Pos_X
 $5EAD DEFB $00      ; Leaf "4" X position.
@label=Leaf_4_Pos_Y
 $5EAE DEFB $00      ; Leaf "4" Y position.
@label=Leaf_4_Colour
 $5EAF DEFB $00      ; Leaf "4" colour attribute.
 $5EB0 DEFB $00,$00  ; #N$00 or #N$01... Todo.
@label=Leaf_4_Frame
 $5EB2 DEFB $00      ; Leaf "4" frame ID.
 $5EB3 DEFB $00      ; Unused?

; Game status buffer entry at 5EB4
g$5EB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EBC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ECC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EDC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EEC DEFB $43,$4F,$50,$59,$52,$49,$47,$48
 $5EF4 DEFB $54

; Copyright Messaging
@label=Message_Copyright
t$5EF5 DEFM $47                                      ; {Attribute:
 $5EF6 DEFM $7F                                      ; #N(#PEEK(#PC)) + "© 1983
 $5EF7 DEFM "1983 A.C.G. ALL RIGHTS RESERVE","D"+$80 ; A.C.G. ALL RIGHTS
                                                     ; RESERVED".}

; Data block at 5F16
b$5F16 DEFB $07,$00,$00,$04,$00,$00,$00,$0C

; Default Robbie State
@label=DefaultState_Robbie
g$5F1E DEFB $01
 $5F1F DEFB $78
 $5F20 DEFB $78
 $5F21 DEFB $47
 $5F22 DEFB $00
 $5F23 DEFB $00
 $5F24 DEFB $00
 $5F25 DEFB $00

; Default Flower State
@label=DefaultState_Flower
g$5F26 DEFB $10
 $5F27 DEFB $78
 $5F28 DEFB $A7
 $5F29 DEFB $47
 $5F2A DEFB $01
 $5F2B DEFB $01
 $5F2C DEFB $00
 $5F2D DEFB $00

; Game status buffer entry at 5F2E
g$5F2E DEFB $0D,$00,$00,$0E,$00,$00,$0A,$00
 $5F36 DEFB $00,$00

; Game status buffer entry at 5F38
g$5F38 DEFB $11,$00,$00,$44,$01,$00,$00,$00

; Reset Flower/ Leaf states
;
; Used by the routines at #R$5F80 and #R$62F7.
@label=ResetFlowerLeaf
c$5F40 LD HL,$5F26   ; {Copy #N$08 bytes of data from #R$5F26 to #R$5E8C.
 $5F43 LD DE,$5E8C   ;
 $5F46 LD BC,$0008   ;
 $5F49 LDIR          ; }
 $5F4B LD HL,$5E94   ; #REGhl=#R$5E94.
 $5F4E LD B,$04      ; #REGb=#N$04 (leaf counter).
 $5F50 JP $70D6      ; Jump to #R$70D6 to set all leaf objects inactive.

; Create Game Window
;
; Used by the routines at #R$5F80, #R$6090, #R$60FD, #R$61CD and #R$631E.
;
; .
;
; Blank the screen and write the banner.
@label=CreateWindow
c$5F53 XOR A         ; {Set the border to black.
 $5F54 OUT ($FE),A   ; }
 $5F56 CALL $7447    ; Call #R$7447.
 $5F59 CALL $7439    ; Call #R$7439.
 $5F5C CALL $7413    ; Call #R$7413.
; Set the attributes for the 1UP lives graphic.
 $5F5F LD HL,$5808   ; #REGhl=#N$5808 (attribute buffer).
 $5F62 LD A,$47      ; #REGa=#N$47.
 $5F64 LD (HL),A     ; Write #REGa to #REGhl.
 $5F65 INC HL        ; Increment #REGhl by one.
 $5F66 LD (HL),A     ; Write #REGa to #REGhl.
; Set the attributes for the 2UP lives graphic.
 $5F67 LD HL,$5816   ; #REGhl=#N$5816 (attribute buffer).
 $5F6A LD (HL),A     ; Write #REGa to #REGhl.
 $5F6B INC HL        ; Increment #REGhl by one.
 $5F6C LD (HL),A     ; Write #REGa to #REGhl.
; Set the attributes for the score line (the whole line is INK:#N$46).
 $5F6D LD HL,$5820   ; #REGhl=#N$5820 (attribute buffer).
 $5F70 LD BC,$2046   ; #REGbc=counter:#N$20, INK:#N$46.
@label=CreateWindow_Loop
*$5F73 LD (HL),C     ; Write #N$46 to the attribute buffer.
 $5F74 INC L         ; Move onto the next column.
 $5F75 DJNZ $5F73    ; Decrease counter by one and loop back to #R$5F73 until
                     ; counter is zero.
 $5F77 CALL $739D    ; Call #R$739D.
 $5F7A CALL $73A5    ; Call #R$73A5.
 $5F7D JP $73AD      ; Jump to #R$73AD.

; Initialise New Level
;
; Used by the routines at #R$631E and #R$66D7.
@label=LevelNew
c$5F80 LD HL,$5E38   ; {Increment #R$5E38 by one (for display purposes).
 $5F83 INC (HL)      ; }
 $5F84 CALL $5FA0    ; Call #R$5FA0.
 $5F87 CALL $5F40    ; Call #R$5F40.
 $5F8A CALL $6176    ; Call #R$6176.
; Initialise the level.
@label=LevelInit
*$5F8D CALL $5F53    ; Call #R$5F53.
 $5F90 CALL $602E    ; Call #R$602E.
 $5F93 CALL $5FB0    ; Call #R$5FB0.
 $5F96 CALL $7325    ; Call #R$7325.
 $5F99 LD A,($5C78)  ; {#HTML(Write <a
 $5F9C LD ($5E1F),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; to #R$5E1F.)}
 $5F9F RET           ; Return.
; This entry point is used by the routine at #R$62F7.
*$5FA0 LD HL,$5F2E   ; {Copy #N$0A bytes of data from #R$5F2E to #R$5E23.
 $5FA3 LD DE,$5E23   ;
 $5FA6 LD BC,$000A   ;
 $5FA9 LDIR          ; }
 $5FAB XOR A         ; {Reset #R$5E3C.
 $5FAC LD ($5E3C),A  ; }
 $5FAF RET           ; Return.

; Routine at 5FB0
;
; Used by the routine at #R$5F80.
c$5FB0 LD C,$01      ; #REGc=#N$01.
 $5FB2 LD DE,$5E23   ; #REGde=#R$5E23.
*$5FB5 LD L,$08      ; #REGl=#N$08.
 $5FB7 PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $5FB8 PUSH BC       ; }
 $5FB9 CALL $5FDE    ; Call #R$5FDE.
 $5FBC POP BC        ; {Restore #REGbc and #REGde from the stack.
 $5FBD POP DE        ; }
 $5FBE INC DE        ;
 $5FBF INC C         ;
 $5FC0 LD A,C        ;
 $5FC1 CP $06        ;
 $5FC3 JR NZ,$5FB5   ;
 $5FC5 LD C,$01      ;
*$5FC7 LD L,$E8      ;
 $5FC9 PUSH DE       ; {Stash #REGde and #REGbc on the stack.
 $5FCA PUSH BC       ; }
 $5FCB CALL $5FDE    ; Call #R$5FDE.
 $5FCE POP BC        ; {Restore #REGbc and #REGde from the stack.
 $5FCF POP DE        ; }
 $5FD0 INC DE        ;
 $5FD1 INC C         ;
 $5FD2 LD A,C        ;
 $5FD3 CP $06        ;
 $5FD5 JR NZ,$5FC7   ;
 $5FD7 RET           ; Return.

; Routine at 5FD8
;
; Used by the routine at #R$5FDE.
c$5FD8 XOR A         ; {Write #N$00 to #REGde.
 $5FD9 LD (DE),A     ; }
 $5FDA LD ($5E3C),A  ; #REGa=#R$5E3C.
 $5FDD RET           ; Return.

; Routine at 5FDE
;
; Used by the routine at #R$5FB0.
c$5FDE LD A,(DE)     ;
 $5FDF AND %11111000 ; Keep only bits 3-7.
 $5FE1 RET Z         ;
 $5FE2 BIT 7,A       ;
 $5FE4 JR NZ,$5FD8   ;
 $5FE6 LD A,(DE)     ;
 $5FE7 PUSH AF       ;
 $5FE8 RRCA          ;
 $5FE9 RRCA          ;
 $5FEA AND %00111110 ; Keep only bits 1-5.
 $5FEC LD E,A        ; {Create an offset in #REGde.
 $5FED LD D,$00      ; }
 $5FEF PUSH HL       ;
 $5FF0 LD HL,$601B   ; #REGhl=#R$601B.
 $5FF3 ADD HL,DE     ;
 $5FF4 LD E,(HL)     ;
 $5FF5 INC HL        ;
 $5FF6 LD D,(HL)     ;
 $5FF7 POP HL        ;
 $5FF8 LD A,C        ;
 $5FF9 RRCA          ;
 $5FFA RRCA          ;
 $5FFB RRCA          ;
 $5FFC AND $E0       ;
 $5FFE OR $17        ;
 $6000 LD H,A        ;
 $6001 POP AF        ;
 $6002 AND $07       ;
 $6004 OR $40        ;
 $6006 LD ($5E12),A  ;
 $6009 PUSH IX       ;
 $600B LD IX,$5E0F   ;
 $600F CALL $74C6    ;
 $6012 CALL $7539    ;
 $6015 CALL $7450    ;
 $6018 POP IX        ;
 $601A RET           ;
 $601B DEFW $0000    ;
 $601D DEFW $7711    ;

; Routine at 601F
;
; Used by the routine at #R$602E.
c$601F LD C,$05      ;
*$6021 LD B,$01      ;
 $6023 CALL $6077    ;
 $6026 LD A,H        ;
 $6027 ADD A,$18     ;
 $6029 LD H,A        ;
 $602A DEC C         ;
 $602B JR NZ,$6021   ;
 $602D RET           ;

; Draw PlayArea
;
; Used by the routine at #R$5F80.
@label=DrawPlayArea
c$602E LD HL,($5C36)        ; {#HTML(Stash <a
 $6031 PUSH HL              ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                            ; on the stack.)}
 $6032 LD HL,$76D6          ; {#HTML(Write #R$76D6 to <a
 $6035 LD ($5C36),HL        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                            ; }
; Create the left-hand wall.
 $6038 LD DE,$6087          ; #REGde=#R$6087.
 $603B LD HL,$1800          ; #REGhl=#N$1800 (screen position).
 $603E LD B,$14             ; #REGb=#N$14 (counter).
 $6040 CALL $6077           ; Call #R$6077.
; Create the right-hand wall.
 $6043 LD HL,$18F8          ; #REGhl=#N$18F8 (screen position).
 $6046 LD B,$14             ; #REGb=#N$14 (counter).
 $6048 CALL $6077           ; Call #R$6077.
; Create left-hand cubby-holes.
 $604B LD DE,$6089          ; #REGde=#R$6089.
 $604E LD HL,$1800          ; #REGhl=#N$1800 (screen position).
 $6051 CALL $601F           ; Call #R$601F.
; Create right-hand cubby-holes.
 $6054 LD HL,$18E8          ; #REGhl=#N$18E8 (screen position).
 $6057 CALL $601F           ; Call #R$601F.
; Create the floor.
 $605A LD HL,$B800          ; #REGhl=#N$B800 (screen position).
 $605D LD DE,$608D          ; #REGde=#R$608D.
 $6060 LD C,$10             ; #REGc=#N$10 (outer counter).
@label=DrawPlayArea_FloorLoop
*$6062 LD B,$01             ; #REGb=#N$01 (inner counter).
 $6064 CALL $6077           ; Call #R$6077.
 $6067 LD A,L               ;
 $6068 ADD A,$10            ;
 $606A LD L,A               ;
 $606B LD A,H               ;
 $606C SUB $08              ;
 $606E LD H,A               ;
 $606F DEC C                ; {Decrease #REGc by one and loop back to #R$6062
 $6070 JR NZ,$6062          ; until it is zero.}
 $6072 POP HL               ; {#HTML(Restore <a
 $6073 LD ($5C36),HL        ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                            ; from the stack, and write it back to #N$5C36.)}
 $6076 RET                  ; Return.
; Enables calling #R$73ED in a loop to reprint a UDG a given number of times
; using #REGc.
@label=PrintString_Wrapper
*$6077 PUSH HL              ; {Stash #REGhl, #REGde and #REGbc on the stack.
 $6078 PUSH DE              ;
 $6079 PUSH BC              ; }
 $607A CALL $73ED           ; Call #R$73ED.
 $607D POP BC               ; {Restore #REGbc, #REGde and #REGhl from the
 $607E POP DE               ; stack.
 $607F POP HL               ; }
 $6080 LD A,H               ; {Move onto the next .
 $6081 ADD A,$08            ;
 $6083 LD H,A               ; }
 $6084 DJNZ $6077           ; Decrease counter by one and loop back to #R$6077
                            ; until counter is zero.
 $6086 RET                  ; Return.
; Screen Data.
@label=Message_Bricks_LR
 $6087 DEFB $7A,$80         ; Brick attribute + 1 x brick UDG ID #N$00+#N$80
                            ; (EOL).
@label=Message_Bricks_Cubby
 $6089 DEFB $7A,$00,$00,$80 ; Brick attribute + 3 x brick UDG ID #N$00+#N$80
                            ; (EOL).
@label=Message_Floor
 $608D DEFB $32,$01,$82     ; Floor attribute + UDG ID #N$01 + UDG ID
                            ; #N$02+#N$80 (EOL).

; Player Turn Ends
@label=Message_Eaten
c$6090 DEFM $47                                ; {Attribute: #N(#PEEK(#PC)) +
 $6091 DEFM "YOUR PLANT HAS BEEN EATE","N"+$80 ; "YOUR PLANT HAS BEEN EATEN".}
; This entry point is used by the routine at #R$65F7.
@label=PlayerTurnEnds
*$60AA XOR A                                   ; {Reset #R$5E3C.
 $60AB LD ($5E3C),A                            ; }
 $60AE LD HL,$5E8E                             ;
 $60B1 LD A,(HL)                               ;
 $60B2 CP $B7                                  ;
 $60B4 JR C,$60C4                              ;
 $60B6 LD (HL),$A7                             ;
 $60B8 CALL $5F53                              ; Call #R$5F53.
 $60BB LD DE,$6090                             ; #REGde=#R$6090.
 $60BE LD HL,$7020                             ; #REGhl=#N$7020.
 $60C1 CALL $610B                              ; Call #R$610B.
*$60C4 LD HL,$5EB4                             ; #REGhl=#R$5EB4.
 $60C7 LD B,$07                                ; #REGb=#N$07.
 $60C9 CALL $70D6                              ; Call #R$70D6.
 $60CC LD A,($5E03)                            ; {If #R$5E03 says this is a 2UP
 $60CF AND %00000001                           ; game, jump to #R$60E0.
 $60D1 JR NZ,$60E0                             ; }
; Handle 1UP player.
@label=PlayerTurnEnds_1UP
*$60D3 LD A,($5E38)                            ; {If 1UP is out of lives (using
 $60D6 AND A                                   ; #R$5E38), jump to #R$6127.
 $60D7 JP Z,$6127                              ; }
 $60DA CALL $5F8D                              ; Call #R$5F8D.
 $60DD JP $6176                                ; Jump to #R$6176.
; Handle 2UP player.
@label=PlayerTurnEnds_2UP
*$60E0 LD A,($5E3A)                            ; {If #R$5E3A says this is a 1UP
 $60E3 AND A                                   ; game, jump to #R$60D3.
 $60E4 JR Z,$60D3                              ; }
 $60E6 LD A,($5E38)                            ; {If 2UP is out of lives (using
 $60E9 AND A                                   ; #R$5E38), jump to #R$611F.
 $60EA CALL Z,$611F                            ; }
 $60ED CALL $613B                              ; Call #R$613B.
 $60F0 LD A,($5E1E)                            ; {Change current player at
 $60F3 CPL                                     ; #R$5E1E (flip bits between
 $60F4 LD ($5E1E),A                            ; #N$00 and #N$FF).}
 $60F7 CALL $5F8D                              ; Call #R$5F8D.
 $60FA JP $6176                                ; Jump to #R$6176.

; Game Over
;
; .
;
; .
;
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 1UP.)
@label=GameOver1UP
c$60FD LD A,"1"+$80  ; #REGa="1" + #N$80 (escape character).
; Print the messaging and pause to show it for a period of time.
@label=GameOver_Write
*$60FF LD ($6175),A  ; Write ASCII player number to #R$6163(#N$6175).
 $6102 CALL $5F53    ; Call #R$5F53.
 $6105 LD DE,$6163   ; #REGde=#R$6163.
 $6108 LD HL,$7038   ; #REGhl=#N$7038.
; Print message and pause, also used by #R$5FB0 and #R$631E.
@label=GameOverPrint_Pause
*$610B CALL $73ED    ; Call #R$73ED.
; Introduce a pause by counting down from #N$10000 four times.
 $610E LD B,$04      ; #REGb=#N$04 (counter).
; This entry point is used by the routine at #R$66D7.
@label=GameOverPause
*$6110 LD HL,$0000   ; #REGhl=#N$0000 (large counter).
@label=GameOverPause_Loop
*$6113 DEC HL        ; Decrease #REGhl by one.
 $6114 LD A,H        ; {Loop back to #R$6113 until #REGhl is zero.
 $6115 OR L          ;
 $6116 JR NZ,$6113   ; }
 $6118 DJNZ $6113    ; Decrease counter by one and loop back to #R$6113 until
                     ; counter is zero.
 $611A RET           ; Return.
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 2UP.)
@label=GameOver2UP
*$611B LD A,"2"+$80  ; #REGa="2" + #N$80 (escape character).
 $611D JR $60FF      ; Jump to #R$60FF.
; This controller simply returns on end. This is for when the game continues
; after the messaging.
@label=GameOver_Controller
*$611F LD A,($5E1E)  ; {If #R$5E1E is zero, jump to #R$6110.
 $6122 AND A         ;
 $6123 JR Z,$60FD    ; }
 $6125 JR $611B      ; Else, jump to #R$611B.
; This is a controller with a jump to #R$61EA to return to the game selection
; screen.
@label=GameOver_ControllerRestart
*$6127 CALL $708F    ; Call #R$708F.
 $612A LD A,($5E1E)  ; {If #R$5E1E is not zero, jump to #R$6136.
 $612D AND A         ;
 $612E JR NZ,$6136   ; }
 $6130 CALL $60FD    ; Call #R$60FD.
@label=GameOver_Restart
*$6133 JP $61EA      ; Jump to #R$61EA.
@label=GameOver_Restart2UP
*$6136 CALL $611B    ; Call #R$611B.
 $6139 JR $6133      ; Jump to #R$6133.

; 1UP/ 2UP Swapper.
;
; Used by the routines at #R$6090 and #R$62F7.
;
; .
;
; This routine "swaps" the data between #REGde and #REGhl.
@label=ChangePlayer
c$613B LD HL,$5E37   ; #REGhl=#R$5E37.
 $613E LD DE,$5E39   ; #REGde=#R$5E39.
 $6141 LD B,$02      ; #REGb=#N$02 (counter).
 $6143 CALL $6159    ; Call #R$6159.
 $6146 LD HL,$5E23   ; #REGhl=#R$5E23.
 $6149 LD DE,$5E2D   ; #REGde=#R$5E2D.
 $614C LD B,$0A      ; #REGb=#N$0A (counter).
 $614E CALL $6159    ; Call #R$6159.
 $6151 LD HL,$5E44   ; #REGhl=#R$5E44.
 $6154 LD DE,$5E8C   ; #REGde=#R$5E8C.
 $6157 LD B,$28      ; #REGb=#N$28 (counter).
; This looks complicated but it's just grabbing the data from #REGde, grabbing
; the data from #REGhl, and writing the others data to each one.
@label=ChangePlayer_Loop
*$6159 LD A,(DE)     ; #REGa=#REGde.
 $615A LD C,(HL)     ; #REGc=#REGhl.
 $615B LD (HL),A     ; Store #REGa at #REGhl.
 $615C LD A,C        ; {Store #REGc at #REGde.
 $615D LD (DE),A     ; }
 $615E INC HL        ; {Increase both #REGhl and #REGde by one.
 $615F INC DE        ; }
 $6160 DJNZ $6159    ; Decrease counter by one and loop back to #R$6159 until
                     ; counter is zero.
 $6162 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$6416 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #TRANZAM$0000 }
; LIST#

; Game Over Message
@label=Message_GameOver
t$6163 DEFM $47                         ; {"GAME OVER PLAYER X".
 $6164 DEFM "GAME OVER PLAYER ","1"+$80 ; }

; Player Initialisation
;
; Used by the routines at #R$5F80 and #R$6090.
@label=PlayerInit
c$6176 LD A,$15      ; {Write #N$15 to #R$5EE4.
 $6178 LD ($5EE4),A  ; }
 $617B LD HL,$5F1E   ; {Copy #N$08 bytes of data from #R$5F1E to
 $617E LD DE,$5E6C   ; #R$5E6C(Robbie_Object).
 $6181 LD BC,$0008   ;
 $6184 LDIR          ; }
; Set default "begin play" delay period.
 $6186 LD A,$80      ; #REGa=#N$80 (delay counter).
 $6188 LD HL,$5E03   ; {If #R$5E03 says this is a 1UP game, jump to #R$6191.
 $618B BIT 0,(HL)    ;
 $618D JR Z,$6191    ; }
 $618F ADD A,$7F     ; Else, #REGa=#N$FF for a two player game (to give more
                     ; time for "passing over" the controls.
@label=PlayerInit_WriteDelay
*$6191 LD ($5E22),A  ; Write the delay counter to #R$5E22.
; "Spend" a life.
 $6194 LD A,($5E38)  ; {Decrease #R$5E38 by one.
 $6197 DEC A         ;
 $6198 LD ($5E38),A  ; }
 $619B JP $7325      ; Jump to #R$7325.

; Routine at 619E
;
; Used by the routine at #R$6DBA.
c$619E LD A,($5E1E)  ;
 $61A1 AND A         ;
 $61A2 JR NZ,$61C1   ;
 $61A4 LD HL,$0018   ;
; This entry point is used by the routine at #R$61B4.
*$61A7 CALL $748F    ;
 $61AA LD B,$03      ;
*$61AC LD A,(HL)     ;
 $61AD OR $80        ;
 $61AF LD (HL),A     ;
 $61B0 INC HL        ;
 $61B1 DJNZ $61AC    ;
 $61B3 RET           ;

; Routine at 61B4
;
; Used by the routine at #R$6DBA.
c$61B4 CALL $748F    ;
 $61B7 LD B,$03      ;
*$61B9 LD A,(HL)     ;
 $61BA AND $7F       ;
 $61BC LD (HL),A     ;
 $61BD INC HL        ;
 $61BE DJNZ $61B9    ;
 $61C0 RET           ;
; This entry point is used by the routine at #R$619E.
*$61C1 LD HL,$00D8   ;
 $61C4 JR $61A7      ;

; Security Check
;
; Used by the routine at #R$5B80.
@label=SecurityCheck
c$61C6 DI            ; Disable interrupts.
 $61C7 LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $61CA CP $65        ; {Return if #REGa is not #N$65.
 $61CC RET NZ        ; }
; Continue on to #R$61CD.

; Game Initialisation
;
; .
;
; .
;
; Blank the 1UP, 2UP and HI scores.
@label=GameInitialisation
c$61CD LD HL,$5E00   ; {Write #N$00 to #N$0B bytes from #N$5E00 to #N$5E0B.
 $61D0 LD BC,$0B00   ;
@label=GameInitialisation_Loop
*$61D3 LD (HL),C     ;
 $61D4 INC HL        ;
 $61D5 DJNZ $61D3    ; }
; #HTML(This calculates a "checksum" of the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a> routine.
;       The expected value at the end is #N$00, and if #R$5E04 does not contain #N$00 then the game is muted.)
 $61D7 LD HL,$03B5   ; #HTML(#REGhl=<a
                     ; href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a>.)
 $61DA LD B,$43      ; #REGb=#N$43 (counter).
 $61DC XOR A         ; #REGa=#N$00.
@label=Mute_Loop
*$61DD ADD A,(HL)    ; Add the byte at #REGhl to #REGa.
 $61DE INC HL        ; Increment #REGhl by one.
 $61DF DJNZ $61DD    ; Decrease counter by one and loop back to #R$61DD until
                     ; counter is zero.
 $61E1 ADD A,$68     ; #REGa=#REGa + #N$68.
 $61E3 LD ($5E04),A  ; Store this number at #R$5E04.
 $61E6 XOR A         ; {#HTML(Write #N$00 to <a
 $61E7 LD ($5C48),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C48.html">BORDCR</a>.)
                     ; }
; This entry point is used by the routine at #R$60FD.
@label=Game_Restart
*$61EA DI            ; Disable interrupts.
 $61EB LD SP,$5D00   ; Set the stack pointer to #N$5D00.
 $61EE CALL $5F53    ; Call #R$5F53.
@label=GameSelect_Loop
*$61F1 CALL $6250    ; Call #R$6250.
 $61F4 LD A,($5E03)  ; {#REGd=#R$5E03.
 $61F7 LD D,A        ; }
 $61F8 LD A,$F7      ; {Read from the keyboard;
 $61FA OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $61FC IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $61FE CPL           ; Flip the bits.
; Handle 1UP selection.
 $61FF BIT 0,A       ; Has key "1" been pressed? ("1 PLAYER GAME").
 $6201 JR Z,$6205    ; If not jump to #R$6205.
 $6203 RES 0,D       ; Set player count = 1.
; Handle 2UP selection.
@label=GameSelect_CheckP2
*$6205 BIT 1,A       ; Has key "2" been pressed? ("2 PLAYER GAME").
 $6207 JR Z,$620B    ; If not jump to #R$620B.
 $6209 SET 0,D       ; Set player count = 2.
; Handle Keyboard selection.
@label=GameSelect_CheckKeyboard
*$620B BIT 2,A       ; Has key "3" been pressed? ("KEYBOARD").
 $620D JR Z,$6211    ; If not jump to #R$6211.
 $620F RES 1,D       ; Set control method = keyboard.
; Handle Kempston Joystick selection.
@label=GameSelect_CheckKempston
*$6211 BIT 3,A       ; Has key "4" been pressed? ("KEMPSTON JOYSTICK").
 $6213 JR Z,$6217    ; If not jump to #R$6217.
 $6215 SET 1,D       ; Set control method = joystick.
; Handle starting a new game.
@label=GameSelect_StartGame
*$6217 BIT 4,A       ; Has key "5" been pressed? ("START GAME").
 $6219 JP NZ,$632D   ; If so, jump to #R$632D.
; Handle flashing each selection.
 $621C LD A,D        ; {Write #REGd to #R$5E03.
 $621D LD ($5E03),A  ; }
 $6220 LD HL,$627D   ; #REGhl=#R$627D(GameSelection_Attributes).
 $6223 LD A,($5E03)  ; {#REGc=#R$5E03.
 $6226 LD C,A        ; }
@label=MenuAttributeCheckPlayer
 $6227 BIT 0,C       ; {If a 2UP game is selected, jump to #R$6238.
 $6229 JR NZ,$6238   ; }
 $622B CALL $6242    ; Else, call #R$6242.
; Check control method.
@label=MenuAttributeCheckControl
*$622E BIT 1,C       ; {If joystick is selected, jump to #R$623D.
 $6230 JR NZ,$623D   ; }
 $6232 CALL $6242    ; Else, call #R$6242.
@label=GameSelect_End
*$6235 JP $61F1      ; Jump back to #R$61F1.
; Handle flashing 2UP.
@label=MenuAttrHandle2UP
*$6238 CALL $6249    ; Call #R$6249.
 $623B JR $622E      ; Jump to #R$622E.
; Handle flashing joystick.
@label=MenuAttrHandleJoystick
*$623D CALL $6249    ; Call #R$6249.
 $6240 JR $6235      ; Jump to #R$6235.
; Set the first menu item, unset the second.
@label=MenuAttributeSetFirst
*$6242 SET 7,(HL)    ; Set the FLASH attribute for the first selection.
 $6244 INC HL        ; Move onto the next menu attribute.
 $6245 RES 7,(HL)    ; Unset the FLASH attribute for the second selection.
 $6247 INC HL        ; Move onto the next menu selection attribute.
 $6248 RET           ; Return.
; Unset the first menu item, set the second.
@label=MenuAttributeSetSecond
*$6249 RES 7,(HL)    ; Unset the FLASH attribute for the first selection.
 $624B INC HL        ; Move onto the next menu attribute.
 $624C SET 7,(HL)    ; Set the FLASH attribute for the second selection.
 $624E INC HL        ; Move onto the next menu selection attribute.
 $624F RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #COOKIE$6298 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$800A }
; { #TRANZAM$5F07 }
; LIST#

; Game Selection Menu
;
; Used by the routine at #R$61CD.
@label=GameMenu
c$6250 LD DE,$627C   ; #REGde=#R$627C.
 $6253 EXX           ; Switch to the shadow registers.
 $6254 LD HL,$6282   ; #REGhl'=#R$6282.
 $6257 LD DE,$6288   ; #REGde'=#R$6288.
; There are six lines of text.
 $625A LD B,$06      ; #REGb'=#N$06 (counter).
@label=GameMenu_Loop
*$625C EXX           ; Switch back to the normal registers.
 $625D LD A,(DE)     ; {Store the attribute byte to #R$5E21.
 $625E LD ($5E21),A  ; }
 $6261 INC DE        ; Increment #REGde by one.
 $6262 EXX           ; Switch to the shadow registers.
 $6263 PUSH BC       ; Stash #REGbc' on the stack.
 $6264 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $6265 INC HL        ; Increment #REGhl' (position data pointer) by one.
 $6266 PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $6267 LD H,A        ; {#REGh'=#REGa and #REGl'=#N$38 (indentation).
 $6268 LD L,$38      ; }
 $626A CALL $62E7    ; Call #R$62E7.
 $626D EXX           ; Switch back to the normal registers.
 $626E POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $626F POP BC        ; }
 $6270 INC DE        ; Increase #REGde by one.
 $6271 DJNZ $625C    ; Decrease counter by one and loop back to #R$625C until
                     ; counter is zero.
; Print the copyright footer.
 $6273 LD HL,$B800   ; #REGhl=#N$B800.
 $6276 LD DE,$5EF5   ; #REGde=#R$5EF5.
 $6279 JP $73ED      ; Jump to #R$73ED.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #COOKIE$6332 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$80D1 }
; { #TRANZAM$0000 }
; LIST#

; Game Select Attribute Table
@label=GameSelection_Attributes
b$627C DEFB $47      ; {#TABLE(default,centre)
 $627D DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $627E DEFB $47      ; { #N$01 | Game Selection }
 $627F DEFB $47      ; { #N$02 | 1 Player Game }
 $6280 DEFB $47      ; { #N$03 | 2 Player Game }
 $6281 DEFB $47      ; { #N$04 | Keyboard }
                     ; { #N$05 | Kempston Joystick }
                     ; { #N$06 | Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #COOKIE$635E }
; { #JETPAC$628D }
; { #LUNARJETMAN$810E }
; { #TRANZAM$5FA7 }
; LIST#

; Game Select Y Position Table
@label=GameSelection_Position
b$6282 DEFB $20      ; {#TABLE(default,centre,centre)
 $6283 DEFB $38      ; { =h Byte(n) | =h Position | =h Menu Item }
 $6284 DEFB $48      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | Game Selection }
 $6285 DEFB $58      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 1 Player Game }
 $6286 DEFB $68      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 2 Player Game }
 $6287 DEFB $98      ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | Keyboard }
                     ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | Kempston Joystick }
                     ; { #N$06 | #EVAL(#PEEK(#PC+$05) / $08) | Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #COOKIE$6365 }
; { #JETPAC$6293 }
; { #LUNARJETMAN$8115 }
; { #TRANZAM$5FAC }
; LIST#

; Game Selection Screen Text
@label=GameSelection_Text
t$6288 DEFM "GAME SELECTIO","N"+$80        ; "GAME SELECTION".
 $6296 DEFM "1   1 PLAYER GAM","E"+$80     ; "1   1 PLAYER GAME".
 $62A7 DEFM "2   2 PLAYER GAM","E"+$80     ; "2   2 PLAYER GAME".
 $62B8 DEFM "3   KEYBOAR","D"+$80          ; "3   KEYBOARD".
 $62C4 DEFM "4   KEMPSTON JOYSTIC","K"+$80 ; "4   KEMPSTON JOYSTICK".
 $62D9 DEFM "5   START GAM","E"+$80        ; "5   START GAME".
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #COOKIE$636C }
; { #JETPAC$6299 }
; { #LUNARJETMAN$811C }
; { #TRANZAM$5FB1 }
; LIST#

; Write Menu Line
;
; Used by the routine at #R$6250.
@label=MenuWriteText
c$62E7 PUSH HL       ; Stash #REGhl containing the co-ordinate on the stack.
 $62E8 CALL $759A    ; Call #R$759A.
 $62EB LD A,($5E21)  ; #REGa=the menu attribute byte from #R$5E21.
 $62EE EX AF,AF'     ; Switch to the shadow #REGaf register.
 $62EF EXX           ; Switch to the shadow registers.
 $62F0 POP HL        ; Restore #REGhl from the stack.
 $62F1 CALL $748F    ; Call #R$748F.
 $62F4 JP $73F9      ; Jump to #R$73F9.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D8A }
; { #COOKIE$63E0 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #TRANZAM$0000 }
; LIST#

; Reset Player Data
;
; Used by the routine at #R$631E.
@label=ResetPlayerData
c$62F7 LD B,$02      ; #REGb=#N$02 (loop counter, max. 2 players).
@label=ResetPlayerData_Loop
*$62F9 PUSH BC       ; Stash #REGbc on the stack.
 $62FA XOR A         ; {Reset #R$5E37 to #N$00 (level 1).
 $62FB LD ($5E37),A  ; }
 $62FE LD A,$04      ; {Set #R$5E38 to #N$04.
 $6300 LD ($5E38),A  ; }
 $6303 CALL $5FA0    ; Call #R$5FA0.
 $6306 CALL $5F40    ; Call #R$5F40.
 $6309 CALL $613B    ; Call #R$613B.
 $630C POP BC        ; Restore #REGbc from the stack.
 $630D DJNZ $62F9    ; Decrease player counter by one and loop back to #R$62F9
                     ; until counter is zero.
; 2UP has one "extra" life, due to the way the game "spends" a life when your
; turn starts.
 $630F LD A,$05      ; {Write #N$05 to #R$5E3A.
 $6311 LD ($5E3A),A  ; }
 $6314 LD A,($5E03)  ; #REGa=#R$5E03.
 $6317 AND %00000001 ; Keep only bit 0 (1 or 2 players).
 $6319 RET NZ        ; Return if this is a two player game.
 $631A LD ($5E3A),A  ; Else, write #N$00 to #R$5E3A (2UP has no lives).
 $631D RET           ; Return.

; New Game
@label=Message_SprayBugs
c$631E DEFM $47                     ; {"SPRAY THE BUGS"
 $631F DEFM "SPRAY THE BUG","S"+$80 ; }
; Start New Game.
@label=GameStart
*$632D CALL $5F53                   ; Call #R$5F53.
 $6330 LD HL,$7048                  ; #REGhl=#N($7048, 4, 4).
 $6333 LD DE,$631E                  ; #REGde=#R$631E.
 $6336 CALL $610B                   ; Call #R$610B.
 $6339 LD HL,$5E05                  ; {Write #N$00 to #N$E6 bytes from #R$5E05.
 $633C LD (HL),$00                  ;
 $633E LD D,H                       ;
 $633F LD E,L                       ;
 $6340 INC DE                       ;
 $6341 LD BC,$00E6                  ;
 $6344 LDIR                         ; }
 $6346 CALL $62F7                   ; Call #R$62F7.
 $6349 CALL $7113                   ; Call #R$7113.
 $634C CALL $5F80                   ; Call #R$5F80.
; This entry point is used by the routines at #R$7130 and #R$721A.
*$634F LD SP,$5D00                  ; #REGsp=#N$5D00.
 $6352 EI                           ; Enable interrupts.
 $6353 LD IX,$5E8C                  ; #REGix=#R$5E8C.
 $6357 XOR A                        ; {Write #N$00 to #R$5E16 to reset the
 $6358 LD ($5E16),A                 ; enemy counter.}
; This entry point is used by the routines at #R$70ED and #R$7130.
@label=MainLoop
*$635B LD A,($5C78)                 ; {#HTML(Compare <a
 $635E LD C,A                       ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
 $635F LD A,($5E1F)                 ; and #R$5E1F.)}
; If interrupts are enabled, then #R$70ED will be called and DI executed.
 $6362 CP C                         ; {If they are not equal call #R$70ED.
 $6363 CALL NZ,$70ED                ; }
 $6366 LD HL,$7130                  ; #REGhl=#R$7130(generate new actor
                                    ; routine).
 $6369 PUSH HL                      ; Stash #REGhl on the stack.
 $636A LD HL,$637E                  ; #REGhl=#R$637E.
 $636D LD A,(IX+$00)                ; {Calculate the jump table offset.
 $6370 RLCA                         ;
 $6371 AND %01111110                ; }
@label=PerformJump
 $6373 LD C,A                       ; {#REGbc=offset.
 $6374 LD B,$00                     ; }
 $6376 ADD HL,BC                    ; #REGhl=Jump table + offset.
 $6377 LD A,(HL)                    ; {#REGhl=Fetch the jump address.
 $6378 INC HL                       ;
 $6379 LD H,(HL)                    ;
 $637A LD L,A                       ; }
 $637B JP $5CB0                     ; Jump to #R$5CB0 which does an indirect
                                    ; jump to the jump address.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D9A }
; { #COOKIE$6428 }
; { #JETPAC$6333 }
; { #LUNARJETMAN$81BB }
; { #TRANZAM$5FEF }
; LIST#

; Main Jump Table
@label=JumpTable_Main
w$637E DEFW $70DF
 $6380 DEFW $6DBA
 $6382 DEFW $6EF1
 $6384 DEFW $6ED2
 $6386 DEFW $6BD0
 $6388 DEFW $6BD0
 $638A DEFW $6BD0
 $638C DEFW $6A98
 $638E DEFW $698F
 $6390 DEFW $67AE
 $6392 DEFW $64FA
 $6394 DEFW $70DF
 $6396 DEFW $70DF
 $6398 DEFW $70DF
 $639A DEFW $70DF
 $639C DEFW $70DF
 $639E DEFW $6D0C
 $63A0 DEFW $6C53
 $63A2 DEFW $69E8
 $63A4 DEFW $66A6
 $63A6 DEFW $65F7
 $63A8 DEFW $63DB

; Leaf Collision
;
; Used by the routine at #R$64ED.
@label=LeafCollision
c$63AA LD HL,$5E94   ; #REGhl=#R$5E94.
 $63AD LD B,$04      ; #REGb=#N$04 (leaf counter).
 $63AF LD DE,$0008   ; #REGbc=#N$0008 (data offset).
@label=LeafCollision_Loop
*$63B2 PUSH HL       ; Stash #REGhl on the stack.
 $63B3 LD A,(HL)     ; {If the current leaf is not active, jump to #R$63DC.
 $63B4 AND A         ;
 $63B5 JR Z,$63DC    ; }
 $63B7 INC HL        ; {#REGa=current leaf X position.
 $63B8 LD A,(HL)     ; }
 $63B9 SUB (IX+$01)  ; Leaf X position - bug X Position.
 $63BC JP P,$63C1    ; {Make sure we have a positive byte.
 $63BF NEG           ; }
@label=LeafCollision_Test_X
*$63C1 CP $0A        ; {Jump to #R$63DC if #REGa >= #N$0A.
 $63C3 JR NC,$63DC   ; }
 $63C5 INC HL        ; {#REGa=current leaf Y position.
 $63C6 LD A,(HL)     ; }
 $63C7 SUB (IX+$02)  ; Leaf Y position - bug Y Position.
 $63CA JP P,$63CF    ; {Make sure we have a positive byte.
 $63CD NEG           ; }
@label=LeafCollision_Test_Y
*$63CF CP $0A        ; {Jump to #R$63DC if #REGa >= #N$0A.
 $63D1 JR NC,$63DC   ; }
 $63D3 INC HL        ; {Increment #REGhl by two (skip colour attribute).
 $63D4 INC HL        ; }
 $63D5 LD A,$01      ; {Write #N$01 to todo and todo (being eaten?)
 $63D7 LD (HL),A     ;
 $63D8 INC HL        ;
 $63D9 LD (HL),A     ; }
 $63DA POP HL        ; Restore #REGhl from the stack.
 $63DB RET           ; Return.
; Handles moving onto the next leaf object.
@label=LeafCollision_Next
*$63DC POP HL        ; Restore #REGhl from the stack.
 $63DD ADD HL,DE     ; Add the data offset/ move onto the next leaf.
 $63DE DJNZ $63B2    ; Decrease counter by one and loop back to #R$63B2 until
                     ; counter is zero.
 $63E0 RET           ; Return.

; Play Music
;
; Used by the routine at #R$66D7.
;
; DE Music Data
@label=PlayMusic
c$63E1 LD A,(DE)                            ; Fetch the music data byte.
 $63E2 CP $FF                               ; {Return if the terminator
 $63E4 RET Z                                ; character has been reached.}
 $63E5 AND %00011111                        ; Keep only bits 0-3.
 $63E7 DEC A                                ; Decrease #REGa by one.
 $63E8 SLA A                                ; #REGa=#REGa * 2.
 $63EA LD C,A                               ; {Create an offset in #REGbc.
 $63EB LD B,$00                             ; }
 $63ED LD HL,$640D                          ; {#REGhl=#N$640D + offset.
 $63F0 ADD HL,BC                            ; }
 $63F1 PUSH DE                              ; Stash #REGde on the stack.
 $63F2 LD A,(HL)                            ;
 $63F3 INC HL                               ;
 $63F4 LD E,(HL)                            ;
 $63F5 LD D,$00                             ;
 $63F7 LD L,A                               ;
 $63F8 LD H,$00                             ;
 $63FA SLA L                                ;
 $63FC RL H                                 ;
 $63FE SLA L                                ;
 $6400 RL H                                 ;
 $6402 PUSH IX                              ; Stash #REGix on the stack.
 $6404 CALL $03B5                           ; #HTML(Call <a
                                            ; href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a.)
 $6407 POP IX                               ; {Restore #REGix and #REGde from
 $6409 POP DE                               ; the stack.}
 $640A INC DE                               ; Increment #REGde by one.
 $640B JR $63E1                             ; Loop back round to the
                                            ; #R$63E1(beginning) (we only end
                                            ; when the terminator is reached).
@label=MusicData
 $640D DEFW $62E0                           ; {Music Data
 $640F DEFW $6EC7                           ;
 $6411 DEFW $7BB1                           ;
 $6413 DEFW $83A7                           ;
 $6415 DEFW $9395                           ;
 $6417 DEFW $A485                           ;
 $6419 DEFW $AF7D                           ;
 $641B DEFW $C36E                           ; }
 $641D DEFB $01,$01,$02,$02,$03,$03,$04,$04 ;
 $6425 DEFB $05,$05,$06,$06,$07,$07,$08,$08 ;
 $642D DEFB $04,$06,$08,$06,$07,$05,$03,$01 ;
 $6435 DEFB $04,$06,$08,$06,$07,$05,$03,$03 ;
 $643D DEFB $04,$06,$08,$06,$07,$05,$03,$01 ;
 $6445 DEFB $04,$06,$02,$03,$04,$04,$04,$FF ;

; Routine at 644D
;
; Used by the routines at #R$64FA, #R$67AE and #R$6A98.
c$644D LD E,$00       ; #REGe=#N$00.
 $644F LD HL,$5E8D    ; #REGhl=#R$5E8D.
 $6452 LD A,(HL)      ;
 $6453 SUB (IX+$01)   ;
 $6456 ADD A,$09      ;
 $6458 BIT 3,(IX+$00) ;
 $645C JR NZ,$6462    ;
 $645E CP $24         ;
 $6460 JR $6464       ; Jump to #R$6464.
*$6462 CP $1C         ;
*$6464 RET NC         ;
 $6465 INC HL         ;
 $6466 LD A,(HL)      ;
 $6467 SRL A          ;
 $6469 LD D,(IX+$02)  ;
 $646C SRL D          ;
 $646E SUB D          ;
 $646F RET NC         ;
 $6470 LD E,$01       ;
 $6472 RET            ; Return.

; Sound Effects
;
; Used by the routine at #R$64FA.
c$6473 LD C,$0F      ; #REGc=#N$0F.
*$6475 LD A,C        ;
 $6476 RRCA          ;
 $6477 RRCA          ;
 $6478 RRCA          ;
 $6479 AND %00000111 ; Keep only bits 0-2.
 $647B CPL           ;
 $647C DAA           ;
 $647D LD D,A        ;
 $647E CALL $64AA    ; Call #R$64AA.
 $6481 DEC C         ;
 $6482 JR NZ,$6475   ;
 $6484 RET           ; Return.
; This entry point is used by the routine at #R$64FA.
*$6485 LD A,($5E19)  ;
 $6488 AND $7F       ;
 $648A OR $30        ;
 $648C LD ($6495),A  ;
 $648F LD C,$20      ;
*$6491 LD A,C        ;
 $6492 XOR $0F       ;
 $6494 AND $1F       ;
 $6496 LD D,A        ;
 $6497 CALL $64AA    ; Call #R$64AA.
 $649A DEC C         ;
 $649B JR NZ,$6491   ;
 $649D RET           ; Return.
; This entry point is used by the routine at #R$6A98.
*$649E LD C,$10      ;
*$64A0 LD A,C        ;
 $64A1 RRCA          ;
 $64A2 LD D,A        ;
 $64A3 CALL $64AA    ; Call #R$64AA.
 $64A6 DEC C         ;
 $64A7 JR NZ,$64A0   ;
 $64A9 RET           ;

; Play square wave sound
;
; Used by the routines at #R$6473 and #R$64B8.
;
; D Duration of wave
@label=PlaySquareWave
c$64AA LD A,$10      ; {#REGa=#N$10 (speaker on = bit 4).
 $64AC OUT ($FE),A   ; }
 $64AE LD B,D        ; {Decrease duration by one and loop back to #R$64AF until
@label=PlaySquareWave_Loop
*$64AF DJNZ $64AF    ; counter is zero.}
 $64B1 XOR A         ; {Speaker off.
 $64B2 OUT ($FE),A   ; }
 $64B4 LD B,D        ; {Decrease duration by one and loop back to #R$64B5 until
@label=Silence_Loop
*$64B5 DJNZ $64B5    ; counter is zero.}
 $64B7 RET           ; Return.

; Routine at 64B8
;
; Used by the routine at #R$6A98.
c$64B8 LD C,$08      ;
*$64BA LD A,C        ;
 $64BB RLCA          ;
 $64BC RLCA          ;
 $64BD XOR $07       ;
 $64BF RLCA          ;
 $64C0 RLCA          ;
 $64C1 LD D,A        ;
 $64C2 CALL $64AA    ; Call #R$64AA.
 $64C5 DEC C         ;
 $64C6 JR NZ,$64BA   ;
 $64C8 RET           ; Return.
; This entry point is used by the routine at #R$6A98.
*$64C9 LD C,$08      ;
*$64CB LD A,C        ;
 $64CC CPL           ;
 $64CD RLCA          ;
 $64CE LD D,A        ;
 $64CF CALL $64AA    ; Call #R$64AA.
 $64D2 DEC C         ;
 $64D3 JR NZ,$64CB   ;
 $64D5 RET           ; Return.
; This entry point is used by the routine at #R$6DBA.
*$64D6 LD D,$20      ;
 $64D8 LD C,$50      ;
 $64DA JR $64E0      ;
; This entry point is used by the routine at #R$6EF1.
*$64DC LD D,$50      ;
 $64DE LD C,$28      ;
*$64E0 CALL $64AA    ; Call #R$64AA.
 $64E3 DEC C         ;
 $64E4 JR NZ,$64E0   ;
 $64E6 RET           ; Return.
; This entry point is used by the routines at #R$6DBA and #R$7130.
*$64E7 LD D,$30      ;
 $64E9 LD C,$40      ;
 $64EB JR $64E0      ;

; Routine at 64ED
;
; Used by the routines at #R$64FA, #R$67AE and #R$6A98.
c$64ED LD HL,$5E16   ; #REGhl=#R$5E16.
 $64F0 INC (HL)      ; Increment #R$5E16 by one.
 $64F1 CALL $75B9    ; Call #R$75B9.
 $64F4 CALL $63AA    ; Call #R$63AA.
 $64F7 JP $72F5      ; Jump to #R$72F5.

; Routine at 64FA
c$64FA CALL $64ED      ;
 $64FD DEC E           ;
 $64FE JP Z,$6A73      ;
 $6501 CALL $6A42      ;
 $6504 DEC E           ;
 $6505 JR NZ,$650C     ;
 $6507 LD A,C          ;
 $6508 AND A           ;
 $6509 JP NZ,$65BA     ;
*$650C BIT 3,(IX+$04)  ;
 $6510 JP NZ,$6B3A     ;
 $6513 CALL $644D      ;
 $6516 DEC E           ;
 $6517 JP Z,$679C      ;
 $651A BIT 2,(IX+$04)  ;
 $651E JR Z,$652A      ;
 $6520 DEC (IX+$05)    ;
 $6523 JP NZ,$659F     ;
 $6526 RES 2,(IX+$04)  ;
*$652A BIT 0,(IX+$04)  ;
 $652E JR NZ,$6555     ;
 $6530 LD A,($5E19)    ;
 $6533 LD E,A          ;
 $6534 AND $1F         ;
 $6536 JR NZ,$6555     ;
 $6538 SET 0,(IX+$04)  ;
 $653C LD A,($5E17)    ;
 $653F AND $1F         ;
 $6541 ADD A,$10       ;
 $6543 LD A,(IX+$06)   ;
 $6546 LD A,E          ;
 $6547 AND $80         ;
 $6549 LD E,A          ;
 $654A LD A,(IX+$00)   ;
 $654D AND $7F         ;
 $654F OR E            ;
 $6550 LD (IX+$00),A   ;
 $6553 JR $650C        ;
*$6555 BIT 0,(IX+$04)  ;
 $6559 JR Z,$6587      ;
 $655B LD A,(IX+$01)   ;
 $655E CP $18          ;
 $6560 JR C,$6587      ;
 $6562 CP $D8          ;
 $6564 JR NC,$6587     ;
 $6566 LD A,(IX+$02)   ;
 $6569 BIT 7,(IX+$00)  ;
 $656D JR Z,$65A2      ;
 $656F ADD A,$02       ;
 $6571 CP $B8          ;
 $6573 JR C,$657B      ;
 $6575 RES 7,(IX+$00)  ;
 $6579 JR $657E        ;
*$657B LD (IX+$02),A   ;
*$657E DEC (IX+$06)    ;
 $6581 JR NZ,$6587     ;
 $6583 RES 0,(IX+$04)  ;
*$6587 LD A,(IX+$01)   ;
 $658A BIT 6,(IX+$00)  ;
 $658E JR Z,$65AE      ;
 $6590 ADD A,$02       ;
 $6592 CP $D8          ;
 $6594 JR C,$659C      ;
 $6596 RES 6,(IX+$00)  ;
 $659A JR $659F        ;
*$659C LD (IX+$01),A   ;
*$659F JP $6F31        ;
*$65A2 SUB $02         ;
 $65A4 CP $28          ;
 $65A6 JR NC,$657B     ;
 $65A8 SET 7,(IX+$00)  ;
 $65AC JR $657B        ;
*$65AE SUB $02         ;
 $65B0 CP $18          ;
 $65B2 JR NC,$659C     ;
 $65B4 SET 6,(IX+$00)  ;
 $65B8 JR $659F        ;
*$65BA AND $3F         ;
 $65BC CP $12          ;
 $65BE JR Z,$65D6      ;
 $65C0 CP $08          ;
 $65C2 JP NZ,$650C     ;
 $65C5 CALL $65CB      ;
 $65C8 JP $650C        ;
; This entry point is used by the routines at #R$67AE and #R$6A98.
*$65CB SET 2,(IX+$04)  ;
 $65CF LD (IX+$05),$10 ;
 $65D3 JP $6473        ;
*$65D6 LD BC,$0075     ;
; This entry point is used by the routine at #R$67AE.
*$65D9 CALL $737A      ;
; This entry point is used by the routines at #R$6A73 and #R$6A98.
*$65DC LD A,(IX+$00)   ;
 $65DF LD (IX+$05),$00 ;
*$65E3 LD (IX+$06),A   ;
 $65E6 LD (IX+$00),$14 ;
 $65EA LD (IX+$04),$00 ;
 $65EE JP $6485        ;
; This entry point is used by the routine at #R$6A73.
*$65F1 LD (IX+$05),$01 ;
 $65F5 JR $65E3        ;

; Animate Explosion
;
; .
;
; IX Explosion animation object
@label=AnimateExplosion
c$65F7 LD HL,$5E16     ; #REGhl=#R$5E16.
 $65FA INC (HL)        ; Increment #R$5E16 by one.
 $65FB LD C,(IX+$04)   ; #REGc=explosion animation frame.
 $65FE LD B,(IX+$05)   ; #REGb=explosion animation state.
 $6601 LD A,($5E17)    ; #REGa=#R$5E17.
 $6604 AND B           ; {Increment frame if timer & state are both zero.
 $6605 JR NZ,$660A     ;
 $6607 INC (IX+$04)    ; }
@label=ExplosionFetchSpriteFrame
*$660A LD A,C          ; #REGa=current explosion animation frame.
 $660B SLA C           ; {Create an offset using the animation frame ID.
 $660D LD B,$00        ; }
 $660F LD HL,$6682     ; #REGhl=#R$6682.
 $6612 ADD HL,BC       ; #REGhl=#REGhl + offset.
 $6613 LD E,(HL)       ; {#REGde=fetch sprite frame address from #REGhl.
 $6614 INC HL          ;
 $6615 LD D,(HL)       ; }
 $6616 LD L,(IX+$01)   ; #REGhl=X/Y co-ordinates of the exploding actor.
 $6619 LD H,(IX+$02)   ;
 $661C CP $06          ; {If the current frame >= #N$06 then the animation has
 $661E JR NC,$6634     ; finished.}
 $6620 CP $03          ; {If the current frame >= #N$03 then we're halfway
 $6622 JR NC,$667C     ; done.}
 $6624 CALL $751C      ; Call #R$751C.
 $6627 LD A,($5E19)    ; #REGa=#R$5E19.
 $662A AND %00000111   ; Keep only bits 0-2.
 $662C OR %01000010    ; Set bits 1 and 6 (BRIGHT).
 $662E LD (IX+$03),A   ; Update with a random colour
 $6631 JP $7450        ; Jump to #R$7450.
; After an explosion, we check if it was the player that died!
@label=AnimateExplosion_End
*$6634 LD A,(IX+$06)   ; {Update anim object so "animating" = "direction".
 $6637 LD (IX+$00),A   ; }
 $663A CALL $75B9      ; Call #R$75B9.
 $663D CALL $7526      ; Call #R$7526.
 $6640 LD (IX+$00),$00 ;
 $6644 LD A,(IX+$06)   ;
 $6647 AND %00111111   ; Keep only bits 0-5.
 $6649 CP $03          ;
 $664B RET NC          ;
 $664C CP $02          ;
 $664E JP NZ,$60AA     ;
 $6651 LD HL,$5E23     ; #REGhl=#R$5E23.
 $6654 LD BC,$5E2D     ; #REGbc=#R$5E2D.
 $6657 LD A,($5E19)    ; #REGa=#R$5E19.
 $665A AND %00000111   ; Keep only bits 0-2.
 $665C LD E,A          ;
 $665D LD D,$00        ;
 $665F ADD HL,DE       ;
*$6660 LD A,(HL)       ;
 $6661 AND A           ;
 $6662 JR Z,$6671      ;
 $6664 INC HL          ;
 $6665 PUSH HL         ;
 $6666 AND A           ;
 $6667 SBC HL,BC       ;
 $6669 POP HL          ;
 $666A JR NZ,$6660     ;
 $666C LD HL,$5E23     ; #REGhl=#R$5E23.
 $666F JR $6660        ; Jump to #R$6660.
*$6671 LD A,($5E77)    ; #REGa=#R$5E77.
 $6674 AND %00000111   ; Keep only bits 0-2.
 $6676 OR %00001000    ; Set bit 3.
 $6678 LD (HL),A       ; Stash the result at the address held by #REGhl.
 $6679 JP $60AA        ; Jump to #R$60AA.
*$667C CALL $74AB      ; Call #R$74AB.
 $667F JP $7529        ; Jump to #R$7529.

; Explosion lookup table
;
; Sprite addresses are repeated because on first use they are animated using a
; pink colour, then animated again in black, so as to make them disappear.
@label=ExplosionLookupTable
w$6682 DEFW $7ECA    ; Small explosion.
 $6684 DEFW $7EFD    ; Medium explosion.
 $6686 DEFW $7F30    ; Large explosion.
 $6688 DEFW $7ECA    ; Small explosion.
 $668A DEFW $7EFD    ; Medium explosion.
 $668C DEFW $7F30    ; Large explosion.

; Routine at 668E
;
; Used by the routine at #R$6D0C.
c$668E LD (IX+$00),$13 ;
 $6692 LD (IX+$04),$00 ;
 $6696 LD B,$04        ;
 $6698 LD HL,$5E6C     ;
 $669B CALL $70D6      ;
 $669E LD B,$0B        ;
 $66A0 LD HL,$5E94     ;
 $66A3 JP $70D6        ;

; Routine at 66A6
c$66A6 CALL $75B9    ; Call #R$75B9.
 $66A9 LD A,($5E22)  ; {Jump to #R$66D6 if #R$5E22 is not yet finished.
 $66AC AND A         ;
 $66AD JR NZ,$66D6   ; }
 $66AF LD A,($5E17)  ; #REGa=#R$5E17.
 $66B2 AND %00000111 ; Keep only bits 0-2.
 $66B4 JR NZ,$66D6   ; Jump to #R$66D6 if the result is non-zero.
 $66B6 CALL $6791    ; Call #R$6791.
 $66B9 CALL $74A8    ; Call #R$74A8.
 $66BC EXX           ;
 $66BD INC (IX+$04)  ;
 $66C0 LD A,(IX+$04) ;
 $66C3 CP $04        ;
 $66C5 CALL Z,$670E  ;
 $66C8 CP $05        ;
 $66CA JR Z,$66D7    ;
 $66CC CALL $6791    ; Call #R$6791.
 $66CF CALL $74C0    ; Call #R$74C0.
 $66D2 EXX           ;
 $66D3 CALL $74F2    ; Call #R$74F2.
*$66D6 RET           ; Return.

; Routine at 66D7
;
; Used by the routine at #R$66A6.
c$66D7 LD HL,$5E6C   ; #REGhl=#R$5E6C.
 $66DA LD B,$10      ; #REGb=#N$10.
 $66DC CALL $70D6    ; Call #R$70D6.
 $66DF LD A,($5E04)  ; {#R$5E04.
 $66E2 AND A         ;
 $66E3 JR NZ,$6705   ; }
 $66E5 LD A,($5E37)  ;
 $66E8 AND A         ;
 $66E9 JR Z,$6700    ;
 $66EB AND %00000011 ; Keep only bits 0-2.
 $66ED JR NZ,$6700   ;
 $66EF LD DE,$641D   ; #REGde=#R$641D.
 $66F2 LD HL,$5E38   ; #REGhl=#R$5E38.
 $66F5 INC (HL)      ;
*$66F6 CALL $63E1    ; Call #R$63E1.
*$66F9 LD HL,$5E37   ;
 $66FC INC (HL)      ;
 $66FD JP $5F80      ; Jump to #R$5F80.
*$6700 LD DE,$642D   ; #REGde=#R$642D.
 $6703 JR $66F6      ; Jump to #R$66F6.
*$6705 DI            ;
 $6706 LD B,$0A      ;
 $6708 CALL $6110    ;
 $670B EI            ;
 $670C JR $66F9      ;

; Colourise Open Flower
;
; Used by the routine at #R$66A6.
@label=ColouriseFlower
c$670E LD A,(IX+$01)                            ;
 $6711 SUB $20                                  ;
 $6713 LD L,A                                   ;
 $6714 LD A,(IX+$02)                            ;
 $6717 SUB $30                                  ;
 $6719 LD H,A                                   ;
 $671A CALL $748F                               ;
 $671D LD DE,$6748                              ; #REGde=#R$6748.
 $6720 LD BC,$0907                              ; #REGbc=#N$0907.
*$6723 PUSH BC                                  ;
 $6724 PUSH HL                                  ;
*$6725 LD A,($5E37)                             ;
 $6728 AND A                                    ;
 $6729 JR Z,$673F                               ;
 $672B AND %00000011                            ; Keep only bits 0-1.
 $672D JR NZ,$673F                              ;
 $672F LD A,(DE)                                ;
*$6730 LD (HL),A                                ;
 $6731 INC HL                                   ;
 $6732 INC DE                                   ;
 $6733 DJNZ $6725                               ;
 $6735 POP HL                                   ;
 $6736 LD BC,$0020                              ;
 $6739 ADD HL,BC                                ;
 $673A POP BC                                   ;
 $673B DEC C                                    ;
 $673C JR NZ,$6723                              ;
 $673E RET                                      ; Return.
*$673F LD A,(DE)                                ;
 $6740 CP $5E                                   ;
 $6742 JR NZ,$6730                              ;
 $6744 LD A,$5B                                 ;
 $6746 JR $6730                                 ;
@label=FlowerAttributes
 $6748 DEFB $44,$44,$44,$44,$44,$44,$44,$44,$44 ;
 $6751 DEFB $44,$63,$63,$5E,$5E,$5E,$63,$63,$44 ;
 $675A DEFB $44,$63,$63,$5E,$5E,$5E,$63,$63,$44 ;
 $6763 DEFB $44,$63,$5E,$5E,$5E,$5E,$5E,$63,$44 ;
 $676C DEFB $44,$63,$63,$63,$5E,$5E,$63,$63,$44 ;
 $6775 DEFB $44,$44,$44,$44,$44,$44,$44,$44,$44 ;
 $677E DEFB $44,$44,$44,$44,$44,$44,$44,$44,$44 ;

; Routine at 6787
c$6787 DEFB $9A,$76,$39,$7C,$72,$7C,$72,$7C ;
 $678F DEFB $CF,$7C                         ;
; This entry point is used by the routine at #R$66A6.
*$6791 LD A,(IX+$04)                        ;
 $6794 SLA A                                ;
 $6796 LD HL,$6787                          ;
 $6799 JP $6CD9                             ;

; Routine at 679C
;
; Used by the routines at #R$64FA, #R$67AE and #R$6A98.
c$679C LD A,R         ;
 $679E LD (IX+$05),A  ;
 $67A1 LD A,(IX+$02)  ;
 $67A4 LD (IX+$06),A  ;
 $67A7 SET 3,(IX+$04) ;
 $67AB JP $6F31       ;

; Routine at 67AE
c$67AE CALL $64ED      ;
 $67B1 DEC E           ;
 $67B2 JP Z,$6A73      ;
 $67B5 CALL $6A42      ;
 $67B8 DEC E           ;
 $67B9 JR NZ,$67C0     ;
 $67BB LD A,C          ;
 $67BC AND A           ;
 $67BD JP NZ,$68ED     ;
*$67C0 BIT 3,(IX+$04)  ;
 $67C4 JP NZ,$6B3A     ;
 $67C7 CALL $644D      ;
 $67CA DEC E           ;
 $67CB JR Z,$679C      ;
 $67CD BIT 2,(IX+$04)  ;
 $67D1 JR Z,$67DD      ;
 $67D3 DEC (IX+$05)    ;
 $67D6 JP NZ,$6F31     ;
 $67D9 RES 2,(IX+$04)  ;
*$67DD CALL $690F      ;
 $67E0 LD A,(IX+$05)   ;
 $67E3 LD B,A          ;
 $67E4 AND $0F         ;
 $67E6 LD C,A          ;
 $67E7 LD A,B          ;
 $67E8 AND $F0         ;
 $67EA LD B,A          ;
 $67EB LD A,(HL)       ;
 $67EC SUB (IX+$01)    ;
 $67EF JP P,$686E      ;
 $67F2 BIT 6,(IX+$00)  ;
 $67F6 JP Z,$689A      ;
 $67F9 LD A,C          ;
 $67FA CP $0F          ;
 $67FC JR NC,$67FF     ;
 $67FE INC A           ;
*$67FF LD C,A          ;
 $6800 LD H,(IX+$01)   ;
 $6803 CALL $68DD      ;
 $6806 AND A           ;
 $6807 SBC HL,DE       ;
 $6809 LD A,H          ;
 $680A CP $1A          ;
 $680C JR NC,$6812     ;
 $680E RES 6,(IX+$00)  ;
*$6812 LD (IX+$01),A   ;
 $6815 LD A,L          ;
 $6816 AND $F0         ;
 $6818 OR C            ;
 $6819 LD (IX+$05),A   ;
 $681C LD A,(IX+$01)   ;
 $681F CP $18          ;
 $6821 JP C,$6F31      ;
 $6824 CP $D0          ;
 $6826 JP NC,$6F31     ;
 $6829 CALL $690F      ;
 $682C LD A,(IX+$06)   ;
 $682F LD B,A          ;
 $6830 AND $0F         ;
 $6832 LD C,A          ;
 $6833 LD A,B          ;
 $6834 AND $F0         ;
 $6836 LD B,A          ;
 $6837 INC HL          ;
 $6838 LD A,(HL)       ;
 $6839 SUB (IX+$02)    ;
 $683C JP P,$68A6      ;
 $683F BIT 7,(IX+$00)  ;
 $6843 JP Z,$68D3      ;
 $6846 LD A,C          ;
 $6847 DEC A           ;
 $6848 JR NZ,$68B3     ;
 $684A RES 7,(IX+$00)  ;
*$684E LD C,A          ;
 $684F LD H,(IX+$02)   ;
 $6852 CALL $68DD      ;
 $6855 AND A           ;
 $6856 SBC HL,DE       ;
 $6858 LD A,H          ;
 $6859 CP $28          ;
 $685B JR NC,$6861     ;
 $685D SET 7,(IX+$00)  ;
*$6861 LD (IX+$02),A   ;
 $6864 LD A,L          ;
 $6865 AND $F0         ;
 $6867 OR C            ;
 $6868 LD (IX+$06),A   ;
 $686B JP $6F31        ;
*$686E BIT 6,(IX+$00)  ;
 $6872 JR Z,$6892      ;
 $6874 LD A,C          ;
 $6875 DEC A           ;
 $6876 JP NZ,$67FF     ;
 $6879 RES 6,(IX+$00)  ;
*$687D LD C,A          ;
 $687E LD H,(IX+$01)   ;
 $6881 CALL $68DD      ;
 $6884 ADD HL,DE       ;
 $6885 LD A,H          ;
 $6886 CP $D6          ;
 $6888 JP C,$6812      ;
 $688B SET 6,(IX+$00)  ;
 $688F JP $6812        ;
*$6892 LD A,C          ;
 $6893 CP $0F          ;
 $6895 JR NC,$687D     ;
 $6897 INC A           ;
 $6898 JR $687D        ;
*$689A LD A,C          ;
 $689B DEC A           ;
 $689C JP NZ,$687D     ;
 $689F SET 6,(IX+$00)  ;
 $68A3 JP $67FF        ;
*$68A6 BIT 7,(IX+$00)  ;
 $68AA JR Z,$68C8      ;
 $68AC LD A,C          ;
 $68AD CP $0F          ;
 $68AF JP NC,$68B3     ;
 $68B2 INC A           ;
*$68B3 LD C,A          ;
 $68B4 LD H,(IX+$02)   ;
 $68B7 CALL $68DD      ;
 $68BA ADD HL,DE       ;
 $68BB LD A,H          ;
 $68BC CP $B6          ;
 $68BE JP C,$6861      ;
 $68C1 RES 7,(IX+$00)  ;
 $68C5 JP $6861        ;
*$68C8 LD A,C          ;
 $68C9 DEC A           ;
 $68CA JP NZ,$684E     ;
 $68CD SET 7,(IX+$00)  ;
 $68D1 JR $68B3        ;
*$68D3 LD A,C          ;
 $68D4 CP $0F          ;
 $68D6 JP NC,$684E     ;
 $68D9 INC A           ;
 $68DA JP $684E        ;
*$68DD LD L,B          ;
 $68DE LD A,C          ;
 $68DF RLA             ;
 $68E0 RLA             ;
 $68E1 RLA             ;
 $68E2 RLA             ;
 $68E3 AND $F0         ;
 $68E5 LD E,A          ;
 $68E6 LD D,$00        ;
 $68E8 SLA E           ;
 $68EA RL D            ;
 $68EC RET             ;
*$68ED AND $3F         ;
 $68EF CP $08          ;
 $68F1 JR Z,$6909      ;
 $68F3 CP $12          ;
 $68F5 JP Z,$67C0      ;
 $68F8 BIT 3,(IX+$04)  ;
 $68FC JP NZ,$6B3A     ;
 $68FF LD (IX+$06),$00 ;
 $6903 CALL $65CB      ;
 $6906 JP $67C0        ;
*$6909 LD BC,$0050     ;
 $690C JP $65D9        ;
*$690F LD A,($5E6D)    ;
 $6912 CP $18          ;
 $6914 JR C,$6967      ;
 $6916 CP $D8          ;
 $6918 JR NC,$6967     ;
 $691A SRL A           ;
 $691C LD B,A          ;
 $691D LD A,(IX+$01)   ;
 $6920 SRL A           ;
 $6922 SUB B           ;
 $6923 JP P,$6928      ;
 $6926 NEG             ;
*$6928 LD B,A          ;
 $6929 LD A,($5E6E)    ;
 $692C SRL A           ;
 $692E LD C,A          ;
 $692F LD A,(IX+$02)   ;
 $6932 SRL A           ;
 $6934 SUB C           ;
 $6935 JP P,$693A      ;
 $6938 NEG             ;
*$693A ADD A,B         ;
 $693B LD D,A          ;
 $693C LD A,($5E8D)    ;
 $693F SRL A           ;
 $6941 LD B,A          ;
 $6942 LD A,(IX+$01)   ;
 $6945 SRL A           ;
 $6947 SUB B           ;
 $6948 JP P,$694D      ;
 $694B NEG             ;
*$694D LD B,A          ;
 $694E LD A,($5E8E)    ;
 $6951 SRL A           ;
 $6953 LD C,A          ;
 $6954 LD A,(IX+$02)   ;
 $6957 SRL A           ;
 $6959 SUB C           ;
 $695A JP P,$695F      ;
 $695D NEG             ;
*$695F ADD A,B         ;
 $6960 CP D            ;
 $6961 JR C,$6967      ;
 $6963 LD HL,$5E6D     ;
 $6966 RET             ;
*$6967 LD HL,$5E8D     ;
 $696A RET             ;
; This entry point is used by the routines at #R$698F and #R$6A98.
*$696B INC DE          ;
 $696C LD A,(DE)       ;
 $696D DEC DE          ;
 $696E DEC DE          ;
 $696F DEC DE          ;
 $6970 AND $01         ;
 $6972 LD A,(DE)       ;
 $6973 RET             ;
; This entry point is used by the routine at #R$6A98.
*$6974 CALL $696B      ;
 $6977 JR Z,$6985      ;
 $6979 CP $30          ;
 $697B RET C           ;
 $697C SUB $0C         ;
 $697E LD (HL),$48     ;
*$6980 LD B,$45        ;
 $6982 JP $6BA5        ;
*$6985 CP $C0          ;
 $6987 RET NC          ;
 $6988 ADD A,$18       ;
 $698A LD (HL),$08     ;
 $698C JP $6980        ;

; Routine at 698F
c$698F CALL $75B9      ;
 $6992 LD A,(IX+$05)   ;
 $6995 AND A           ;
 $6996 JR NZ,$69B3     ;
 $6998 LD A,$04        ;
 $699A BIT 6,(IX+$00)  ;
 $699E JR Z,$69A2      ;
 $69A0 NEG             ;
*$69A2 ADD A,(IX+$01)  ;
 $69A5 CP $18          ;
 $69A7 JR C,$69B3      ;
 $69A9 CP $E0          ;
 $69AB JR NC,$69B3     ;
 $69AD LD (IX+$01),A   ;
 $69B0 JP $6F31        ;
; This entry point is used by the routine at #R$6BD0.
*$69B3 CALL $7526      ;
 $69B6 LD (IX+$00),$00 ;
 $69BA RET             ;
; This entry point is used by the routine at #R$6A98.
*$69BB CALL $696B      ;
 $69BE JR Z,$69DF      ;
 $69C0 CP $38          ;
 $69C2 RET C           ;
 $69C3 SUB $0C         ;
 $69C5 LD (HL),$52     ;
*$69C7 PUSH AF         ;
 $69C8 PUSH HL         ;
 $69C9 LD A,($5E19)    ;
 $69CC AND $03         ;
 $69CE LD C,A          ;
 $69CF LD B,$00        ;
 $69D1 LD HL,$69DB     ;
 $69D4 ADD HL,BC       ;
 $69D5 LD B,(HL)       ;
 $69D6 POP HL          ;
 $69D7 POP AF          ;
 $69D8 JP $6BA5        ;
 $69DB LD B,A          ;
 $69DC LD B,(HL)       ;
 $69DD LD B,L          ;
 $69DE LD B,E          ;
*$69DF CP $B8          ;
 $69E1 RET NC          ;
 $69E2 ADD A,$18       ;
 $69E4 LD (HL),$12     ;
 $69E6 JR $69C7        ;

; Routine at 69E8
c$69E8 CALL $75B9      ;
 $69EB LD A,(IX+$05)   ;
 $69EE AND A           ;
 $69EF JR NZ,$6A31     ;
 $69F1 LD A,$08        ;
 $69F3 BIT 6,(IX+$00)  ;
 $69F7 JR Z,$69FB      ;
 $69F9 NEG             ;
*$69FB ADD A,(IX+$01)  ;
 $69FE CP $18          ;
 $6A00 JR C,$6A31      ;
 $6A02 CP $E0          ;
 $6A04 JR NC,$6A31     ;
 $6A06 LD (IX+$01),A   ;
 $6A09 AND $08         ;
 $6A0B JR Z,$6A27      ;
 $6A0D LD DE,$7991     ;
*$6A10 CALL $74C0      ;
 $6A13 EXX             ;
 $6A14 LD A,($5E0B)    ;
 $6A17 AND $08         ;
 $6A19 JR Z,$6A2C      ;
 $6A1B LD DE,$7991     ;
*$6A1E CALL $74A8      ;
 $6A21 CALL $74F2      ;
 $6A24 JP $7450        ;
*$6A27 LD DE,$79A2     ;
 $6A2A JR $6A10        ;
*$6A2C LD DE,$79A2     ;
 $6A2F JR $6A1E        ;
*$6A31 LD DE,$7991     ;
 $6A34 CALL $7521      ;
 $6A37 LD DE,$79A2     ;
; This entry point is used by the routine at #R$6C53.
*$6A3A CALL $7521      ;
 $6A3D LD (IX+$00),$00 ;
 $6A41 RET             ;
; This entry point is used by the routines at #R$64FA, #R$67AE and #R$6A98.
*$6A42 LD HL,$5E7C     ;
 $6A45 LD B,$02        ;
*$6A47 LD A,(IX+$01)   ;
 $6A4A LD C,(HL)       ;
 $6A4B INC HL          ;
 $6A4C SUB (HL)        ;
 $6A4D JP P,$6A52      ;
 $6A50 NEG             ;
*$6A52 CP $10          ;
 $6A54 JR NC,$6A6B     ;
 $6A56 LD A,(IX+$02)   ;
 $6A59 INC HL          ;
 $6A5A SUB (HL)        ;
 $6A5B JP P,$6A60      ;
 $6A5E NEG             ;
*$6A60 CP $0D          ;
 $6A62 JR NC,$6A6B     ;
 $6A64 INC HL          ;
 $6A65 INC HL          ;
 $6A66 INC HL          ;
 $6A67 LD E,$01        ;
 $6A69 LD (HL),E       ;
 $6A6A RET             ;
*$6A6B LD HL,$5E84     ;
 $6A6E DJNZ $6A47      ;
 $6A70 LD E,$00        ;
 $6A72 RET             ;

; Routine at 6A73
;
; Used by the routines at #R$64FA, #R$67AE and #R$6A98.
c$6A73 CALL $65DC    ; Call #R$65DC.
; This entry point is used by the routine at #R$6CF1.
*$6A76 PUSH IX       ; Stash #REGix on the stack.
 $6A78 LD IX,$5EE4   ; #REGix=#R$5EE4.
 $6A7C LD HL,$5E6C   ; {#REGc=#R$5E6C.
 $6A7F LD C,(HL)     ; }
 $6A80 INC HL        ; {#REGa=#R$5E6D.
 $6A81 LD A,(HL)     ; }
 $6A82 LD (IX+$01),A ;
 $6A85 INC HL        ; {#REGa=#R$5E6E.
 $6A86 LD A,(HL)     ; }
 $6A87 LD (IX+$02),A ;
 $6A8A LD A,C        ; #REGa=#R$5E6C.
 $6A8B CALL $65F1    ; Call #R$65F1.
 $6A8E POP IX        ; Restore #REGix from the stack.
 $6A90 XOR A         ; {Write #N$00 to #R$5E6C and #R$5E74.
 $6A91 LD ($5E6C),A  ;
 $6A94 LD ($5E74),A  ; }
 $6A97 RET           ; Return.

; Routine at 6A98
c$6A98 CALL $64ED     ; Call #R$64ED.
 $6A9B DEC E          ; Decrease #REGe by one.
 $6A9C JP Z,$6A73     ; Jump to #R$6A73 if #REGe is zero.
 $6A9F CALL $6A42     ; Call #R$6A42.
 $6AA2 DEC E          ;
 $6AA3 JR NZ,$6AAA    ;
 $6AA5 LD A,C         ;
 $6AA6 AND A          ;
 $6AA7 JP NZ,$6B20    ;
*$6AAA BIT 3,(IX+$04) ;
 $6AAE JP NZ,$6B3A    ;
 $6AB1 CALL $644D     ;
 $6AB4 DEC E          ;
 $6AB5 JP Z,$679C     ;
 $6AB8 LD A,(IX+$05)  ; {If the stunned slug timer is zero, jump to #R$6AC3.
 $6ABB AND A          ;
 $6ABC JR Z,$6AC3     ; }
 $6ABE DEC (IX+$05)   ; Decrease the stunned slug timer by one.
 $6AC1 JR $6AF9       ; Jump to #R$6AF9.
*$6AC3 LD A,($5E17)   ;
 $6AC6 AND $03        ;
 $6AC8 JR NZ,$6AF9    ;
 $6ACA LD A,(IX+$01)  ;
 $6ACD CP $18         ;
 $6ACF JR C,$6AE7     ;
 $6AD1 CP $D0         ;
 $6AD3 JR NC,$6AE7    ;
 $6AD5 LD A,(IX+$02)  ;
 $6AD8 BIT 7,(IX+$00) ;
 $6ADC JR Z,$6AFC     ;
 $6ADE ADD A,$01      ;
 $6AE0 CP $B8         ;
 $6AE2 JR NC,$6B08    ;
*$6AE4 LD (IX+$02),A  ;
*$6AE7 LD A,(IX+$01)  ;
 $6AEA BIT 6,(IX+$00) ;
 $6AEE JR Z,$6B0E     ;
 $6AF0 ADD A,$04      ;
 $6AF2 CP $D0         ;
 $6AF4 JR NC,$6B1A    ;
*$6AF6 LD (IX+$01),A  ;
*$6AF9 JP $6F31       ;
*$6AFC SUB $01        ;
 $6AFE CP $28         ;
 $6B00 JR NC,$6AE4    ;
 $6B02 SET 7,(IX+$00) ;
 $6B06 JR $6AE7       ;
*$6B08 RES 7,(IX+$00) ;
 $6B0C JR $6AE7       ;
*$6B0E SUB $04        ;
 $6B10 CP $18         ;
 $6B12 JR NC,$6AF6    ;
 $6B14 SET 6,(IX+$00) ;
 $6B18 JR $6AF9       ;
*$6B1A RES 6,(IX+$00) ;
 $6B1E JR $6AF9       ;
*$6B20 AND $3F        ;
 $6B22 CP $12         ;
 $6B24 JR Z,$6B34     ;
 $6B26 CP $08         ;
 $6B28 JP Z,$6AAA     ;
 $6B2B LD BC,$0035    ;
 $6B2E CALL $737A     ;
 $6B31 JP $65DC       ;
*$6B34 CALL $65CB     ;
 $6B37 JP $6AAA       ;
; This entry point is used by the routines at #R$64FA and #R$67AE.
*$6B3A INC (IX+$05)   ;
 $6B3D LD A,($5E3B)   ;
 $6B40 INC A          ;
 $6B41 LD ($5E3B),A   ;
 $6B44 BIT 3,(IX+$05) ;
 $6B48 LD A,(IX+$06)  ;
 $6B4B JR NZ,$6B4E    ;
 $6B4D DEC A          ;
*$6B4E LD (IX+$02),A  ;
 $6B51 LD A,($5E8E)   ;
 $6B54 SRL A          ;
 $6B56 SUB $02        ;
 $6B58 LD C,A         ;
 $6B59 LD A,(IX+$02)  ;
 $6B5C SRL A          ;
 $6B5E SUB C          ;
 $6B5F JP NC,$6AF9    ;
 $6B62 RES 3,(IX+$04) ;
 $6B66 XOR A          ;
 $6B67 LD (IX+$05),A  ;
 $6B6A LD (IX+$06),A  ;
 $6B6D JP $6AF9       ;
; This entry point is used by the routine at #R$6EF1.
*$6B70 LD A,($5C78)   ;
 $6B73 AND $07        ;
 $6B75 RET NZ         ;
 $6B76 LD HL,$5E7C    ;
 $6B79 LD DE,$0008    ;
 $6B7C LD B,$02       ;
*$6B7E LD A,(HL)      ;
 $6B7F AND A          ;
 $6B80 JR Z,$6B86     ;
 $6B82 ADD HL,DE      ;
 $6B83 DJNZ $6B7E     ;
 $6B85 RET            ;
*$6B86 LD ($5E1C),HL  ;
 $6B89 LD DE,$5E6F    ;
 $6B8C LD A,(DE)      ;
 $6B8D CP $42         ;
 $6B8F JP Z,$69BB     ;
 $6B92 CP $46         ;
 $6B94 JP Z,$6974     ;
 $6B97 CALL $696B     ;
 $6B9A JR Z,$6BC7     ;
 $6B9C CP $30         ;
 $6B9E RET C          ;
 $6B9F SUB $0C        ;
 $6BA1 LD (HL),$44    ;
*$6BA3 LD B,$47       ;
; This entry point is used by the routines at #R$67AE and #R$698F.
*$6BA5 INC HL         ;
 $6BA6 LD (HL),A      ;
 $6BA7 INC DE         ;
 $6BA8 INC HL         ;
 $6BA9 LD A,(DE)      ;
 $6BAA SUB $0C        ;
 $6BAC LD (HL),A      ;
 $6BAD INC HL         ;
 $6BAE LD (HL),B      ;
 $6BAF INC HL         ;
 $6BB0 XOR A          ;
 $6BB1 LD (HL),A      ;
 $6BB2 INC HL         ;
 $6BB3 LD (HL),A      ;
 $6BB4 LD HL,($5E1C)  ;
 $6BB7 LD A,(HL)      ;
 $6BB8 AND $3F        ;
 $6BBA CP $08         ;
 $6BBC JP Z,$649E     ;
 $6BBF CP $12         ;
 $6BC1 JP Z,$64B8     ;
 $6BC4 JP $64C9       ;
*$6BC7 CP $C0         ;
 $6BC9 RET NC         ;
 $6BCA ADD A,$18      ;
 $6BCC LD (HL),$04    ;
 $6BCE JR $6BA3       ;

; Routine at 6BD0
c$6BD0 CALL $75B9     ;
 $6BD3 LD A,(IX+$05)  ;
 $6BD6 AND A          ;
 $6BD7 JP NZ,$69B3    ;
 $6BDA INC (IX+$04)   ;
 $6BDD LD A,(IX+$04)  ;
 $6BE0 AND $0F        ;
 $6BE2 CALL Z,$6C02   ;
 $6BE5 LD A,$04       ;
 $6BE7 BIT 6,(IX+$00) ;
 $6BEB JR Z,$6BEF     ;
 $6BED NEG            ;
*$6BEF ADD A,(IX+$01) ;
 $6BF2 CP $18         ;
 $6BF4 JP C,$69B3     ;
 $6BF7 CP $D8         ;
 $6BF9 JP NC,$69B3    ;
 $6BFC LD (IX+$01),A  ;
 $6BFF JP $6F31       ;
*$6C02 LD A,(IX+$00)  ;
 $6C05 AND $3F        ;
 $6C07 CP $06         ;
 $6C09 RET NC         ;
 $6C0A INC (IX+$00)   ;
 $6C0D RET            ;
; This entry point is used by the routine at #R$6D0C.
*$6C0E LD HL,$5E94    ;
 $6C11 LD B,$04       ;
 $6C13 LD DE,$0008    ;
*$6C16 LD A,(HL)      ;
 $6C17 AND A          ;
 $6C18 JR Z,$6C1E     ;
 $6C1A ADD HL,DE      ;
 $6C1B DJNZ $6C16     ;
 $6C1D RET            ;
*$6C1E LD A,($5E15)   ;
 $6C21 XOR $40        ;
 $6C23 OR $01         ;
 $6C25 LD ($5E15),A   ;
 $6C28 PUSH HL        ;
 $6C29 EX DE,HL       ;
 $6C2A LD HL,$5F38    ;
 $6C2D LD BC,$0008    ;
 $6C30 LDIR           ;
 $6C32 POP HL         ;
 $6C33 LD A,($5E15)   ;
 $6C36 AND $40        ;
 $6C38 LD DE,$5E8D    ;
 $6C3B LD A,(DE)      ;
 $6C3C JR Z,$6C4D     ;
 $6C3E ADD A,$08      ;
*$6C40 INC HL         ;
 $6C41 LD (HL),A      ;
 $6C42 INC DE         ;
 $6C43 INC HL         ;
 $6C44 LD A,(DE)      ;
 $6C45 ADD A,$07      ;
 $6C47 LD (HL),A      ;
 $6C48 LD HL,$5E90    ;
 $6C4B INC (HL)       ;
 $6C4C RET            ;
*$6C4D SET 6,(HL)     ;
 $6C4F SUB $10        ;
 $6C51 JR $6C40       ;

; Routine at 6C53
c$6C53 CALL $75B9      ; Call #R$75B9.
 $6C56 LD A,($5E8E)    ;
 $6C59 CP (IX+$02)     ;
 $6C5C JR C,$6C66      ;
 $6C5E LD (IX+$05),$01 ;
 $6C62 LD (IX+$04),$01 ;
*$6C66 LD A,(IX+$04)   ;
 $6C69 AND A           ;
 $6C6A JR Z,$6CBE      ;
 $6C6C LD A,(IX+$05)   ;
 $6C6F AND A           ;
 $6C70 JR NZ,$6C9C     ;
 $6C72 LD A,($5E17)    ;
 $6C75 CPL             ;
 $6C76 AND %00000111   ; Keep only bits 0-2.
 $6C78 JR NZ,$6CBE     ;
 $6C7A CALL $6CC7      ; Call #R$6CC7.
 $6C7D CALL $74A8      ; Call #R$74A8.
 $6C80 EXX             ;
 $6C81 INC (IX+$06)    ;
 $6C84 LD A,(IX+$06)   ;
 $6C87 CP $03          ;
 $6C89 JR NZ,$6C8F     ;
 $6C8B LD (IX+$04),$00 ;
*$6C8F CALL $6CC7      ; Call #R$6CC7.
 $6C92 CALL $74C0      ; Call #R$74C0.
 $6C95 EXX             ;
 $6C96 CALL $74F2      ;
 $6C99 JP $7450        ; Jump to #R$7450.
*$6C9C LD A,($5E17)    ; #REGa=#R$5E17.
 $6C9F AND %00000011   ; Keep only bits 0-1.
 $6CA1 JR NZ,$6CBE     ;
 $6CA3 CALL $6CC7      ; Call #R$6CC7.
 $6CA6 CALL $74A8      ; Call #R$74A8.
 $6CA9 EXX             ;
 $6CAA DEC (IX+$06)    ;
 $6CAD JP P,$6C8F      ;
 $6CB0 INC (IX+$06)    ;
 $6CB3 CALL $6CC7      ; Call #R$6CC7.
 $6CB6 CALL $6A3A      ; Call #R$6A3A.
 $6CB9 LD HL,$5E90     ;
 $6CBC DEC (HL)        ;
 $6CBD RET             ; Return.
*$6CBE CALL $6CC7      ; Call #R$6CC7.
 $6CC1 CALL $751C      ; Call #R$751C.
 $6CC4 JP $7450        ; Jump to #R$7450.

; Routine at 6CC7
;
; Used by the routine at #R$6C53.
c$6CC7 LD A,(IX+$00)                        ;
 $6CCA RRCA                                 ;
 $6CCB RRCA                                 ;
 $6CCC RRCA                                 ;
 $6CCD AND $08                              ;
 $6CCF LD C,A                               ;
 $6CD0 LD A,(IX+$06)                        ;
 $6CD3 SLA A                                ;
 $6CD5 OR C                                 ;
 $6CD6 LD HL,$6CE1                          ; #REGhl=#R$6CE1.
; This entry point is used by the routine at #R$6787.
*$6CD9 LD C,A                               ;
 $6CDA LD B,$00                             ;
 $6CDC ADD HL,BC                            ;
 $6CDD LD E,(HL)                            ;
 $6CDE INC HL                               ;
 $6CDF LD D,(HL)                            ;
 $6CE0 RET                                  ; Return.
 $6CE1 DEFB $7A,$78,$82,$78,$8D,$78,$A6,$78 ;
 $6CE9 DEFB $C9,$78,$D1,$78,$DC,$78,$F5,$78 ;

; Routine at 6CF1
;
; Used by the routine at #R$6D0C.
c$6CF1 LD A,(IX+$02) ;
 $6CF4 CP $B7        ;
 $6CF6 JP NC,$6A76   ;
 $6CF9 INC (IX+$02)  ;
 $6CFC LD A,($5E3B)  ;
 $6CFF SLA A         ;
 $6D01 NEG           ;
 $6D03 ADD A,$0F     ;
 $6D05 JR $6D52      ;
; This entry point is used by the routine at #R$6D0C.
*$6D07 CALL $751C    ;
 $6D0A JR $6D60      ;

; Routine at 6D0C
c$6D0C CALL $75B9      ; Call #R$75B9.
 $6D0F LD DE,$769A     ; #REGde=#R$769A.
 $6D12 LD A,($5E6C)    ; {If #R$5E6C is not active, jump to #R$6D07.
 $6D15 AND A           ;
 $6D16 JR Z,$6D07      ; }
 $6D18 LD A,($5E22)    ; {#R$5E22
 $6D1B AND A           ;
 $6D1C JR NZ,$6D07     ; }
 $6D1E LD A,($5E3B)    ; #REGa=#R$5E3B.
 $6D21 CP (IX+$06)     ;
 $6D24 JR Z,$6D2D      ;
 $6D26 LD (IX+$06),A   ;
 $6D29 LD (IX+$05),$01 ;
*$6D2D DEC (IX+$05)    ;
 $6D30 JR NZ,$6D07     ;
 $6D32 LD A,($5E3B)    ;
 $6D35 AND A           ;
 $6D36 JR Z,$6D3E      ;
 $6D38 CP $01          ;
 $6D3A JR Z,$6D07      ;
 $6D3C JR $6CF1        ;
*$6D3E DEC (IX+$02)    ;
 $6D41 LD A,(IX+$04)   ;
 $6D44 RLCA            ;
 $6D45 RLCA            ;
 $6D46 LD B,A          ;
 $6D47 LD A,(IX+$02)   ;
 $6D4A CP $70          ;
 $6D4C JP C,$668E      ;
 $6D4F LD A,$20        ;
 $6D51 SUB B           ;
; This entry point is used by the routine at #R$6CF1.
*$6D52 LD (IX+$05),A   ;
 $6D55 LD A,($5E15)    ;
 $6D58 AND $40         ;
 $6D5A LD ($5E15),A    ;
 $6D5D CALL $74DF      ;
; This entry point is used by the routine at #R$6CF1.
*$6D60 CALL $7450      ;
 $6D63 LD L,(IX+$01)   ;
 $6D66 LD H,(IX+$02)   ;
*$6D69 LD A,H          ;
 $6D6A CP $B8          ;
 $6D6C JR NC,$6D84     ;
 $6D6E CPL             ;
 $6D6F AND $07         ;
 $6D71 JR NZ,$6D7A     ;
 $6D73 PUSH HL         ;
 $6D74 CALL $748F      ;
 $6D77 LD (HL),$7C     ;
 $6D79 POP HL          ;
*$6D7A PUSH HL         ;
 $6D7B CALL $759A      ;
 $6D7E LD (HL),$B9     ;
 $6D80 POP HL          ;
 $6D81 INC H           ;
 $6D82 JR $6D69        ;
*$6D84 XOR A           ;
 $6D85 LD ($5E3B),A    ;
 $6D88 LD A,(IX+$04)   ;
 $6D8B AND A           ;
 $6D8C RET M           ;
 $6D8D LD A,($5E15)    ;
 $6D90 AND $01         ;
 $6D92 RET NZ          ;
 $6D93 LD A,(IX+$02)   ;
 $6D96 AND $0F         ;
 $6D98 RET NZ          ;
 $6D99 JP $6C0E        ;

; Read Player Input
;
; Used by the routines at #R$6DBA and #R$6EF1.
@label=ReadInput
c$6D9C LD A,($5E03)  ; {Jump to #R$75CC if #R$5E03 is set to joystick controls.
 $6D9F BIT 1,A       ;
 $6DA1 JP NZ,$75CC   ; }
; Read keyboard input.
 $6DA4 LD A,$FB      ; {Read from the keyboard;
 $6DA6 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $6DA8 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { $FB | Q | W | E | R | T }
                     ; TABLE#}
; Convert the bits into game compatible bits (as in, see #R$75CC - as this is
; what is being matched).
 $6DAA LD C,A        ; Store the original result in #REGc.
 $6DAB RRA           ; Rotate the bits right once.
 $6DAC AND %00000001 ; Keep only bit 0.
 $6DAE LD E,A        ; Store the result in #REGe.
 $6DAF LD A,C        ; Restore the original result to #REGa.
 $6DB0 RLA           ; Rotate the bits left once.
 $6DB1 AND %00000010 ; Keep only bit 1.
 $6DB3 OR E          ; Set the bits already processed from #REGe.
 $6DB4 LD E,A        ; Store the result in #REGe.
 $6DB5 LD A,C        ; Restore the original result to #REGa.
 $6DB6 AND %00011100 ; Keep only bits 2-4.
 $6DB8 OR E          ; Set the bits already processed from #REGe.
 $6DB9 RET           ; Return.

; Routine at 6DBA
c$6DBA LD HL,$5E22     ;
 $6DBD LD A,(HL)       ;
 $6DBE AND A           ;
 $6DBF JR Z,$6DDB      ;
 $6DC1 DEC (HL)        ;
 $6DC2 JP NZ,$619E     ;
 $6DC5 LD A,($5E1E)    ;
 $6DC8 AND A           ;
 $6DC9 JR NZ,$6DD6     ;
 $6DCB LD HL,$0018     ;
*$6DCE CALL $61B4      ;
 $6DD1 CALL $64E7      ;
 $6DD4 JR $6DDB        ;
*$6DD6 LD HL,$00D8     ;
 $6DD9 JR $6DCE        ;
*$6DDB LD A,(IX+$01)   ;
 $6DDE CP $20          ;
 $6DE0 JR C,$6DEA      ;
 $6DE2 CP $D0          ;
 $6DE4 JR NC,$6DEA     ;
 $6DE6 RES 2,(IX+$04)  ;
*$6DEA CALL $75B9      ;
 $6DED CALL $6D9C      ;
 $6DF0 BIT 0,A         ;
 $6DF2 JR Z,$6E11      ;
 $6DF4 BIT 1,A         ;
 $6DF6 JR Z,$6E1F      ;
*$6DF8 LD A,(IX+$01)   ;
 $6DFB CP $18          ;
 $6DFD JR C,$6E0E      ;
 $6DFF CP $D8          ;
 $6E01 JR NC,$6E0E     ;
 $6E03 CALL $6D9C      ;
 $6E06 BIT 3,A         ;
 $6E08 JR Z,$6E2A      ;
 $6E0A BIT 2,A         ;
 $6E0C JR Z,$6E38      ;
*$6E0E JP $6F31        ;
*$6E11 LD A,(IX+$01)   ;
 $6E14 ADD A,$02       ;
 $6E16 CP $D8          ;
 $6E18 JR NC,$6E43     ;
*$6E1A LD (IX+$01),A   ;
 $6E1D JR $6DF8        ;
*$6E1F LD A,(IX+$01)   ;
 $6E22 SUB $02         ;
 $6E24 CP $18          ;
 $6E26 JR C,$6E43      ;
 $6E28 JR $6E1A        ;
*$6E2A LD A,(IX+$02)   ;
 $6E2D SUB $02         ;
 $6E2F CP $28          ;
 $6E31 JR C,$6E0E      ;
*$6E33 LD (IX+$02),A   ;
 $6E36 JR $6E0E        ;
*$6E38 LD A,(IX+$02)   ;
 $6E3B ADD A,$02       ;
 $6E3D CP $B8          ;
 $6E3F JR NC,$6E0E     ;
 $6E41 JR $6E33        ;
*$6E43 CALL $7049      ;
 $6E46 BIT 0,E         ;
 $6E48 JR Z,$6DF8      ;
 $6E4A BIT 1,E         ;
 $6E4C LD A,(IX+$01)   ;
 $6E4F JR Z,$6E60      ;
 $6E51 ADD A,$02       ;
 $6E53 CP $E4          ;
 $6E55 JR NC,$6E0E     ;
*$6E57 BIT 2,E         ;
 $6E59 JR NZ,$6E68     ;
 $6E5B LD (IX+$01),A   ;
 $6E5E JR $6E0E        ;
*$6E60 SUB $02         ;
 $6E62 CP $0C          ;
 $6E64 JR C,$6E0E      ;
 $6E66 JR $6E57        ;
*$6E68 LD A,(HL)       ;
 $6E69 BIT 7,A         ;
 $6E6B JR NZ,$6EC0     ;
 $6E6D BIT 2,(IX+$04)  ;
 $6E71 JR Z,$6E79      ;
 $6E73 CP (IX+$06)     ;
 $6E76 JP Z,$6E0E      ;
*$6E79 AND $07         ;
 $6E7B OR $40          ;
 $6E7D LD (IX+$03),A   ;
 $6E80 LD (IX+$0B),A   ;
 $6E83 LD A,$02        ;
 $6E85 LD (IX+$00),A   ;
 $6E88 INC A           ;
 $6E89 LD (IX+$08),A   ;
 $6E8C CALL $64D6      ;
 $6E8F BIT 7,(IX+$01)  ;
 $6E93 LD A,(IX+$01)   ;
 $6E96 JR Z,$6EC5      ;
 $6E98 RES 0,(IX+$04)  ;
 $6E9C ADD A,$14       ;
 $6E9E LD (IX+$09),A   ;
 $6EA1 SUB $04         ;
*$6EA3 LD (IX+$0D),A   ;
 $6EA6 LD A,(IX+$02)   ;
 $6EA9 LD (IX+$0A),A   ;
 $6EAC LD (IX+$0E),A   ;
 $6EAF LD (IX+$0C),$00 ;
 $6EB3 LD (HL),$00     ;
 $6EB5 SET 2,(IX+$04)  ;
 $6EB9 SET 3,(IX+$04)  ;
 $6EBD JP $6E0E        ;
*$6EC0 LD (HL),$80     ;
 $6EC2 JP $6E0E        ;
*$6EC5 SUB $0D         ;
 $6EC7 LD (IX+$09),A   ;
 $6ECA ADD A,$01       ;
 $6ECC SET 0,(IX+$04)  ;
 $6ED0 JR $6EA3        ;

; Routine at 6ED2
c$6ED2 CALL $75B9      ;
 $6ED5 LD A,(IX+$05)   ;
 $6ED8 LD (IX+$01),A   ;
 $6EDB LD A,(IX+$06)   ;
 $6EDE LD (IX+$02),A   ;
 $6EE1 CALL $74EB      ;
 $6EE4 CALL $7450      ;
 $6EE7 BIT 0,(IX+$04)  ;
 $6EEB RET Z           ;
 $6EEC LD (IX+$00),$00 ;
 $6EF0 RET             ;

; Routine at 6EF1
c$6EF1 CALL $75B9      ;
 $6EF4 BIT 3,(IX+$04)  ;
 $6EF8 JR Z,$6F00      ;
 $6EFA RES 3,(IX+$04)  ;
 $6EFE JR $6F29        ;
*$6F00 CALL $6D9C      ;
 $6F03 BIT 0,A         ;
 $6F05 JR Z,$6F41      ;
 $6F07 BIT 1,A         ;
 $6F09 JR Z,$6F77      ;
*$6F0B LD A,(IX+$01)   ;
 $6F0E BIT 0,(IX+$04)  ;
 $6F12 JR Z,$6F37      ;
 $6F14 CP $D8          ;
 $6F16 JR NC,$6F29     ;
 $6F18 CP $24          ;
 $6F1A JR C,$6F29      ;
*$6F1C CALL $6D9C      ;
 $6F1F BIT 3,A         ;
 $6F21 JP Z,$6FAA      ;
 $6F24 BIT 2,A         ;
 $6F26 JP Z,$6FBD      ;
*$6F29 CALL $6D9C      ;
 $6F2C BIT 4,A         ;
 $6F2E CALL Z,$6B70    ;
; This entry point is used by the routines at #R$64FA, #R$679C, #R$67AE,
; #R$698F, #R$6A98, #R$6BD0 and #R$6DBA.
*$6F31 CALL $74EB      ;
 $6F34 JP $7450        ;
*$6F37 CP $18          ;
 $6F39 JR C,$6F29      ;
 $6F3B CP $CC          ;
 $6F3D JR NC,$6F29     ;
 $6F3F JR $6F1C        ;
*$6F41 BIT 0,(IX+$04)  ;
 $6F45 JR Z,$6F61      ;
 $6F47 LD A,(IX+$01)   ;
 $6F4A SUB $0C         ;
 $6F4C LD (IX+$01),A   ;
 $6F4F LD A,(IX+$09)   ;
 $6F52 ADD A,$10       ;
 $6F54 LD (IX+$0D),A   ;
 $6F57 RES 0,(IX+$04)  ;
 $6F5B RES 2,(IX+$04)  ;
 $6F5F JR $6F72        ;
*$6F61 LD A,(IX+$01)   ;
 $6F64 ADD A,$02       ;
 $6F66 CP $CC          ;
 $6F68 JR NC,$6FC9     ;
 $6F6A LD (IX+$01),A   ;
 $6F6D LD A,(IX+$09)   ;
 $6F70 ADD A,$02       ;
*$6F72 LD (IX+$0D),A   ;
 $6F75 JR $6F0B        ;
*$6F77 BIT 0,(IX+$04)  ;
 $6F7B JR NZ,$6F97     ;
 $6F7D LD A,(IX+$01)   ;
 $6F80 ADD A,$0C       ;
 $6F82 LD (IX+$01),A   ;
 $6F85 LD A,(IX+$09)   ;
 $6F88 SUB $10         ;
 $6F8A LD (IX+$0D),A   ;
 $6F8D SET 0,(IX+$04)  ;
 $6F91 RES 2,(IX+$04)  ;
 $6F95 JR $6F72        ;
*$6F97 LD A,(IX+$01)   ;
 $6F9A SUB $02         ;
 $6F9C CP $24          ;
 $6F9E JR C,$6FC9      ;
 $6FA0 LD (IX+$01),A   ;
 $6FA3 LD A,(IX+$09)   ;
 $6FA6 SUB $02         ;
 $6FA8 JR $6F72        ;
*$6FAA LD A,(IX+$02)   ;
 $6FAD CP $28          ;
 $6FAF JP C,$6F29      ;
 $6FB2 SUB $02         ;
*$6FB4 LD (IX+$02),A   ;
 $6FB7 LD (IX+$0E),A   ;
 $6FBA JP $6F29        ;
*$6FBD LD A,(IX+$02)   ;
 $6FC0 ADD A,$02       ;
 $6FC2 CP $B8          ;
 $6FC4 JP NC,$6F29     ;
 $6FC7 JR $6FB4        ;
*$6FC9 CALL $7049      ;
 $6FCC LD A,(IX+$02)   ;
 $6FCF LD (IX+$0E),A   ;
 $6FD2 BIT 0,E         ;
 $6FD4 JP Z,$6F0B      ;
 $6FD7 BIT 2,E         ;
 $6FD9 JP NZ,$6F29     ;
 $6FDC LD A,(IX+$01)   ;
 $6FDF BIT 1,E         ;
 $6FE1 JR Z,$6FF7      ;
 $6FE3 ADD A,$02       ;
 $6FE5 CP $D8          ;
 $6FE7 JR NC,$7007     ;
 $6FE9 LD (IX+$01),A   ;
 $6FEC LD A,(IX+$09)   ;
 $6FEF ADD A,$02       ;
*$6FF1 LD (IX+$0D),A   ;
 $6FF4 JP $6F29        ;
*$6FF7 SUB $02         ;
 $6FF9 CP $18          ;
 $6FFB JR C,$7007      ;
 $6FFD LD (IX+$01),A   ;
 $7000 LD A,(IX+$09)   ;
 $7003 SUB $02         ;
 $7005 JR $6FF1        ;
*$7007 BIT 2,(IX+$04)  ;
 $700B JP NZ,$6F29     ;
 $700E LD A,(IX+$03)   ;
 $7011 AND $07         ;
 $7013 OR $08          ;
 $7015 LD (IX+$06),A   ;
 $7018 LD (HL),A       ;
 $7019 SET 2,(IX+$04)  ;
 $701D LD (IX+$00),$01 ;
 $7021 LD (IX+$03),$47 ;
 $7025 LD A,(IX+$09)   ;
 $7028 BIT 7,A         ;
 $702A JR NZ,$703B     ;
 $702C SUB $02         ;
*$702E LD (IX+$0D),A   ;
 $7031 LD (IX+$0C),$01 ;
 $7035 CALL $64DC      ;
 $7038 JP $6F29        ;
*$703B ADD A,$04       ;
 $703D JR $702E        ;
*$703F LD A,(IX+$00)   ;
 $7042 DEC A           ;
 $7043 RET NZ          ;
 $7044 RES 2,(IX+$04)  ;
 $7048 RET             ;
; This entry point is used by the routine at #R$6DBA.
*$7049 LD E,$00        ;
 $704B LD A,(IX+$02)   ;
 $704E AND $1F         ;
 $7050 SUB $17         ;
 $7052 JP P,$7057      ;
 $7055 NEG             ;
*$7057 CP $05          ;
 $7059 JR NC,$703F     ;
 $705B LD A,(IX+$02)   ;
 $705E AND $E0         ;
 $7060 OR $17          ;
 $7062 LD (IX+$02),A   ;
 $7065 BIT 7,(IX+$01)  ;
 $7069 JR Z,$708B      ;
 $706B LD E,$03        ;
*$706D LD A,(IX+$02)   ;
 $7070 RLCA            ;
 $7071 RLCA            ;
 $7072 RLCA            ;
 $7073 AND $07         ;
 $7075 DEC A           ;
 $7076 BIT 7,(IX+$01)  ;
 $707A JR Z,$707E      ;
 $707C ADD A,$05       ;
*$707E LD C,A          ;
 $707F LD B,$00        ;
 $7081 LD HL,$5E23     ;
 $7084 ADD HL,BC       ;
 $7085 LD A,(HL)       ;
 $7086 AND A           ;
 $7087 RET Z           ;
 $7088 SET 2,E         ;
 $708A RET             ;
*$708B LD E,$01        ;
 $708D JR $706D        ;
; This entry point is used by the routine at #R$60FD.
*$708F LD HL,($5E05)   ;
 $7092 LD DE,($5E08)   ;
 $7096 LD A,L          ;
 $7097 LD L,H          ;
 $7098 LD H,A          ;
 $7099 LD A,E          ;
 $709A LD E,D          ;
 $709B LD D,A          ;
 $709C AND A           ;
 $709D SBC HL,DE       ;
 $709F JR C,$70AD      ;
 $70A1 JR NZ,$70CC     ;
 $70A3 LD A,($5E07)    ;
 $70A6 LD E,A          ;
 $70A7 LD A,($5E0A)    ;
 $70AA CP E            ;
 $70AB JR C,$70CC      ;
*$70AD LD HL,$5E08     ;
*$70B0 PUSH HL         ;
 $70B1 LD DE,$5E00     ;
 $70B4 LD B,$03        ;
*$70B6 LD A,(DE)       ;
 $70B7 CP (HL)         ;
 $70B8 JR C,$70C2      ;
 $70BA JR NZ,$70C0     ;
 $70BC INC HL          ;
 $70BD INC DE          ;
 $70BE DJNZ $70B6      ;
*$70C0 POP HL          ;
 $70C1 RET             ;
*$70C2 POP HL          ;
 $70C3 LD DE,$5E00     ;
 $70C6 LD BC,$0003     ;
 $70C9 LDIR            ;
 $70CB RET             ;
*$70CC LD HL,$5E05     ;
 $70CF JR $70B0        ;

; Routine at 70D1
@label=Reset
c$70D1 LD HL,$5E94   ; #REGhl=#R$5E94.
 $70D4 LD B,$0B      ; #REGb=#N$0B.

; Set Objects Inactive
;
; Used by the routines at #R$5F40, #R$6090, #R$668E and #R$66D7.
;
; B Loop counter
; HL Object to be updated
@label=SetObjectInactive
c$70D6 LD DE,$0008   ; Increment value.
@label=SetObjectInactive_Loop
*$70D9 LD (HL),$00   ; Reset first byte of object.
 $70DB ADD HL,DE     ; Set #REGhl to beginning of next object.
 $70DC DJNZ $70D9    ; Decrease counter by one and loop back to #R$70D9 until
                     ; counter is zero.
 $70DE RET           ; Return.

; Limit Frame Rate
@label=LimitFrameRate
c$70DF LD A,($5E20)  ; {Return if #R$5E20 is not marked as being updated.
 $70E2 AND A         ;
 $70E3 RET NZ        ; }
 $70E4 LD HL,$00C0   ; Introduce a counter for a slight pause.
@label=LimitFrameRate_Loop
*$70E7 DEC HL        ; Decrease counter by one.
 $70E8 LD A,L        ; {Keep looping back to #R$70E7 until the counter is zero.
 $70E9 OR H          ;
 $70EA JR NZ,$70E7   ; }
 $70EC RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$691B }
; LIST#

; Frame Update
;
; Used by the routine at #R$631E.
@label=FrameUpdate
c$70ED DI            ; Disable interrupts.
 $70EE LD A,($5C78)  ; {#HTML(Update #R$5E1F with <a
 $70F1 LD ($5E1F),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
 $70F4 LD A,$01      ; {Set #R$5E20 as "being updated" (i.e. #N$01).
 $70F6 LD ($5E20),A  ; }
 $70F9 PUSH IX       ; Stash #REGix on the stack.
 $70FB LD HL,$5E8C   ; {Write #R$5E8C to #R$713C(#N$713D).
 $70FE LD ($713D),HL ; }
 $7101 LD A,$C3      ; {#HTML(Write #N$C3 to #R$714F and #R$7125 to
 $7103 LD ($714F),A  ; #R$714F(#N$7150), i.e. <code>JP #R$7125</code>).
 $7106 LD HL,$7125   ;
 $7109 LD ($7150),HL ; }
 $710C LD IX,$5E6C   ; #REGix=#R$5E6C.
 $7110 JP $635B      ; Jump to #R$635B.

; Reset Modified Code
;
; Used by the routines at #R$631E and #R$7125.
@label=ResetModifiedCode
c$7113 LD HL,$5EEC   ; {Write #R$5EEC to #R$713C(#N$713D).
 $7116 LD ($713D),HL ; }
 $7119 LD A,$2A      ; {Write #N$2A to #R$714F.
 $711B LD ($714F),A  ; }
 $711E LD HL,$5E17   ; {Write #R$5E17 to #R$714F(#N$7150).
 $7121 LD ($7150),HL ; }
 $7124 RET           ; Return.

; Reset Modified Code In Frame
@label=ResetModifiedInFrame
c$7125 CALL $7113    ; Call #R$7113.
 $7128 POP IX        ; Restore jump table address, saved during frame update.
 $712A XOR A         ; {Set #R$5E20 as "not updated" (i.e. #N$00).
 $712B LD ($5E20),A  ; }
 $712E EI            ; Enable interrupts.
 $712F RET           ; Return.

; New Actor
;
; .
;
; IX Item object
@label=NewActor
c$7130 LD HL,$5E19     ; {Increment #R$5E19 by one.
 $7133 INC (HL)        ; }
 $7134 LD DE,$0008     ; Set offset.
 $7137 ADD IX,DE       ; Set #REGix to next group of bytes.
 $7139 PUSH IX         ; {Copy #REGix to #REGhl using the stack.
 $713B POP HL          ; }
; The self-modifying code routines change the address here to be either;
; #TABLE(default,centre,centre)
; { =h Altering Routine | =h Alteration }
; { #R$7113 | #N$5EEC }
; TABLE#
 $713C LD BC,$5EEC     ; #REGbc=#R$5EEC.
 $713F AND A           ; Clear the carry flag
 $7140 SBC HL,BC       ;
 $7142 JP C,$635B      ;
; Holding "SHIFT" pauses the game.
@label=Pause_Loop
*$7145 LD A,$FE        ; {Read from the keyboard;
 $7147 OUT ($FD),A     ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $7149 IN A,($FE)      ; { =h,r2 Port Number | =h,c5 Bit }
                       ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                       ; { #N$FE | SHIFT | Z | X | C | V }
                       ; TABLE#}
 $714B BIT 0,A         ; Has the "SHIFT" key been pressed?
 $714D JR Z,$7145      ; If it has then jump to #R$7145.
 $714F LD HL,($5E17)   ; #REGhl=#R$5E17(see #R$711E).
 $7152 INC HL          ;
 $7153 LD ($5E17),HL   ;
 $7156 LD H,$00        ;
 $7158 LD A,R          ;
 $715A LD C,A          ;
 $715B LD A,($5E19)    ;
 $715E ADD A,(HL)      ;
 $715F ADD A,C         ;
 $7160 LD ($5E19),A    ;
 $7163 EX AF,AF'       ;
 $7164 LD A,($5E16)    ;
 $7167 CP $03          ;
 $7169 JR C,$717E      ;
 $716B LD A,($5E37)    ;
 $716E CP $06          ;
 $7170 JR NC,$717E     ;
 $7172 EX AF,AF'       ;
 $7173 AND $1F         ;
 $7175 JR NZ,$71BE     ;
 $7177 LD A,($5E16)    ;
 $717A CP $06          ;
 $717C JR NC,$71BE     ;
*$717E LD A,($5E22)    ;
 $7181 AND A           ;
 $7182 JR NZ,$71BE     ;
 $7184 LD A,($5E17)    ;
 $7187 AND $0F         ;
 $7189 CP $0A          ;
 $718B JR NC,$71BE     ;
 $718D LD C,A          ;
 $718E LD B,$00        ;
 $7190 LD HL,$5E23     ;
 $7193 ADD HL,BC       ;
 $7194 LD A,(HL)       ;
 $7195 AND A           ;
 $7196 JR NZ,$71BE     ;
 $7198 LD A,($5E8C)    ;
 $719B CP $13          ;
 $719D JR Z,$71BE      ;
 $719F LD A,C          ;
 $71A0 LD ($5E13),A    ;
 $71A3 LD A,($5E6C)    ;
 $71A6 AND $3F         ;
 $71A8 DEC A           ;
 $71A9 JR Z,$71AE      ;
 $71AB DEC A           ;
 $71AC JR NZ,$71BE     ;
*$71AE LD HL,$5EB4     ;
 $71B1 LD B,$06        ;
 $71B3 LD DE,$0008     ;
*$71B6 LD A,(HL)       ;
 $71B7 AND A           ;
 $71B8 JP Z,$7262      ;
 $71BB ADD HL,DE       ;
 $71BC DJNZ $71B6      ;
; This entry point is used by the routine at #R$7262.
*$71BE LD A,($5E3C)    ;
 $71C1 AND A           ;
 $71C2 JP NZ,$721A     ;
 $71C5 LD A,($5E19)    ;
 $71C8 AND A           ;
 $71C9 JP NZ,$634F     ;
 $71CC LD A,($5E17)    ;
 $71CF AND $0F         ;
 $71D1 CP $0A          ;
 $71D3 JP NC,$634F     ;
 $71D6 LD C,A          ;
 $71D7 LD B,$00        ;
 $71D9 LD HL,$5E23     ;
 $71DC ADD HL,BC       ;
 $71DD LD A,(HL)       ;
 $71DE AND A           ;
 $71DF JP NZ,$634F     ;
 $71E2 LD (HL),$FF     ;
 $71E4 LD IX,$5E3C     ;
 $71E8 LD A,C          ;
 $71E9 CP $05          ;
 $71EB JR NC,$725A     ;
 $71ED LD (IX+$01),$08 ;
; This entry point is used by the routine at #R$7249.
*$71F1 RRCA            ;
 $71F2 RRCA            ;
 $71F3 RRCA            ;
 $71F4 AND $E0         ;
 $71F6 ADD A,$37       ;
 $71F8 LD (IX+$02),A   ;
 $71FB LD A,R          ;
 $71FD AND $03         ;
 $71FF CP $03          ;
 $7201 JR NZ,$7204     ;
 $7203 XOR A           ;
*$7204 ADD A,$0B       ;
 $7206 LD (IX+$04),$FF ;
 $720A LD (IX+$00),A   ;
 $720D LD (IX+$03),$43 ;
 $7211 LD (IX+$05),C   ;
; This entry point is used by the routine at #R$7249.
*$7214 CALL $64E7      ;
 $7217 JP $634F        ;

; Routine at 721A
;
; Used by the routine at #R$7130.
c$721A LD IX,$5E3C   ; #REGix=#R$5E3C.
 $721E CALL $75B9    ; Call #R$75B9.
 $7221 LD C,(IX+$05) ;
 $7224 LD B,$00      ;
 $7226 LD HL,$5E23   ;
 $7229 ADD HL,BC     ;
 $722A LD A,(HL)     ;
 $722B CP (IX+$04)   ;
 $722E JR NZ,$7249   ;
 $7230 CALL $74EB    ; Call #R$74EB.
 $7233 CALL $7450    ; Call #R$7450.
 $7236 LD A,($5E17)  ; #REGa=#R$5E17.
 $7239 AND %00000011 ; Keep only bits 0-1.
 $723B JP NZ,$634F   ;
 $723E LD A,(IX+$03) ;
 $7241 XOR %00000100 ; Unset bit 2.
 $7243 LD (IX+$03),A ;
 $7246 JP $634F      ; Jump to #R$634F.

; Routine at 7249
;
; Used by the routine at #R$721A.
c$7249 LD (HL),$00     ;
 $724B CALL $7526      ;
 $724E LD BC,$1000     ;
 $7251 CALL $737A      ;
 $7254 LD (IX+$00),$00 ;
 $7258 JR $7214        ;
; This entry point is used by the routine at #R$7130.
*$725A LD (IX+$01),$E8 ;
 $725E SUB $05         ;
 $7260 JR $71F1        ;

; Routine at 7262
;
; Used by the routine at #R$7130.
c$7262 PUSH HL          ; Stash #REGhl on the stack.
 $7263 EX DE,HL         ; Switch #REGde and #REGhl.
 $7264 LD HL,$5F16      ; {Copy #N$0008 bytes of data from #R$5F16 to #REGde.
 $7267 LD BC,$0008      ;
 $726A LDIR             ; }
 $726C POP IX           ; Restore #REGix from the stack (the old value in
                        ; #REGhl).
 $726E LD A,($5E13)     ; #REGa=#R$5E13.
 $7271 CP $05           ;
 $7273 JR NC,$72CC      ;
 $7275 LD (IX+$01),$08  ;
 $7279 SET 6,(IX+$00)   ;
*$727D RRCA             ;
 $727E RRCA             ;
 $727F RRCA             ;
 $7280 AND %11100000    ; Keep only bits 5-7.
 $7282 ADD A,$37        ;
 $7284 LD (IX+$02),A    ;
 $7287 LD A,($5E37)     ; #REGa=#R$5E37.
 $728A CP $01           ;
 $728C JR Z,$72D4       ;
 $728E CP $02           ;
 $7290 JR Z,$72DA       ;
 $7292 CP $03           ;
 $7294 JR Z,$72E1       ;
 $7296 CP $04           ;
 $7298 JR C,$729C       ;
 $729A LD A,R           ;
*$729C AND %00000011    ; Keep only bits 0-1.
 $729E LD C,A           ;
 $729F SLA A            ;
 $72A1 ADD A,C          ;
 $72A2 LD C,A           ;
 $72A3 LD B,$00         ;
 $72A5 LD HL,$72E9      ; #REGhl=#R$72E9.
 $72A8 ADD HL,BC        ;
 $72A9 LD A,(HL)        ;
 $72AA LD (IX+$00),A    ;
 $72AD INC HL           ;
 $72AE LD A,($5E19)     ; #REGa=#R$5E19.
 $72B1 BIT 6,A          ;
 $72B3 JR Z,$72B6       ;
 $72B5 INC HL           ;
*$72B6 LD A,(HL)        ;
 $72B7 LD (IX+$03),A    ;
 $72BA LD E,$00         ;
 $72BC LD HL,$5E6E      ; #REGhl=#R$5E6E.
 $72BF CALL $7310       ;
 $72C2 DEC E            ;
 $72C3 JR NZ,$72C9      ;
 $72C5 LD (IX+$00),$00  ;
*$72C9 JP $71BE         ; Jump to #R$71BE.
; Who knows.
*$72CC LD (IX+$01),$E0  ;
 $72D0 SUB $05          ;
 $72D2 JR $727D         ;
*$72D4 LD A,R           ;
 $72D6 AND %00000001    ; Keep only bit 0.
 $72D8 JR $729C         ;
*$72DA LD A,R           ;
 $72DC AND %00000001    ; Keep only bit 0.
 $72DE INC A            ;
 $72DF JR $729C         ;
*$72E1 LD A,R           ;
 $72E3 AND %00000001    ; Keep only bit 0.
 $72E5 OR $02           ;
 $72E7 JR $729C         ; Jump to #R$729C.
 $72E9 DEFB $07,$44,$45 ;
 $72EC DEFB $0A,$41,$42 ;
 $72EF DEFB $09,$46,$43 ;
 $72F2 DEFB $07,$44,$45 ;

; Bug Collision
;
; Used by the routine at #R$64ED.
;
;   IX Bug object
; O:E #N$00 no collision
; O:E #N$01 collision
@label=BugCollision
c$72F5 LD HL,$5E6C   ; #REGhl=#R$5E6C.
 $72F8 LD E,$00      ; #REGe=Default value #N$00 (no collision).
 $72FA LD A,(HL)     ; #REGa=#R$5E6C.
 $72FB AND %00111111 ; Keep only bits 0-5.
 $72FD DEC A         ; Decrease #REGa by one.
 $72FE JR Z,$7302    ; If #REGa is zero then jump to #R$7302.
 $7300 DEC A         ;
 $7301 RET NZ        ;
@label=BugCollision_X
*$7302 INC HL        ; {#REGa=#R$5E6D.
 $7303 LD A,(HL)     ; }
 $7304 SUB (IX+$01)  ; Robbie X position - bug X Position.
 $7307 JP P,$730C    ; {Make sure we have a positive byte.
 $730A NEG           ; }
@label=BugCollision_Test_X
*$730C CP $10        ; {Return if #REGa >= #N$10.
 $730E RET NC        ; }
 $730F INC HL        ; {#REGa=#R$5E6E.
; This entry point is used by the routine at #R$7262.
*$7310 LD A,(HL)     ; }
 $7311 SUB (IX+$02)  ; Robbie Y position - bug Y position.
 $7314 JP P,$731E    ; {Set #REGd to #N$12 if it's a positive number.
 $7317 NEG           ; }
 $7319 LD D,(IX+$07) ; #REGd=bug sprite height.
 $731C JR $7320      ; Jump to #R$7320.
@label=BugCollision_SetHeight
*$731E LD D,$12      ; #REGd=#N$12.
@label=BugCollision_Test_Y
*$7320 CP D          ; {Return if #REGd >= #REGa.
 $7321 RET NC        ; }
; A collision has been detected.
 $7322 LD E,$01      ; #REGe=#N$01.
 $7324 RET           ; Return.

; Display Lives
;
; Used by the routines at #R$5F80 and #R$6176.
;
; .
;
; Controller for 1UP lives.
@label=DisplayPlayerLives
c$7325 LD HL,$0040    ; {Call #R$759A with #N($0040, $04, $04) (screen buffer
 $7328 CALL $759A     ; address) for 1UP lives.}
 $732B CALL $7364     ; #REGa=1UP lives remaining (by calling #R$7364).
 $732E AND A          ; {If 1UP lives are zero, jump to #R$734D.
 $732F JR Z,$734D     ; }
 $7331 CALL $7340     ; Else, there are lives to display so call #R$7340.
; Controller for 2UP lives.
@label=Controller2UPLives
*$7334 LD HL,$00B0    ; {Call #R$759A with #N($00B0, $04, $04) (screen buffer
 $7337 CALL $759A     ; address) for 2UP lives.}
 $733A CALL $7372     ; #REGa=2UP lives remaining (by calling #R$7372).
 $733D AND A          ; {If 2UP lives are zero, jump to #R$7352.
 $733E JR Z,$7352     ; }
; Handles displaying the lives count and UDG character.
@label=HandlerDisplayLives
*$7340 ADD A,$30      ; Add #N$30 to convert to an ASCII character (starting at
                      ; "0" character).
 $7342 CALL $73CD     ; Call #R$73CD.
 $7345 LD DE,$735C    ; #REGde=#R$735C.
 $7348 PUSH BC        ; {Stash #REGbc and #REGde on the stack.
 $7349 PUSH DE        ; }
 $734A JP $73DD       ; Jump to #R$73DD.
; 1UP has no lives.
@label=Handler1UPNoLives
*$734D CALL $7352     ; Call #R$7352.
 $7350 JR $7334       ; Jump to #R$7334.
; 2UP has no lives.
@label=Handler2UPNoLives
*$7352 LD A,$20       ; #REGa=ASCII " " (SPACE).
 $7354 CALL $73CD     ; Call #R$73CD.
 $7357 LD A,$20       ; #REGa=ASCII " " (SPACE).
 $7359 JP $73CD       ; Jump to #R$73CD.
; The UDG for the lives icon.
@label=UDG_Life
 $735C DEFB %00011000 ; {#UDGTABLE(default,centre) { #UDG#(#PC),attr=$07 }
 $735D DEFB %00100100 ; UDGTABLE#
 $735E DEFB %00111100 ;
 $735F DEFB %01111110 ;
 $7360 DEFB %01011010 ;
 $7361 DEFB %00111100 ;
 $7362 DEFB %00111100 ;
 $7363 DEFB %01100110 ; }
; Controller for the currently active player.
@label=ControllerActiveLives
*$7364 LD A,($5E1E)   ; {If #R$5E1E is not zero then jump to #R$736E.
 $7367 AND A          ;
 $7368 JR NZ,$736E    ; }
; Return currently active players Lives left.
@label=ActivePlayerLives
*$736A LD A,($5E38)   ; #REGa=#R$5E38.
 $736D RET            ; Return.
; Return inactive players Lives left.
@label=InactivePlayerLives
*$736E LD A,($5E3A)   ; #REGa=#R$5E3A.
 $7371 RET            ; Return.
; Controller for the inactive player.
@label=ControllerInactiveLives
*$7372 LD A,($5E1E)   ; {If #R$5E1E is zero then jump to #R$736E.
 $7375 AND A          ;
 $7376 JR Z,$736E     ; }
 $7378 JR $736A       ; Jump to #R$736A.
; View the equivalent code in;
; #LIST
; { #ATICATAC$0000 }
; { #COOKIE$7378 }
; { #JETPAC$70A4 }
; { #LUNARJETMAN$0000 }
; { #TRANZAM$0000 }
; LIST#

; Add Points To Score
;
; Used by the routines at #R$64FA, #R$6A98 and #R$7249.
;
; BC Points to add to score
;
; Check the active player.
@label=AddPointsToScore
c$737A LD A,($5E1E)  ; {If #R$5E1E is not zero, jump to #R$7385.
 $737D AND A         ;
 $737E JR NZ,$7385   ; }
; Set the score address for 1UP.
 $7380 LD HL,$5E07   ; #REGhl=#R$5E07.
 $7383 JR $7388      ; Jump to #R$7388.
; Set the score address for 2UP.
@label=AddPointsToScore_2UP
*$7385 LD HL,$5E0A   ; #REGhl=#R$5E0A.
; Process adding the points to the appropriate score.
@label=AddPointsToScore_Start
*$7388 LD A,(HL)     ; #REGa=score byte #3.
 $7389 ADD A,C       ; {Add #REGc to score byte #3 with BCD conversion.
 $738A DAA           ; }
 $738B LD (HL),A     ; Update score byte #3.
 $738C DEC HL        ; Move onto the next score byte.
 $738D LD A,(HL)     ; #REGa=score byte #2.
 $738E ADC A,B       ; {Add (with carry) #REGb to score byte #2 with BCD
 $738F DAA           ; conversion.}
 $7390 LD (HL),A     ; Update score byte #2.
 $7391 DEC HL        ; Move onto the next score byte.
 $7392 LD A,(HL)     ; #REGa=score byte #1.
 $7393 ADC A,$00     ; {Add #N$00 (i.e. just the carry flag) to score byte #1
 $7395 DAA           ; with BCD conversion.}
 $7396 LD (HL),A     ; Update score byte #1.
; Check the active player.
 $7397 LD A,($5E1E)  ; {If #R$5F21 is not zero, jump to #R$73A5.
 $739A AND A         ;
 $739B JR NZ,$73A5   ; }
; View the equivalent code in;
; #LIST
; { #COOKIE$7415 }
; { #JETPAC$70F9 }
; { #TRANZAM$6046 }
; LIST#

; Print Scores
;
; Used by the routine at #R$5F53.
;
; .
;
; Sets up the 1UP score.
@label=Score_1UP
c$739D LD HL,$4021   ; #REGhl=#N$4021 (screen buffer address).
 $73A0 LD DE,$5E05   ; #REGde=#R$5E05.
 $73A3 JR $73B3      ; Jump to #R$73B3.
; Sets up the 2UP score.
@label=Score_2UP
*$73A5 LD HL,$4039   ; #REGhl=#N$4039 (screen buffer address).
 $73A8 LD DE,$5E08   ; #REGde=#R$5E08.
 $73AB JR $73B3      ; Jump to #R$73B3.
; Sets up the HI score.
@label=Score_HI
*$73AD LD HL,$402D   ; #REGhl=#N$402D (screen buffer address).
 $73B0 LD DE,$5E00   ; #REGde=#R$5E00.
; Prints the score.
@label=PrintScore
*$73B3 LD B,$03      ; #REGb=#N$03.
@label=PrintScore_Loop
*$73B5 LD A,(DE)     ; #REGa=#REGde.
 $73B6 RRCA          ; {#REGa=#REGa / #N$10.
 $73B7 RRCA          ;
 $73B8 RRCA          ;
 $73B9 RRCA          ; }
 $73BA AND %00001111 ; Keep only bits 0-3.
 $73BC ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $73BE CALL $73CD    ; Call #R$73CD.
 $73C1 LD A,(DE)     ; #REGa=#REGde.
 $73C2 AND %00001111 ; Keep only bits 0-3.
 $73C4 ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $73C6 CALL $73CD    ; Call #R$73CD.
 $73C9 INC DE        ; Increment #REGde by one.
 $73CA DJNZ $73B5    ; Decrease counter by one and loop back to #R$73B5 until
                     ; counter is zero.
 $73CC RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$7438 }
; { #JETPAC$711C }
; { #LUNARJETMAN$89BF }
; { #TRANZAM$6CB6 }
; LIST#

; Print Character
;
; Used by the routines at #R$7325, #R$739D and #R$73ED.
;
; A ASCII value to print
; HL Screen address
@label=PrintScreen
c$73CD PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $73CE PUSH DE       ;
 $73CF PUSH HL       ; }
 $73D0 LD L,A        ; {Create an offset in #REGhl.
 $73D1 LD H,$00      ; }
 $73D3 ADD HL,HL     ; {#REGhl=#REGhl * 8.
 $73D4 ADD HL,HL     ;
 $73D5 ADD HL,HL     ; }
 $73D6 LD DE,($5C36) ; #HTML(#REGde=<a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $73DA ADD HL,DE     ; {#REGde=#REGhl + #N$3C00. For examples of usage;
 $73DB EX DE,HL      ; #TABLE(default,centre,centre,centre,centre,centre)
                     ; { =h Letter | =h ASCII Value | =h * 8 (offset) | =h CHARS + offset }
                     ; #FOREACH($55,$4C,$54,$49,$4D,$41,$54,$45)(value,
                     ; { #LET(result=$3C00 + value * $08) "#CHR(value)" | #N(value) | #N(value * 8) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, 2, 3, 1, 1)()">#N({result})) }
                     ; )
                     ; TABLE#}
; Print the character to the screen.
 $73DC POP HL        ; Restore #REGhl, containing the screen buffer location,
                     ; from the stack.
; This entry point is used by the routine at #R$7325.
*$73DD LD B,$08      ; #REGb=#N$08 (#N$08 rows of pixels).
@label=PrintScreen_Loop
*$73DF LD A,(DE)     ; {Copy a byte from the font data to the screen buffer.
 $73E0 LD (HL),A     ; }
 $73E1 INC DE        ; Increment the font data by one.
 $73E2 INC H         ; Move onto the next pixel line.
 $73E3 DJNZ $73DF    ; Decrease counter by one and loop back to #R$73DF until
                     ; counter is zero.
 $73E5 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $73E6 POP BC        ; }
; Reset #REGhl and move to the next column, ready to print the next character.
 $73E7 LD A,H        ; {#REGh=#REGh - #N$08 (reset the display line).
 $73E8 SUB $08       ;
 $73EA LD H,A        ; }
 $73EB INC L         ; Increment screen column by one.
 $73EC RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1D3 }
; { #COOKIE$7468 }
; { #JETPAC$714C }
; { #LUNARJETMAN$89EF }
; { #TRANZAM$6C96 }
; LIST#

; Print String
;
; Used by the routines at #R$602E, #R$60FD, #R$6250 and #R$7413.
;
; DE Pointer to string data
@label=PrintString
c$73ED PUSH HL       ; Stash #REGhl on the stack.
 $73EE CALL $759A    ; Call #R$759A.
 $73F1 LD A,(DE)     ; Fetch the attribute byte.
 $73F2 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $73F3 INC DE        ; Increment #REGde by one to point to the text of the
                     ; string.
 $73F4 EXX           ; Switch to the shadow registers.
 $73F5 POP HL        ; Restore #REGhl' from the stack.
 $73F6 CALL $748F    ; Call #R$748F.
; This entry point is used by the routine at #R$62E7.
@label=PrintString_Loop
*$73F9 EXX           ; Switch back to the normal registers.
 $73FA LD A,(DE)     ; Fetch the character to print.
 $73FB BIT 7,A       ; {If bit 7 is set (which signifies the end of the
 $73FD JR NZ,$740A   ; string), jump to #R$740A.}
 $73FF CALL $73CD    ; Call #R$73CD.
 $7402 INC DE        ; Increment #REGde by one.
 $7403 EXX           ; Switch to the shadow registers.
 $7404 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $7405 LD (HL),A     ; Copy the attribute byte to the screen.
 $7406 INC L         ; Increment #REGl by one.
 $7407 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $7408 JR $73F9      ; Jump to #R$73F9.
; Because the last character contains the terminator, it needs to be handled
; separately.
@label=PrintString_LastCharacter
*$740A AND %01111111 ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
 $740C CALL $73CD    ; Call #R$73CD.
 $740F EXX           ; Switch to the shadow registers.
 $7410 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $7411 LD (HL),A     ; Copy the attribute byte to the screen.
 $7412 RET           ; Return.

; Print Banner
;
; Used by the routine at #R$5F53.
;
; .
;
; Prints "1UP".
@label=PrintBanner
c$7413 LD HL,$0018       ; #REGhl=#N($0018, 4, 4).
 $7416 LD DE,$742E       ; #REGde=#R$742E.
 $7419 CALL $73ED        ; Call #R$73ED.
; Prints "HI".
 $741C LD HL,$0078       ; #REGhl=#N($0078, 4, 4).
 $741F LD DE,$7436       ; #REGde=#R$7436.
 $7422 CALL $73ED        ; Call #R$73ED.
; Prints "2UP".
 $7425 LD HL,$00D8       ; #REGhl=#N($00D8, 4, 4).
 $7428 LD DE,$7432       ; #REGde=#R$7432.
 $742B JP $73ED          ; Jump to #R$73ED.
; Banner text data.
@label=1UP_Text
 $742E DEFM $47          ; {"1UP" (#N(#PEEK(#PC)) is the attribute).
 $742F DEFM "1U","P"+$80 ; }
@label=2UP_Text
 $7432 DEFM $47          ; {"2UP" (#N(#PEEK(#PC)) is the attribute).
 $7433 DEFM "2U","P"+$80 ; }
@label=HI_Text
 $7436 DEFM $78          ; {"HI" (#N(#PEEK(#PC)) is the attribute).
 $7437 DEFM "H","I"+$80  ; }

; Reset Screen Buffer
;
; Used by the routine at #R$5F53.
@label=ResetScreen
c$7439 LD HL,$4000   ; #REGhl=#R$4000(screen buffer).
 $743C LD B,$58      ; #REGb=#N$58 (i.e. finish once we reach the start of
                     ; #R$5800(attribute buffer)).
 $743E LD C,$00      ; #REGc=#N$00 (value to write).
; View the equivalent code in;
; #LIST
; { #ATICATAC$80B4 }
; { #COOKIE$74D4 }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84AD }
; { #TRANZAM$7211 }
; LIST#
; .
; Continue on to #R$7440 to blank the screen buffer.

; Reset Routine
;
; Used by the routine at #R$7447.
;
; HL Target address
; B Single byte representing the MSB of the end address (will always end on LSB
; . #N$00)
; C Value to write
@label=ResetCopier
c$7440 LD (HL),C     ; Write #REGc to the target address.
 $7441 INC HL        ; Increment the target address by one.
 $7442 LD A,H        ; {Are we finished yet? Check the MSB of the target vs.
 $7443 CP B          ; #REGb.}
 $7444 JR C,$7440    ; Keep looping back to #R$7440 until there is no
                     ; carry-over.
 $7446 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80BB }
; { #COOKIE$74DB }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84B4 }
; { #TRANZAM$7218 }
; LIST#

; Reset Attribute Buffer
;
; Used by the routine at #R$5F53.
@label=ResetAttributes
c$7447 LD HL,$5800   ; #REGhl=#R$5800(attribute buffer).
 $744A LD B,$5B      ; #REGb=#N$5B (i.e. finish once we reach the end of the
                     ; #R$5800(attribute buffer)).
 $744C LD C,$00      ; #REGc=#N$00 (value to write).
 $744E JR $7440      ; Jump to #R$7440.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80C2 }
; { #COOKIE$74E2 }
; { #JETPAC$71C6 }
; { #LUNARJETMAN$84BB }
; { #TRANZAM$7200 }
; LIST#

; Colourise sprite.
;
; Used by the routines at #R$5FDE, #R$65F7, #R$69E8, #R$6C53, #R$6D0C, #R$6ED2,
; #R$6EF1 and #R$721A.
@label=ColouriseSprite
c$7450 EXX                     ; Switch to the shadow registers.
 $7451 LD HL,($5E1A)           ; #REGhl'=actor co-ordinates.
 $7454 CALL $748F              ; Call #R$748F - #REGhl' now holds the
                               ; co-ordinates to an attribute file address.
 $7457 LD A,($5E0F)            ; {#REGb'=width loop counter (in pixels).
 $745A LD B,A                  ; }
 $745B LD A,($5E0E)            ; #REGa=#R$5E0E.
 $745E RRCA                    ; {#REGa=((#REGa / #N$04) + #N$01) / #N$02.
 $745F RRCA                    ;
 $7460 INC A                   ;
 $7461 RRCA                    ; }
 $7462 AND %00011111           ; Keep only bits 0-4.
 $7464 INC A                   ; Increment #REGa by one.
 $7465 LD C,A                  ; #REGc=height loop counter (in pixels).
 $7466 LD D,(IX+$03)           ; #REGd=object colour attribute.
 $7469 LD E,B                  ; #REGe=width loop counter (in pixels).
@label=ColouriseSprite_Loop1
*$746A PUSH HL                 ; Stash #REGhl on the stack.
@label=ColouriseSprite_Loop2
*$746B LD A,H                  ; #REGa=actor Y position.
 $746C CP $5B                  ; {Decrement position if address is outside of
 $746E JR NC,$7481             ; attribute file address range.
 $7470 CP $58                  ;
 $7472 JR C,$7481              ; }
 $7474 LD (HL),D               ; Otherwise, set the colour at this location.
 $7475 INC L                   ; Next tile column.
 $7476 LD A,L                  ; {Next tile if column < screen width (32
 $7477 AND %00011111           ; chars).
 $7479 JR NZ,%0111010001111111 ; }
 $747B LD A,L                  ; {else, wrap-around and continue applying
 $747C SUB $20                 ; colour.}
 $747E LD L,A                  ; #REGl=start of current row.
*$747F DJNZ $746B              ; Decrease counter by one and loop back to
                               ; #R$746B until counter is zero.
*$7481 POP HL                  ; Restore #REGhl from the stack.
 $7482 PUSH BC                 ; Stash #REGbc on the stack.
 $7483 AND A                   ; Clear the carry flag.
 $7484 LD BC,$0020             ; {#REGhl -= 32 tiles. Places address pointer
 $7487 SBC HL,BC               ; previous line.}
 $7489 POP BC                  ; Restore #REGbc from the stack.
 $748A LD B,E                  ; #REGb=reset to original width counter.
 $748B DEC C                   ; Decrement height counter.
 $748C JR NZ,$746A             ; Repeat until all tiles have been coloured.
 $748E RET                     ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$619E, #R$61B4, #R$62E7, #R$670E, #R$6D0C, #R$73ED
; and #R$7450.
;
;   HL Pixel address co-ordinates
; O:HL Attribute buffer address
;
; Converts a given pixel address to the associated attribute buffer address.
@label=AttributeAddress
c$748F LD A,L        ; Horizontal co-ordinate.
 $7490 RRCA          ; {Divide by #N08.
 $7491 RRCA          ;
 $7492 RRCA          ; }
 $7493 AND %00011111 ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                     ; horizontal screen values).
 $7495 LD L,A        ; Store this back in #REGl.
 $7496 LD A,H        ; Vertical co-ordinate.
 $7497 RLCA          ; {Multiply by #N$04.
 $7498 RLCA          ; }
 $7499 LD C,A        ; Store this in #REGc temporarily.
 $749A AND %11100000 ; Keep only bits 5-7.
 $749C OR L          ; Set the bits from #REGl.
 $749D LD L,A        ; #REGl=#REGa.
 $749E LD A,C        ; Fetch the stored value from #REGc.
 $749F AND %00000011 ; Keep only bits 0-1.
 $74A1 OR %01011000  ; Set MSB of the attribute buffer #N$58. This ensures our
                     ; value is >= #R$5800.
 $74A3 LD H,A        ; Store this back in #REGh.
 $74A4 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BD2 }
; { #COOKIE$7534 }
; { #JETPAC$720E }
; { #LUNARJETMAN$8506 }
; { #TRANZAM$7097 }
; LIST#

; Routine at 74A5
;
; Used by the routine at #R$751C.
c$74A5 CALL $7542    ;
; This entry point is used by the routines at #R$66A6, #R$69E8, #R$6C53 and
; #R$751C.
*$74A8 LD HL,($5E0B) ;
; This entry point is used by the routine at #R$65F7.
*$74AB LD A,(DE)     ;
 $74AC INC DE        ;
 $74AD ADD A,L       ;
 $74AE LD L,A        ;
 $74AF CALL $759A    ;
 $74B2 LD A,(DE)     ;
 $74B3 LD B,A        ;
 $74B4 INC DE        ;
 $74B5 LD A,(DE)     ;
 $74B6 LD ($5E10),A  ;
*$74B9 LD C,$00      ;
 $74BB INC DE        ;
 $74BC RET           ;
; This entry point is used by the routine at #R$751C.
*$74BD CALL $757A    ;
; This entry point is used by the routines at #R$66A6, #R$69E8, #R$6C53 and
; #R$751C.
*$74C0 LD L,(IX+$01) ;
 $74C3 LD H,(IX+$02) ;
; This entry point is used by the routine at #R$5FDE.
*$74C6 LD A,(DE)     ;
 $74C7 INC DE        ;
 $74C8 ADD A,L       ;
 $74C9 LD L,A        ;
 $74CA LD ($5E1A),HL ;
 $74CD CALL $759A    ;
 $74D0 LD A,(DE)     ;
 $74D1 LD B,A        ;
 $74D2 LD ($5E0F),A  ;
 $74D5 INC DE        ;
 $74D6 LD A,(DE)     ;
 $74D7 LD ($5E11),A  ;
 $74DA LD ($5E0E),A  ;
 $74DD JR $74B9      ;
; This entry point is used by the routine at #R$6D0C.
*$74DF PUSH DE       ;
 $74E0 CALL $74A8    ;
 $74E3 EXX           ;
 $74E4 POP DE        ;
 $74E5 CALL $74C0    ;
 $74E8 EXX           ;
 $74E9 JR $74F2      ;
; This entry point is used by the routines at #R$6ED2, #R$6EF1 and #R$721A.
*$74EB CALL $74BD    ;
 $74EE EXX           ;
 $74EF CALL $74A5    ;
; This entry point is used by the routines at #R$66A6, #R$69E8 and #R$6C53.
*$74F2 LD A,($5E0C)  ;
 $74F5 SUB (IX+$02)  ;
 $74F8 JP Z,$7601    ;
 $74FB JP M,$750D    ;
 $74FE LD C,A        ;
 $74FF LD A,($5E10)  ;
 $7502 CP C          ;
 $7503 JP C,$7601    ;
 $7506 SUB C         ;
 $7507 LD ($5E10),A  ;
 $750A JP $75D0      ;
*$750D EXX           ;
 $750E NEG           ;
 $7510 LD C,A        ;
 $7511 LD A,($5E11)  ;
 $7514 CP C          ;
 $7515 JP C,$7600    ;
 $7518 SUB C         ;
 $7519 JP $7614      ;

; Routine at 751C
;
; Used by the routines at #R$65F7, #R$6C53 and #R$6CF1.
c$751C CALL $74C0    ; Call #R$74C0.
 $751F JR $7539      ; Jump to #R$7539.
; This entry point is used by the routine at #R$69E8.
*$7521 CALL $74A8    ; Call #R$74A8.
 $7524 JR $7529      ; Jump to #R$7529.
; This entry point is used by the routines at #R$65F7, #R$698F and #R$7249.
*$7526 CALL $74A5    ; Call #R$74A5.
; This entry point is used by the routine at #R$65F7.
*$7529 EXX           ;
 $752A XOR A         ;
 $752B LD C,A        ;
 $752C LD ($5E11),A  ;
 $752F LD ($5E0E),A  ;
 $7532 EXX           ;
 $7533 JP $75D0      ; Jump to #R$75D0.
 $7536 CALL $74BD    ;
; This entry point is used by the routine at #R$5FDE.
*$7539 EXX           ;
 $753A XOR A         ;
 $753B LD ($5E10),A  ;
 $753E LD C,A        ;
 $753F JP $75D0      ;

; Actor: Get Position/ Direction
;
; Used by the routine at #R$74A5.
@label=ActorFindPosDir
c$7542 LD A,($5E0B)  ; #REGa=actor X position.
 $7545 AND %00000110 ; Keep only bits 1-2.
 $7547 LD C,A        ; Store the result in #REGc.
 $7548 LD A,($5E0D)  ; #REGa=actor movement direction.
; Actor: Get Sprite Address
@label=ActorGetSpriteAddress
*$754B BIT 6,A       ; {Jump to #R$7551 if bit 6 of sprite header is reset.
 $754D JR Z,$7551    ; }
 $754F SET 3,C       ;
*$7551 DEC A         ;
 $7552 CP $03        ;
 $7554 JR NC,$7568   ;
 $7556 RLCA          ;
 $7557 RLCA          ;
 $7558 RLCA          ;
 $7559 RLCA          ;
 $755A AND %11110000 ; Keep only bits 4-7.
 $755C OR C          ;
 $755D LD HL,$761A   ; #REGhl=#R$761A.
; This entry point is used by the routine at #R$7568.
*$7560 LD C,A        ; {Create an offset in #REGbc.
 $7561 LD B,$00      ; }
 $7563 ADD HL,BC     ; #REGhl=sprite table + offset.
 $7564 LD E,(HL)     ; {#REGde=sprite address.
 $7565 INC HL        ;
 $7566 LD D,(HL)     ; }
 $7567 RET           ; Return.

; Routine at 7568
;
; Used by the routine at #R$7542.
c$7568 SUB $03       ;
 $756A RLCA          ;
 $756B RLCA          ;
 $756C RLCA          ;
 $756D AND $F8       ;
 $756F LD B,A        ;
 $7570 LD A,C        ;
 $7571 RRCA          ;
 $7572 AND $06       ;
 $7574 OR B          ;
 $7575 LD HL,$764A   ;
 $7578 JR $7560      ;

; Actor: Move Sprite
;
; Used by the routine at #R$74A5.
;
; IX actor object
@label=ActorMoveSprite
c$757A LD A,(IX+$01) ; #REGa=actor X position.
 $757D AND %00000110 ; Keep only bits 1-2.
 $757F LD C,A        ; Store the result in #REGc.
 $7580 LD A,(IX+$00) ; #REGa=sprite header byte.
 $7583 JR $754B      ; Jump to #R$7542.

; Calculate screen address one pixel above current position
;
; Used by the routine at #R$75D0.
;
;   HL Current position
; O:HL Address for new position
;
; Calculates the new address for writing a sprite pixel, in an upward
; direction, taking into consideration the screen memory layout.
@label=ScreenPos1PixelAbove
c$7585 DEC H         ; Decrement #REGh to move up one pixel on screen.
 $7586 LD A,H        ; Store the result in #REGa.
 $7587 AND %00000111 ; Keep only bits 0-2.
 $7589 CP $07        ; {If a character line has not been crossed then return.
 $758B RET NZ        ; }
 $758C LD A,L        ; {Else subtract #N$20 from #REGl.
 $758D SUB $20       ;
 $758F LD L,A        ; }
 $7590 AND %11100000 ; Keep only bits 5-7.
 $7592 CP $E0        ; {If a new section of the screen has not been crossed
 $7594 RET Z         ; then return.}
 $7595 LD A,H        ; {Else add #N$08 to #REGh and return.
 $7596 ADD A,$08     ;
 $7598 LD H,A        ;
 $7599 RET           ; }

; Calculate Screen Address
;
; Used by the routines at #R$62E7, #R$6D0C, #R$7325, #R$73ED and #R$74A5.
@label=ScreenAddress
c$759A LD A,L        ; #REGa=#REGl.
 $759B RRCA          ; {#REGa=#REGa / #N$08.
 $759C RRCA          ;
 $759D RRCA          ; }
 $759E AND %00011111 ; Keep only bits 0-4.
 $75A0 LD L,A        ; #REGl=#REGa.
 $75A1 LD A,H        ; #REGa=#REGh.
 $75A2 RLCA          ; {#REGa=#REGa * #N$04.
 $75A3 RLCA          ; }
 $75A4 AND %11100000 ; Keep only bits 5-7.
 $75A6 OR L          ;
 $75A7 LD L,A        ; #REGl=#REGa.
 $75A8 LD A,H        ; #REGa=#REGh.
 $75A9 AND %00000111 ; Keep only bits 0-2.
 $75AB EX AF,AF'     ; Switch to the shadow #REGaf register.
 $75AC LD A,H        ; #REGa=#REGh.
 $75AD RRCA          ; {#REGa=#REGa / #N$08.
 $75AE RRCA          ;
 $75AF RRCA          ; }
 $75B0 AND %00011000 ; Keep only bits 3-4.
 $75B2 OR %01000000  ; Set bit 6.
 $75B4 LD H,A        ; #REGh=#REGa.
 $75B5 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $75B6 OR H          ;
 $75B7 LD H,A        ; #REGh=#REGa.
 $75B8 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BA2 }
; { #COOKIE$76E3 }
; { #JETPAC$7308 }
; { #LUNARJETMAN$851E }
; { #TRANZAM$6F10 }
; LIST#

; Store Entity
;
; Used by the routines at #R$64ED, #R$65F7, #R$66A6, #R$698F, #R$69E8, #R$6BD0,
; #R$6C53, #R$6D0C, #R$6DBA, #R$6ED2, #R$6EF1 and #R$721A.
@label=StoreEntity
c$75B9 LD A,(IX+$01) ; {Copy actor X position to active actor X position.
 $75BC LD ($5E0B),A  ; }
 $75BF LD A,(IX+$02) ; {Copy actor Y position to active actor Y position.
 $75C2 LD ($5E0C),A  ; }
 $75C5 LD A,(IX+$00) ; {Copy actor movement to active actor movement.
 $75C8 LD ($5E0D),A  ; }
 $75CB RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9FFB }
; { #COOKIE$0000 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #TRANZAM$71ED }
; LIST#

; Controls: Kempston Joystick
;
; Used by the routine at #R$6D9C.
;
; A Joystick controls
@label=ReadKempstonJoystick
c$75CC IN A,($1F)    ; #REGa=controls.
 $75CE CPL           ; Flip the bits.
 $75CF RET           ; Return.

; Erase Sprite
;
; Used by the routines at #R$74A5 and #R$751C.
;
; B Loop counter
; C Actor Y position, or zero?
; DE Address into a sprite/buffer
; HL Address in the DISPLAY_FILE
@label=MaskSprite
c$75D0 LD A,C        ; {Jump to #R$75FB if the sprites vertical position is
 $75D1 AND A         ; zero.
 $75D2 JR Z,$75FB    ; }
 $75D4 DEC C         ; Else decrement.
 $75D5 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $75D6 PUSH HL       ; }
; Loop to create a mask of the sprite and it write to the screen.
*$75D7 LD A,(DE)     ; #REGa=sprite byte.
 $75D8 CPL           ; {Create mask and write to screen.
 $75D9 AND (HL)      ;
 $75DA LD (HL),A     ; }
 $75DB INC DE        ; Move onto the next byte.
 $75DC INC L         ; Move onto the next column.
 $75DD DJNZ $75D7    ; Decrease counter by one and loop back to #R$75D7 until
                     ; counter is zero.
 $75DF POP HL        ; Restore #REGhl from the stack.
 $75E0 CALL $7585    ; Call #R$7585.
 $75E3 POP BC        ; Restore #REGbc from the stack.
 $75E4 EXX           ;
 $75E5 LD A,C        ; {Jump to #R$75F8 if #REGc is zero.
 $75E6 AND A         ;
 $75E7 JR Z,$75F8    ; }
*$75E9 DEC C         ;
 $75EA PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $75EB PUSH HL       ; }
*$75EC LD A,(DE)     ;
 $75ED OR (HL)       ;
 $75EE LD (HL),A     ;
 $75EF INC DE        ;
 $75F0 INC L         ;
 $75F1 DJNZ $75EC    ;
 $75F3 POP HL        ; Restore #REGhl from the stack.
 $75F4 CALL $7585    ; Call #R$7585.
 $75F7 POP BC        ; Restore #REGbc from the stack.
*$75F8 EXX           ;
 $75F9 JR $75D0      ;
*$75FB EXX           ;
 $75FC LD A,C        ;
 $75FD AND A         ;
 $75FE JR NZ,$75E9   ;
; This entry point is used by the routine at #R$74A5.
*$7600 EXX           ;
; This entry point is used by the routine at #R$74A5.
*$7601 LD A,($5E10)  ;
 $7604 LD C,A        ;
 $7605 LD A,($5E11)  ;
 $7608 OR C          ;
 $7609 RET Z         ;
 $760A XOR A         ;
 $760B LD ($5E10),A  ;
 $760E EXX           ;
 $760F LD A,($5E11)  ;
 $7612 LD C,A        ;
 $7613 XOR A         ;
; This entry point is used by the routine at #R$74A5.
*$7614 LD ($5E11),A  ;
 $7617 EXX           ;
 $7618 JR $75D0      ;

; Sprites Table
@label=SpritesTable
w$761A DEFW $778A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $761C DEFW $77C6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $761E DEFW $7802    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7620 DEFW $783E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7622 DEFW $783E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7624 DEFW $7802    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7626 DEFW $77C6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7628 DEFW $778A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $762A DEFW $778A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $762C DEFW $77C6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $762E DEFW $7802    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7630 DEFW $783E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7632 DEFW $783E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7634 DEFW $7802    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7636 DEFW $77C6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7638 DEFW $778A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $763A DEFW $76EE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $763C DEFW $7711    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $763E DEFW $7734    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7640 DEFW $7757    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7642 DEFW $7757    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7644 DEFW $7734    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7646 DEFW $7711    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7648 DEFW $76EE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $764A DEFW $7918    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $764C DEFW $7922    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $764E DEFW $7918    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7650 DEFW $7922    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7652 DEFW $7946    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7654 DEFW $7933    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7656 DEFW $7946    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7658 DEFW $7933    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $765A DEFW $7959    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $765C DEFW $7970    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $765E DEFW $7959    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7660 DEFW $7970    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7662 DEFW $7A73    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7664 DEFW $7A9A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7666 DEFW $7ABD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7668 DEFW $7AE4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $766A DEFW $7C15    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $766C DEFW $7C26    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $766E DEFW $7BF1    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7670 DEFW $7C02    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7672 DEFW $7BB8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7674 DEFW $7B7C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7676 DEFW $7B07    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7678 DEFW $7B43    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $767A DEFW $79B3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $767C DEFW $79E3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $767E DEFW $7A43    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7680 DEFW $7A13    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7682 DEFW $7F63    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7684 DEFW $7F63    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7686 DEFW $7F63    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7688 DEFW $7F63    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $768A DEFW $7F8A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $768C DEFW $7F8A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $768E DEFW $7F8A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7690 DEFW $7F8A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7692 DEFW $7FAD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7694 DEFW $7FAD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7696 DEFW $7FAD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
 $7698 DEFW $7FAD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $761A) / $02)).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #TRANZAM$0000 }
; LIST#

; Sprite: Flower (Bud)
;
; .
;
; .
;
; #DIMENSIONS
b$769A DEFB $F8         ; Terminator.
 $769B DEFB $03         ; #LET(width=#PEEK(#PC)) Width = #N({width}) bytes.
 $769C DEFB $13         ; #LET(height=#PEEK(#PC)) Height = #N({height}) pixels.
 $769D DEFB $00,$FF,$00 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC +
 $76A0 DEFB $00,$FF,$00 ; ({height} * {width}) - {width})-$01-({width} *
 $76A3 DEFB $00,$FF,$00 ; $08){$00, $04 * $05, $04 * {width} * $08, $04 *
 $76A6 DEFB $00,$FF,$00 ; {height}}(flower-01)
 $76A9 DEFB $01,$B9,$80 ;
 $76AC DEFB $03,$F6,$C0 ;
 $76AF DEFB $03,$76,$C0 ;
 $76B2 DEFB $05,$6E,$E0 ;
 $76B5 DEFB $05,$6E,$A0 ;
 $76B8 DEFB $05,$65,$A0 ;
 $76BB DEFB $05,$95,$A0 ;
 $76BE DEFB $02,$BB,$40 ;
 $76C1 DEFB $02,$FB,$40 ;
 $76C4 DEFB $01,$3E,$80 ;
 $76C7 DEFB $00,$DD,$00 ;
 $76CA DEFB $00,$5A,$00 ;
 $76CD DEFB $00,$2C,$00 ;
 $76D0 DEFB $00,$18,$00 ;
 $76D3 DEFB $00,$18,$00 ; }

; UDG Graphics
;
; .
;
; .
;
; ID: "#N(#EVAL((#PC - $76D6) / $08))".
@label=UDG_Brick
b$76D6 DEFB %01111110 ; {#UDG(#PC,attr=$7A)
 $76D7 DEFB %01111110 ;
 $76D8 DEFB %01111110 ;
 $76D9 DEFB %00000000 ;
 $76DA DEFB %11100111 ;
 $76DB DEFB %11100111 ;
 $76DC DEFB %11100111 ;
 $76DD DEFB %00000000 ; }
; ID: "#N(#EVAL((#PC - $76D6) / $08))".
@label=UDG_Floor_1
 $76DE DEFB %11001101 ; {#UDG(#PC,attr=$32)
 $76DF DEFB %01010111 ;
 $76E0 DEFB %11011100 ;
 $76E1 DEFB %00111110 ;
 $76E2 DEFB %00110011 ;
 $76E3 DEFB %10001111 ;
 $76E4 DEFB %00110011 ;
 $76E5 DEFB %10100110 ; }
; ID: "#N(#EVAL((#PC - $76D6) / $08))".
@label=UDG_Floor_2
 $76E6 DEFB %10001110 ; {#UDG(#PC,attr=$32)
 $76E7 DEFB %01110001 ;
 $76E8 DEFB %11011111 ;
 $76E9 DEFB %01110011 ;
 $76EA DEFB %11011111 ;
 $76EB DEFB %00111011 ;
 $76EC DEFB %10001110 ;
 $76ED DEFB %00110101 ; }

; Sprite: Pesticide Spray Can
;
; .
;
; .
;
; #DIMENSIONS
b$76EE DEFB $00                             ; Terminator.
 $76EF DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $76F0 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $76F1 DEFB $CF,$F0,$E0,$30,$67,$E0,$67,$E0 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $76F9 DEFB $67,$E0,$67,$E0,$67,$E0,$67,$E0 ; + ({height} * {width}) -
 $7701 DEFB $67,$E0,$CF,$F0,$E0,$70,$37,$C0 ; {width})-$01-({width} *
 $7709 DEFB $19,$80,$06,$00,$0F,$00,$0F,$00 ; $08)(can-01)}
; #DIMENSIONS
 $7711 DEFB $00                             ; Terminator.
 $7712 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7713 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7714 DEFB $33,$FC,$38,$0C,$19,$F8,$19,$F8 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $771C DEFB $19,$F8,$19,$F8,$19,$F8,$19,$F8 ; + ({height} * {width}) -
 $7724 DEFB $19,$F8,$33,$FC,$38,$1C,$0D,$F0 ; {width})-$01-({width} *
 $772C DEFB $06,$60,$01,$80,$03,$C0,$03,$C0 ; $08)(can-02)}
; #DIMENSIONS
 $7734 DEFB $00                             ; Terminator.
 $7735 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7736 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7737 DEFB $0C,$FF,$0E,$03,$06,$7E,$06,$7E ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $773F DEFB $06,$7E,$06,$7E,$06,$7E,$06,$7E ; + ({height} * {width}) -
 $7747 DEFB $06,$7E,$0C,$FF,$0E,$07,$03,$7C ; {width})-$01-({width} *
 $774F DEFB $01,$98,$00,$60,$00,$F0,$00,$F0 ; $08)(can-03)}
; #DIMENSIONS
 $7757 DEFB $00                             ; Terminator.
 $7758 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7759 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $775A DEFB $03,$3F,$C0,$03,$80,$C0,$01,$9F ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7762 DEFB $80,$01,$9F,$80,$01,$9F,$80,$01 ; + ({height} * {width}) -
 $776A DEFB $9F,$80,$01,$9F,$80,$01,$9F,$80 ; {width})-$01-({width} *
 $7772 DEFB $01,$9F,$80,$03,$3F,$C0,$03,$81 ; $08)(can-04)
 $777A DEFB $C0,$00,$DF,$00,$00,$66,$00,$00 ;
 $7782 DEFB $18,$00,$00,$3C,$00,$00,$3C,$00 ; }

; Sprite: Robbie the robot
;
; .
;
; .
;
; #DIMENSIONS
b$778A DEFB $00                             ; Terminator.
 $778B DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $778C DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $778D DEFB $B4,$00,$00,$78,$16,$80,$30,$09 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7795 DEFB $00,$30,$06,$00,$37,$F6,$00,$07 ; + ({height} * {width}) -
 $779D DEFB $70,$00,$7E,$BF,$00,$75,$57,$00 ; {width})-$01-({width} * $08){$00,
 $77A5 DEFB $6A,$AB,$00,$7F,$FF,$00,$00,$00 ; $04 * $05, $04 * {width} * $08,
 $77AD DEFB $00,$3F,$FE,$00,$38,$8E,$00,$34 ; $04 * {height}}(robbie-01*)
 $77B5 DEFB $96,$00,$34,$16,$00,$17,$74,$00 ;
 $77BD DEFB $18,$8C,$00,$0F,$F8,$00,$0C,$18 ;
 $77C5 DEFB $00                             ; }
; #DIMENSIONS
 $77C6 DEFB $00                             ; Terminator.
 $77C7 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $77C8 DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $77C9 DEFB $2D,$00,$00,$1E,$05,$A0,$0C,$02 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $77D1 DEFB $40,$0C,$01,$80,$0D,$FD,$80,$01 ; + ({height} * {width}) -
 $77D9 DEFB $DC,$00,$1F,$AF,$C0,$1D,$55,$C0 ; {width})-$01-({width} * $08){$00,
 $77E1 DEFB $1A,$AA,$C0,$1F,$FF,$C0,$00,$00 ; $04 * $05, $04 * {width} * $08,
 $77E9 DEFB $00,$0F,$FF,$80,$0E,$23,$80,$0D ; $04 * {height}}(robbie-02*)
 $77F1 DEFB $25,$80,$0D,$05,$80,$05,$DD,$00 ;
 $77F9 DEFB $06,$23,$00,$03,$FE,$00,$03,$06 ;
 $7801 DEFB $00                             ; }
; #DIMENSIONS
 $7802 DEFB $00                             ; Terminator.
 $7803 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7804 DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7805 DEFB $00,$01,$68,$0B,$40,$F0,$04,$80 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $780D DEFB $60,$03,$00,$60,$03,$7F,$60,$00 ; + ({height} * {width}) -
 $7815 DEFB $77,$00,$07,$EB,$F0,$07,$55,$70 ; {width})-$01-({width} * $08){$00,
 $781D DEFB $06,$AA,$B0,$07,$FF,$F0,$00,$00 ; $04 * $05, $04 * {width} * $08,
 $7825 DEFB $00,$03,$FF,$E0,$03,$88,$E0,$03 ; $04 * {height}}(robbie-03*)
 $782D DEFB $49,$60,$03,$41,$60,$01,$77,$40 ;
 $7835 DEFB $01,$88,$C0,$00,$FF,$80,$00,$C1 ;
 $783D DEFB $80                             ; }
; #DIMENSIONS
 $783E DEFB $00                             ; Terminator.
 $783F DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7840 DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7841 DEFB $00,$00,$5A,$02,$D0,$3C,$01,$20 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7849 DEFB $18,$00,$C0,$18,$00,$DF,$D8,$00 ; + ({height} * {width}) -
 $7851 DEFB $1D,$C0,$01,$FA,$FC,$01,$D5,$5C ; {width})-$01-({width} * $08){$00,
 $7859 DEFB $01,$AA,$AC,$01,$FF,$FC,$00,$00 ; $04 * $05, $04 * {width} * $08,
 $7861 DEFB $00,$00,$FF,$F8,$00,$E2,$38,$00 ; $04 * {height}}(robbie-04*)
 $7869 DEFB $D2,$58,$00,$D0,$58,$00,$5D,$D0 ;
 $7871 DEFB $00,$62,$30,$00,$3F,$E0,$00,$30 ;
 $7879 DEFB $60                             ; }

; Sprite: Leaves
;
; .
;
; .
;
; #DIMENSIONS
b$787A DEFB $00                             ; Terminator.
 $787B DEFB $01                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $787C DEFB $05                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $787D DEFB $E0,$B0,$D8,$68,$38             ; #UDGARRAY1,attr=7,scale=4,step=1,flip=2;(#PC)-(#PC
                                            ; + ({height} * {width}) -
                                            ; {width})-$01-({width} * $08){$00,
                                            ; $04 * $03, $04 * {width} * $08,
                                            ; $04 * {height}}(leaf-01)
; #DIMENSIONS
 $7882 DEFB $00                             ; Terminator.
 $7883 DEFB $01                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7884 DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7885 DEFB $F0,$AC,$DE,$EE,$75,$6B,$3D,$0F ; #UDGARRAY1,attr=7,scale=4,step=1,flip=2;(#PC)-(#PC
                                            ; + ({height} * {width}) -
                                            ; {width})-$01-({width} *
                                            ; $08)(leaf-02)
; #DIMENSIONS
 $788D DEFB $00                             ; Terminator.
 $788E DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $788F DEFB $0B                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7890 DEFB $F8,$00,$BE,$00,$81,$00,$AF,$80 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7898 DEFB $FE,$C0,$73,$C0,$75,$E0,$36,$60 ; + ({height} * {width}) -
 $78A0 DEFB $17,$60,$0F,$A0,$03,$E0         ; {width})-$01-({width} * $08){$00,
                                            ; $04 * $05, $04 * {width} * $08,
                                            ; $04 * {height}}(leaf-03)}
; #DIMENSIONS
 $78A6 DEFB $00                             ; Terminator.
 $78A7 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $78A8 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $78A9 DEFB $FC,$00,$BF,$80,$9F,$E0,$A0,$30 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $78B1 DEFB $D7,$F8,$FB,$FC,$79,$F6,$7A,$06 ; + ({height} * {width}) -
 $78B9 DEFB $7B,$7E,$3B,$3E,$3B,$43,$1B,$6F ; {width})-$01-({width} *
 $78C1 DEFB $0F,$77,$07,$73,$01,$F5,$00,$3F ; $08)(leaf-04)}
; #DIMENSIONS
 $78C9 DEFB $08                             ; Terminator.
 $78CA DEFB $01                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $78CB DEFB $05                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $78CC DEFB $07,$0D,$1B,$16,$1C             ; #UDGARRAY1,attr=7,scale=4,step=1,flip=2;(#PC)-(#PC
                                            ; + ({height} * {width}) -
                                            ; {width})-$01-({width} * $08){$00,
                                            ; $04 * $03, $04 * {width} * $08,
                                            ; $04 * {height}}(leaf-05)
; #DIMENSIONS
 $78D1 DEFB $08                             ; Terminator.
 $78D2 DEFB $01                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $78D3 DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $78D4 DEFB $0F,$35,$7B,$77,$AE,$D6,$BC,$F0 ; #UDGARRAY1,attr=7,scale=4,step=1,flip=2;(#PC)-(#PC
                                            ; + ({height} * {width}) -
                                            ; {width})-$01-({width} *
                                            ; $08)(leaf-06)
; #DIMENSIONS
 $78DC DEFB $00                             ; Terminator.
 $78DD DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $78DE DEFB $0B                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $78DF DEFB $00,$1F,$00,$7D,$00,$81,$01,$F5 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $78E7 DEFB $03,$EF,$03,$CE,$07,$AE,$04,$6C ; + ({height} * {width}) -
 $78EF DEFB $06,$E8,$05,$F0,$07,$C0         ; {width})-$01-({width} * $08){$00,
                                            ; $04 * $05, $04 * {width} * $08,
                                            ; $04 * {height}}(leaf-07)}
; #DIMENSIONS
 $78F5 DEFB $00                             ; Terminator.
 $78F6 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $78F7 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $78F8 DEFB $00,$3F,$01,$FD,$07,$F9,$0C,$05 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7900 DEFB $1F,$ED,$3F,$DF,$3F,$9E,$60,$5E ; + ({height} * {width}) -
 $7908 DEFB $7E,$D7,$7C,$DC,$C2,$DC,$F6,$D8 ; {width})-$01-({width} *
 $7910 DEFB $EE,$F0,$CE,$E0,$AF,$80,$FC,$00 ; $08)(leaf-08)}

; Sprite: Smoke Bomb
;
; .
;
; .
;
; #DIMENSIONS
b$7918 DEFB $00                             ; Terminator.
 $7919 DEFB $01                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $791A DEFB $07                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $791B DEFB $60,$F6,$ED,$DF,$7E,$38,$00     ; #UDGARRAY1,attr=7,scale=4,step=1,flip=2;(#PC)-(#PC
                                            ; + ({height} * {width}) -
                                            ; {width})-$01-({width} * $08){$00,
                                            ; $04, $04 * {width} * $08, $04 *
                                            ; {height}}(smoke-01)
; #DIMENSIONS
 $7922 DEFB $00                             ; Terminator.
 $7923 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7924 DEFB $07                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7925 DEFB %00000000,%11000000             ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7927 DEFB %00001101,%11100000             ; + ({height} * {width}) -
 $7929 DEFB %00001111,%11110000             ; {width})-$01-({width} * $08){$00,
 $792B DEFB %00000111,%10110000             ; $04, $04 * {width} * $08, $04 *
 $792D DEFB %00001111,%01110000             ; {height}}(smoke-02)
 $792F DEFB %00000110,%11100000             ;
 $7931 DEFB %00000000,%01100000             ; }
; #DIMENSIONS
 $7933 DEFB $00                             ; Terminator.
 $7934 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7935 DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7936 DEFB $00,$38,$07,$7B,$0F,$BF,$0F,$DF ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $793E DEFB $0F,$FF,$05,$FA,$01,$FC,$00,$F8 ; + ({height} * {width}) -
                                            ; {width})-$01-({width} *
                                            ; $08)(smoke-03)}
; #DIMENSIONS
 $7946 DEFB $00                             ; Terminator.
 $7947 DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7948 DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7949 DEFB $6C,$E0,$EF,$E0,$FF,$F8,$FE,$B8 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7951 DEFB $FF,$F8,$DF,$E0,$DB,$E0,$01,$C0 ; + ({height} * {width}) -
                                            ; {width})-$01-({width} *
                                            ; $08)(smoke-04)}
; #DIMENSIONS
 $7959 DEFB $00                             ; Terminator.
 $795A DEFB $02                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $795B DEFB $09                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $795C DEFB $01,$80,$03,$CC,$1B,$DE,$37,$FF ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7964 DEFB $77,$FF,$FF,$7E,$FF,$79,$EF,$BF ; + ({height} * {width}) -
 $796C DEFB $77,$DE,$07,$8C                 ; {width})-$01-({width} * $08){$00,
                                            ; $04 * $08, $04 * {width} * $08,
                                            ; $04 * {height}}(smoke-05)}
; #DIMENSIONS
 $7970 DEFB $00                             ; Terminator.
 $7971 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7972 DEFB $09                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7973 DEFB $00,$23,$80,$07,$77,$C0,$0F,$EF ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $797B DEFB $C0,$0F,$DF,$20,$07,$FF,$F0,$02 ; + ({height} * {width}) -
 $7983 DEFB $FF,$F0,$07,$F5,$F0,$07,$7C,$E0 ; {width})-$01-({width} * $08){$00,
 $798B DEFB $0C,$38,$00,$00,$10,$00         ; $04 * $08, $04 * {width} * $08,
                                            ; $04 * {height}}(smoke-06)}

; Sprite: Streamer/ Leech Laser
;
; .
;
; .
;
; #DIMENSIONS
b$7991 DEFB $00                 ; Terminator.
 $7992 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7993 DEFB $07                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7994 DEFB %00000000,%00111100 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7996 DEFB %00000000,%01111110 ; + ({height} * {width}) -
 $7998 DEFB %00000000,%11100011 ; {width})-$01-({width} * $08){$00, $04, $04 *
 $799A DEFB %11000001,%11000001 ; {width} * $08, $04 * {height}}(streamer-01)
 $799C DEFB %11110011,%10000000 ;
 $799E DEFB %00111111,%00000000 ;
 $79A0 DEFB %00001100,%00000000 ; }
; #DIMENSIONS
 $79A2 DEFB $00                 ; Terminator.
 $79A3 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $79A4 DEFB $07                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $79A5 DEFB %00111100,%00000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $79A7 DEFB %01111110,%00000000 ; + ({height} * {width}) -
 $79A9 DEFB %11100011,%00000000 ; {width})-$01-({width} * $08){$00, $04, $04 *
 $79AB DEFB %11000001,%11000001 ; {width} * $08, $04 * {height}}(streamer-02)
 $79AD DEFB %10000000,%11110011 ;
 $79AF DEFB %00000000,%00111111 ;
 $79B1 DEFB %00000000,%00001100 ; }

; Sprite: Scuttling Leech
;
; .
;
; .
;
; #DIMENSIONS
b$79B3 DEFB $00                             ; Terminator.
 $79B4 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $79B5 DEFB $0F                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $79B6 DEFB $00,$70,$00,$E0,$70,$60,$70,$38 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $79BE DEFB $70,$0E,$84,$B0,$7F,$FD,$C0,$31 ; + ({height} * {width}) -
 $79C6 DEFB $1F,$E0,$72,$0F,$C0,$E2,$2F,$F0 ; {width})-$01-({width} * $08){$00,
 $79CE DEFB $6E,$EF,$E0,$31,$1F,$F0,$7F,$FF ; $04, $04 * {width} * $08, $04 *
 $79D6 DEFB $C0,$0F,$FF,$E0,$37,$76,$C0,$02 ; {height}}(leech-01)
 $79DE DEFB $34,$40,$00,$20,$00             ; }
; #DIMENSIONS
 $79E3 DEFB $00                             ; Terminator.
 $79E4 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $79E5 DEFB $0F                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $79E6 DEFB $00,$71,$B0,$00,$33,$F8,$00,$31 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $79EE DEFB $D8,$01,$C4,$48,$03,$FF,$F4,$0F ; + ({height} * {width}) -
 $79F6 DEFB $11,$F8,$07,$22,$FF,$06,$22,$FE ; {width})-$01-({width} * $08){$00,
 $79FE DEFB $0E,$EE,$FC,$07,$11,$FE,$07,$FF ; $04, $04 * {width} * $08, $04 *
 $7A06 DEFB $FF,$05,$FF,$FC,$01,$F7,$BA,$02 ; {height}}(leech-02)
 $7A0E DEFB $4D,$20,$00,$08,$00             ; }
; #DIMENSIONS
 $7A13 DEFB $00                             ; Terminator.
 $7A14 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7A15 DEFB $0F                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7A16 DEFB $00,$0E,$00,$06,$0E,$07,$0E,$1C ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7A1E DEFB $0E,$0D,$21,$70,$03,$BF,$FE,$07 ; + ({height} * {width}) -
 $7A26 DEFB $F8,$8C,$03,$F4,$4E,$0F,$F4,$47 ; {width})-$01-({width} * $08){$00,
 $7A2E DEFB $07,$F7,$76,$0F,$F8,$8C,$03,$FF ; $04, $04 * {width} * $08, $04 *
 $7A36 DEFB $FE,$07,$FF,$F0,$03,$6E,$EC,$02 ; {height}}(leech-03)
 $7A3E DEFB $2C,$40,$00,$04,$00             ; }
; #DIMENSIONS
 $7A43 DEFB $00                             ; Terminator.
 $7A44 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7A45 DEFB $0F                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7A46 DEFB $0D,$8E,$00,$1F,$CC,$00,$1B,$8C ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7A4E DEFB $00,$12,$23,$80,$2F,$FF,$C0,$1F ; + ({height} * {width}) -
 $7A56 DEFB $88,$F0,$FF,$44,$E0,$7F,$44,$60 ; {width})-$01-({width} * $08){$00,
 $7A5E DEFB $2F,$77,$70,$7F,$88,$E0,$FF,$FF ; $04, $04 * {width} * $08, $04 *
 $7A66 DEFB $E0,$3F,$FF,$A0,$5D,$EF,$80,$04 ; {height}}(leech-04)
 $7A6E DEFB $B2,$40,$00,$10,$00             ; }

; Sprite: Interstellar Space Slug
;
; .
;
; .
;
; #DIMENSIONS
b$7A73 DEFB $00                             ; Terminator.
 $7A74 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7A75 DEFB $0C                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7A76 DEFB $7F,$87,$F0,$8F,$DF,$F0,$97,$DF ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7A7E DEFB $E0,$B7,$DF,$80,$CF,$DF,$00,$79 ; + ({height} * {width}) -
 $7A86 DEFB $DE,$00,$03,$DE,$00,$02,$AE,$00 ; {width})-$01-({width} * $08){$00,
 $7A8E DEFB $02,$FE,$00,$03,$7E,$00,$01,$8C ; $04 * $04, $04 * {width} * $08,
 $7A96 DEFB $00,$00,$F8,$00                 ; $04 * {height}}(slug-01)}
; #DIMENSIONS
 $7A9A DEFB $00                             ; Terminator.
 $7A9B DEFB $04                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7A9C DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7A9D DEFB $00,$00,$0F,$F0,$00,$07,$FF,$D0 ; {#UDGARRAY4,attr=7,scale=4,step=4,flip=2;(#PC)-(#PC
 $7AA5 DEFB $07,$FF,$FC,$20,$08,$FF,$C3,$C0 ; + ({height} * {width}) -
 $7AAD DEFB $09,$7C,$3E,$00,$0B,$63,$E0,$00 ; {width})-$01-({width} *
 $7AB5 DEFB $0C,$FE,$00,$00,$07,$C0,$00,$00 ; $08)(slug-02)}
; #DIMENSIONS
 $7ABD DEFB $00                             ; Terminator.
 $7ABE DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7ABF DEFB $0C                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7AC0 DEFB $0F,$E1,$FE,$0F,$FB,$F1,$07,$FB ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7AC8 DEFB $E9,$01,$FB,$ED,$00,$FB,$F3,$00 ; + ({height} * {width}) -
 $7AD0 DEFB $7B,$9E,$00,$7B,$C0,$00,$75,$40 ; {width})-$01-({width} * $08){$00,
 $7AD8 DEFB $00,$7F,$40,$00,$7E,$C0,$00,$31 ; $04 * $04, $04 * {width} * $08,
 $7AE0 DEFB $80,$00,$1F,$00                 ; $04 * {height}}(slug-03)}
; #DIMENSIONS
 $7AE4 DEFB $00                             ; Terminator.
 $7AE5 DEFB $04                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7AE6 DEFB $08                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7AE7 DEFB $0F,$F0,$00,$00,$0B,$FF,$E0,$00 ; {#UDGARRAY4,attr=7,scale=4,step=4,flip=2;(#PC)-(#PC
 $7AEF DEFB $04,$3F,$FF,$E0,$03,$C3,$FF,$10 ; + ({height} * {width}) -
 $7AF7 DEFB $00,$7C,$3E,$90,$00,$07,$C6,$D0 ; {width})-$01-({width} *
 $7AFF DEFB $00,$00,$7F,$30,$00,$00,$03,$E0 ; $08)(slug-04)}

; Sprite: Menacing Midges
;
; .
;
; .
;
; #DIMENSIONS
b$7B07 DEFB $00                             ; Terminator.
 $7B08 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7B09 DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7B0A DEFB $20,$08,$00,$00,$1C,$00,$A0,$3E ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7B12 DEFB $00,$20,$6F,$00,$90,$70,$00,$90 ; + ({height} * {width}) -
 $7B1A DEFB $FF,$00,$88,$CF,$00,$84,$F0,$00 ; {width})-$01-({width} * $08){$00,
 $7B22 DEFB $62,$9F,$00,$12,$E0,$00,$4A,$FE ; $04 * $05, $04 * {width} * $08,
 $7B2A DEFB $00,$E6,$FC,$00,$EF,$7B,$80,$5F ; $04 * {height}}(midges-01)
 $7B32 DEFB $84,$40,$57,$00,$20,$79,$00,$20 ;
 $7B3A DEFB $3C,$80,$60,$38,$60,$C0,$00,$1F ;
 $7B42 DEFB $00                             ; }
; #DIMENSIONS
 $7B43 DEFB $00                             ; Terminator.
 $7B44 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7B45 DEFB $12                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7B46 DEFB $02,$00,$80,$00,$01,$C0,$01,$03 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7B4E DEFB $E0,$01,$06,$E0,$05,$07,$00,$04 ; + ({height} * {width}) -
 $7B56 DEFB $8F,$F0,$04,$4C,$F0,$04,$2F,$78 ; {width})-$01-({width} * $08){$00,
 $7B5E DEFB $06,$2B,$84,$01,$2C,$02,$04,$A8 ; $04 * $06, $04 * {width} * $08,
 $7B66 DEFB $02,$0E,$70,$04,$0E,$F0,$08,$05 ; $04 * {height}}(midges-02)
 $7B6E DEFB $F0,$10,$05,$70,$60,$07,$9F,$80 ;
 $7B76 DEFB $03,$C0,$00,$03,$80,$00         ; }
; #DIMENSIONS
 $7B7C DEFB $00                             ; Terminator.
 $7B7D DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7B7E DEFB $13                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7B7F DEFB $00,$10,$04,$00,$38,$00,$00,$7C ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7B87 DEFB $05,$00,$F6,$04,$00,$0E,$09,$00 ; + ({height} * {width}) -
 $7B8F DEFB $FF,$09,$00,$F3,$11,$00,$0F,$21 ; {width})-$01-({width} * $08){$00,
 $7B97 DEFB $00,$F9,$46,$00,$07,$48,$00,$7F ; $04 * $05, $04 * {width} * $08,
 $7B9F DEFB $52,$00,$3F,$67,$01,$DE,$F7,$02 ; $04 * {height}}(midges-03)
 $7BA7 DEFB $21,$FA,$04,$00,$7A,$04,$00,$9E ;
 $7BAF DEFB $06,$01,$3C,$03,$06,$1C,$00,$F8 ;
 $7BB7 DEFB $00                             ; }
; #DIMENSIONS
 $7BB8 DEFB $00                             ; Terminator.
 $7BB9 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7BBA DEFB $12                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7BBB DEFB $01,$00,$40,$03,$80,$00,$07,$C0 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7BC3 DEFB $80,$0F,$60,$80,$00,$E0,$A0,$0F ; + ({height} * {width}) -
 $7BCB DEFB $F1,$20,$0F,$32,$20,$1E,$F4,$20 ; {width})-$01-({width} * $08){$00,
 $7BD3 DEFB $21,$D4,$60,$40,$34,$80,$40,$15 ; $04 * $06, $04 * {width} * $08,
 $7BDB DEFB $20,$20,$0E,$70,$10,$0F,$70,$08 ; $04 * {height}}(midges-04)
 $7BE3 DEFB $0F,$A0,$06,$0E,$A0,$01,$F9,$E0 ;
 $7BEB DEFB $00,$03,$C0,$00,$01,$C0         ; }

; Sprite: Insect Repellent/ Super Space Slug Spray
;
; .
;
; .
;
; #DIMENSIONS
b$7BF1 DEFB $00                 ; Terminator.
 $7BF2 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7BF3 DEFB $07                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7BF4 DEFB %00000000,%00000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7BF6 DEFB %01111000,%00000000 ; + ({height} * {width}) -
 $7BF8 DEFB %11111110,%00000000 ; {width})-$01-({width} * $08){$00, $04, $04 *
 $7BFA DEFB %11111111,%10000000 ; {width} * $08, $04 * {height} -
 $7BFC DEFB %10111111,%10000000 ; $04}(repellent-01)
 $7BFE DEFB %11001110,%00000000 ;
 $7C00 DEFB %01111000,%00000000 ; }
; #DIMENSIONS
 $7C02 DEFB $00                 ; Terminator.
 $7C03 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7C04 DEFB $08                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7C05 DEFB %00000011,%11000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7C07 DEFB %00000111,%11110000 ; + ({height} * {width}) -
 $7C09 DEFB %00001111,%11111100 ; {width})-$01-({width} * $08)(repellent-02)
 $7C0B DEFB %00001011,%11111111 ;
 $7C0D DEFB %00001001,%11111111 ;
 $7C0F DEFB %00001100,%00111100 ;
 $7C11 DEFB %00000110,%01110000 ;
 $7C13 DEFB %00000011,%11000000 ; }
; #DIMENSIONS
 $7C15 DEFB $F8                 ; Terminator.
 $7C16 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7C17 DEFB $07                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7C18 DEFB %00000000,%00000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7C1A DEFB %00000000,%00011110 ; + ({height} * {width}) -
 $7C1C DEFB %00000000,%01111111 ; {width})-$01-({width} * $08){$00, $04, $04 *
 $7C1E DEFB %00000001,%11111111 ; {width} * $08, $04 * {height} -
 $7C20 DEFB %00000001,%11111101 ; $04}(repellent-03)
 $7C22 DEFB %00000000,%01110011 ;
 $7C24 DEFB %00000000,%00011110 ; }
; #DIMENSIONS
 $7C26 DEFB $00                 ; Terminator.
 $7C27 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7C28 DEFB $08                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7C29 DEFB %00000011,%11000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7C2B DEFB %00001111,%11100000 ; + ({height} * {width}) -
 $7C2D DEFB %00111111,%11110000 ; {width})-$01-({width} * $08)(repellent-04)
 $7C2F DEFB %11111111,%11010000 ;
 $7C31 DEFB %11111111,%10010000 ;
 $7C33 DEFB %00111100,%00110000 ;
 $7C35 DEFB %00001110,%01100000 ;
 $7C37 DEFB %00000011,%11000000 ; }

; Sprite: Flower (Others)
;
; .
;
; .
;
; #DIMENSIONS
b$7C39 DEFB $F8                                 ; Terminator.
 $7C3A DEFB $03                                 ; #LET(width=#PEEK(#PC)) Width
                                                ; = #N({width}) bytes.
 $7C3B DEFB $12                                 ; #LET(height=#PEEK(#PC))
                                                ; Height = #N({height}) pixels.
 $7C3C DEFB $0E,$B9,$60                         ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7C3F DEFB $19,$B6,$98                         ; + ({height} * {width}) -
 $7C42 DEFB $06,$76,$64                         ; {width})-$01-({width} *
 $7C45 DEFB $06,$6E,$60                         ; $08){$00, $04 * $06, $04 *
 $7C48 DEFB $0E,$6E,$70                         ; {width} * $08, $04 *
 $7C4B DEFB $0D,$65,$70                         ; {height}}(flower-02)
 $7C4E DEFB $0D,$95,$70                         ;
 $7C51 DEFB $0D,$BB,$70                         ;
 $7C54 DEFB $0E,$FE,$F0                         ;
 $7C57 DEFB $06,$FE,$E0                         ;
 $7C5A DEFB $07,$7D,$E0                         ;
 $7C5D DEFB $03,$BD,$C0                         ;
 $7C60 DEFB $01,$DB,$80                         ;
 $7C63 DEFB $00,$E6,$00                         ;
 $7C66 DEFB $00,$2C,$00                         ;
 $7C69 DEFB $00,$34,$00                         ;
 $7C6C DEFB $00,$18,$00                         ;
 $7C6F DEFB $00,$18,$00                         ; }
; #DIMENSIONS
 $7C72 DEFB $F8                                 ; Terminator.
 $7C73 DEFB $03                                 ; #LET(width=#PEEK(#PC)) Width
                                                ; = #N({width}) bytes.
 $7C74 DEFB $1E                                 ; #LET(height=#PEEK(#PC))
                                                ; Height = #N({height}) pixels.
 $7C75 DEFB $01,$5C,$80                         ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7C78 DEFB $87,$5C,$C0                         ; + ({height} * {width}) -
 $7C7B DEFB $FC,$AD,$70                         ; {width})-$01-({width} *
 $7C7E DEFB $78,$AD,$1C                         ; $08){$00, $04 * $02, $04 *
 $7C81 DEFB $01,$6D,$8E                         ; {width} * $08, $04 *
 $7C84 DEFB $03,$5E,$C3                         ; {height}}(flower-03)
 $7C87 DEFB $0E,$DF,$70                         ;
 $7C8A DEFB $1D,$DF,$B8                         ;
 $7C8D DEFB $3D,$EF,$BC                         ;
 $7C90 DEFB $35,$7F,$DC                         ;
 $7C93 DEFB $76,$D7,$DE                         ;
 $7C96 DEFB $76,$BB,$CE                         ;
 $7C99 DEFB $FA,$7D,$BF                         ;
 $7C9C DEFB $FB,$FE,$BF                         ;
 $7C9F DEFB $FD,$FF,$7F                         ;
 $7CA2 DEFB $FE,$FD,$FF                         ;
 $7CA5 DEFB $FF,$7D,$FF                         ;
 $7CA8 DEFB $FF,$7D,$FF                         ;
 $7CAB DEFB $7F,$7B,$FE                         ;
 $7CAE DEFB $7F,$7B,$FE                         ;
 $7CB1 DEFB $7F,$BB,$FE                         ;
 $7CB4 DEFB $3F,$BB,$FC                         ;
 $7CB7 DEFB $3F,$BB,$FC                         ;
 $7CBA DEFB $1F,$BB,$F8                         ;
 $7CBD DEFB $0F,$FF,$F0                         ;
 $7CC0 DEFB $07,$FF,$E0                         ;
 $7CC3 DEFB $07,$FF,$E0                         ;
 $7CC6 DEFB $0C,$D9,$C0                         ;
 $7CC9 DEFB $03,$80,$C0                         ;
 $7CCC DEFB $01,$00,$80                         ; }
; For attributes see #R$6748. #DIMENSIONS
 $7CCF DEFB $E0                                 ; Terminator.
 $7CD0 DEFB $09                                 ; #LET(width=#PEEK(#PC)) Width
                                                ; = #N({width}) bytes.
 $7CD1 DEFB $38                                 ; #LET(height=#PEEK(#PC))
                                                ; Height = #N({height}) pixels.
 $7CD2 DEFB $00,$00,$00,$03,$FF,$C0,$00,$00,$00 ; {#UDGARRAY9,scale=4,step=9,flip=2;(#PC)-(#PC
 $7CDB DEFB $00,$00,$00,$03,$FF,$C0,$00,$00,$00 ; + ({height} * {width}) -
 $7CE4 DEFB $00,$00,$01,$80,$7F,$23,$00,$00,$00 ; {width})-$01-({width} *
 $7CED DEFB $00,$00,$09,$C7,$BF,$67,$08,$00,$00 ; $08)@$6775-$6786;$676C-$6774;$6763-$676B;$6751-$6762;$6748-$6750(flower-04)
 $7CF6 DEFB $00,$00,$19,$EF,$BE,$F7,$18,$00,$00 ;
 $7CFF DEFB $00,$08,$19,$EF,$DD,$EF,$9C,$40,$00 ;
 $7D08 DEFB $00,$08,$1D,$EF,$ED,$EF,$BC,$E0,$00 ;
 $7D11 DEFB $00,$0C,$1F,$EF,$F3,$F7,$BE,$E0,$00 ;
 $7D1A DEFB $01,$1C,$1E,$EF,$F3,$F7,$7F,$E0,$00 ;
 $7D23 DEFB $01,$9E,$1F,$6F,$FB,$F6,$FD,$E0,$00 ;
 $7D2C DEFB $01,$EF,$1F,$AF,$FB,$F6,$FD,$E7,$00 ;
 $7D35 DEFB $21,$EF,$8F,$CF,$FB,$F5,$FD,$9F,$00 ;
 $7D3E DEFB $30,$F7,$CF,$EF,$FB,$F5,$FD,$7F,$10 ;
 $7D47 DEFB $38,$F7,$F7,$FF,$FD,$FD,$FC,$F8,$F0 ;
 $7D50 DEFB $3C,$77,$FF,$FF,$FD,$FF,$FD,$C7,$F0 ;
 $7D59 DEFB $3F,$3B,$FF,$FF,$FF,$FF,$FF,$3F,$E0 ;
 $7D62 DEFB $3F,$3E,$00,$0F,$C2,$00,$00,$00,$E0 ;
 $7D6B DEFB $1F,$01,$00,$FF,$C3,$C0,$00,$00,$E6 ;
 $7D74 DEFB $1F,$00,$07,$FF,$76,$C3,$E0,$00,$DE ;
 $7D7D DEFB $0F,$00,$1F,$FF,$3E,$C7,$F8,$00,$DE ;
 $7D86 DEFB $0F,$00,$7F,$FF,$1C,$6E,$FE,$00,$BE ;
 $7D8F DEFB $07,$01,$FF,$FF,$3C,$FC,$FF,$80,$BE ;
 $7D98 DEFB $83,$03,$FF,$FF,$EB,$F8,$FF,$C0,$7C ;
 $7DA1 DEFB $FF,$C7,$FF,$FF,$CA,$3C,$FF,$E0,$78 ;
 $7DAA DEFB $FF,$0F,$00,$00,$03,$DF,$00,$F0,$83 ;
 $7DB3 DEFB $7F,$1F,$00,$1F,$87,$A7,$00,$F0,$FF ;
 $7DBC DEFB $7F,$3F,$01,$1F,$FF,$70,$C0,$FC,$FF ;
 $7DC5 DEFB $3F,$3F,$03,$1F,$FE,$3C,$E0,$FC,$FF ;
 $7DCE DEFB $1F,$7F,$07,$00,$7D,$9E,$7E,$FE,$FE ;
 $7DD7 DEFB $0F,$7F,$1E,$00,$03,$FE,$5C,$FE,$FC ;
 $7DE0 DEFB $03,$7F,$7D,$1F,$FF,$F4,$A0,$FE,$F8 ;
 $7DE9 DEFB $01,$7F,$F2,$9E,$1C,$7F,$40,$FE,$E0 ;
 $7DF2 DEFB $C1,$7F,$FF,$5D,$EB,$9E,$FF,$FE,$80 ;
 $7DFB DEFB $FF,$7F,$FF,$BD,$F7,$EF,$FF,$FE,$E0 ;
 $7E04 DEFB $7F,$7F,$FF,$6F,$FF,$EC,$FF,$FE,$FC ;
 $7E0D DEFB $7F,$7F,$FF,$60,$FF,$FC,$FF,$FE,$FF ;
 $7E16 DEFB $3F,$3F,$FF,$0F,$00,$FC,$FF,$FC,$FF ;
 $7E1F DEFB $1F,$3F,$FF,$17,$FF,$08,$FF,$FC,$FE ;
 $7E28 DEFB $0F,$3F,$FF,$37,$9C,$F0,$FF,$FC,$FC ;
 $7E31 DEFB $03,$1F,$FF,$37,$49,$70,$FF,$F8,$F0 ;
 $7E3A DEFB $00,$1F,$FF,$17,$41,$70,$FF,$F8,$80 ;
 $7E43 DEFB $01,$0F,$FF,$1B,$77,$70,$FF,$F0,$00 ;
 $7E4C DEFB $03,$07,$FF,$1A,$88,$A0,$FF,$E0,$00 ;
 $7E55 DEFB $07,$03,$FF,$1B,$55,$60,$FF,$C0,$80 ;
 $7E5E DEFB $7F,$01,$FF,$18,$3F,$E0,$FF,$80,$E0 ;
 $7E67 DEFB $7F,$00,$7F,$0B,$C0,$40,$FE,$00,$FF ;
 $7E70 DEFB $3F,$00,$0F,$07,$FF,$80,$F0,$00,$FE ;
 $7E79 DEFB $0F,$00,$00,$00,$7E,$00,$00,$00,$FC ;
 $7E82 DEFB $0C,$F1,$FF,$7F,$7F,$FE,$FF,$8F,$E0 ;
 $7E8B DEFB $00,$01,$FF,$7F,$7F,$FF,$7F,$80,$00 ;
 $7E94 DEFB $00,$03,$FF,$FF,$7E,$FF,$7F,$80,$00 ;
 $7E9D DEFB $00,$03,$FE,$FE,$FF,$7F,$BF,$C0,$00 ;
 $7EA6 DEFB $00,$07,$FD,$FE,$7F,$7F,$BF,$E0,$00 ;
 $7EAF DEFB $00,$0F,$F1,$FC,$7E,$3F,$9F,$FC,$00 ;
 $7EB8 DEFB $00,$0F,$C1,$F8,$3C,$1F,$07,$FC,$00 ;
 $7EC1 DEFB $00,$00,$01,$E0,$18,$07,$00,$00,$00 ; }

; Sprite: Explosions
;
; .
;
; .
;
; #DIMENSIONS
b$7ECA DEFB $00                             ; Terminator.
 $7ECB DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7ECC DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7ECD DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7ED5 DEFB $00,$00,$00,$00,$00,$0C,$00,$01 ; + ({height} * {width}) -
 $7EDD DEFB $DE,$C0,$03,$DF,$C0,$03,$EF,$C0 ; {width})-$01-({width} *
 $7EE5 DEFB $03,$AC,$70,$03,$DF,$F8,$01,$FF ; $08)(explosion-01*)
 $7EED DEFB $F8,$00,$2F,$B0,$00,$33,$00,$00 ;
 $7EF5 DEFB $0E,$00,$00,$00,$00,$00,$00,$00 ; }
; #DIMENSIONS
 $7EFD DEFB $00                             ; Terminator.
 $7EFE DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7EFF DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7F00 DEFB $00,$00,$00,$00,$00,$00,$00,$7C ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7F08 DEFB $00,$00,$E6,$00,$0E,$FE,$C0,$1F ; + ({height} * {width}) -
 $7F10 DEFB $7F,$E0,$1F,$BF,$C0,$1F,$D7,$F8 ; {width})-$01-({width} *
 $7F18 DEFB $0F,$EF,$FC,$1F,$EF,$EC,$17,$DF ; $08)(explosion-02*)
 $7F20 DEFB $BC,$1E,$FF,$D8,$09,$BF,$C0,$07 ;
 $7F28 DEFB $1F,$80,$00,$00,$00,$00,$00,$00 ; }
; #DIMENSIONS
 $7F30 DEFB $00                             ; Terminator.
 $7F31 DEFB $03                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $7F32 DEFB $10                             ; #LET(height=#PEEK(#PC)) Height =
                                            ; #N({height}) pixels.
 $7F33 DEFB $01,$F0,$00,$07,$F8,$86,$0F,$FE ; {#UDGARRAY3,attr=7,scale=4,step=3,flip=2;(#PC)-(#PC
 $7F3B DEFB $F0,$6B,$FE,$F8,$FC,$FF,$FC,$FF ; + ({height} * {width}) -
 $7F43 DEFB $7F,$78,$FF,$BE,$E4,$FF,$7E,$5E ; {width})-$01-({width} *
 $7F4B DEFB $7E,$F9,$BF,$7B,$FF,$DF,$DD,$FE ; $08)(explosion-03*)
 $7F53 DEFB $FF,$3F,$EF,$BE,$6F,$EF,$C4,$67 ;
 $7F5B DEFB $D3,$F8,$3B,$9C,$E0,$0F,$0E,$C0 ; }

; Sprite: Fertiliser
;
; .
;
; .
;
; #DIMENSIONS
b$7F63 DEFB $00                 ; Terminator.
 $7F64 DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7F65 DEFB $12                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7F66 DEFB %11111111,%11111111 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7F68 DEFB %01111111,%11111111 ; + ({height} * {width}))-$01-({width} *
 $7F6A DEFB %01111111,%11111111 ; $08){$00, $04 * $07, $04 * {width} * $08, $08
 $7F6C DEFB %01010001,%01010001 ; * {height}}(fertiliser*)
 $7F6E DEFB %01010101,%01010111 ;
 $7F70 DEFB %01010011,%00010111 ;
 $7F72 DEFB %01010101,%01010111 ;
 $7F74 DEFB %01010001,%00010001 ;
 $7F76 DEFB %01011111,%11111111 ;
 $7F78 DEFB %01011111,%11111111 ;
 $7F7A DEFB %01010001,%01010001 ;
 $7F7C DEFB %01010101,%01010101 ;
 $7F7E DEFB %01010101,%00110101 ;
 $7F80 DEFB %01010111,%01010101 ;
 $7F82 DEFB %01010001,%00010001 ;
 $7F84 DEFB %01011111,%11111111 ;
 $7F86 DEFB %01000000,%00000011 ;
 $7F88 DEFB %01111111,%11111111 ; }

; Sprite: Fly Swat
;
; .
;
; .
;
; #DIMENSIONS
b$7F8A DEFB $00                 ; Terminator.
 $7F8B DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7F8C DEFB $10                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7F8D DEFB %11000000,%00000000 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7F8F DEFB %11100000,%00000000 ; + ({height} * {width}) -
 $7F91 DEFB %01110000,%00000000 ; {width})-$01-({width} * $08)(swatter*)
 $7F93 DEFB %00111000,%00000000 ;
 $7F95 DEFB %00011100,%00000000 ;
 $7F97 DEFB %00001110,%01100000 ;
 $7F99 DEFB %00000111,%11110000 ;
 $7F9B DEFB %00000011,%11011000 ;
 $7F9D DEFB %00000011,%10101100 ;
 $7F9F DEFB %00000111,%01010110 ;
 $7FA1 DEFB %00000110,%10101011 ;
 $7FA3 DEFB %00000011,%01010111 ;
 $7FA5 DEFB %00000001,%10101110 ;
 $7FA7 DEFB %00000000,%11011100 ;
 $7FA9 DEFB %00000000,%01111000 ;
 $7FAB DEFB %00000000,%00110000 ; }

; Sprite: Watering Can
;
; .
;
; .
;
; #DIMENSIONS
b$7FAD DEFB $00                 ; Terminator.
 $7FAE DEFB $02                 ; #LET(width=#PEEK(#PC)) Width = #N({width})
                                ; bytes.
 $7FAF DEFB $11                 ; #LET(height=#PEEK(#PC)) Height = #N({height})
                                ; pixels.
 $7FB0 DEFB %00000011,%11111110 ; {#UDGARRAY2,attr=7,scale=4,step=2,flip=2;(#PC)-(#PC
 $7FB2 DEFB %00000010,%01111110 ; + ({height} * {width}))-$01-({width} *
 $7FB4 DEFB %00000010,%01111110 ; $08){$00, $04 * $07, $04 * {width} * $08, $08
 $7FB6 DEFB %00000010,%01111110 ; * {height}}(watering-can*)
 $7FB8 DEFB %00000010,%01111110 ;
 $7FBA DEFB %00000110,%01111110 ;
 $7FBC DEFB %00001110,%01111110 ;
 $7FBE DEFB %00011110,%01111110 ;
 $7FC0 DEFB %11111010,%01111110 ;
 $7FC2 DEFB %11110010,%01111110 ;
 $7FC4 DEFB %01110010,%00000010 ;
 $7FC6 DEFB %00110011,%11111110 ;
 $7FC8 DEFB %00000001,%11111110 ;
 $7FCA DEFB %00000010,%11100010 ;
 $7FCC DEFB %00000010,%00000010 ;
 $7FCE DEFB %00000001,%00000100 ;
 $7FD0 DEFB %00000000,%11111000 ; }

; Data block at 7FD2
b$7FD2 DEFB $43,$4F,$50,$59,$52,$49,$47,$48
 $7FDA DEFB $54,$20,$31,$39,$38,$33,$20,$41
 $7FE2 DEFB $2E,$43,$2E,$47,$2E,$20,$41,$4C
 $7FEA DEFB $4C,$20,$52,$49,$47,$48,$54,$53
 $7FF2 DEFB $20,$52,$45,$53,$45,$52,$56,$45
 $7FFA DEFB $44

