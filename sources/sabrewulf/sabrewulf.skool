@org=$4000

; Loading screen
;
; #UDGTABLE
; { =h Sabre Wulf Loading Screen }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$00,$00,$1F,$C0,$00 ; {Pixels
 $4020 DEFB $00,$00,$00,$00,$00,$00,$03,$00,$3F,$80,$0F,$FB,$80,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$E8,$E0,$80,$00,$00,$0F,$E7,$FF,$3F,$FE ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$0F,$01,$C0,$E0,$38,$0E,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$7E,$00,$00,$80,$1C,$00,$7D,$FF,$DF ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$3F,$03,$C0,$03,$F0,$00,$0F,$00,$00,$1D,$00,$03,$C3,$80,$00,$03,$8F,$00,$01,$E0,$F0,$03,$FF,$CF,$FE,$0F ;
 $4080 DEFB $00,$00,$00,$00,$00,$03,$00,$FC,$00,$0F,$00,$70,$E0,$03,$F0,$73,$83,$83,$FC,$C0,$FC,$1C,$E0,$7F,$80,$FF,$FF,$80,$0F,$DF,$FF,$BF ;
 $40A0 DEFB $00,$00,$00,$00,$00,$3F,$0E,$0F,$00,$0F,$00,$3B,$81,$C3,$C0,$77,$03,$87,$06,$C0,$3F,$00,$78,$3C,$00,$00,$40,$C0,$DF,$9F,$FF,$F7 ;
 $40C0 DEFB $00,$02,$00,$00,$01,$00,$E0,$F0,$00,$00,$07,$BD,$DD,$F6,$FF,$7F,$0F,$FF,$80,$C1,$F8,$03,$C0,$1F,$FF,$8E,$FE,$00,$01,$F7,$F1,$F7 ;
 $40E0 DEFB $01,$F8,$BA,$00,$03,$01,$C3,$80,$00,$00,$07,$80,$80,$C0,$1C,$1D,$80,$00,$00,$E1,$FF,$FF,$00,$3F,$C1,$C0,$E0,$00,$00,$08,$E0,$F8 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$07,$00,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$F8,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$07,$00,$1F,$80,$03,$F3,$80,$FF,$C0,$00,$00,$00,$01,$FF,$FF,$FF,$FD,$C0,$F0,$00,$00,$1F,$9F,$FF,$DF,$FF ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$0F,$01,$C0,$E0,$70,$1E,$00,$00,$00,$00,$00,$00,$00,$3F,$83,$F8,$00,$7F,$80,$00,$80,$38,$03,$FE,$FF,$FC ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$3F,$01,$F0,$00,$FC,$00,$07,$00,$00,$3B,$03,$01,$E3,$C0,$00,$03,$9E,$00,$00,$E0,$F8,$07,$3F,$BF,$F1,$FF ;
 $4180 DEFB $00,$00,$00,$00,$00,$03,$01,$FF,$00,$07,$80,$70,$E0,$01,$F0,$63,$83,$00,$7E,$C0,$78,$38,$E0,$7F,$C0,$FF,$FF,$80,$1F,$BF,$FF,$3F ;
 $41A0 DEFB $00,$00,$00,$00,$00,$7F,$1C,$0F,$E0,$3E,$00,$37,$01,$C1,$C0,$37,$07,$FE,$06,$C0,$7F,$80,$3C,$1F,$FF,$F0,$C0,$C0,$9E,$3F,$7F,$EF ;
 $41C0 DEFB $00,$48,$00,$00,$01,$00,$E1,$FC,$00,$00,$0F,$03,$8E,$00,$FF,$80,$1F,$FC,$00,$C3,$C0,$01,$E0,$07,$F8,$1E,$FC,$00,$01,$EF,$E3,$EF ;
 $41E0 DEFB $00,$08,$B6,$00,$03,$01,$C3,$80,$00,$00,$1E,$03,$C0,$C0,$1C,$0E,$00,$00,$00,$00,$E0,$03,$00,$FF,$E1,$C0,$E0,$00,$00,$01,$E1,$F0 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$1F,$00,$00,$00,$00,$FC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$00,$00,$00,$00,$07,$FF,$FE,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$07,$00,$3E,$00,$00,$03,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FA,$20,$FE,$00,$00,$3E,$7F,$FF,$E7,$FF ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$0F,$07,$C0,$E0,$E0,$7C,$00,$00,$00,$00,$3F,$80,$00,$7F,$FF,$FE,$00,$7F,$E0,$00,$C0,$30,$0F,$FF,$3E,$3F ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$7F,$00,$7C,$00,$3E,$00,$0E,$00,$60,$3B,$07,$E1,$E7,$C1,$FF,$83,$BC,$00,$00,$F0,$F8,$04,$3F,$7F,$CF,$FF ;
 $4280 DEFB $00,$00,$00,$00,$00,$07,$01,$CF,$80,$03,$80,$31,$C0,$60,$60,$63,$80,$00,$1E,$C0,$60,$3C,$E0,$01,$C0,$FF,$FF,$80,$3F,$7F,$FC,$FE ;
 $42A0 DEFB $00,$00,$00,$00,$00,$7F,$1C,$03,$FF,$FC,$00,$77,$00,$E1,$C0,$3B,$07,$FC,$0E,$C0,$FF,$C0,$1F,$07,$FF,$F3,$C0,$C0,$3C,$3E,$FF,$DF ;
 $42C0 DEFB $00,$76,$00,$00,$01,$00,$E1,$FF,$00,$00,$1E,$07,$07,$00,$F3,$9C,$3C,$00,$00,$C7,$80,$00,$F0,$00,$00,$3C,$FC,$00,$01,$7F,$C3,$EF ;
 $42E0 DEFB $00,$3D,$36,$00,$03,$01,$87,$80,$00,$00,$7C,$07,$C0,$E0,$1C,$07,$0F,$FF,$CF,$FF,$70,$07,$01,$F8,$00,$E0,$E0,$00,$00,$01,$C7,$E0 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$3F,$00,$FC,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$04,$00,$00,$00,$00,$1F,$FF,$FF,$80 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$07,$00,$78,$00,$00,$03,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F7,$10,$FF,$80,$00,$7D,$FF,$FF,$F7,$FF ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$0F,$07,$C0,$E1,$E0,$F8,$1F,$F8,$00,$01,$FF,$F0,$00,$7F,$FF,$FF,$00,$61,$F0,$00,$C0,$60,$1F,$C7,$C1,$C1 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$FF,$00,$3F,$80,$0F,$00,$1C,$00,$F0,$3B,$87,$F0,$E4,$C1,$FF,$87,$38,$01,$FF,$F0,$F8,$08,$7C,$FF,$BF,$FE ;
 $4380 DEFB $00,$00,$00,$00,$00,$0F,$03,$83,$80,$03,$80,$31,$C0,$F8,$00,$63,$80,$00,$0E,$C0,$00,$1E,$E0,$00,$E0,$FF,$FF,$C0,$3C,$FF,$E3,$FE ;
 $43A0 DEFB $00,$08,$00,$C6,$00,$7F,$38,$00,$FF,$F8,$00,$6F,$00,$E1,$C0,$3A,$00,$F0,$0E,$C0,$F1,$F0,$0F,$80,$00,$EF,$80,$C0,$38,$7D,$FF,$BD ;
 $43C0 DEFB $01,$8D,$00,$00,$01,$00,$E1,$CF,$E0,$00,$7C,$1E,$07,$00,$61,$DC,$38,$00,$00,$C7,$00,$00,$7C,$00,$00,$78,$F8,$00,$01,$EF,$83,$DF ;
 $43E0 DEFB $00,$72,$B6,$00,$07,$03,$87,$00,$00,$07,$F0,$1F,$C0,$60,$0C,$03,$8F,$FF,$EF,$FF,$B8,$06,$03,$E0,$00,$E0,$F0,$0C,$38,$01,$9F,$C0 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$7F,$07,$FF,$C0,$04,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$08,$10,$00,$00,$00,$00,$7F,$FF,$FF,$E0 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$0F,$00,$F0,$0F,$E0,$03,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$08,$FF,$E0,$00,$FB,$FF,$FF,$FB,$FF ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$0F,$07,$C0,$73,$FF,$F0,$3F,$FF,$FF,$FE,$FF,$FC,$00,$F0,$7F,$0F,$80,$60,$78,$00,$E0,$40,$3F,$3F,$8F,$FE ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$FF,$00,$0F,$F0,$03,$80,$38,$03,$F0,$3B,$86,$30,$E0,$C1,$C3,$07,$70,$0F,$FF,$F0,$FC,$00,$61,$FE,$7F,$FD ;
 $4480 DEFB $00,$00,$00,$00,$00,$0F,$03,$83,$80,$03,$80,$39,$C1,$FC,$00,$63,$80,$0C,$0E,$C0,$00,$0F,$20,$00,$60,$FF,$FF,$C0,$7B,$FF,$1F,$FD ;
 $44A0 DEFB $00,$10,$00,$6C,$00,$FF,$38,$00,$1F,$E0,$00,$EE,$00,$73,$80,$1C,$00,$00,$1C,$C0,$60,$78,$07,$C0,$01,$DF,$80,$80,$30,$7D,$FF,$7F ;
 $44C0 DEFB $01,$EA,$40,$00,$01,$00,$E3,$C3,$FC,$01,$F8,$3C,$03,$80,$70,$E8,$70,$00,$00,$C6,$00,$00,$1F,$00,$00,$F0,$F8,$00,$01,$FF,$07,$DE ;
 $44E0 DEFB $6C,$6F,$4E,$60,$07,$03,$87,$7C,$00,$FF,$E0,$3E,$E0,$60,$0E,$01,$07,$FF,$FF,$FF,$D8,$06,$03,$80,$00,$70,$F0,$06,$70,$01,$FF,$80 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$FF,$1F,$FF,$F0,$0E,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$05,$20,$00,$00,$00,$01,$FF,$FF,$FF,$F0 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$0F,$00,$E0,$1F,$F0,$03,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$DF,$00,$FF,$F8,$01,$C7,$FF,$FF,$FD,$FF ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$1F,$07,$00,$79,$FF,$E0,$1F,$FF,$FF,$FF,$80,$7E,$00,$E0,$00,$07,$80,$E0,$3F,$00,$E0,$00,$7C,$FE,$7F,$FF ;
 $4560 DEFB $00,$00,$00,$00,$00,$01,$FF,$00,$03,$FC,$01,$C0,$78,$0F,$30,$73,$86,$70,$E0,$C0,$C6,$06,$70,$1F,$F0,$00,$FC,$00,$43,$FD,$FF,$FB ;
 $4580 DEFB $00,$00,$00,$00,$00,$1F,$07,$07,$00,$03,$80,$3B,$81,$FE,$00,$73,$80,$3E,$06,$C0,$00,$07,$C0,$3F,$F0,$FF,$FF,$C0,$77,$F8,$EF,$FD ;
 $45A0 DEFB $00,$10,$00,$00,$00,$FF,$70,$00,$00,$00,$00,$DE,$20,$77,$00,$1E,$00,$00,$78,$C0,$60,$3C,$01,$F0,$03,$3F,$80,$80,$20,$FB,$FF,$FD ;
 $45C0 DEFB $00,$72,$50,$00,$03,$01,$C3,$80,$FF,$FF,$E0,$70,$01,$80,$38,$70,$F0,$00,$00,$D8,$00,$00,$07,$C3,$FE,$E0,$F0,$00,$01,$DE,$07,$BE ;
 $45E0 DEFB $00,$1C,$2E,$E0,$07,$03,$87,$3F,$FF,$FF,$01,$F8,$E0,$60,$0E,$01,$C3,$80,$7C,$01,$DC,$06,$07,$00,$00,$70,$F8,$00,$00,$01,$FF,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$01,$FF,$3F,$01,$FC,$1F,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$03,$40,$00,$00,$00,$03,$FE,$07,$FF,$F8 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$0F,$00,$E0,$3C,$78,$07,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$02,$FF,$FE,$00,$07,$E0,$07,$FF,$7F ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$1F,$07,$00,$3E,$3F,$00,$1C,$03,$FF,$FD,$00,$1F,$01,$E0,$00,$03,$83,$E0,$1F,$80,$F0,$00,$FB,$F9,$FF,$FC ;
 $4660 DEFB $00,$00,$00,$00,$00,$01,$FF,$00,$00,$7E,$00,$E0,$70,$1E,$30,$73,$87,$E1,$C0,$C0,$CE,$0E,$70,$3C,$00,$00,$FE,$00,$07,$FB,$FF,$F7 ;
 $4680 DEFB $00,$00,$00,$00,$00,$1F,$07,$07,$00,$03,$80,$3B,$81,$8F,$00,$77,$80,$FF,$06,$C0,$00,$03,$E0,$7F,$F0,$FF,$FF,$C0,$F7,$E7,$DF,$FB ;
 $46A0 DEFB $00,$14,$00,$00,$00,$FF,$70,$00,$00,$00,$01,$DF,$77,$FF,$CD,$FE,$00,$03,$F0,$C0,$70,$1E,$00,$FC,$00,$F3,$00,$00,$00,$FB,$FF,$FB ;
 $46C0 DEFB $00,$06,$D8,$00,$03,$01,$C3,$80,$1F,$FF,$80,$E0,$01,$C0,$38,$39,$E0,$00,$00,$F7,$FF,$FF,$01,$FB,$FF,$40,$F0,$00,$01,$8C,$0F,$BC ;
 $46E0 DEFB $00,$33,$AD,$C0,$07,$03,$87,$1F,$FF,$F0,$0F,$E0,$E0,$60,$0E,$01,$E1,$C0,$EE,$03,$DC,$06,$07,$00,$7F,$38,$F8,$00,$00,$01,$FF,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$03,$FF,$7F,$00,$3F,$3F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$03,$CA,$00,$00,$00,$07,$F9,$F8,$FF,$FC ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$0F,$01,$C0,$70,$38,$07,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$70,$FF,$FF,$00,$0F,$00,$1B,$FF,$FF ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$1F,$03,$80,$0F,$C0,$00,$0E,$00,$00,$1D,$00,$07,$81,$C0,$00,$03,$87,$C0,$03,$C0,$E0,$01,$E7,$F7,$FF,$FF ;
 $4760 DEFB $00,$00,$00,$00,$00,$03,$FF,$70,$00,$1F,$00,$60,$F0,$0F,$30,$73,$83,$C1,$F0,$C0,$DC,$1C,$E0,$78,$00,$00,$FF,$00,$0F,$E7,$FF,$EF ;
 $4780 DEFB $00,$00,$00,$00,$00,$3F,$0E,$0E,$00,$07,$00,$3B,$81,$87,$80,$77,$03,$E7,$06,$C0,$1C,$00,$F0,$78,$00,$FF,$FF,$C0,$EF,$DF,$BF,$FB ;
 $47A0 DEFB $00,$6C,$00,$00,$00,$FF,$70,$C0,$00,$00,$03,$BE,$FB,$FF,$3E,$FF,$0F,$1F,$E0,$C0,$F0,$0F,$00,$3F,$FF,$E7,$00,$00,$00,$F7,$FD,$F7 ;
 $47C0 DEFB $00,$F4,$98,$00,$03,$01,$C3,$80,$03,$F8,$01,$C0,$00,$C0,$38,$1B,$C0,$00,$00,$F3,$FF,$FF,$00,$27,$FF,$80,$E0,$00,$01,$08,$0F,$7C ;
 $47E0 DEFB $00,$2F,$D5,$C0,$07,$03,$87,$07,$C0,$01,$FF,$80,$E0,$60,$EE,$00,$71,$C1,$CE,$07,$8C,$06,$0E,$00,$FF,$B8,$FC,$00,$00,$03,$FF,$00 ;
 $4800 DEFB $00,$00,$13,$80,$07,$03,$87,$01,$FF,$FF,$FC,$00,$E0,$E7,$EE,$00,$3B,$C1,$CF,$07,$0E,$0E,$0E,$01,$FF,$FC,$FC,$00,$00,$01,$33,$00 ;
 $4820 DEFB $1E,$FB,$F8,$F8,$07,$03,$87,$00,$00,$00,$00,$0E,$07,$00,$70,$0E,$27,$8C,$0C,$1C,$07,$0B,$F8,$0F,$F0,$00,$00,$F0,$00,$02,$0F,$80 ;
 $4840 DEFB $7D,$EE,$7C,$00,$01,$00,$E1,$C0,$00,$00,$1E,$00,$00,$E0,$03,$C0,$F0,$00,$00,$07,$1C,$07,$FF,$8E,$00,$3F,$80,$E0,$00,$00,$FF,$F8 ;
 $4860 DEFB $FB,$60,$20,$00,$00,$FF,$38,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FE,$00,$07,$E0,$FE,$00,$00,$FF,$3F,$FC ;
 $4880 DEFB $6D,$EC,$F6,$00,$00,$0F,$01,$C1,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$0E,$FF,$FF,$80,$0F,$00,$1F,$07,$FF ;
 $48A0 DEFB $D7,$BE,$DC,$B1,$00,$00,$7F,$03,$80,$F0,$00,$00,$00,$00,$7F,$C0,$00,$7F,$FF,$00,$FF,$80,$01,$E0,$FC,$00,$00,$00,$3F,$7F,$FF,$FF ;
 $48C0 DEFB $80,$BD,$CE,$F8,$E3,$1C,$00,$7F,$FF,$3F,$80,$00,$03,$F8,$FF,$FF,$FF,$FF,$FF,$7F,$FF,$FC,$FF,$FF,$00,$00,$00,$00,$0F,$FF,$FF,$0F ;
 $48E0 DEFB $7F,$80,$FA,$75,$F8,$76,$7C,$00,$07,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $00,$0F,$CB,$18,$07,$03,$87,$00,$7F,$FF,$80,$00,$E0,$FF,$FE,$00,$3D,$81,$87,$0E,$0E,$0E,$0C,$03,$C0,$FC,$FE,$00,$00,$03,$07,$00 ;
 $4920 DEFB $0F,$7D,$DB,$F0,$03,$03,$87,$00,$00,$00,$00,$1E,$0E,$00,$70,$0E,$73,$1C,$1C,$1C,$07,$0D,$F8,$0F,$F0,$00,$00,$F0,$00,$03,$FF,$80 ;
 $4940 DEFB $3E,$D9,$FF,$80,$01,$00,$E1,$C0,$00,$00,$3C,$00,$03,$E0,$03,$C0,$F0,$00,$00,$07,$1C,$00,$3F,$F0,$00,$FF,$80,$E0,$00,$00,$FF,$EC ;
 $4960 DEFB $77,$1F,$C0,$00,$00,$7F,$1C,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$00,$FF,$C0,$3F,$C0,$FE,$00,$00,$FF,$3F,$F8 ;
 $4980 DEFB $0D,$DB,$EE,$00,$00,$0F,$01,$E0,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C0,$1C,$FF,$FE,$00,$1F,$00,$7F,$07,$FE ;
 $49A0 DEFB $F3,$DD,$BC,$AF,$00,$00,$3F,$01,$E0,$7C,$00,$00,$00,$03,$E7,$E0,$00,$1F,$FF,$FF,$FE,$00,$03,$C0,$FC,$00,$00,$00,$07,$FF,$FF,$7F ;
 $49C0 DEFB $C0,$DF,$CE,$F0,$EF,$F0,$00,$3F,$FF,$0F,$FC,$00,$3F,$E0,$FF,$FF,$FF,$FF,$FF,$07,$FF,$80,$FF,$FE,$00,$00,$00,$00,$5F,$FF,$FE,$07 ;
 $49E0 DEFB $3F,$C0,$F8,$7B,$F0,$F9,$F0,$00,$01,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$EB,$38,$07,$03,$87,$00,$03,$F8,$00,$00,$C0,$FF,$3C,$01,$1E,$83,$87,$0E,$0E,$0E,$1C,$03,$80,$70,$FF,$00,$00,$03,$FF,$00 ;
 $4A20 DEFB $EF,$BE,$D7,$E0,$03,$01,$87,$80,$00,$00,$00,$3C,$0C,$00,$E0,$1C,$70,$1C,$3C,$1C,$07,$0D,$80,$00,$38,$00,$20,$F0,$00,$03,$FC,$C0 ;
 $4A40 DEFB $3E,$37,$FE,$00,$01,$00,$E1,$C0,$00,$00,$78,$00,$07,$C0,$01,$E0,$78,$00,$00,$07,$98,$00,$07,$FF,$07,$F7,$00,$E0,$00,$00,$FF,$CE ;
 $4A60 DEFB $36,$78,$00,$00,$00,$7F,$1C,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F8,$00,$0F,$FF,$FF,$00,$FC,$00,$00,$FF,$3F,$F1 ;
 $4A80 DEFB $CD,$37,$DA,$00,$00,$07,$00,$E0,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$C0,$1C,$FF,$FC,$00,$3F,$00,$FF,$07,$FC ;
 $4AA0 DEFB $FB,$CD,$A9,$DE,$00,$00,$1F,$00,$F0,$1F,$80,$00,$00,$3F,$9E,$70,$00,$0F,$01,$FF,$F0,$00,$0F,$80,$F8,$00,$06,$00,$3F,$F0,$7F,$7F ;
 $4AC0 DEFB $E0,$DF,$1C,$E3,$5F,$E0,$00,$1F,$FF,$01,$FF,$FF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$FF,$FC,$00,$00,$00,$00,$FF,$FF,$FE,$07 ;
 $4AE0 DEFB $1F,$E0,$FC,$F4,$61,$F7,$E1,$E0,$00,$7F,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B00 DEFB $00,$1F,$2A,$F0,$07,$03,$87,$00,$00,$00,$00,$01,$C1,$F0,$3C,$01,$8F,$03,$07,$0E,$06,$0C,$1C,$07,$00,$00,$FF,$80,$00,$03,$FF,$00 ;
 $4B20 DEFB $F7,$DE,$BA,$00,$03,$01,$C3,$80,$00,$00,$00,$78,$18,$00,$C0,$38,$E0,$38,$78,$1C,$0E,$0E,$80,$00,$18,$00,$60,$F0,$00,$03,$F8,$C0 ;
 $4B40 DEFB $1E,$60,$00,$00,$01,$00,$E1,$E0,$00,$00,$70,$00,$07,$C0,$01,$E0,$7C,$00,$18,$03,$B8,$00,$00,$FF,$FF,$EF,$00,$C0,$00,$03,$FF,$9F ;
 $4B60 DEFB $9C,$E7,$E0,$00,$44,$7F,$0E,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$E0,$00,$31,$FF,$FC,$00,$F8,$00,$01,$3F,$1F,$C3 ;
 $4B80 DEFB $EE,$6F,$B6,$01,$F0,$07,$00,$70,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$80,$1C,$FF,$F0,$00,$3F,$01,$C3,$03,$F8 ;
 $4BA0 DEFB $FD,$ED,$9B,$DE,$00,$00,$0F,$00,$FC,$07,$F0,$00,$03,$FE,$7C,$30,$00,$07,$E0,$00,$00,$00,$1F,$00,$F8,$00,$34,$00,$7F,$80,$FF,$3F ;
 $4BC0 DEFB $F0,$EF,$9D,$E7,$3F,$C0,$00,$0F,$FF,$00,$1F,$FF,$FF,$00,$FE,$7F,$FF,$C7,$FF,$00,$00,$00,$FF,$F8,$00,$00,$00,$01,$FF,$FF,$FC,$03 ;
 $4BE0 DEFB $0F,$F0,$7C,$EF,$C2,$EF,$C7,$F8,$00,$1F,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C00 DEFB $00,$01,$C9,$E0,$07,$03,$87,$00,$00,$00,$00,$01,$C1,$C0,$3C,$03,$E7,$07,$06,$1C,$07,$0C,$1C,$07,$00,$00,$FF,$C0,$00,$03,$FF,$00 ;
 $4C20 DEFB $FB,$DE,$23,$C0,$03,$01,$C3,$80,$00,$00,$00,$F0,$10,$01,$80,$78,$E0,$3F,$F0,$1C,$0E,$0E,$80,$0F,$FC,$00,$E0,$F0,$00,$01,$F1,$E0 ;
 $4C40 DEFB $E0,$DF,$F0,$00,$01,$00,$70,$E0,$00,$00,$E0,$00,$03,$80,$00,$F0,$3F,$00,$FC,$01,$D0,$00,$00,$1F,$FF,$1E,$00,$C0,$00,$0F,$FF,$3F ;
 $4C60 DEFB $C5,$9F,$F0,$00,$6C,$3F,$0E,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$00,$00,$30,$1F,$E0,$00,$F0,$00,$FF,$0F,$1F,$07 ;
 $4C80 DEFB $EE,$EF,$76,$01,$E0,$03,$00,$38,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$38,$FF,$C0,$00,$70,$02,$00,$03,$F1 ;
 $4CA0 DEFB $FD,$F5,$B3,$BE,$00,$E0,$07,$00,$3E,$00,$FF,$00,$7F,$F0,$F0,$18,$00,$01,$F0,$00,$00,$00,$7E,$00,$F0,$00,$60,$00,$FF,$01,$F3,$3F ;
 $4CC0 DEFB $F8,$F7,$DB,$CF,$41,$80,$00,$03,$FF,$00,$00,$FF,$00,$00,$FC,$3F,$FF,$81,$FF,$00,$00,$00,$FF,$E0,$00,$00,$00,$00,$07,$FF,$F8,$01 ;
 $4CE0 DEFB $07,$F8,$7E,$DF,$86,$C1,$9F,$FE,$00,$03,$FF,$FF,$FF,$80,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $4D00 DEFB $00,$3E,$EB,$C0,$07,$03,$87,$00,$00,$00,$00,$03,$83,$F0,$38,$03,$F7,$86,$0E,$1C,$07,$0C,$18,$06,$00,$00,$FF,$E0,$00,$03,$FF,$00 ;
 $4D20 DEFB $FB,$EE,$6F,$F0,$03,$01,$C3,$80,$00,$00,$03,$C0,$00,$01,$00,$F1,$E0,$3F,$E0,$0E,$0E,$0E,$18,$0F,$FC,$01,$C0,$F0,$00,$01,$83,$E0 ;
 $4D40 DEFB $E1,$DF,$F8,$00,$00,$00,$70,$E0,$00,$01,$FF,$FF,$FF,$FF,$FF,$FC,$1F,$FF,$FF,$FF,$70,$00,$00,$01,$FC,$3C,$00,$80,$00,$3F,$7F,$FF ;
 $4D60 DEFB $ED,$7F,$00,$00,$00,$3F,$07,$0F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$70,$00,$00,$00,$E0,$01,$FF,$03,$1F,$9F ;
 $4D80 DEFB $EF,$5F,$6E,$0F,$C0,$03,$00,$1C,$0F,$00,$00,$00,$00,$00,$01,$80,$03,$80,$00,$00,$00,$7E,$00,$38,$FF,$00,$00,$01,$00,$0F,$01,$E3 ;
 $4DA0 DEFB $FE,$F5,$75,$84,$07,$F8,$03,$00,$0F,$80,$1F,$FF,$FE,$03,$E0,$0C,$00,$00,$7C,$00,$00,$01,$F8,$00,$E0,$00,$00,$01,$FF,$03,$C3,$1F ;
 $4DC0 DEFB $FC,$F3,$EB,$96,$FF,$01,$F0,$00,$FF,$00,$00,$00,$00,$00,$F8,$0F,$FE,$00,$3F,$00,$00,$00,$FF,$00,$00,$00,$00,$00,$01,$FF,$B8,$01 ;
 $4DE0 DEFB $03,$FC,$7E,$3F,$1E,$BF,$7F,$FF,$00,$00,$7F,$FF,$FC,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $4E00 DEFB $03,$CF,$6B,$80,$07,$03,$87,$00,$00,$00,$00,$03,$83,$E0,$38,$07,$7F,$86,$0E,$1C,$07,$0C,$18,$0E,$00,$00,$FF,$F0,$00,$03,$F1,$80 ;
 $4E20 DEFB $FD,$E4,$DF,$C0,$03,$01,$C3,$80,$00,$00,$07,$80,$00,$00,$01,$E0,$E0,$1F,$80,$0E,$0C,$0F,$E0,$0F,$FE,$03,$C0,$F0,$00,$01,$8F,$F0 ;
 $4E40 DEFB $F1,$80,$1C,$00,$00,$00,$70,$F0,$00,$01,$FF,$FF,$FF,$FF,$FF,$F8,$07,$FF,$E7,$FF,$60,$7F,$00,$00,$00,$78,$00,$80,$00,$7F,$7F,$FF ;
 $4E60 DEFB $EC,$FC,$C0,$00,$00,$1F,$07,$87,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$80,$00,$00,$70,$0E,$00,$00,$E0,$01,$FF,$01,$0F,$FF ;
 $4E80 DEFB $F7,$5E,$AE,$3D,$C0,$01,$00,$0E,$07,$80,$00,$00,$00,$00,$03,$80,$01,$F8,$00,$00,$03,$F8,$00,$78,$FE,$00,$00,$03,$00,$3F,$01,$E7 ;
 $4EA0 DEFB $00,$79,$65,$7C,$0F,$06,$01,$00,$03,$E0,$01,$FF,$C0,$0F,$80,$04,$00,$00,$0F,$C0,$00,$1F,$E0,$00,$C0,$00,$00,$03,$FF,$06,$07,$1F ;
 $4EC0 DEFB $FE,$EB,$F7,$36,$FE,$0F,$FC,$00,$3F,$00,$00,$00,$00,$00,$E0,$03,$F8,$00,$07,$00,$00,$00,$F0,$00,$00,$00,$00,$00,$00,$E0,$30,$00 ;
 $4EE0 DEFB $01,$FE,$7E,$FC,$3E,$7E,$FF,$FF,$00,$00,$03,$FF,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $4F00 DEFB $1D,$F7,$AB,$3C,$07,$03,$87,$00,$00,$00,$00,$07,$07,$80,$70,$07,$1F,$8E,$0E,$1C,$07,$0D,$F8,$0F,$E0,$00,$FF,$F0,$00,$02,$03,$80 ;
 $4F20 DEFB $7D,$E3,$80,$00,$03,$01,$C3,$C0,$00,$00,$0F,$00,$00,$40,$03,$C1,$E0,$0E,$00,$0E,$0C,$0F,$FC,$0E,$00,$0F,$C0,$E0,$00,$01,$FF,$F0 ;
 $4F40 DEFB $FB,$BF,$C0,$00,$00,$00,$38,$70,$00,$03,$FF,$FF,$FF,$FF,$FF,$F8,$01,$FF,$03,$FE,$E7,$FF,$E0,$00,$00,$F0,$00,$00,$00,$FF,$7F,$FE ;
 $4F60 DEFB $ED,$F3,$3A,$00,$00,$1F,$03,$83,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$0E,$00,$00,$C0,$0F,$FF,$00,$0F,$FF ;
 $4F80 DEFB $E7,$BE,$DC,$7B,$80,$00,$00,$07,$03,$E0,$00,$00,$00,$00,$0F,$C0,$00,$FF,$C0,$00,$1F,$E0,$00,$F0,$FE,$00,$00,$07,$00,$7F,$00,$FF ;
 $4FA0 DEFB $FC,$79,$6D,$78,$3C,$FF,$00,$00,$01,$FC,$00,$00,$00,$7E,$00,$02,$00,$00,$03,$FF,$FF,$FF,$80,$00,$80,$00,$00,$00,$7F,$00,$0F,$0F ;
 $4FC0 DEFB $FF,$DD,$F7,$74,$FC,$37,$9F,$00,$1F,$00,$00,$00,$00,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$FF,$7F,$70,$5D,$FE,$FF,$F8,$00,$00,$00,$00,$00,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78 ;
 $5000 DEFB $7F,$7F,$80,$01,$D3,$FD,$FF,$E0,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38 ;
 $5020 DEFB $7F,$7F,$7F,$80,$FE,$FC,$7F,$F1,$80,$00,$1D,$FF,$FF,$BB,$38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C ;
 $5040 DEFB $7F,$7F,$7F,$7F,$80,$0F,$E0,$FF,$E0,$40,$00,$70,$86,$BF,$38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C ;
 $5060 DEFB $00,$7F,$7F,$7F,$7F,$80,$7F,$F7,$00,$18,$60,$00,$00,$7F,$38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$78,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C ;
 $5080 DEFB $00,$00,$7F,$7F,$7F,$7F,$80,$FE,$03,$DC,$CE,$00,$0A,$F8,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $3F,$3F,$C0,$C3,$D4,$1B,$FF,$80,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5120 DEFB $3F,$3F,$3F,$C0,$FD,$F3,$FF,$FE,$80,$00,$07,$E1,$C3,$E5,$38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$E0,$1F,$80,$1C ;
 $5140 DEFB $3F,$3F,$3F,$3F,$C0,$F0,$3F,$3F,$F0,$40,$00,$F8,$8F,$7F,$38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$C2,$F0,$17,$80,$1C ;
 $5160 DEFB $00,$3F,$3F,$3F,$3F,$C0,$81,$FB,$00,$18,$C0,$00,$01,$E7,$38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C ;
 $5180 DEFB $00,$00,$3F,$3F,$3F,$3F,$C0,$3F,$01,$FD,$98,$00,$06,$C0,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $1F,$1F,$E0,$0F,$CF,$F7,$F0,$00,$C0,$00,$00,$00,$00,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C ;
 $5220 DEFB $1F,$1F,$1F,$E0,$FD,$8C,$FF,$83,$C0,$00,$07,$46,$B1,$ED,$38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C ;
 $5240 DEFB $1F,$1F,$1F,$1F,$E0,$00,$7D,$CF,$F0,$60,$00,$7C,$9E,$EC,$38,$BF,$FF,$2F,$FF,$2F,$01,$E8,$E8,$BC,$7E,$5F,$0F,$E2,$F0,$17,$FF,$1C ;
 $5260 DEFB $00,$1F,$1F,$1F,$1F,$E0,$FE,$1D,$80,$18,$80,$00,$03,$33,$38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C ;
 $5280 DEFB $00,$00,$1F,$1F,$1F,$1F,$E0,$0F,$80,$FF,$30,$00,$00,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $0F,$0F,$F0,$7F,$3F,$EF,$8F,$C0,$67,$00,$00,$07,$E0,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C ;
 $5320 DEFB $0F,$0F,$0F,$F0,$F8,$7F,$3C,$7C,$40,$00,$06,$C4,$91,$6D,$38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C ;
 $5340 DEFB $0F,$0F,$0F,$0F,$F0,$00,$FB,$F0,$F0,$20,$00,$2E,$B5,$CC,$38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C ;
 $5360 DEFB $00,$0F,$0F,$0F,$0F,$F0,$FF,$E7,$80,$19,$81,$C0,$07,$99,$38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C ;
 $5380 DEFB $00,$00,$0F,$0F,$0F,$0F,$F0,$07,$80,$7F,$60,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $07,$07,$F8,$78,$FF,$DC,$7F,$F0,$2E,$00,$1C,$1B,$D8,$38,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C ;
 $5420 DEFB $07,$07,$07,$F8,$07,$9F,$E3,$FF,$00,$00,$01,$F1,$C3,$95,$38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C ;
 $5440 DEFB $07,$07,$07,$07,$F8,$F7,$07,$F8,$10,$20,$04,$37,$ED,$9B,$38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C ;
 $5460 DEFB $00,$07,$07,$07,$07,$F8,$FF,$F1,$80,$19,$07,$00,$0C,$CC,$38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C ;
 $5480 DEFB $00,$00,$07,$07,$07,$07,$F8,$03,$80,$3F,$C0,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $03,$03,$FC,$E7,$07,$83,$DF,$BC,$00,$00,$33,$65,$AC,$CC,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C ;
 $5520 DEFB $03,$03,$03,$FC,$FF,$E7,$1F,$FF,$80,$00,$03,$7F,$FE,$D5,$38,$54,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C ;
 $5540 DEFB $03,$03,$03,$03,$FC,$F7,$B8,$CC,$00,$30,$08,$18,$1B,$37,$38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C ;
 $5560 DEFB $00,$03,$03,$03,$03,$FC,$FF,$C8,$98,$1B,$1C,$00,$0E,$66,$38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C ;
 $5580 DEFB $00,$00,$03,$03,$03,$03,$FC,$01,$80,$1F,$80,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $01,$01,$FE,$9F,$FC,$3F,$A0,$7E,$00,$00,$30,$F3,$CF,$03,$38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C ;
 $5620 DEFB $01,$01,$01,$FE,$EE,$FE,$7F,$FF,$C0,$80,$02,$D8,$8F,$5F,$38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C ;
 $5640 DEFB $01,$01,$01,$01,$FE,$FB,$DD,$3E,$00,$30,$18,$1F,$F8,$70,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5660 DEFB $00,$01,$01,$01,$01,$FE,$FF,$FC,$0E,$1A,$30,$00,$03,$3F,$38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$E7,$3D,$FF,$1C ;
 $5680 DEFB $00,$00,$01,$01,$01,$01,$FE,$00,$80,$1F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$FF,$FF,$E3,$FF,$8F,$8F,$00,$00,$10,$F9,$9F,$D8,$38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C ;
 $5720 DEFB $00,$00,$00,$FF,$00,$F0,$1F,$FF,$E0,$C0,$01,$32,$A5,$BF,$38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C ;
 $5740 DEFB $00,$00,$00,$00,$FF,$FF,$DD,$CE,$00,$38,$30,$0F,$F0,$0E,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5760 DEFB $00,$00,$00,$00,$00,$FF,$87,$FE,$07,$9E,$63,$80,$0F,$9F,$38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C ;
 $5780 DEFB $00,$00,$00,$00,$00,$00,$FF,$00,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$00,$00,$00,$00,$43,$43,$5F,$5F,$5F,$5F,$43,$43,$00,$00,$00,$00,$00,$00,$00,$00,$47,$47,$00,$00,$00,$44,$44,$44,$44,$44 ; {Attributes
 $5820 DEFB $00,$00,$00,$00,$00,$00,$43,$5F,$5F,$5F,$5F,$5F,$5F,$43,$43,$43,$43,$43,$43,$43,$43,$43,$7B,$5F,$43,$43,$44,$44,$44,$44,$44,$44 ;
 $5840 DEFB $00,$00,$00,$00,$00,$00,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$44,$44,$44,$44,$44 ;
 $5860 DEFB $00,$00,$00,$00,$00,$43,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$44,$44,$44,$44,$44 ;
 $5880 DEFB $00,$00,$00,$00,$00,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$43,$43,$44,$44,$44,$44 ;
 $58A0 DEFB $00,$44,$00,$46,$00,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$44,$44,$44,$44 ;
 $58C0 DEFB $44,$44,$44,$00,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$00,$44,$44,$54,$44 ;
 $58E0 DEFB $44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$46,$46,$42,$62,$44 ;
 $5900 DEFB $44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$43,$00,$42,$42,$42 ;
 $5920 DEFB $44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$00,$42,$42,$42 ;
 $5940 DEFB $44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$00,$44,$62,$42 ;
 $5960 DEFB $44,$44,$44,$00,$46,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$46,$46,$74,$62,$42 ;
 $5980 DEFB $44,$44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$43,$00,$46,$74,$74,$62,$42 ;
 $59A0 DEFB $44,$44,$44,$44,$44,$44,$43,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F,$43,$00,$42,$46,$46,$74,$74,$62 ;
 $59C0 DEFB $62,$44,$44,$44,$44,$44,$44,$43,$43,$5F,$5F,$5F,$5F,$5F,$43,$43,$43,$43,$43,$5F,$5F,$5F,$43,$43,$00,$00,$00,$46,$46,$46,$46,$42 ;
 $59E0 DEFB $72,$62,$44,$44,$44,$44,$44,$44,$43,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5A00 DEFB $66,$72,$62,$44,$44,$44,$44,$44,$46,$00,$46,$46,$46,$46,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47 ;
 $5A20 DEFB $4C,$66,$72,$62,$44,$44,$44,$44,$44,$44,$46,$46,$46,$46,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47 ;
 $5A40 DEFB $41,$4C,$66,$72,$62,$44,$44,$44,$44,$44,$44,$46,$46,$46,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47 ;
 $5A60 DEFB $00,$41,$4C,$66,$72,$62,$44,$44,$44,$44,$44,$44,$46,$46,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47 ;
 $5A80 DEFB $00,$00,$41,$4C,$66,$72,$62,$44,$44,$44,$44,$00,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

i$5B00

; Decryption Routine
;
; .
;
; .
;
; Runs "CPL" on every byte from #N$6000-#N$6000.
@label=Decryption
c$5B80 NOP           ; {#REGhl=#R$6000.
 $5B81 NOP           ;
 $5B82 NOP           ; }
@label=Decryption_Loop
 $5B83 NOP           ; #REGa=#REGhl.
 $5B84 NOP           ; CPL operation.
 $5B85 NOP           ; Write #REGa back to #REGhl.
 $5B86 NOP           ; Increment #REGhl by one.
 $5B87 NOP           ; Return.
; View the equivalent code in #LUNARJETMAN$5B80.
; .
; Earlier Ultimate games use a much simpler mechanism;
; #LIST
; { #COOKIE$5B80 }
; { #JETPAC$5B80 }
; { #PSSST$5B80 }
; { #TRANZAM$5B80 }
; LIST#

i$5B88
 $5B8B

; Data block at 5B8D
b$5B8D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B95 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B9D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BAD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BED DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFD DEFB $00,$00,$00,$FF,$00,$00,$00,$FF
 $5C05 DEFB $00,$23,$0D,$0D,$23,$05,$00,$00
 $5C0D DEFB $00,$13,$00,$01,$00,$06,$00,$0B
 $5C15 DEFB $00,$01,$00,$01,$00,$06,$00,$10
 $5C1D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C25 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C35 DEFB $00,$00,$3C,$40,$00,$FF,$CD,$01
 $5C3D DEFB $54,$FF,$00,$00,$00,$00,$00,$FF
 $5C45 DEFB $00,$00,$03,$00,$00,$00,$69,$61
 $5C4D DEFB $00,$00,$B6,$5C,$B6,$5C,$CB,$5C
 $5C55 DEFB $FC,$5E,$CA,$5C,$E6,$62,$E9,$62
 $5C5D DEFB $FB,$5E,$FC,$62,$EB,$62,$EB,$62
 $5C65 DEFB $EB,$62,$00,$92,$5C,$10,$02,$00
 $5C6D DEFB $00,$00,$00,$00,$00,$00,$00,$B3
 $5C75 DEFB $1A,$00,$00,$34,$7D,$00,$58,$FF
 $5C7D DEFB $00,$00,$21,$00,$5B,$21,$17,$00
 $5C85 DEFB $40,$E0,$50,$21,$18,$21,$17,$01
 $5C8D DEFB $40,$00,$07,$00,$00,$00,$00,$00
 $5C95 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAD DEFB $00,$00,$00

; Indirect Jump
;
; Used by the routine at #R$9960.
@label=IndirectJump
c$5CB0 JP (HL)       ; Jump to the address held in #REGhl.
; View the equivalent code in;
; #LIST
; { #LUNARJETMAN$5CB0 }
; LIST#

i$5CB1

; Game entry point
@label=GameEntry
c$6000 DI            ; Disable interrupts.
 $6001 LD SP,$6000   ; Set the stack pointer to #N$6000.
 $6004 JP $995A      ; Jump to #R$995A.
; View the equivalent code in;
; #LIST
; { #COOKIE$5B80 }
; { #JETPAC$5B80 }
; { #TRANZAM$5B80 }
; LIST#

; Message at 6007
t$6007 DEFM "COPYRIGHT 1984 A.C.G. LTD. ALL RIGHTS RESERVED."

; Data block at 6036
b$6036 DEFB $00,$00,$00,$70,$A8,$78,$78,$00
 $603E DEFB $78,$78,$78,$78,$00,$00,$00,$78
 $6046 DEFB $78,$78,$00,$00,$00,$78,$00,$78
 $604E DEFB $78,$78,$00,$00,$78,$00,$00,$00
 $6056 DEFB $78,$00,$70,$70,$A8,$68,$00,$68
 $605E DEFB $68,$68,$00,$78,$00,$78,$00,$78

; Layout
@label=Layout
b$6066 DEFB $00,$14,$14,$1A,$16,$14,$14,$16,$14,$1A,$1B,$14,$1A,$14,$16,$02
 $6076 DEFB $26,$21,$1D,$1C,$11,$0C,$0D,$17,$1D,$17,$1D,$21,$11,$1F,$0B,$03
 $6086 DEFB $25,$15,$15,$0D,$0B,$0C,$12,$18,$15,$11,$17,$18,$18,$12,$11,$1E
 $6096 DEFB $25,$18,$11,$0C,$05,$12,$15,$20,$1C,$19,$11,$0B,$0B,$2D,$11,$03
 $60A6 DEFB $27,$1C,$15,$12,$08,$18,$15,$0D,$1F,$1F,$1C,$18,$15,$08,$11,$1E
 $60B6 DEFB $27,$21,$05,$11,$1F,$1C,$11,$0C,$12,$12,$0D,$17,$18,$0D,$0B,$03
 $60C6 DEFB $27,$17,$11,$0B,$1F,$0C,$11,$2E,$0B,$11,$0C,$15,$11,$1F,$17,$1E
 $60D6 DEFB $25,$11,$17,$08,$12,$0D,$0B,$0A,$0F,$0A,$0C,$11,$17,$0D,$17,$22
 $60E6 DEFB $28,$0B,$0B,$1F,$2D,$12,$15,$10,$07,$10,$12,$15,$20,$1F,$1C,$23
 $60F6 DEFB $25,$05,$18,$1D,$0B,$17,$11,$0E,$06,$0E,$2F,$11,$0C,$12,$1D,$03
 $6106 DEFB $25,$20,$1C,$19,$15,$18,$15,$12,$08,$12,$11,$17,$12,$15,$20,$1E
 $6116 DEFB $28,$21,$1D,$1F,$1C,$08,$20,$17,$1D,$1C,$15,$0B,$17,$0B,$1F,$22
 $6126 DEFB $27,$0B,$2D,$12,$1D,$1F,$21,$11,$1C,$0D,$17,$08,$18,$18,$1D,$22
 $6136 DEFB $25,$18,$05,$05,$20,$21,$20,$0B,$1F,$0C,$11,$1F,$1C,$15,$18,$23
 $6146 DEFB $29,$08,$19,$15,$12,$20,$21,$19,$1D,$21,$15,$1D,$1F,$1C,$15,$23
 $6156 DEFB $04,$2A,$2C,$2B,$2B,$2A,$2B,$2A,$2B,$2B,$2B,$2B,$2A,$2A,$2B,$09

; Room Table
@label=RoomTable
w$6166 DEFW $6200    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6168 DEFW $624A    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $616A DEFW $6294    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $616C DEFW $62DE    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $616E DEFW $6330    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6170 DEFW $6376    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6172 DEFW $63D0    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6174 DEFW $6422    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6176 DEFW $647C    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6178 DEFW $64CA    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $617A DEFW $6520    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $617C DEFW $6586    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $617E DEFW $65C0    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6180 DEFW $6616    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6182 DEFW $666C    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6184 DEFW $66B2    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6186 DEFW $671C    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6188 DEFW $6786    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $618A DEFW $67E8    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $618C DEFW $681E    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $618E DEFW $6864    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6190 DEFW $68B2    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6192 DEFW $68FC    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6194 DEFW $693A    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6196 DEFW $6988    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $6198 DEFW $69DE    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $619A DEFW $6A38    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $619C DEFW $6A7E    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $619E DEFW $6AC4    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61A0 DEFW $6B1A    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61A2 DEFW $6B70    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61A4 DEFW $6BBA    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61A6 DEFW $6C08    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61A8 DEFW $6C66    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61AA DEFW $6CBC    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61AC DEFW $6D0E    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61AE DEFW $6D58    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61B0 DEFW $6DB2    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61B2 DEFW $6E10    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61B4 DEFW $6E5E    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61B6 DEFW $6EA0    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61B8 DEFW $6EEE    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61BA DEFW $6F34    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61BC DEFW $6F6E    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61BE DEFW $6FB0    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61C0 DEFW $6FF2    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61C2 DEFW $7030    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).
 $61C4 DEFW $7076    ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N(#EVAL((#PC - $6166) / $02))).

; Special Room (Main Menu)
;
; This is the room data showing on the Main Menu screen. See #R$B3D5.
; .
; #UDGTABLE
; { #ROOM(#PC)(room-mainmenu) }
; UDGTABLE#
@label=Room_Special_MainMenu
w$61C6 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61C8 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61CA DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61CC DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61CE DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61D0 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61D2 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61D4 DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61D6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61D8 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61DA DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61DC DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61DE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61E0 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61E2 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61E4 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61E6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61E8 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61EA DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61EC DEFB $20,$A8  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61EE DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61F0 DEFB $30,$A8  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61F2 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61F4 DEFB $78,$A8  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61F6 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61F8 DEFB $88,$A8  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61FA DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $61FC DEFB $D0,$A8  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $61FE DEFW $0000    ; Terminator.

; Room #N$00
;
; #UDGTABLE
; { #ROOM(#PC)(room-00) }
; UDGTABLE#
@label=Room_00
w$6200 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6202 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6204 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6206 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6208 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $620A DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $620C DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $620E DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6210 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6212 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6214 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6216 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6218 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $621A DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $621C DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $621E DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6220 DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6222 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6224 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6226 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6228 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $622A DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $622C DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $622E DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6230 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6232 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6234 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6236 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6238 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $623A DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $623C DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $623E DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6240 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6242 DEFB $A8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6244 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6246 DEFB $E8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6248 DEFW $0000    ; Terminator.

; Room #N$01
;
; #UDGTABLE
; { #ROOM(#PC)(room-01) }
; UDGTABLE#
@label=Room_01
w$624A DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $624C DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $624E DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6250 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6252 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6254 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6256 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6258 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $625A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $625C DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $625E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6260 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6262 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6264 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6266 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6268 DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $626A DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $626C DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $626E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6270 DEFB $E0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6272 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6274 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6276 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6278 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $627A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $627C DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $627E DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6280 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6282 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6284 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6286 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6288 DEFB $70,$98  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $628A DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $628C DEFB $D8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $628E DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6290 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6292 DEFW $0000    ; Terminator.

; Room #N$02
;
; #UDGTABLE
; { #ROOM(#PC)(room-02) }
; UDGTABLE#
@label=Room_02
w$6294 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6296 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6298 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $629A DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $629C DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $629E DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62A0 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62A2 DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62A4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62A6 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62A8 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62AA DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62AC DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62AE DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62B0 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62B2 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62B4 DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62B6 DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62B8 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62BA DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62BC DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62BE DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62C0 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62C2 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62C4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62C6 DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62C8 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62CA DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62CC DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62CE DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62D0 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62D2 DEFB $28,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62D4 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62D6 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62D8 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62DA DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62DC DEFW $0000    ; Terminator.

; Room #N$03
;
; #UDGTABLE
; { #ROOM(#PC)(room-03) }
; UDGTABLE#
@label=Room_03
w$62DE DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62E0 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62E2 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62E4 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62E6 DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62E8 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62EA DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62EC DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62EE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62F0 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62F2 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62F4 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62F6 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62F8 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62FA DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $62FC DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $62FE DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6300 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6302 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6304 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6306 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6308 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $630A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $630C DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $630E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6310 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6312 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6314 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6316 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6318 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $631A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $631C DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $631E DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6320 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6322 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6324 DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6326 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6328 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $632A DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $632C DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $632E DEFW $0000    ; Terminator.

; Room #N$04
;
; #UDGTABLE
; { #ROOM(#PC)(room-04) }
; UDGTABLE#
@label=Room_04
w$6330 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6332 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6334 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6336 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6338 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $633A DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $633C DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $633E DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6340 DEFW $8382    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6342 DEFB $38,$A0  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6344 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6346 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6348 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $634A DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $634C DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $634E DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6350 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6352 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6354 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6356 DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6358 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $635A DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $635C DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $635E DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6360 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6362 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6364 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6366 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6368 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $636A DEFB $58,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $636C DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $636E DEFB $98,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6370 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6372 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6374 DEFW $0000    ; Terminator.

; Room #N$05
;
; #UDGTABLE
; { #ROOM(#PC)(room-05) }
; UDGTABLE#
@label=Room_05
w$6376 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6378 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $637A DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $637C DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $637E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6380 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6382 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6384 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6386 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6388 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $638A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $638C DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $638E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6390 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6392 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6394 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6396 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6398 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $639A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $639C DEFB $C0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $639E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63A0 DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63A2 DEFW $8E18    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63A4 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63A6 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63A8 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63AA DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63AC DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63AE DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63B0 DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63B2 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63B4 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63B6 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63B8 DEFB $A8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63BA DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63BC DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63BE DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63C0 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63C2 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63C4 DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63C6 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63C8 DEFB $C8,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63CA DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63CC DEFB $20,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63CE DEFW $0000    ; Terminator.

; Room #N$06
;
; #UDGTABLE
; { #ROOM(#PC)(room-06) }
; UDGTABLE#
@label=Room_06
w$63D0 DEFW $8558    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63D2 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63D4 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63D6 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63D8 DEFW $83D2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63DA DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63DC DEFW $8427    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63DE DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63E0 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63E2 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63E4 DEFW $8558    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63E6 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63E8 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63EA DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63EC DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63EE DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63F0 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63F2 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63F4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63F6 DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63F8 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63FA DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $63FC DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $63FE DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6400 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6402 DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6404 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6406 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6408 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $640A DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $640C DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $640E DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6410 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6412 DEFB $48,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6414 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6416 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6418 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $641A DEFB $A8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $641C DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $641E DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6420 DEFW $0000    ; Terminator.

; Room #N$07
;
; #UDGTABLE
; { #ROOM(#PC)(room-07) }
; UDGTABLE#
@label=Room_07
w$6422 DEFW $8C5C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6424 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6426 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6428 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $642A DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $642C DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $642E DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6430 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6432 DEFW $8CCC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6434 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6436 DEFW $8B80    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6438 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $643A DEFW $8B80    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $643C DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $643E DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6440 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6442 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6444 DEFB $00,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6446 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6448 DEFB $20,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $644A DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $644C DEFB $22,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $644E DEFW $8806    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6450 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6452 DEFW $89C3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6454 DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6456 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6458 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $645A DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $645C DEFB $C0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $645E DEFW $8D3C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6460 DEFB $E0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6462 DEFW $8D3C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6464 DEFB $E0,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6466 DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6468 DEFB $E0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $646A DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $646C DEFB $E0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $646E DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6470 DEFB $48,$48  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6472 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6474 DEFB $98,$48  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6476 DEFW $85C8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6478 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $647A DEFW $0000    ; Terminator.

; Room #N$08
;
; #UDGTABLE
; { #ROOM(#PC)(room-08) }
; UDGTABLE#
@label=Room_08
w$647C DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $647E DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6480 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6482 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6484 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6486 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6488 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $648A DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $648C DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $648E DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6490 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6492 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6494 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6496 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6498 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $649A DEFB $30,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $649C DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $649E DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64A0 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64A2 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64A4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64A6 DEFB $20,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64A8 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64AA DEFB $D0,$60  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64AC DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64AE DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64B0 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64B2 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64B4 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64B6 DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64B8 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64BA DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64BC DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64BE DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64C0 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64C2 DEFB $98,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64C4 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64C6 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64C8 DEFW $0000    ; Terminator.

; Room #N$09
;
; #UDGTABLE
; { #ROOM(#PC)(room-09) }
; UDGTABLE#
@label=Room_09
w$64CA DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64CC DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64CE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64D0 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64D2 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64D4 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64D6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64D8 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64DA DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64DC DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64DE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64E0 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64E2 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64E4 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64E6 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64E8 DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64EA DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64EC DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64EE DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64F0 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64F2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64F4 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64F6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64F8 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64FA DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $64FC DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $64FE DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6500 DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6502 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6504 DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6506 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6508 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $650A DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $650C DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $650E DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6510 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6512 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6514 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6516 DEFW $83AA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6518 DEFB $C0,$A0  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $651A DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $651C DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $651E DEFW $0000    ; Terminator.

; Room #N$0A
;
; #UDGTABLE
; { #ROOM(#PC)(room-0A) }
; UDGTABLE#
@label=Room_0A
w$6520 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6522 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6524 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6526 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6528 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $652A DEFB $40,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $652C DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $652E DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6530 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6532 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6534 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6536 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6538 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $653A DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $653C DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $653E DEFB $DE,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6540 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6542 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6544 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6546 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6548 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $654A DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $654C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $654E DEFB $58,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6550 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6552 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6554 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6556 DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6558 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $655A DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $655C DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $655E DEFB $00,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6560 DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6562 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6564 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6566 DEFB $20,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6568 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $656A DEFB $20,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $656C DEFW $8806    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $656E DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6570 DEFW $89C3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6572 DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6574 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6576 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6578 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $657A DEFB $C0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $657C DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $657E DEFB $E0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6580 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6582 DEFB $E0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6584 DEFW $0000    ; Terminator.

; Room #N$0B
;
; #UDGTABLE
; { #ROOM(#PC)(room-0B) }
; UDGTABLE#
@label=Room_0B
w$6586 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6588 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $658A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $658C DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $658E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6590 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6592 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6594 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6596 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6598 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $659A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $659C DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $659E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65A0 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65A2 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65A4 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65A6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65A8 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65AA DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65AC DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65AE DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65B0 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65B2 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65B4 DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65B6 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65B8 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65BA DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65BC DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65BE DEFW $0000    ; Terminator.

; Room #N$0C
;
; #UDGTABLE
; { #ROOM(#PC)(room-0C) }
; UDGTABLE#
@label=Room_0C
w$65C0 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65C2 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65C4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65C6 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65C8 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65CA DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65CC DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65CE DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65D0 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65D2 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65D4 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65D6 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65D8 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65DA DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65DC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65DE DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65E0 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65E2 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65E4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65E6 DEFB $58,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65E8 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65EA DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65EC DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65EE DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65F0 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65F2 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65F4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65F6 DEFB $D0,$60  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65F8 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65FA DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $65FC DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $65FE DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6600 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6602 DEFB $28,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6604 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6606 DEFB $68,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6608 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $660A DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $660C DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $660E DEFB $A8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6610 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6612 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6614 DEFW $0000    ; Terminator.

; Room #N$0D
;
; #UDGTABLE
; { #ROOM(#PC)(room-0D) }
; UDGTABLE#
@label=Room_0D
w$6616 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6618 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $661A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $661C DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $661E DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6620 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6622 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6624 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6626 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6628 DEFB $90,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $662A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $662C DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $662E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6630 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6632 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6634 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6636 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6638 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $663A DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $663C DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $663E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6640 DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6642 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6644 DEFB $98,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6646 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6648 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $664A DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $664C DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $664E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6650 DEFB $20,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6652 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6654 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6656 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6658 DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $665A DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $665C DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $665E DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6660 DEFB $70,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6662 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6664 DEFB $98,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6666 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6668 DEFB $D8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $666A DEFW $0000    ; Terminator.

; Room #N$0E
;
; #UDGTABLE
; { #ROOM(#PC)(room-0E) }
; UDGTABLE#
@label=Room_0E
w$666C DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $666E DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6670 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6672 DEFB $40,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6674 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6676 DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6678 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $667A DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $667C DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $667E DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6680 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6682 DEFB $40,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6684 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6686 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6688 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $668A DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $668C DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $668E DEFB $B8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6690 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6692 DEFB $E0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6694 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6696 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6698 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $669A DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $669C DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $669E DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66A0 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66A2 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66A4 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66A6 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66A8 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66AA DEFB $B0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66AC DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66AE DEFB $D8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66B0 DEFW $0000    ; Terminator.

; Room #N$0F
;
; #UDGTABLE
; { #ROOM(#PC)(room-0F) }
; UDGTABLE#
@label=Room_0F
w$66B2 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66B4 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66B6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66B8 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66BA DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66BC DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66BE DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66C0 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66C2 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66C4 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66C6 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66C8 DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66CA DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66CC DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66CE DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66D0 DEFB $40,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66D2 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66D4 DEFB $98,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66D6 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66D8 DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66DA DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66DC DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66DE DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66E0 DEFB $20,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66E2 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66E4 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66E6 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66E8 DEFB $60,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66EA DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66EC DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66EE DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66F0 DEFB $A0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66F2 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66F4 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66F6 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66F8 DEFB $E0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66FA DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $66FC DEFB $00,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $66FE DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6700 DEFB $20,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6702 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6704 DEFB $40,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6706 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6708 DEFB $60,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $670A DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $670C DEFB $80,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $670E DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6710 DEFB $A0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6712 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6714 DEFB $C0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6716 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6718 DEFB $E0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $671A DEFW $0000    ; Terminator.

; Room #N$10
;
; #UDGTABLE
; { #ROOM(#PC)(room-10) }
; UDGTABLE#
@label=Room_10
w$671C DEFW $8C5C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $671E DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6720 DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6722 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6724 DEFW $83D2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6726 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6728 DEFW $8427    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $672A DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $672C DEFW $847C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $672E DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6730 DEFW $8CCC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6732 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6734 DEFW $8B80    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6736 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6738 DEFW $8B80    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $673A DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $673C DEFW $8D3C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $673E DEFB $E0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6740 DEFW $8D3C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6742 DEFB $E0,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6744 DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6746 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6748 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $674A DEFB $20,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $674C DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $674E DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6750 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6752 DEFB $60,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6754 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6756 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6758 DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $675A DEFB $A0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $675C DEFW $8702    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $675E DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6760 DEFW $86DA    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6762 DEFB $E0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6764 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6766 DEFB $00,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6768 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $676A DEFB $20,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $676C DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $676E DEFB $40,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6770 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6772 DEFB $60,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6774 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6776 DEFB $80,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6778 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $677A DEFB $A0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $677C DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $677E DEFB $C0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6780 DEFW $872A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6782 DEFB $E0,$90  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6784 DEFW $0000    ; Terminator.

; Room #N$11
;
; #UDGTABLE
; { #ROOM(#PC)(room-11) }
; UDGTABLE#
@label=Room_11
w$6786 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6788 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $678A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $678C DEFB $15,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $678E DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6790 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6792 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6794 DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6796 DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6798 DEFB $70,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $679A DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $679C DEFB $70,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $679E DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67A0 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67A2 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67A4 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67A6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67A8 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67AA DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67AC DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67AE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67B0 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67B2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67B4 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67B6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67B8 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67BA DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67BC DEFB $20,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67BE DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67C0 DEFB $70,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67C2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67C4 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67C6 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67C8 DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67CA DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67CC DEFB $28,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67CE DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67D0 DEFB $48,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67D2 DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67D4 DEFB $68,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67D6 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67D8 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67DA DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67DC DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67DE DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67E0 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67E2 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67E4 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67E6 DEFW $0000    ; Terminator.

; Room #N$12
;
; #UDGTABLE
; { #ROOM(#PC)(room-12) }
; UDGTABLE#
@label=Room_12
w$67E8 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67EA DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67EC DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67EE DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67F0 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67F2 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67F4 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67F6 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67F8 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67FA DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $67FC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $67FE DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6800 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6802 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6804 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6806 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6808 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $680A DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $680C DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $680E DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6810 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6812 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6814 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6816 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6818 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $681A DEFB $C0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $681C DEFW $0000    ; Terminator.

; Room #N$13
;
; #UDGTABLE
; { #ROOM(#PC)(room-13) }
; UDGTABLE#
@label=Room_13
w$681E DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6820 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6822 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6824 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6826 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6828 DEFB $40,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $682A DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $682C DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $682E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6830 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6832 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6834 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6836 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6838 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $683A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $683C DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $683E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6840 DEFB $20,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6842 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6844 DEFB $58,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6846 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6848 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $684A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $684C DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $684E DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6850 DEFB $C0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6852 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6854 DEFB $C0,$48  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6856 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6858 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $685A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $685C DEFB $60,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $685E DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6860 DEFB $C0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6862 DEFW $0000    ; Terminator.

; Room #N$14
;
; #UDGTABLE
; { #ROOM(#PC)(room-14) }
; UDGTABLE#
@label=Room_14
w$6864 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6866 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6868 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $686A DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $686C DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $686E DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6870 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6872 DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6874 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6876 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6878 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $687A DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $687C DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $687E DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6880 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6882 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6884 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6886 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6888 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $688A DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $688C DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $688E DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6890 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6892 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6894 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6896 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6898 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $689A DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $689C DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $689E DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68A0 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68A2 DEFB $70,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68A4 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68A6 DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68A8 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68AA DEFB $B8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68AC DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68AE DEFB $E8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68B0 DEFW $0000    ; Terminator.

; Room #N$15
;
; #UDGTABLE
; { #ROOM(#PC)(room-15) }
; UDGTABLE#
@label=Room_15
w$68B2 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68B4 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68B6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68B8 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68BA DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68BC DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68BE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68C0 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68C2 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68C4 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68C6 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68C8 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68CA DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68CC DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68CE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68D0 DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68D2 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68D4 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68D6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68D8 DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68DA DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68DC DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68DE DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68E0 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68E2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68E4 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68E6 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68E8 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68EA DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68EC DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68EE DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68F0 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68F2 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68F4 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68F6 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68F8 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $68FA DEFW $0000    ; Terminator.

; Room #N$16
;
; #UDGTABLE
; { #ROOM(#PC)(room-16) }
; UDGTABLE#
@label=Room_16
w$68FC DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $68FE DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6900 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6902 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6904 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6906 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6908 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $690A DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $690C DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $690E DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6910 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6912 DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6914 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6916 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6918 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $691A DEFB $40,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $691C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $691E DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6920 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6922 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6924 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6926 DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6928 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $692A DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $692C DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $692E DEFB $30,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6930 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6932 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6934 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6936 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6938 DEFW $0000    ; Terminator.

; Room #N$17
;
; #UDGTABLE
; { #ROOM(#PC)(room-17) }
; UDGTABLE#
@label=Room_17
w$693A DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $693C DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $693E DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6940 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6942 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6944 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6946 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6948 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $694A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $694C DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $694E DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6950 DEFB $A8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6952 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6954 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6956 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6958 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $695A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $695C DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $695E DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6960 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6962 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6964 DEFB $A8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6966 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6968 DEFB $D0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $696A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $696C DEFB $E0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $696E DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6970 DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6972 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6974 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6976 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6978 DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $697A DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $697C DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $697E DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6980 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6982 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6984 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6986 DEFW $0000    ; Terminator.

; Room #N$18
;
; #UDGTABLE
; { #ROOM(#PC)(room-18) }
; UDGTABLE#
@label=Room_18
w$6988 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $698A DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $698C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $698E DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6990 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6992 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6994 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6996 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6998 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $699A DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $699C DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $699E DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69A0 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69A2 DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69A4 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69A6 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69A8 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69AA DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69AC DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69AE DEFB $68,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69B0 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69B2 DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69B4 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69B6 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69B8 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69BA DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69BC DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69BE DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69C0 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69C2 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69C4 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69C6 DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69C8 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69CA DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69CC DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69CE DEFB $30,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69D0 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69D2 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69D4 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69D6 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69D8 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69DA DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69DC DEFW $0000    ; Terminator.

; Room #N$19
;
; #UDGTABLE
; { #ROOM(#PC)(room-19) }
; UDGTABLE#
@label=Room_19
w$69DE DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69E0 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69E2 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69E4 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69E6 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69E8 DEFB $40,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69EA DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69EC DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69EE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69F0 DEFB $90,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69F2 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69F4 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69F6 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69F8 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69FA DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $69FC DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $69FE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A00 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A02 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A04 DEFB $B8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A06 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A08 DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A0A DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A0C DEFB $58,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A0E DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A10 DEFB $00,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A12 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A14 DEFB $20,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A16 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A18 DEFB $C8,$70  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A1A DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A1C DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A1E DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A20 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A22 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A24 DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A26 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A28 DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A2A DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A2C DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A2E DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A30 DEFB $B8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A32 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A34 DEFB $E8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A36 DEFW $0000    ; Terminator.

; Room #N$1A
;
; #UDGTABLE
; { #ROOM(#PC)(room-1A) }
; UDGTABLE#
@label=Room_1A
w$6A38 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A3A DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A3C DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A3E DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A40 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A42 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A44 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A46 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A48 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A4A DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A4C DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A4E DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A50 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A52 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A54 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A56 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A58 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A5A DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A5C DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A5E DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A60 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A62 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A64 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A66 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A68 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A6A DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A6C DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A6E DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A70 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A72 DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A74 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A76 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A78 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A7A DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A7C DEFW $0000    ; Terminator.

; Room #N$1B
;
; #UDGTABLE
; { #ROOM(#PC)(room-1B) }
; UDGTABLE#
@label=Room_1B
w$6A7E DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A80 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A82 DEFW $7B11    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A84 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A86 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A88 DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A8A DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A8C DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A8E DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A90 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A92 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A94 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A96 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A98 DEFB $98,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A9A DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6A9C DEFB $B0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6A9E DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AA0 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AA2 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AA4 DEFB $40,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AA6 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AA8 DEFB $98,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AAA DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AAC DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AAE DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AB0 DEFB $28,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AB2 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AB4 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AB6 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AB8 DEFB $68,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ABA DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ABC DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ABE DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AC0 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AC2 DEFW $0000    ; Terminator.

; Room #N$1C
;
; #UDGTABLE
; { #ROOM(#PC)(room-1C) }
; UDGTABLE#
@label=Room_1C
w$6AC4 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AC6 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AC8 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ACA DEFB $10,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ACC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ACE DEFB $40,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AD0 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AD2 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AD4 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AD6 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AD8 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ADA DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ADC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ADE DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AE0 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AE2 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AE4 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AE6 DEFB $90,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AE8 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AEA DEFB $A0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AEC DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AEE DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AF0 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AF2 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AF4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AF6 DEFB $68,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AF8 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AFA DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6AFC DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6AFE DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B00 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B02 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B04 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B06 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B08 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B0A DEFB $30,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B0C DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B0E DEFB $48,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B10 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B12 DEFB $78,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B14 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B16 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B18 DEFW $0000    ; Terminator.

; Room #N$1D
;
; #UDGTABLE
; { #ROOM(#PC)(room-1D) }
; UDGTABLE#
@label=Room_1D
w$6B1A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B1C DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B1E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B20 DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B22 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B24 DEFB $28,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B26 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B28 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B2A DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B2C DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B2E DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B30 DEFB $90,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B32 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B34 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B36 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B38 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B3A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B3C DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B3E DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B40 DEFB $48,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B42 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B44 DEFB $78,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B46 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B48 DEFB $90,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B4A DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B4C DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B4E DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B50 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B52 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B54 DEFB $70,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B56 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B58 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B5A DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B5C DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B5E DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B60 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B62 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B64 DEFB $30,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B66 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B68 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B6A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B6C DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B6E DEFW $0000    ; Terminator.

; Room #N$1E
;
; #UDGTABLE
; { #ROOM(#PC)(room-1E) }
; UDGTABLE#
@label=Room_1E
w$6B70 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B72 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B74 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B76 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B78 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B7A DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B7C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B7E DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B80 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B82 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B84 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B86 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B88 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B8A DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B8C DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B8E DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B90 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B92 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B94 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B96 DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B98 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B9A DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6B9C DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6B9E DEFB $28,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BA0 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BA2 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BA4 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BA6 DEFB $88,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BA8 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BAA DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BAC DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BAE DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BB0 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BB2 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BB4 DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BB6 DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BB8 DEFW $0000    ; Terminator.

; Room #N$1F
;
; #UDGTABLE
; { #ROOM(#PC)(room-1F) }
; UDGTABLE#
@label=Room_1F
w$6BBA DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BBC DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BBE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BC0 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BC2 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BC4 DEFB $39,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BC6 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BC8 DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BCA DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BCC DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BCE DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BD0 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BD2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BD4 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BD6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BD8 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BDA DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BDC DEFB $20,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BDE DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BE0 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BE2 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BE4 DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BE6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BE8 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BEA DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BEC DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BEE DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BF0 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BF2 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BF4 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BF6 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BF8 DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BFA DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6BFC DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6BFE DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C00 DEFB $B8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C02 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C04 DEFB $E8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C06 DEFW $0000    ; Terminator.

; Room #N$20
;
; #UDGTABLE
; { #ROOM(#PC)(room-20) }
; UDGTABLE#
@label=Room_20
w$6C08 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C0A DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C0C DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C0E DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C10 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C12 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C14 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C16 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C18 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C1A DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C1C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C1E DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C20 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C22 DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C24 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C26 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C28 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C2A DEFB $38,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C2C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C2E DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C30 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C32 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C34 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C36 DEFB $20,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C38 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C3A DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C3C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C3E DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C40 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C42 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C44 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C46 DEFB $E0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C48 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C4A DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C4C DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C4E DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C50 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C52 DEFB $30,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C54 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C56 DEFB $70,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C58 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C5A DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C5C DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C5E DEFB $B8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C60 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C62 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C64 DEFW $0000    ; Terminator.

; Room #N$21
;
; #UDGTABLE
; { #ROOM(#PC)(room-21) }
; UDGTABLE#
@label=Room_21
w$6C66 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C68 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C6A DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C6C DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C6E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C70 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C72 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C74 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C76 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C78 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C7A DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C7C DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C7E DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C80 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C82 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C84 DEFB $88,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C86 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C88 DEFB $B8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C8A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C8C DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C8E DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C90 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C92 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C94 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C96 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C98 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C9A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6C9C DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6C9E DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CA0 DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CA2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CA4 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CA6 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CA8 DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CAA DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CAC DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CAE DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CB0 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CB2 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CB4 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CB6 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CB8 DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CBA DEFW $0000    ; Terminator.

; Room #N$22
;
; #UDGTABLE
; { #ROOM(#PC)(room-22) }
; UDGTABLE#
@label=Room_22
w$6CBC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CBE DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CC0 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CC2 DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CC4 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CC6 DEFB $28,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CC8 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CCA DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CCC DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CCE DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CD0 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CD2 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CD4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CD6 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CD8 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CDA DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CDC DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CDE DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CE0 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CE2 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CE4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CE6 DEFB $60,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CE8 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CEA DEFB $A8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CEC DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CEE DEFB $B8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CF0 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CF2 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CF4 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CF6 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CF8 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CFA DEFB $88,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6CFC DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6CFE DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D00 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D02 DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D04 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D06 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D08 DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D0A DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D0C DEFW $0000    ; Terminator.

; Room #N$23
;
; #UDGTABLE
; { #ROOM(#PC)(room-23) }
; UDGTABLE#
@label=Room_23
w$6D0E DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D10 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D12 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D14 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D16 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D18 DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D1A DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D1C DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D1E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D20 DEFB $A0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D22 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D24 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D26 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D28 DEFB $20,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D2A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D2C DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D2E DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D30 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D32 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D34 DEFB $70,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D36 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D38 DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D3A DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D3C DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D3E DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D40 DEFB $28,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D42 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D44 DEFB $88,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D46 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D48 DEFB $C8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D4A DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D4C DEFB $C8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D4E DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D50 DEFB $C8,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D52 DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D54 DEFB $C8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D56 DEFW $0000    ; Terminator.

; Room #N$24
;
; #UDGTABLE
; { #ROOM(#PC)(room-24) }
; UDGTABLE#
@label=Room_24
w$6D58 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D5A DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D5C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D5E DEFB $18,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D60 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D62 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D64 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D66 DEFB $58,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D68 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D6A DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D6C DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D6E DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D70 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D72 DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D74 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D76 DEFB $58,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D78 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D7A DEFB $B8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D7C DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D7E DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D80 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D82 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D84 DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D86 DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D88 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D8A DEFB $90,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D8C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D8E DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D90 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D92 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D94 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D96 DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D98 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D9A DEFB $30,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6D9C DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6D9E DEFB $50,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DA0 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DA2 DEFB $90,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DA4 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DA6 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DA8 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DAA DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DAC DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DAE DEFB $D0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DB0 DEFW $0000    ; Terminator.

; Room #N$25
;
; #UDGTABLE
; { #ROOM(#PC)(room-25) }
; UDGTABLE#
@label=Room_25
w$6DB2 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DB4 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DB6 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DB8 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DBA DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DBC DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DBE DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DC0 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DC2 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DC4 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DC6 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DC8 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DCA DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DCC DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DCE DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DD0 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DD2 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DD4 DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DD6 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DD8 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DDA DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DDC DEFB $48,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DDE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DE0 DEFB $78,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DE2 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DE4 DEFB $90,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DE6 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DE8 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DEA DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DEC DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DEE DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DF0 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DF2 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DF4 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DF6 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DF8 DEFB $E0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DFA DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6DFC DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6DFE DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E00 DEFB $40,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E02 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E04 DEFB $38,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E06 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E08 DEFB $80,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E0A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E0C DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E0E DEFW $0000    ; Terminator.

; Room #N$26
;
; #UDGTABLE
; { #ROOM(#PC)(room-26) }
; UDGTABLE#
@label=Room_26
w$6E10 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E12 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E14 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E16 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E18 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E1A DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E1C DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E1E DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E20 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E22 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E24 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E26 DEFB $68,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E28 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E2A DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E2C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E2E DEFB $90,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E30 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E32 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E34 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E36 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E38 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E3A DEFB $38,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E3C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E3E DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E40 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E42 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E44 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E46 DEFB $70,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E48 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E4A DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E4C DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E4E DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E50 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E52 DEFB $80,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E54 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E56 DEFB $38,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E58 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E5A DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E5C DEFW $0000    ; Terminator.

; Room #N$27
;
; #UDGTABLE
; { #ROOM(#PC)(room-27) }
; UDGTABLE#
@label=Room_27
w$6E5E DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E60 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E62 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E64 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E66 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E68 DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E6A DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E6C DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E6E DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E70 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E72 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E74 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E76 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E78 DEFB $90,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E7A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E7C DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E7E DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E80 DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E82 DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E84 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E86 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E88 DEFB $98,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E8A DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E8C DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E8E DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E90 DEFB $38,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E92 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E94 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E96 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E98 DEFB $A8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E9A DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6E9C DEFB $E8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6E9E DEFW $0000    ; Terminator.

; Room #N$28
;
; #UDGTABLE
; { #ROOM(#PC)(room-28) }
; UDGTABLE#
@label=Room_28
w$6EA0 DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EA2 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EA4 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EA6 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EA8 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EAA DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EAC DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EAE DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EB0 DEFW $7BB7    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EB2 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EB4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EB6 DEFB $50,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EB8 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EBA DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EBC DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EBE DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EC0 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EC2 DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EC4 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EC6 DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EC8 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ECA DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ECC DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ECE DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ED0 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ED2 DEFB $A0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ED4 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6ED6 DEFB $B0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6ED8 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EDA DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EDC DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EDE DEFB $98,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EE0 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EE2 DEFB $38,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EE4 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EE6 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EE8 DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EEA DEFB $D8,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EEC DEFW $0000    ; Terminator.

; Room #N$29
;
; #UDGTABLE
; { #ROOM(#PC)(room-29) }
; UDGTABLE#
@label=Room_29
w$6EEE DEFW $7C0C    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EF0 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EF2 DEFW $7CCD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EF4 DEFB $00,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EF6 DEFW $8047    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EF8 DEFB $00,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EFA DEFW $81C5    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6EFC DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6EFE DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F00 DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F02 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F04 DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F06 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F08 DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F0A DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F0C DEFB $B8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F0E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F10 DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F12 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F14 DEFB $F0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F16 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F18 DEFB $B8,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F1A DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F1C DEFB $F0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F1E DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F20 DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F22 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F24 DEFB $B8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F26 DEFW $90A8    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F28 DEFB $C0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F2A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F2C DEFB $38,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F2E DEFW $771F    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F30 DEFB $78,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F32 DEFW $0000    ; Terminator.

; Room #N$2A
;
; #UDGTABLE
; { #ROOM(#PC)(room-2A) }
; UDGTABLE#
@label=Room_2A
w$6F34 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F36 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F38 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F3A DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F3C DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F3E DEFB $78,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F40 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F42 DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F44 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F46 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F48 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F4A DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F4C DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F4E DEFB $40,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F50 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F52 DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F54 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F56 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F58 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F5A DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F5C DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F5E DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F60 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F62 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F64 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F66 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F68 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F6A DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F6C DEFW $0000    ; Terminator.

; Room #N$2B
;
; #UDGTABLE
; { #ROOM(#PC)(room-2B) }
; UDGTABLE#
@label=Room_2B
w$6F6E DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F70 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F72 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F74 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F76 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F78 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F7A DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F7C DEFB $D0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F7E DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F80 DEFB $E8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F82 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F84 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F86 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F88 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F8A DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F8C DEFB $50,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F8E DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F90 DEFB $78,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F92 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F94 DEFB $B8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F96 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F98 DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F9A DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6F9C DEFB $F0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6F9E DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FA0 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FA2 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FA4 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FA6 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FA8 DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FAA DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FAC DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FAE DEFW $0000    ; Terminator.

; Room #N$2C
;
; #UDGTABLE
; { #ROOM(#PC)(room-2C) }
; UDGTABLE#
@label=Room_2C
w$6FB0 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FB2 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FB4 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FB6 DEFB $30,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FB8 DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FBA DEFB $60,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FBC DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FBE DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FC0 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FC2 DEFB $98,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FC4 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FC6 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FC8 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FCA DEFB $80,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FCC DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FCE DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FD0 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FD2 DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FD4 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FD6 DEFB $38,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FD8 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FDA DEFB $80,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FDC DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FDE DEFB $C0,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FE0 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FE2 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FE4 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FE6 DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FE8 DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FEA DEFB $80,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FEC DEFW $7E4B    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FEE DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FF0 DEFW $0000    ; Terminator.

; Room #N$2D
;
; #UDGTABLE
; { #ROOM(#PC)(room-2D) }
; UDGTABLE#
@label=Room_2D
w$6FF2 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FF4 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FF6 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FF8 DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FFA DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $6FFC DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $6FFE DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7000 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7002 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7004 DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7006 DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7008 DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $700A DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $700C DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $700E DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7010 DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7012 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7014 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7016 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7018 DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $701A DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $701C DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $701E DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7020 DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7022 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7024 DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7026 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7028 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $702A DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $702C DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $702E DEFW $0000    ; Terminator.

; Room #N$2E
;
; #UDGTABLE
; { #ROOM(#PC)(room-2E) }
; UDGTABLE#
@label=Room_2E
w$7030 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7032 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7034 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7036 DEFB $20,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7038 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $703A DEFB $38,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $703C DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $703E DEFB $80,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7040 DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7042 DEFB $B0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7044 DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7046 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7048 DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $704A DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $704C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $704E DEFB $10,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7050 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7052 DEFB $20,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7054 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7056 DEFB $48,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7058 DEFW $72F6    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $705A DEFB $88,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $705C DEFW $7298    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $705E DEFB $C8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7060 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7062 DEFB $D8,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7064 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7066 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7068 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $706A DEFB $40,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $706C DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $706E DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7070 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7072 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7074 DEFW $0000    ; Terminator.

; Room #N$2F
;
; #UDGTABLE
; { #ROOM(#PC)(room-2F) }
; UDGTABLE#
@label=Room_2F
w$7076 DEFW $70BC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7078 DEFB $00,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $707A DEFW $95CD    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $707C DEFB $48,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $707E DEFW $955D    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7080 DEFB $88,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7082 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7084 DEFB $A8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7086 DEFW $78F2    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7088 DEFB $C0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $708A DEFW $9673    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $708C DEFB $D8,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $708E DEFW $7981    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7090 DEFB $E0,$10  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7092 DEFW $7947    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7094 DEFB $D0,$28  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $7096 DEFW $71B3    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $7098 DEFB $00,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $709A DEFW $93C4    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $709C DEFB $28,$40  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $709E DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70A0 DEFB $E0,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70A2 DEFW $785E    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70A4 DEFB $28,$68  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70A6 DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70A8 DEFB $00,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70AA DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70AC DEFB $18,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70AE DEFW $7462    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70B0 DEFB $58,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70B2 DEFW $8F2A    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70B4 DEFB $90,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70B6 DEFW $7523    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $70B8 DEFB $C0,$88  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $70BA DEFW $0000    ; Terminator.

; Background Graphic #N$01
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$70BC DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $70BD DEFB $09                             ; Width = #N(#PEEK(#PC)) bytes.
 $70BE DEFB $04,$20,$00,$00,$04,$00,$1C,$00 ; {Pixel data.
 $70C6 DEFB $0C,$06,$E0,$76,$00,$0C,$00,$36 ;
 $70CE DEFB $00,$0C,$F2,$C3,$37,$00,$1C,$03 ;
 $70D6 DEFB $2A,$F0,$AC,$EC,$DF,$1C,$02,$3C ;
 $70DE DEFB $00,$DD,$80,$92,$3E,$BE,$3E,$02 ;
 $70E6 DEFB $BC,$0F,$7F,$7C,$D4,$03,$78,$7E ;
 $70EE DEFB $02,$DE,$1F,$AB,$FC,$C7,$FE,$C6 ;
 $70F6 DEFB $7E,$06,$DF,$31,$FF,$E2,$6C,$1F ;
 $70FE DEFB $FB,$3C,$0E,$EF,$00,$FF,$80,$80 ;
 $7106 DEFB $03,$BC,$3E,$1D,$EF,$8E,$00,$11 ;
 $710E DEFB $C6,$03,$DE,$3E,$3B,$F7,$BA,$00 ;
 $7116 DEFB $19,$9C,$00,$EF,$1C,$F3,$F7,$56 ;
 $711E DEFB $F8,$1C,$B0,$03,$77,$3D,$C3,$F6 ;
 $7126 DEFB $CD,$FE,$1E,$01,$03,$73,$3B,$81 ;
 $712E DEFB $F5,$DD,$87,$4F,$3E,$04,$31,$1B ;
 $7136 DEFB $0E,$7A,$BA,$79,$66,$7C,$0E,$30 ;
 $713E DEFB $36,$7F,$96,$8B,$FF,$7A,$F8,$06 ;
 $7146 DEFB $17,$36,$F8,$E6,$77,$C1,$38,$00 ;
 $714E DEFB $18,$27,$D5,$07,$0E,$F7,$AB,$DC ;
 $7156 DEFB $FF,$1E,$60,$7E,$38,$EC,$2E,$D5 ;
 $715E DEFB $ED,$FE,$2C,$87,$BD,$FF,$5D,$DC ;
 $7166 DEFB $AB,$FA,$F8,$70,$3F,$D7,$00,$BD ;
 $716E DEFB $B8,$D5,$F0,$00,$BC,$60,$EC,$F0 ;
 $7176 DEFB $D7,$70,$AB,$79,$F0,$D8,$0F,$3F ;
 $717E DEFB $FC,$56,$E0,$D5,$33,$FE,$E0,$3F ;
 $7186 DEFB $DC,$06,$1D,$C0,$AB,$13,$FC,$F0 ;
 $718E DEFB $F0,$38,$00,$1A,$00,$7E,$01,$E0 ; }
; Attributes.
 $7196 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $7197 DEFB $09                             ; Width = #N(#PEEK(#PC)) bytes.
 $7198 DEFB $60,$60,$58,$60,$60,$50,$50,$50 ; {Attribute data.
 $71A0 DEFB $20,$50,$60,$60,$60,$60,$60,$26 ;
 $71A8 DEFB $20,$20,$50,$60,$60,$60,$60,$60 ;
 $71B0 DEFB $30,$20,$20                     ; }

; Background Graphic #N$02
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$71B3 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $71B4 DEFB $05                             ; Width = #N(#PEEK(#PC)) bytes.
 $71B5 DEFB $1C,$C7,$E0,$00,$00,$06,$DF,$FC ; {Pixel data.
 $71BD DEFB $00,$00,$1D,$3F,$84,$40,$00,$7E ;
 $71C5 DEFB $A0,$00,$C2,$00,$C1,$BF,$C0,$C6 ;
 $71CD DEFB $00,$3F,$FF,$F0,$CE,$00,$7C,$EF ;
 $71D5 DEFB $FC,$4C,$40,$E0,$61,$FE,$50,$C0 ;
 $71DD DEFB $03,$00,$20,$51,$C8,$07,$04,$42 ;
 $71E5 DEFB $53,$C8,$0A,$72,$DC,$67,$88,$1C ;
 $71ED DEFB $FA,$F0,$4F,$88,$1C,$70,$CC,$4F ;
 $71F5 DEFB $88,$28,$19,$BE,$BF,$08,$30,$3E ;
 $71FD DEFB $F3,$BF,$18,$38,$07,$E0,$7E,$18 ;
 $7205 DEFB $30,$3B,$DC,$7E,$31,$48,$FD,$BE ;
 $720D DEFB $7C,$71,$70,$0D,$E0,$FC,$E3,$70 ;
 $7215 DEFB $07,$98,$F9,$E7,$30,$F7,$7C,$FB ;
 $721D DEFB $CE,$48,$7B,$FE,$F7,$9E,$78,$1F ;
 $7225 DEFB $FF,$FE,$3C,$78,$0F,$87,$DE,$78 ;
 $722D DEFB $7C,$0D,$BB,$BC,$F0,$38,$15,$DD ;
 $7235 DEFB $79,$E0,$46,$17,$EF,$77,$80,$4F ;
 $723D DEFB $15,$F6,$EC,$00,$7F,$2B,$3A,$E3 ;
 $7245 DEFB $F0,$3F,$2D,$CF,$DF,$F8,$3E,$57 ;
 $724D DEFB $F7,$B8,$3C,$3C,$A9,$1B,$60,$0C ;
 $7255 DEFB $11,$57,$EF,$CF,$06,$06,$AA,$F7 ;
 $725D DEFB $BF,$C2,$1D,$5A,$1B,$7F,$E0,$3B ;
 $7265 DEFB $56,$EE,$E1,$F0,$76,$B4,$F7,$C0 ;
 $726D DEFB $78,$6D,$AC,$3F,$80,$18,$DB,$68 ;
 $7275 DEFB $0F,$00,$0C,$DB,$68,$07,$00,$04 ; }
; Attributes.
 $727D DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $727E DEFB $05                             ; Width = #N(#PEEK(#PC)) bytes.
 $727F DEFB $60,$60,$60,$78,$70,$50,$58,$58 ; {Attribute data.
 $7287 DEFB $60,$60,$50,$58,$58,$60,$60,$50 ;
 $728F DEFB $70,$20,$60,$60,$70,$70,$20,$60 ;
 $7297 DEFB $28                             ; }

; Background Graphic #N$03
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7298 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $7299 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $729A DEFB $00,$00,$00,$70,$1C,$FE,$7E,$FE ; {Pixel data.
 $72A2 DEFB $7E,$FE,$7E,$FE,$3E,$FC,$1C,$70 ;
 $72AA DEFB $02,$40,$02,$5C,$02,$9E,$01,$BC ;
 $72B2 DEFB $01,$FE,$01,$DE,$07,$8C,$13,$80 ;
 $72BA DEFB $0D,$A0,$37,$C8,$1B,$D8,$4D,$B0 ;
 $72C2 DEFB $67,$E4,$33,$CC,$19,$98,$6D,$B0 ;
 $72CA DEFB $37,$F6,$3B,$EC,$1D,$9C,$CF,$B9 ;
 $72D2 DEFB $77,$F7,$7B,$CE,$3D,$9C,$1F,$B9 ;
 $72DA DEFB $CF,$F3,$F7,$E7,$F9,$CF,$7F,$9E ;
 $72E2 DEFB $3F,$BC,$1F,$F8,$07,$F0,$01,$C0 ; }
; Attributes.
 $72EA DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $72EB DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $72EC DEFB $68,$38,$60,$28,$60,$20,$60,$20 ; {Attribute data.
 $72F4 DEFB $60,$20                         ; }

; Background Graphic #N$04
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$72F6 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $72F7 DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $72F8 DEFB $00,$00,$04,$0F,$84,$00,$00,$00 ; {Pixel data.
 $7300 DEFB $00,$00,$06,$2F,$EC,$F8,$00,$00 ;
 $7308 DEFB $00,$00,$02,$67,$F1,$E0,$00,$00 ;
 $7310 DEFB $00,$00,$03,$C1,$F7,$80,$20,$00 ;
 $7318 DEFB $00,$00,$03,$DE,$EE,$7E,$70,$00 ;
 $7320 DEFB $00,$00,$19,$CF,$59,$C2,$F0,$7C ;
 $7328 DEFB $00,$00,$0D,$87,$87,$BC,$F9,$F8 ;
 $7330 DEFB $00,$00,$0F,$F0,$DF,$0E,$FB,$F0 ;
 $7338 DEFB $04,$00,$07,$E7,$E0,$07,$37,$0E ;
 $7340 DEFB $07,$00,$03,$6F,$70,$03,$CC,$FC ;
 $7348 DEFB $0F,$80,$03,$83,$38,$7C,$EB,$F8 ;
 $7350 DEFB $0F,$C0,$39,$FB,$3C,$37,$27,$00 ;
 $7358 DEFB $0F,$C2,$1F,$F2,$14,$1F,$CC,$F0 ;
 $7360 DEFB $0F,$E6,$0F,$E0,$1E,$0F,$F3,$FC ;
 $7368 DEFB $0F,$ED,$07,$C0,$1E,$33,$F7,$FF ;
 $7370 DEFB $0F,$ED,$01,$CE,$0D,$7C,$07,$FE ;
 $7378 DEFB $0F,$DD,$80,$FC,$03,$00,$3C,$F0 ;
 $7380 DEFB $07,$D5,$82,$F8,$0F,$80,$78,$E8 ;
 $7388 DEFB $27,$B9,$46,$F0,$07,$80,$F0,$52 ;
 $7390 DEFB $33,$BC,$CA,$F7,$07,$C1,$61,$24 ;
 $7398 DEFB $3D,$BD,$DA,$EE,$07,$83,$8D,$6D ;
 $73A0 DEFB $6E,$AB,$BA,$FC,$07,$47,$87,$DB ;
 $73A8 DEFB $6F,$33,$AF,$78,$00,$EA,$03,$F7 ;
 $73B0 DEFB $6F,$BB,$6F,$70,$03,$DD,$03,$F3 ;
 $73B8 DEFB $75,$BB,$67,$67,$03,$DE,$05,$A0 ;
 $73C0 DEFB $45,$AA,$AF,$7C,$03,$DE,$0B,$F0 ;
 $73C8 DEFB $75,$B2,$AF,$78,$03,$A2,$16,$6C ;
 $73D0 DEFB $79,$BA,$AE,$F0,$00,$7C,$2F,$FC ;
 $73D8 DEFB $39,$BD,$C2,$CF,$03,$7C,$59,$9A ;
 $73E0 DEFB $3D,$D5,$DE,$FA,$03,$38,$7F,$FE ;
 $73E8 DEFB $40,$B9,$BC,$FC,$22,$C4,$E6,$67 ;
 $73F0 DEFB $1F,$5D,$BC,$38,$22,$FC,$FF,$FF ;
 $73F8 DEFB $1F,$ED,$F9,$A1,$42,$FC,$D9,$99 ;
 $7400 DEFB $00,$ED,$67,$A6,$50,$FC,$BF,$FF ;
 $7408 DEFB $FF,$2D,$5F,$BC,$56,$F8,$66,$67 ;
 $7410 DEFB $FF,$C5,$BF,$78,$67,$06,$5F,$FE ;
 $7418 DEFB $7F,$F5,$7E,$F2,$A7,$7E,$39,$9A ;
 $7420 DEFB $3F,$F8,$FC,$E2,$C7,$7E,$37,$FC ;
 $7428 DEFB $0F,$FD,$E0,$C1,$CB,$BF,$16,$68 ;
 $7430 DEFB $01,$FF,$C0,$C1,$DC,$BF,$0F,$F0 ; }
; Attributes.
 $7438 DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $7439 DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $743A DEFB $60,$60,$60,$20,$60,$60,$60,$30 ; {Attribute data.
 $7442 DEFB $60,$60,$60,$20,$50,$60,$60,$60 ;
 $744A DEFB $60,$60,$28,$20,$50,$50,$50,$20 ;
 $7452 DEFB $60,$60,$28,$20,$50,$50,$70,$70 ;
 $745A DEFB $60,$60,$28,$20,$50,$50,$70,$70 ; }

; Background Graphic #N$05
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7462 DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $7463 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7464 DEFB $00,$00,$00,$00,$18,$00,$00,$3C ; {Pixel data.
 $746C DEFB $00,$00,$7E,$00,$00,$7F,$00,$00 ;
 $7474 DEFB $FF,$00,$00,$DD,$80,$04,$8A,$80 ;
 $747C DEFB $02,$66,$A0,$03,$67,$60,$01,$EE ;
 $7484 DEFB $C0,$00,$FF,$C0,$0C,$FF,$90,$07 ;
 $748C DEFB $77,$30,$07,$AB,$60,$03,$AA,$C0 ;
 $7494 DEFB $01,$6D,$C0,$01,$7D,$80,$00,$FF ;
 $749C DEFB $00,$00,$FF,$00,$00,$FF,$00,$00 ;
 $74A4 DEFB $FF,$00,$00,$FF,$00,$80,$FF,$08 ;
 $74AC DEFB $E1,$00,$B8,$39,$01,$E0,$0E,$03 ;
 $74B4 DEFB $C1,$07,$87,$82,$07,$CF,$94,$03 ;
 $74BC DEFB $EF,$AC,$01,$EF,$D8,$31,$FF,$D8 ;
 $74C4 DEFB $3E,$FF,$B0,$1F,$FD,$8E,$1F,$3D ;
 $74CC DEFB $F8,$0F,$9A,$F0,$4E,$AA,$E0,$67 ;
 $74D4 DEFB $BA,$C0,$3B,$DF,$C7,$1D,$D9,$9E ;
 $74DC DEFB $07,$75,$78,$07,$AB,$F0,$73,$FB ;
 $74E4 DEFB $60,$3D,$F6,$CE,$0E,$F4,$BC,$07 ;
 $74EC DEFB $FA,$F8,$03,$B5,$F0,$01,$FB,$E8 ;
 $74F4 DEFB $03,$DD,$9E,$0F,$CF,$F0,$1C,$D7 ;
 $74FC DEFB $E8,$03,$DF,$FC,$0F,$7F,$E2,$08 ;
 $7504 DEFB $DE,$D8,$00,$CC,$20,$00,$00,$00 ; }
; Attributes.
 $750C DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $750D DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $750E DEFB $58,$58,$58,$18,$18,$18,$18,$50 ; {Attribute data.
 $7516 DEFB $18,$30,$62,$20,$30,$60,$20,$30 ;
 $751E DEFB $60,$20,$30,$60,$20             ; }

; Background Graphic #N$06
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7523 DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $7524 DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $7525 DEFB $00,$18,$00,$00,$00,$00,$00,$00 ; {Pixel data.
 $752D DEFB $00,$3C,$0C,$00,$00,$00,$00,$00 ;
 $7535 DEFB $00,$3E,$3C,$00,$30,$00,$00,$00 ;
 $753D DEFB $00,$3F,$7C,$00,$7C,$80,$00,$00 ;
 $7545 DEFB $0F,$3E,$8C,$00,$60,$80,$00,$00 ;
 $754D DEFB $7F,$DF,$6C,$00,$78,$C0,$00,$00 ;
 $7555 DEFB $07,$E6,$EC,$F8,$62,$C0,$00,$00 ;
 $755D DEFB $00,$FA,$EB,$FE,$23,$80,$00,$00 ;
 $7565 DEFB $1E,$7C,$F7,$FF,$37,$00,$00,$60 ;
 $756D DEFB $7F,$BE,$EC,$00,$3C,$7E,$06,$F0 ;
 $7575 DEFB $FF,$CE,$C3,$FF,$E0,$C9,$07,$F0 ;
 $757D DEFB $37,$F7,$0F,$FE,$40,$DD,$07,$F0 ;
 $7585 DEFB $0F,$FB,$9F,$F8,$80,$7E,$07,$E0 ;
 $758D DEFB $0C,$FD,$BF,$C0,$80,$81,$03,$E0 ;
 $7595 DEFB $00,$FE,$0E,$39,$01,$7E,$01,$80 ;
 $759D DEFB $00,$07,$01,$FD,$02,$00,$01,$00 ;
 $75A5 DEFB $00,$07,$EC,$02,$24,$00,$81,$00 ;
 $75AD DEFB $00,$07,$F7,$02,$28,$11,$C0,$10 ;
 $75B5 DEFB $00,$07,$FB,$C2,$70,$11,$C2,$30 ;
 $75BD DEFB $00,$09,$FD,$E4,$70,$31,$E6,$E0 ;
 $75C5 DEFB $00,$F0,$7E,$F4,$40,$61,$EE,$F0 ;
 $75CD DEFB $02,$0D,$7F,$78,$C0,$E5,$EA,$F0 ;
 $75D5 DEFB $03,$0F,$3F,$7D,$C0,$C5,$EB,$70 ;
 $75DD DEFB $07,$0D,$3F,$7D,$C1,$C5,$DB,$70 ;
 $75E5 DEFB $07,$0F,$1F,$13,$81,$C5,$DB,$70 ;
 $75ED DEFB $47,$11,$0F,$17,$83,$8D,$B7,$70 ;
 $75F5 DEFB $67,$1F,$07,$17,$87,$8D,$B7,$B0 ;
 $75FD DEFB $77,$1A,$13,$2F,$07,$9D,$76,$B0 ;
 $7605 DEFB $3B,$1A,$18,$2F,$0F,$1D,$75,$B0 ;
 $760D DEFB $1D,$1A,$2C,$3E,$1F,$39,$73,$B0 ;
 $7615 DEFB $06,$2E,$6E,$1E,$3E,$38,$77,$B0 ;
 $761D DEFB $19,$B2,$7E,$3C,$7E,$78,$D7,$B0 ;
 $7625 DEFB $3B,$BA,$7F,$3C,$FC,$F0,$E2,$B0 ;
 $762D DEFB $7B,$B4,$3F,$79,$F9,$E2,$F5,$A0 ;
 $7635 DEFB $77,$74,$1F,$79,$F7,$C2,$F3,$A0 ;
 $763D DEFB $77,$74,$87,$73,$EF,$86,$B7,$A0 ;
 $7645 DEFB $E6,$7C,$FF,$73,$DF,$0E,$D7,$86 ;
 $764D DEFB $CE,$F4,$7F,$E7,$BE,$1C,$E7,$8E ;
 $7655 DEFB $8C,$68,$3F,$E7,$7C,$3C,$F7,$9E ;
 $765D DEFB $05,$88,$9F,$EE,$F8,$79,$77,$9E ;
 $7665 DEFB $01,$7A,$7F,$ED,$F3,$F3,$77,$BE ;
 $766D DEFB $03,$6A,$7E,$EB,$CF,$E7,$7F,$BE ;
 $7675 DEFB $03,$F2,$1B,$DB,$BF,$00,$1F,$7E ;
 $767D DEFB $07,$96,$EB,$D7,$78,$FF,$C7,$FC ;
 $7685 DEFB $07,$D7,$7F,$DC,$E7,$FF,$F3,$FC ;
 $768D DEFB $0B,$B7,$1F,$EB,$DF,$80,$79,$F8 ;
 $7695 DEFB $0B,$E7,$0F,$D7,$3C,$01,$8E,$F8 ;
 $769D DEFB $19,$2D,$07,$EE,$F3,$FC,$31,$F0 ;
 $76A5 DEFB $3C,$4B,$DF,$F8,$CF,$FF,$1D,$EF ;
 $76AD DEFB $7E,$4F,$6F,$F7,$3C,$0F,$DB,$DE ;
 $76B5 DEFB $7A,$8F,$B7,$EC,$F0,$20,$3B,$BC ;
 $76BD DEFB $7D,$1F,$DF,$FB,$C7,$DF,$F7,$78 ;
 $76C5 DEFB $74,$9F,$6F,$F7,$03,$EF,$F6,$F0 ;
 $76CD DEFB $3A,$8E,$3F,$FE,$01,$F7,$DD,$C0 ;
 $76D5 DEFB $1F,$00,$1F,$FC,$00,$7B,$C2,$00 ;
 $76DD DEFB $00,$00,$07,$F8,$00,$00,$00,$00 ; }
; Attributes.
 $76E5 DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $76E6 DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $76E7 DEFB $30,$30,$60,$60,$78,$78,$78,$78 ; {Attribute data.
 $76EF DEFB $30,$30,$60,$60,$78,$70,$60,$20 ;
 $76F7 DEFB $60,$50,$20,$20,$60,$60,$60,$20 ;
 $76FF DEFB $60,$50,$20,$60,$60,$60,$60,$20 ;
 $7707 DEFB $60,$50,$20,$60,$60,$60,$60,$20 ;
 $770F DEFB $50,$50,$20,$60,$60,$60,$60,$20 ;
 $7717 DEFB $50,$50,$20,$60,$60,$20,$20,$20 ; }

; Background Graphic #N$07
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$771F DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $7720 DEFB $05                             ; Width = #N(#PEEK(#PC)) bytes.
 $7721 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Pixel data.
 $7729 DEFB $08,$00,$00,$00,$04,$08,$00,$00 ;
 $7731 DEFB $00,$02,$08,$00,$00,$00,$02,$08 ;
 $7739 DEFB $04,$00,$00,$03,$09,$0C,$00,$00 ;
 $7741 DEFB $01,$19,$08,$00,$00,$01,$19,$18 ;
 $7749 DEFB $00,$01,$11,$9D,$98,$00,$00,$A0 ;
 $7751 DEFB $9D,$98,$00,$01,$40,$9D,$B0,$00 ;
 $7759 DEFB $05,$D0,$DD,$B0,$00,$0A,$E0,$DD ;
 $7761 DEFB $B0,$00,$2B,$98,$DD,$64,$00,$35 ;
 $7769 DEFB $B0,$6D,$64,$00,$37,$C0,$6D,$6C ;
 $7771 DEFB $00,$BB,$18,$6D,$5C,$00,$DB,$70 ;
 $7779 DEFB $75,$5E,$00,$DF,$C0,$75,$5A,$02 ;
 $7781 DEFB $6C,$00,$75,$DA,$03,$7F,$C4,$37 ;
 $7789 DEFB $B3,$03,$33,$E6,$37,$B1,$13,$BE ;
 $7791 DEFB $03,$3B,$A1,$18,$BF,$03,$BB,$60 ;
 $7799 DEFB $1D,$E7,$81,$DB,$60,$1E,$FC,$C1 ;
 $77A1 DEFB $DB,$40,$0F,$7F,$00,$CE,$C0,$0F ;
 $77A9 DEFB $C1,$80,$44,$40,$07,$DE,$00,$11 ;
 $77B1 DEFB $00,$E7,$FF,$0E,$33,$38,$7B,$FE ;
 $77B9 DEFB $07,$76,$70,$3D,$D3,$83,$FE,$F0 ;
 $77C1 DEFB $3E,$3F,$01,$FF,$E0,$1E,$DE,$01 ;
 $77C9 DEFB $FF,$C0,$0F,$FD,$81,$FF,$C0,$07 ;
 $77D1 DEFB $F3,$91,$FF,$C0,$00,$E7,$31,$FF ;
 $77D9 DEFB $C0,$7E,$6F,$70,$FF,$80,$FF,$FE ;
 $77E1 DEFB $F0,$03,$80,$3F,$FC,$F3,$00,$80 ;
 $77E9 DEFB $0F,$19,$E1,$80,$C0,$00,$1D,$E3 ;
 $77F1 DEFB $80,$E0,$3F,$FD,$C7,$80,$F0,$7F ;
 $77F9 DEFB $FF,$CF,$80,$F0,$1F,$EF,$9F,$00 ;
 $7801 DEFB $F8,$00,$07,$9F,$1C,$F8,$1F,$CE ;
 $7809 DEFB $9E,$7C,$F8,$7F,$FF,$BC,$FC,$F8 ;
 $7811 DEFB $1F,$FF,$B9,$F8,$F8,$03,$FB,$F3 ;
 $7819 DEFB $F0,$F8,$00,$01,$E7,$E0,$F8,$1F ;
 $7821 DEFB $F1,$E7,$C0,$F0,$7F,$FD,$EF,$80 ;
 $7829 DEFB $F0,$3F,$FF,$EE,$00,$E0,$0F,$FF ;
 $7831 DEFB $FC,$00,$C0,$03,$FD,$E0,$00,$00 ; }
; Attributes.
 $7839 DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $783A DEFB $05                             ; Width = #N(#PEEK(#PC)) bytes.
 $783B DEFB $60,$60,$60,$30,$30,$60,$60,$60 ; {Attribute data.
 $7843 DEFB $30,$30,$60,$60,$60,$30,$30,$60 ;
 $784B DEFB $60,$60,$60,$60,$60,$60,$60,$66 ;
 $7853 DEFB $60,$60,$60,$66,$66,$70,$60,$60 ;
 $785B DEFB $66,$66,$70                     ; }

; Background Graphic #N$08
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$785E DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $785F DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $7860 DEFB $00,$00,$00,$00,$00,$08,$40,$00 ; {Pixel data.
 $7868 DEFB $01,$08,$C4,$00,$01,$0C,$C4,$00 ;
 $7870 DEFB $01,$0C,$C4,$00,$01,$0C,$C4,$00 ;
 $7878 DEFB $01,$8C,$CC,$08,$01,$8C,$CC,$08 ;
 $7880 DEFB $11,$8C,$DC,$08,$11,$CE,$D8,$18 ;
 $7888 DEFB $19,$C6,$D8,$30,$09,$E6,$B8,$70 ;
 $7890 DEFB $0C,$F6,$B8,$E0,$06,$F2,$B1,$E0 ;
 $7898 DEFB $07,$7B,$B3,$C0,$03,$BB,$E7,$80 ;
 $78A0 DEFB $01,$DD,$EF,$00,$00,$ED,$CE,$00 ;
 $78A8 DEFB $00,$76,$DC,$3C,$0F,$8B,$D9,$FE ;
 $78B0 DEFB $3F,$FD,$F7,$E0,$40,$0E,$EE,$00 ;
 $78B8 DEFB $0F,$F2,$F8,$00,$3F,$FD,$EF,$C0 ;
 $78C0 DEFB $70,$07,$DF,$F0,$01,$FD,$F0,$38 ;
 $78C8 DEFB $07,$87,$FF,$0C,$0C,$3D,$C3,$86 ;
 $78D0 DEFB $00,$73,$60,$C2,$00,$02,$30,$40 ;
 $78D8 DEFB $00,$00,$00,$40,$00,$00,$00,$00 ; }
; Attributes.
 $78E0 DEFB $04                             ; Height = #N(#PEEK(#PC)) bytes.
 $78E1 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $78E2 DEFB $60,$60,$20,$20,$60,$60,$20,$20 ; {Attribute data.
 $78EA DEFB $60,$60,$20,$20,$60,$60,$20,$20 ; }

; Background Graphic #N$09
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$78F2 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $78F3 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $78F4 DEFB $06,$20,$00,$E7,$63,$00,$7B,$6F ; {Pixel data.
 $78FC DEFB $08,$3D,$DE,$70,$1E,$BE,$C0,$62 ;
 $7904 DEFB $B0,$FE,$FD,$8F,$30,$3E,$FF,$D0 ;
 $790C DEFB $06,$BF,$C0,$05,$6F,$3E,$0E,$E0 ;
 $7914 DEFB $F0,$18,$ED,$E0,$3C,$EC,$C0,$58 ;
 $791C DEFB $EE,$DE,$60,$E6,$F0,$78,$62,$E0 ;
 $7924 DEFB $78,$60,$C0,$80,$2F,$DC,$F0,$07 ;
 $792C DEFB $FE,$F0,$3F,$E3,$60,$FF,$C0,$90 ;
 $7934 DEFB $07,$80,$F0,$03,$80,$E0,$03,$80 ; }
; Attributes.
 $793C DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $793D DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $793E DEFB $60,$60,$20,$50,$60,$20,$50,$60 ; {Attribute data.
 $7946 DEFB $20                             ; }

; Background Graphic #N$0A
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7947 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7948 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $7949 DEFB $04,$C0,$06,$80,$07,$30,$03,$70 ; {Pixel data.
 $7951 DEFB $19,$60,$0E,$EC,$0E,$DC,$03,$BC ;
 $7959 DEFB $1C,$78,$0F,$E8,$07,$BC,$41,$A7 ;
 $7961 DEFB $66,$8F,$3C,$1E,$3D,$BC,$3D,$B8 ;
 $7969 DEFB $56,$0E,$AB,$1E,$D5,$3E,$AB,$7C ;
 $7971 DEFB $D5,$7C,$AB,$F8,$56,$E0,$3C,$00 ; }
; Attributes.
 $7979 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $797A DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $797B DEFB $60,$60,$60,$60,$58,$60         ; Attribute data.

; Background Graphic #N$0B
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7981 DEFB $58                             ; Height = #N(#PEEK(#PC)) pixels.
 $7982 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $7983 DEFB $07,$80,$80,$00,$01,$C0,$80,$00 ; {Pixel data.
 $798B DEFB $00,$60,$80,$00,$00,$30,$C0,$40 ;
 $7993 DEFB $00,$18,$C0,$C0,$21,$1C,$C1,$80 ;
 $799B DEFB $30,$8E,$C7,$80,$1C,$6E,$DF,$00 ;
 $79A3 DEFB $0F,$36,$BC,$02,$03,$CA,$B3,$FC ;
 $79AB DEFB $01,$F6,$EF,$00,$00,$7A,$FC,$00 ;
 $79B3 DEFB $00,$1D,$F8,$20,$0F,$EF,$F0,$60 ;
 $79BB DEFB $1F,$F7,$84,$6C,$3F,$F1,$2D,$58 ;
 $79C3 DEFB $38,$0E,$6D,$F0,$60,$1E,$D9,$60 ;
 $79CB DEFB $44,$3D,$D8,$00,$0E,$3D,$95,$C0 ;
 $79D3 DEFB $0E,$79,$61,$E0,$1F,$73,$8E,$00 ;
 $79DB DEFB $1F,$6D,$F7,$00,$1F,$70,$F9,$98 ;
 $79E3 DEFB $1F,$7F,$BC,$38,$0E,$BF,$C0,$72 ;
 $79EB DEFB $8F,$01,$E0,$76,$CF,$7E,$00,$EE ;
 $79F3 DEFB $E7,$FF,$80,$CE,$E3,$FF,$3E,$9C ;
 $79FB DEFB $F2,$00,$1F,$1C,$F4,$1F,$C0,$19 ;
 $7A03 DEFB $F4,$7F,$8F,$93,$FC,$FF,$07,$C7 ;
 $7A0B DEFB $7D,$FE,$01,$E7,$7F,$FC,$C2,$0E ;
 $7A13 DEFB $3F,$F3,$C3,$8C,$1D,$C7,$C1,$C9 ;
 $7A1B DEFB $0C,$0F,$8D,$E7,$E2,$1F,$9C,$EF ;
 $7A23 DEFB $F2,$3F,$3C,$1F,$FA,$7E,$78,$1E ;
 $7A2B DEFB $7D,$7C,$F8,$9C,$7F,$F9,$F9,$C0 ;
 $7A33 DEFB $3F,$83,$F3,$C0,$0F,$C3,$E7,$C0 ;
 $7A3B DEFB $00,$67,$CF,$C0,$38,$37,$9F,$80 ;
 $7A43 DEFB $7F,$37,$3F,$00,$3F,$D8,$3F,$30 ;
 $7A4B DEFB $1F,$FC,$3E,$70,$07,$EC,$7C,$F0 ;
 $7A53 DEFB $00,$0E,$79,$F0,$1F,$E6,$71,$F0 ;
 $7A5B DEFB $07,$FB,$63,$F0,$00,$7B,$43,$F0 ;
 $7A63 DEFB $0F,$9D,$87,$E0,$0F,$EF,$87,$E0 ;
 $7A6B DEFB $07,$F0,$CF,$C0,$03,$FC,$EF,$80 ;
 $7A73 DEFB $01,$FE,$6F,$00,$00,$FF,$6E,$0F ;
 $7A7B DEFB $1E,$3F,$6C,$3F,$1F,$CF,$E8,$FE ;
 $7A83 DEFB $0F,$F3,$31,$FE,$0F,$F8,$33,$FC ;
 $7A8B DEFB $63,$FC,$33,$F0,$7C,$FE,$37,$F0 ;
 $7A93 DEFB $3F,$7E,$37,$E3,$3F,$BF,$37,$8F ;
 $7A9B DEFB $3F,$DF,$6C,$7E,$1F,$EF,$63,$FE ;
 $7AA3 DEFB $1F,$F7,$67,$FC,$0F,$F8,$CF,$F8 ;
 $7AAB DEFB $0F,$F8,$DF,$F0,$07,$FD,$BF,$C0 ;
 $7AB3 DEFB $01,$FD,$FF,$80,$00,$7F,$FE,$00 ;
 $7ABB DEFB $00,$03,$70,$00,$00,$07,$00,$00 ;
 $7AC3 DEFB $00,$0E,$00,$00,$00,$0E,$00,$00 ;
 $7ACB DEFB $00,$3E,$00,$00,$01,$FF,$E0,$00 ;
 $7AD3 DEFB $06,$FF,$18,$00,$08,$ED,$C4,$00 ;
 $7ADB DEFB $11,$98,$60,$00,$02,$20,$30,$00 ; }
; Attributes.
 $7AE3 DEFB $0B                             ; Height = #N(#PEEK(#PC)) bytes.
 $7AE4 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $7AE5 DEFB $30,$30,$30,$30,$30,$30,$30,$30 ; {Attribute data.
 $7AED DEFB $60,$60,$60,$60,$60,$60,$60,$20 ;
 $7AF5 DEFB $60,$60,$60,$20,$60,$60,$60,$60 ;
 $7AFD DEFB $60,$60,$60,$60,$60,$60,$60,$60 ;
 $7B05 DEFB $60,$60,$60,$60,$60,$60,$60,$60 ;
 $7B0D DEFB $30,$30,$30,$30                 ; }

; Background Graphic #N$0C
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7B11 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7B12 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $7B13 DEFB $00,$00,$03,$00,$00,$00,$00,$00 ; {Pixel data.
 $7B1B DEFB $07,$8C,$00,$00,$00,$00,$2E,$9E ;
 $7B23 DEFB $00,$00,$00,$30,$3E,$5D,$00,$00 ;
 $7B2B DEFB $00,$78,$79,$5A,$80,$00,$01,$C8 ;
 $7B33 DEFB $69,$2A,$80,$00,$01,$A4,$72,$2A ;
 $7B3B DEFB $80,$80,$03,$94,$72,$22,$40,$E0 ;
 $7B43 DEFB $03,$92,$E4,$11,$41,$D0,$03,$8A ;
 $7B4B DEFB $E3,$11,$43,$88,$0A,$10,$62,$D3 ;
 $7B53 DEFB $47,$08,$1A,$10,$44,$06,$8F,$88 ;
 $7B5B DEFB $1A,$0C,$49,$CC,$5C,$64,$3C,$04 ;
 $7B63 DEFB $21,$2E,$40,$54,$3C,$08,$02,$1C ;
 $7B6B DEFB $40,$84,$70,$0F,$07,$0C,$22,$06 ;
 $7B73 DEFB $F8,$10,$0F,$84,$23,$80,$C0,$60 ;
 $7B7B DEFB $1F,$02,$26,$41,$80,$80,$3F,$02 ;
 $7B83 DEFB $14,$20,$00,$40,$30,$80,$18,$20 ;
 $7B8B DEFB $01,$80,$C0,$40,$06,$10,$0E,$03 ;
 $7B93 DEFB $00,$00,$01,$8C,$00,$3C,$00,$00 ;
 $7B9B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; Attributes.
 $7BA3 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $7BA4 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $7BA5 DEFB $78,$78,$58,$58,$58,$58,$58,$58 ; {Attribute data.
 $7BAD DEFB $58,$58,$58,$58,$58,$58,$58,$58 ;
 $7BB5 DEFB $58,$58                         ; }

; Background Graphic #N$0D
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7BB7 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7BB8 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7BB9 DEFB $00,$00,$00,$00,$30,$00,$00,$30 ; {Pixel data.
 $7BC1 DEFB $00,$00,$78,$00,$00,$E8,$00,$03 ;
 $7BC9 DEFB $84,$00,$03,$24,$00,$67,$24,$70 ;
 $7BD1 DEFB $77,$32,$F8,$77,$79,$C8,$E1,$39 ;
 $7BD9 DEFB $C4,$E1,$33,$C4,$C9,$27,$82,$C9 ;
 $7BE1 DEFB $27,$82,$C4,$AF,$90,$82,$0F,$98 ;
 $7BE9 DEFB $80,$1D,$84,$86,$1C,$84,$1F,$38 ;
 $7BF1 DEFB $C2,$3C,$F0,$C0,$40,$40,$48,$00 ;
 $7BF9 DEFB $0C,$40,$00,$10,$00,$00,$00,$00 ; }
; Attributes.
 $7C01 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $7C02 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7C03 DEFB $78,$78,$58,$58,$58,$58,$58,$58 ; {Attribute data.
 $7C0B DEFB $58                             ; }

; Background Graphic #N$0E
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7C0C DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7C0D DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $7C0E DEFB $00,$00,$00,$00,$00,$C0,$00,$00 ; {Pixel data.
 $7C16 DEFB $00,$1A,$00,$00,$E3,$40,$38,$00 ;
 $7C1E DEFB $3F,$04,$01,$E7,$C0,$38,$00,$3B ;
 $7C26 DEFB $0C,$03,$FF,$E0,$7C,$00,$70,$8C ;
 $7C2E DEFB $1B,$AF,$A0,$73,$04,$E0,$0F,$3F ;
 $7C36 DEFB $4D,$B0,$68,$8C,$F0,$1E,$B8,$1C ;
 $7C3E DEFB $90,$E4,$9C,$81,$18,$60,$44,$08 ;
 $7C46 DEFB $E2,$1E,$81,$B8,$24,$40,$48,$E4 ;
 $7C4E DEFB $3E,$03,$F8,$0E,$48,$24,$A0,$3F ;
 $7C56 DEFB $07,$DC,$1F,$27,$14,$A0,$79,$08 ;
 $7C5E DEFB $CC,$10,$80,$82,$02,$E1,$10,$84 ;
 $7C66 DEFB $3E,$80,$42,$07,$F4,$82,$00,$7B ;
 $7C6E DEFB $40,$30,$0F,$F4,$87,$20,$69,$24 ;
 $7C76 DEFB $08,$0F,$B4,$47,$E0,$81,$06,$00 ;
 $7C7E DEFB $1E,$43,$0F,$70,$A0,$0E,$80,$1F ;
 $7C86 DEFB $10,$1E,$30,$90,$5F,$80,$3D,$60 ;
 $7C8E DEFB $3E,$09,$18,$BF,$C0,$20,$08,$32 ;
 $7C96 DEFB $09,$10,$FE,$C0,$40,$58,$50,$04 ;
 $7C9E DEFB $11,$FC,$C0,$00,$FC,$48,$24,$03 ;
 $7CA6 DEFB $F8,$60,$00,$FE,$00,$64,$07,$20 ;
 $7CAE DEFB $10,$01,$C5,$80,$80,$08,$10,$00 ; }
; Attributes.
 $7CB6 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $7CB7 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $7CB8 DEFB $58,$78,$78,$58,$58,$58,$58,$58 ; {Attribute data.
 $7CC0 DEFB $58,$58,$58,$78,$58,$58,$58,$58 ;
 $7CC8 DEFB $58,$58,$58,$58,$58             ; }

; Background Graphic #N$0F
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7CCD DEFB $30                             ; Height = #N(#PEEK(#PC)) pixels.
 $7CCE DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $7CCF DEFB $03,$D8,$80,$00,$00,$0C,$00,$06 ; {Pixel data.
 $7CD7 DEFB $D0,$40,$00,$00,$00,$00,$0C,$40 ;
 $7CDF DEFB $20,$00,$00,$00,$20,$18,$40,$11 ;
 $7CE7 DEFB $00,$02,$00,$60,$30,$00,$03,$20 ;
 $7CEF DEFB $26,$04,$E0,$00,$00,$03,$E0,$3E ;
 $7CF7 DEFB $0D,$F0,$00,$7C,$03,$F0,$7F,$1F ;
 $7CFF DEFB $F0,$01,$FE,$07,$F8,$7F,$3F,$F2 ;
 $7D07 DEFB $03,$F7,$07,$FC,$83,$80,$FE,$07 ;
 $7D0F DEFB $FF,$0E,$FC,$00,$C0,$FC,$0F,$FF ;
 $7D17 DEFB $1E,$FC,$00,$00,$DC,$1F,$FF,$3C ;
 $7D1F DEFB $6C,$08,$00,$5C,$1F,$F8,$00,$6C ;
 $7D27 DEFB $1A,$40,$4C,$1F,$F6,$10,$44,$7F ;
 $7D2F DEFB $40,$02,$3F,$A2,$7A,$00,$7F,$C0 ;
 $7D37 DEFB $00,$7F,$80,$FE,$00,$FF,$C0,$00 ;
 $7D3F DEFB $7D,$00,$FE,$81,$FF,$C0,$00,$3C ;
 $7D47 DEFB $01,$FE,$83,$FF,$E0,$00,$30,$03 ;
 $7D4F DEFB $FE,$C3,$73,$E0,$20,$20,$07,$F3 ;
 $7D57 DEFB $C3,$49,$F0,$7C,$00,$07,$F8,$E3 ;
 $7D5F DEFB $40,$F0,$FC,$00,$0F,$B8,$E7,$00 ;
 $7D67 DEFB $F0,$FE,$00,$9F,$80,$D7,$00,$B0 ;
 $7D6F DEFB $FE,$01,$9F,$80,$C7,$00,$18,$FA ;
 $7D77 DEFB $03,$DD,$FF,$00,$00,$00,$DA,$03 ;
 $7D7F DEFB $FC,$EE,$00,$00,$01,$88,$07,$FC ;
 $7D87 DEFB $E6,$00,$00,$01,$08,$07,$74,$E0 ;
 $7D8F DEFB $00,$00,$10,$00,$0F,$10,$F0,$00 ;
 $7D97 DEFB $00,$70,$00,$1C,$00,$F0,$04,$00 ;
 $7D9F DEFB $F0,$00,$70,$00,$F0,$0E,$05,$F6 ;
 $7DA7 DEFB $00,$00,$00,$38,$7E,$1F,$FE,$00 ;
 $7DAF DEFB $00,$7F,$00,$FF,$1E,$FF,$00,$00 ;
 $7DB7 DEFB $0E,$01,$FC,$BF,$7E,$80,$01,$88 ;
 $7DBF DEFB $01,$F8,$9F,$38,$E0,$03,$C8,$03 ;
 $7DC7 DEFB $FC,$8F,$10,$F8,$03,$E0,$07,$CE ;
 $7DCF DEFB $C7,$10,$E0,$07,$F0,$07,$C0,$E3 ;
 $7DD7 DEFB $00,$F0,$07,$F1,$1F,$60,$F8,$00 ;
 $7DDF DEFB $FC,$07,$FE,$1F,$30,$FE,$00,$FE ;
 $7DE7 DEFB $07,$00,$3F,$FF,$00,$00,$E0,$07 ;
 $7DEF DEFB $80,$36,$FF,$00,$00,$60,$0F,$80 ;
 $7DF7 DEFB $44,$FC,$00,$00,$20,$2F,$C0,$0C ;
 $7DFF DEFB $5C,$00,$40,$00,$3F,$C0,$08,$5C ;
 $7E07 DEFB $00,$E0,$00,$3F,$E0,$00,$0C,$05 ;
 $7E0F DEFB $F3,$00,$7F,$F0,$00,$0C,$0F,$FF ;
 $7E17 DEFB $00,$FF,$08,$00,$04,$0F,$FF,$00 ; }
; Attributes.
 $7E1F DEFB $06                             ; Height = #N(#PEEK(#PC)) bytes.
 $7E20 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $7E21 DEFB $78,$78,$78,$78,$78,$58,$58,$58 ; {Attribute data.
 $7E29 DEFB $58,$78,$58,$78,$78,$58,$58,$78 ;
 $7E31 DEFB $7B,$58,$7B,$58,$78,$78,$7B,$58 ;
 $7E39 DEFB $78,$78,$78,$78,$78,$58,$78,$7B ;
 $7E41 DEFB $58,$7B,$58,$78,$7B,$78,$58,$78 ;
 $7E49 DEFB $78,$58                         ; }

; Background Graphic #N$10
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$7E4B DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $7E4C DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $7E4D DEFB $00,$00,$0C,$00,$00,$00,$00,$00 ; {Pixel data.
 $7E55 DEFB $00,$00,$9E,$00,$00,$00,$00,$00 ;
 $7E5D DEFB $00,$00,$FF,$00,$00,$00,$00,$00 ;
 $7E65 DEFB $00,$01,$FF,$00,$07,$00,$00,$00 ;
 $7E6D DEFB $00,$01,$FF,$80,$0F,$C0,$00,$00 ;
 $7E75 DEFB $00,$03,$FF,$80,$1F,$E0,$00,$00 ;
 $7E7D DEFB $00,$07,$FF,$80,$3F,$F0,$00,$00 ;
 $7E85 DEFB $00,$07,$FF,$80,$FF,$F8,$00,$00 ;
 $7E8D DEFB $00,$0F,$FF,$C1,$FD,$C0,$10,$00 ;
 $7E95 DEFB $00,$0F,$FF,$C1,$F0,$C0,$38,$00 ;
 $7E9D DEFB $00,$0F,$F5,$C3,$B0,$43,$78,$00 ;
 $7EA5 DEFB $00,$3F,$E0,$C7,$14,$03,$7C,$00 ;
 $7EAD DEFB $00,$7F,$E4,$E0,$02,$07,$BC,$00 ;
 $7EB5 DEFB $00,$FF,$E2,$E6,$02,$07,$DC,$00 ;
 $7EBD DEFB $00,$FF,$61,$FE,$00,$03,$DC,$00 ;
 $7EC5 DEFB $01,$F7,$30,$7F,$00,$1B,$FE,$00 ;
 $7ECD DEFB $03,$F7,$FF,$BF,$3E,$3F,$FE,$00 ;
 $7ED5 DEFB $03,$F1,$FF,$CF,$8C,$7F,$FE,$00 ;
 $7EDD DEFB $07,$F0,$FF,$F7,$84,$7F,$FE,$40 ;
 $7EE5 DEFB $07,$F0,$FF,$FB,$C0,$FF,$FD,$A0 ;
 $7EED DEFB $0F,$90,$7F,$7D,$C0,$F7,$E5,$F0 ;
 $7EF5 DEFB $1F,$80,$7E,$3F,$C0,$FB,$FB,$B8 ;
 $7EFD DEFB $3F,$80,$66,$39,$C1,$F9,$F3,$DC ;
 $7F05 DEFB $7F,$00,$A0,$18,$E1,$FD,$37,$DE ;
 $7F0D DEFB $FF,$FF,$00,$00,$03,$FC,$0F,$E0 ;
 $7F15 DEFB $FB,$FC,$00,$00,$0F,$FE,$0F,$E0 ;
 $7F1D DEFB $E1,$F8,$00,$00,$03,$FE,$1F,$F0 ;
 $7F25 DEFB $00,$F8,$00,$30,$07,$F7,$1F,$F0 ;
 $7F2D DEFB $00,$FC,$30,$7C,$07,$F9,$3F,$98 ;
 $7F35 DEFB $00,$FE,$78,$7F,$07,$F8,$3F,$C0 ;
 $7F3D DEFB $00,$80,$78,$FF,$8F,$FC,$7F,$C0 ;
 $7F45 DEFB $00,$80,$FF,$FF,$EF,$F4,$FD,$C0 ;
 $7F4D DEFB $00,$0F,$C3,$FC,$0F,$E1,$FE,$E0 ;
 $7F55 DEFB $00,$7F,$81,$F0,$0F,$C7,$FE,$20 ;
 $7F5D DEFB $01,$FF,$00,$60,$1F,$8F,$EE,$20 ;
 $7F65 DEFB $0F,$FF,$00,$30,$1E,$1F,$82,$00 ;
 $7F6D DEFB $1F,$E7,$00,$00,$3E,$3F,$10,$00 ;
 $7F75 DEFB $3F,$E3,$CE,$04,$7C,$7F,$08,$10 ;
 $7F7D DEFB $7F,$30,$E3,$04,$0C,$63,$08,$10 ;
 $7F85 DEFB $87,$00,$21,$04,$01,$C0,$04,$08 ;
 $7F8D DEFB $03,$FF,$00,$82,$03,$C4,$06,$04 ;
 $7F95 DEFB $00,$FF,$00,$00,$06,$04,$00,$04 ;
 $7F9D DEFB $00,$EF,$01,$C0,$1C,$08,$07,$00 ;
 $7FA5 DEFB $00,$E7,$03,$E0,$38,$0C,$0F,$80 ;
 $7FAD DEFB $00,$E3,$07,$F8,$60,$18,$3E,$E0 ;
 $7FB5 DEFB $00,$E3,$0F,$FC,$00,$30,$7C,$70 ;
 $7FBD DEFB $00,$61,$1F,$FE,$00,$60,$FC,$78 ;
 $7FC5 DEFB $00,$20,$7F,$FF,$01,$80,$FC,$7E ;
 $7FCD DEFB $FE,$01,$FF,$FF,$C0,$01,$FF,$C0 ;
 $7FD5 DEFB $EC,$07,$FF,$F8,$20,$03,$FE,$E0 ;
 $7FDD DEFB $E0,$7F,$FF,$F8,$00,$03,$FE,$60 ;
 $7FE5 DEFB $40,$FF,$DF,$D8,$06,$07,$F6,$10 ;
 $7FED DEFB $0F,$FF,$4F,$CC,$07,$DF,$F9,$00 ;
 $7FF5 DEFB $FF,$FF,$46,$46,$07,$FF,$F8,$00 ;
 $7FFD DEFB $FF,$FF,$02,$00,$00,$FF,$C8,$00 ;
 $8005 DEFB $FF,$FF,$00,$00,$00,$1F,$C0,$00 ; }
; Attributes.
 $800D DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $800E DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $800F DEFB $78,$78,$78,$78,$78,$78,$78,$78 ; {Attribute data.
 $8017 DEFB $78,$78,$7B,$58,$7B,$7B,$78,$78 ;
 $801F DEFB $78,$7B,$58,$58,$58,$78,$7B,$78 ;
 $8027 DEFB $7B,$58,$78,$78,$78,$7B,$7B,$7B ;
 $802F DEFB $7B,$7B,$7B,$7B,$7B,$7B,$7B,$7B ;
 $8037 DEFB $7B,$58,$7B,$7B,$7B,$7B,$7B,$7B ;
 $803F DEFB $58,$58,$7B,$7B,$7B,$7B,$7B,$7B ; }

; Background Graphic #N$11
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8047 DEFB $30                             ; Height = #N(#PEEK(#PC)) pixels.
 $8048 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $8049 DEFB $FE,$FF,$00,$00,$1F,$FF,$80,$4C ; {Pixel data.
 $8051 DEFB $FE,$00,$00,$17,$FC,$80,$48,$6E ;
 $8059 DEFB $00,$00,$37,$F8,$80,$08,$67,$07 ;
 $8061 DEFB $00,$37,$F8,$80,$00,$41,$0F,$80 ;
 $8069 DEFB $7B,$F0,$80,$00,$00,$3F,$80,$79 ;
 $8071 DEFB $98,$C0,$00,$00,$FF,$C0,$7D,$88 ;
 $8079 DEFB $D0,$0C,$01,$FF,$C0,$FF,$88,$F0 ;
 $8081 DEFB $1E,$03,$FF,$C0,$FF,$FF,$FF,$3E ;
 $8089 DEFB $07,$FE,$C1,$FF,$F7,$FF,$3F,$0F ;
 $8091 DEFB $FE,$E1,$73,$F7,$FF,$77,$1F,$98 ;
 $8099 DEFB $F3,$70,$F3,$F8,$75,$3F,$98,$FF ;
 $80A1 DEFB $38,$F3,$F8,$B0,$3F,$40,$FF,$18 ;
 $80A9 DEFB $F1,$F8,$20,$3F,$02,$C3,$08,$F1 ;
 $80B1 DEFB $FC,$20,$7F,$00,$80,$00,$F1,$FC ;
 $80B9 DEFB $00,$70,$F0,$00,$0F,$F1,$FE,$00 ;
 $80C1 DEFB $F0,$7B,$03,$C7,$E1,$FE,$00,$80 ;
 $80C9 DEFB $6B,$07,$F3,$61,$FE,$00,$86,$21 ;
 $80D1 DEFB $0F,$F8,$61,$FE,$00,$0F,$00,$1F ;
 $80D9 DEFB $FC,$00,$EE,$00,$1F,$00,$3F,$FF ;
 $80E1 DEFB $80,$C6,$00,$3F,$80,$7F,$FF,$81 ;
 $80E9 DEFB $C2,$00,$7F,$C0,$FB,$FB,$81,$C0 ;
 $80F1 DEFB $00,$FF,$C1,$F8,$FB,$80,$C0,$01 ;
 $80F9 DEFB $FF,$E3,$7C,$FB,$C0,$80,$01,$FC ;
 $8101 DEFB $F7,$2E,$F9,$C0,$00,$03,$FC,$F3 ;
 $8109 DEFB $06,$F8,$E0,$00,$03,$FE,$F9,$20 ;
 $8111 DEFB $F8,$E0,$00,$07,$E6,$FD,$20,$B8 ;
 $8119 DEFB $70,$00,$07,$F2,$FC,$10,$BC,$70 ;
 $8121 DEFB $00,$07,$C0,$FE,$00,$BC,$30,$00 ;
 $8129 DEFB $0F,$E0,$FE,$7F,$3E,$30,$00,$0F ;
 $8131 DEFB $E0,$EF,$7F,$3E,$18,$00,$0F,$F4 ;
 $8139 DEFB $EF,$3F,$3C,$18,$00,$0F,$32,$F7 ;
 $8141 DEFB $89,$2C,$08,$00,$1F,$01,$F7,$80 ;
 $8149 DEFB $04,$0C,$00,$1F,$01,$F3,$C0,$00 ;
 $8151 DEFB $06,$00,$3F,$00,$FB,$F0,$00,$03 ;
 $8159 DEFB $80,$7F,$00,$F9,$FC,$00,$00,$E0 ;
 $8161 DEFB $7C,$FF,$F8,$1E,$03,$80,$01,$1E ;
 $8169 DEFB $FE,$78,$01,$07,$80,$00,$07,$CE ;
 $8171 DEFB $3C,$00,$0F,$C0,$00,$00,$86,$1C ;
 $8179 DEFB $00,$0F,$E0,$00,$00,$02,$06,$00 ;
 $8181 DEFB $1F,$E0,$00,$00,$00,$02,$00,$3F ;
 $8189 DEFB $E0,$00,$00,$00,$00,$00,$7F,$F8 ;
 $8191 DEFB $00,$00,$00,$00,$00,$FF,$F8,$00 ; }
; Attributes.
 $8199 DEFB $06                             ; Height = #N(#PEEK(#PC)) bytes.
 $819A DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $819B DEFB $78,$58,$78,$78,$7B,$7B,$58,$58 ; {Attribute data.
 $81A3 DEFB $78,$7B,$58,$7B,$58,$58,$78,$78 ;
 $81AB DEFB $58,$78,$58,$58,$58,$78,$7B,$58 ;
 $81B3 DEFB $7B,$58,$58,$58,$78,$7B,$58,$58 ;
 $81BB DEFB $58,$58,$58,$78,$58,$58,$58,$78 ;
 $81C3 DEFB $78,$78                         ; }

; Background Graphic #N$12
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$81C5 DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $81C6 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $81C7 DEFB $00,$07,$E0,$00,$FF,$FE,$00,$00 ; {Pixel data.
 $81CF DEFB $1F,$F0,$00,$FF,$4E,$80,$00,$7F ;
 $81D7 DEFB $F8,$01,$FE,$06,$E0,$00,$7F,$BC ;
 $81DF DEFB $03,$FE,$40,$F0,$00,$FF,$DC,$07 ;
 $81E7 DEFB $FC,$24,$F0,$00,$FF,$DE,$0F,$FC ;
 $81EF DEFB $10,$F8,$01,$FF,$EE,$1F,$F8,$08 ;
 $81F7 DEFB $F8,$01,$FF,$EF,$3F,$F8,$00,$F8 ;
 $81FF DEFB $03,$FF,$EC,$FF,$F8,$FF,$F8,$07 ;
 $8207 DEFB $7F,$F9,$FF,$6C,$7F,$FC,$0F,$2E ;
 $820F DEFB $F3,$3E,$60,$3E,$FE,$1F,$04,$E7 ;
 $8217 DEFB $04,$20,$3E,$7E,$1F,$10,$CF,$00 ;
 $821F DEFB $02,$3E,$0E,$3D,$10,$9F,$00,$21 ;
 $8227 DEFB $9E,$02,$38,$08,$BF,$00,$1C,$8F ;
 $822F DEFB $00,$78,$00,$3F,$00,$00,$87,$00 ;
 $8237 DEFB $00,$FF,$7E,$FF,$7F,$00,$00,$00 ;
 $823F DEFB $9A,$B8,$47,$0E,$00,$30,$00,$08 ;
 $8247 DEFB $A0,$03,$02,$00,$78,$00,$01,$00 ;
 $824F DEFB $02,$00,$60,$7C,$00,$00,$00,$00 ;
 $8257 DEFB $00,$EC,$FC,$00,$00,$00,$00,$00 ;
 $825F DEFB $FE,$24,$00,$00,$00,$00,$00,$FE ;
 $8267 DEFB $22,$00,$00,$00,$00,$01,$FF,$00 ;
 $826F DEFB $00,$01,$80,$18,$07,$FF,$00,$00 ;
 $8277 DEFB $03,$C0,$78,$1F,$FF,$80,$00,$0F ;
 $827F DEFB $C0,$7C,$7F,$F9,$C0,$00,$1F,$C0 ;
 $8287 DEFB $FE,$FF,$F0,$C0,$00,$3F,$E1,$EC ;
 $828F DEFB $FF,$F0,$E0,$00,$7F,$E3,$64,$FF ;
 $8297 DEFB $F8,$E0,$00,$FF,$F4,$41,$FF,$F8 ;
 $829F DEFB $F0,$00,$FF,$F8,$03,$DF,$FC,$F8 ;
 $82A7 DEFB $01,$FF,$EC,$07,$CF,$0C,$DC,$01 ;
 $82AF DEFB $B7,$EE,$0F,$C6,$00,$DC,$03,$17 ;
 $82B7 DEFB $E7,$1F,$44,$00,$EE,$07,$12,$F3 ;
 $82BF DEFB $3F,$20,$00,$EE,$0F,$00,$F8,$7F ;
 $82C7 DEFB $20,$00,$FE,$1F,$00,$E0,$FF,$00 ;
 $82CF DEFB $00,$F6,$3F,$00,$C3,$F7,$00,$00 ;
 $82D7 DEFB $76,$73,$00,$0F,$CF,$00,$00,$7B ;
 $82DF DEFB $E3,$3E,$3E,$3F,$FF,$BF,$3B,$02 ;
 $82E7 DEFB $18,$78,$FF,$FF,$1E,$3B,$00,$01 ;
 $82EF DEFB $C3,$FF,$FF,$04,$1B,$01,$CF,$8F ;
 $82F7 DEFB $FF,$FC,$10,$13,$1F,$FE,$1F,$FF ;
 $82FF DEFB $F8,$10,$01,$07,$F8,$3F,$FC,$30 ;
 $8307 DEFB $18,$05,$00,$00,$F7,$F8,$60,$1C ;
 $830F DEFB $04,$00,$03,$EF,$F8,$60,$0E,$00 ;
 $8317 DEFB $00,$0F,$DE,$30,$00,$1F,$04,$03 ;
 $831F DEFB $FE,$3C,$10,$1C,$1F,$02,$01,$F8 ;
 $8327 DEFB $7C,$00,$3C,$0F,$18,$00,$00,$C0 ;
 $832F DEFB $00,$3E,$00,$00,$00,$01,$00,$00 ;
 $8337 DEFB $7E,$00,$00,$00,$00,$00,$00,$7F ;
 $833F DEFB $00,$00,$00,$00,$00,$00,$8D,$00 ;
 $8347 DEFB $00,$00,$00,$00,$00,$04,$00,$00 ; }
; Attributes.
 $834F DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $8350 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $8351 DEFB $78,$78,$58,$78,$7B,$7B,$58,$58 ; {Attribute data.
 $8359 DEFB $7B,$58,$7B,$7B,$58,$58,$58,$58 ;
 $8361 DEFB $58,$58,$58,$78,$78,$78,$78,$58 ;
 $8369 DEFB $78,$78,$7B,$58,$58,$7B,$58,$58 ;
 $8371 DEFB $7B,$7B,$58,$58,$58,$58,$58,$58 ;
 $8379 DEFB $58,$58,$58,$58,$58,$58,$78,$58 ;
 $8381 DEFB $58                             ; }

; Background Graphic #N$13
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8382 DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $8383 DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $8384 DEFB $01,$07,$1F,$3F,$7F,$FF,$1F,$0F ; {Pixel data.
 $838C DEFB $0F,$1F,$1F,$3F,$0F,$03,$00,$00 ;
 $8394 DEFB $01,$07,$0F,$1F,$1F,$3F,$77,$01 ;
 $839C DEFB $00,$00,$00,$00,$00,$09,$1F,$7F ; }
; Attributes.
 $83A4 DEFB $04                             ; Height = #N(#PEEK(#PC)) bytes.
 $83A5 DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $83A6 DEFB $58,$58,$58,$58                 ; Attribute data.

; Background Graphic #N$14
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$83AA DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $83AB DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $83AC DEFB $80,$C0,$C0,$C0,$C0,$E0,$E0,$E0 ; {Pixel data.
 $83B4 DEFB $E0,$F8,$F8,$FC,$FC,$FC,$FE,$FE ;
 $83BC DEFB $FE,$FF,$FF,$FF,$FD,$FC,$E0,$00 ;
 $83C4 DEFB $80,$C0,$F0,$FF,$FE,$F0,$F0,$E0 ; }
; Attributes.
 $83CC DEFB $04                             ; Height = #N(#PEEK(#PC)) bytes.
 $83CD DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $83CE DEFB $58,$58,$58,$58                 ; Attribute data.

; Background Graphic #N$15
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$83D2 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $83D3 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $83D4 DEFB $86,$47,$8F,$B7,$FE,$6F,$0F,$DE ; {Pixel data.
 $83DC DEFB $F6,$FF,$D8,$F0,$FF,$5A,$70,$F0 ;
 $83E4 DEFB $BB,$A0,$EF,$FB,$B0,$FF,$D3,$C0 ;
 $83EC DEFB $FF,$DD,$80,$FF,$DD,$80,$FF,$DE ;
 $83F4 DEFB $00,$FF,$DE,$00,$FF,$DF,$00,$F7 ;
 $83FC DEFB $8E,$00,$F7,$78,$00,$F7,$7E,$00 ;
 $8404 DEFB $F7,$7E,$00,$E7,$7C,$00,$E7,$80 ;
 $840C DEFB $63,$E7,$BE,$CE,$E7,$7E,$DE,$CF ;
 $8414 DEFB $7F,$3E,$BF,$7F,$7C,$8D,$BF,$18 ; }
; Attributes.
 $841C DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $841D DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $841E DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8426 DEFB $70                             ; }

; Background Graphic #N$16
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8427 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $8428 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $8429 DEFB $0C,$06,$1E,$1E,$7F,$F8,$BF,$7F ; {Pixel data.
 $8431 DEFB $DF,$FF,$7F,$DF,$FD,$3F,$DF,$33 ;
 $8439 DEFB $BF,$9F,$0F,$87,$9F,$0F,$73,$9F ;
 $8441 DEFB $06,$FB,$8F,$01,$FB,$8F,$01,$F0 ;
 $8449 DEFB $8F,$00,$CE,$5F,$00,$3F,$5F,$00 ;
 $8451 DEFB $7F,$5F,$00,$7E,$5B,$00,$70,$FB ;
 $8459 DEFB $00,$07,$6B,$03,$3F,$6B,$67,$7F ;
 $8461 DEFB $7B,$62,$7E,$79,$3C,$00,$F9,$7E ;
 $8469 DEFB $7F,$79,$7E,$FF,$7D,$4E,$FE,$85 ; }
; Attributes.
 $8471 DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $8472 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $8473 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $847B DEFB $70                             ; }

; Background Graphic #N$17
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$847C DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $847D DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $847E DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {Pixel data.
 $8486 DEFB $0F,$FF,$FF,$FF,$C0,$FF,$FC,$03 ;
 $848E DEFB $07,$FF,$07,$F0,$3C,$1F,$E0,$F8 ;
 $8496 DEFB $F0,$00,$36,$07,$FF,$87,$CF,$FF ;
 $849E DEFB $F7,$FD,$F1,$E7,$FF,$F8,$1F,$FF ;
 $84A6 DEFB $F7,$FF,$F7,$E7,$FF,$FB,$DF,$FF ;
 $84AE DEFB $F7,$FE,$F7,$E7,$7F,$F3,$DF,$FF ;
 $84B6 DEFB $F7,$FE,$F7,$EF,$7F,$F7,$9F,$FF ;
 $84BE DEFB $F7,$FE,$F7,$EF,$7F,$F7,$9F,$FF ;
 $84C6 DEFB $7F,$FE,$F7,$EF,$3D,$F7,$9F,$F7 ;
 $84CE DEFB $F7,$FE,$F7,$EF,$3D,$F7,$BF,$F7 ;
 $84D6 DEFB $F7,$F4,$F7,$AF,$3B,$F7,$BF,$F7 ;
 $84DE DEFB $FF,$F5,$F7,$BE,$1B,$BF,$BF,$F7 ;
 $84E6 DEFB $FF,$F5,$F7,$BE,$1B,$BF,$BF,$F7 ;
 $84EE DEFB $FF,$E5,$FF,$BE,$1B,$BF,$BF,$EF ;
 $84F6 DEFB $CF,$E9,$FF,$BE,$1B,$BF,$FF,$EF ;
 $84FE DEFB $CF,$E9,$FF,$BE,$1B,$BF,$FF,$EF ;
 $8506 DEFB $C7,$EB,$FF,$9C,$13,$9F,$0F,$EF ;
 $850E DEFB $97,$CB,$FF,$9C,$93,$9C,$F3,$E7 ;
 $8516 DEFB $97,$CF,$FF,$9C,$5B,$9B,$FD,$C7 ;
 $851E DEFB $9F,$81,$FF,$9C,$30,$0B,$E5,$C7 ;
 $8526 DEFB $E0,$79,$FF,$9C,$00,$6B,$85,$E7 ;
 $852E DEFB $8D,$FC,$3F,$9A,$00,$E0,$F8,$07 ;
 $8536 DEFB $0D,$FC,$00,$58,$00,$E0,$00,$00 ; }
; Attributes.
 $853E DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $853F DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $8540 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8548 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ;
 $8550 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; }

; Background Graphic #N$18
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8558 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $8559 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $855A DEFB $FF,$FF,$FF,$FF,$C3,$87,$FF,$FF ; {Pixel data.
 $8562 DEFB $18,$31,$FF,$F0,$D9,$FC,$E1,$87 ;
 $856A DEFB $D9,$FE,$0E,$0F,$D9,$FF,$FF,$8F ;
 $8572 DEFB $D9,$FD,$FF,$8F,$DB,$FD,$FF,$CF ;
 $857A DEFB $BB,$BD,$FF,$CF,$BB,$BD,$FF,$CF ;
 $8582 DEFB $BB,$BD,$FF,$CF,$BF,$BD,$FF,$EF ;
 $858A DEFB $BF,$3D,$FF,$EF,$FF,$3B,$FF,$6F ;
 $8592 DEFB $FF,$3B,$FF,$6F,$FF,$37,$FF,$7F ;
 $859A DEFB $FE,$37,$FF,$7F,$FE,$3B,$F7,$7F ;
 $85A2 DEFB $FE,$3D,$F7,$7F,$FE,$3D,$F6,$7F ;
 $85AA DEFB $FC,$7E,$F6,$7F,$FD,$1F,$F6,$7F ;
 $85B2 DEFB $3E,$0F,$F6,$61,$00,$03,$E0,$00 ; }
; Attributes.
 $85BA DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $85BB DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $85BC DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $85C4 DEFB $70,$70,$70,$70                 ; }

; Background Graphic #N$19
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$85C8 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $85C9 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $85CA DEFB $00,$00,$00,$30,$00,$00,$00,$07 ; {Pixel data.
 $85D2 DEFB $01,$F8,$00,$00,$00,$1F,$7F,$FE ;
 $85DA DEFB $7E,$00,$00,$3F,$F1,$FF,$81,$00 ;
 $85E2 DEFB $00,$FF,$3E,$3F,$E0,$80,$03,$FF ;
 $85EA DEFB $3F,$C7,$F8,$40,$0F,$80,$FF,$F8 ;
 $85F2 DEFB $FE,$20,$00,$00,$FE,$D4,$18,$10 ;
 $85FA DEFB $1F,$00,$7F,$6A,$C8,$10,$1F,$F8 ;
 $8602 DEFB $7F,$B5,$48,$08,$1F,$FF,$3F,$DA ;
 $860A DEFB $C4,$08,$1F,$F9,$FF,$ED,$44,$08 ;
 $8612 DEFB $3F,$E7,$FF,$EE,$C4,$08,$3F,$9F ;
 $861A DEFB $FF,$DF,$62,$08,$3E,$7F,$F8,$1C ;
 $8622 DEFB $92,$08,$39,$FF,$C7,$E5,$2A,$08 ;
 $862A DEFB $2D,$FF,$3B,$1B,$65,$08,$1B,$FC ;
 $8632 DEFB $CC,$06,$8B,$18,$3B,$E3,$30,$03 ;
 $863A DEFB $01,$24,$37,$9E,$20,$03,$A0,$24 ;
 $8642 DEFB $37,$FE,$40,$01,$C0,$42,$2F,$FC ;
 $864A DEFB $80,$01,$E0,$32,$2F,$B8,$80,$00 ;
 $8652 DEFB $E0,$0D,$1F,$B9,$00,$00,$F0,$83 ;
 $865A DEFB $1F,$71,$00,$00,$79,$41,$37,$76 ;
 $8662 DEFB $00,$00,$42,$41,$3B,$69,$00,$00 ;
 $866A DEFB $7C,$E1,$7C,$71,$00,$00,$F8,$A2 ;
 $8672 DEFB $7E,$73,$00,$00,$F0,$A2,$FE,$7D ;
 $867A DEFB $00,$00,$00,$A2,$FC,$F1,$00,$00 ;
 $8682 DEFB $E0,$A2,$FC,$E2,$00,$00,$70,$A4 ;
 $868A DEFB $FC,$E6,$00,$00,$38,$A4,$F8,$F9 ;
 $8692 DEFB $00,$00,$58,$A4,$F8,$F1,$00,$00 ;
 $869A DEFB $61,$24,$70,$F9,$00,$00,$F9,$24 ;
 $86A2 DEFB $30,$FA,$00,$00,$F9,$24,$1F,$FE ;
 $86AA DEFB $00,$00,$71,$18,$01,$FC,$00,$00 ;
 $86B2 DEFB $31,$10,$01,$E0,$00,$00,$0F,$E0 ; }
; Attributes.
 $86BA DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $86BB DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $86BC DEFB $38,$38,$38,$38,$38,$38,$38,$38 ; {Attribute data.
 $86C4 DEFB $38,$38,$38,$38,$38,$38,$38,$38 ;
 $86CC DEFB $38,$38,$38,$38,$38,$38,$38,$38 ;
 $86D4 DEFB $38,$38,$38,$38,$38,$38         ; }

; Background Graphic #N$1A
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$86DA DEFB $08                             ; Height = #N(#PEEK(#PC)) pixels.
 $86DB DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $86DC DEFB $7F,$FF,$FF,$FE,$FF,$FF,$F0,$39 ; {Pixel data.
 $86E4 DEFB $FF,$FF,$FE,$C7,$FF,$7F,$FF,$FF ;
 $86EC DEFB $F7,$FF,$FF,$BF,$FF,$FF,$FF,$FF ;
 $86F4 DEFB $FF,$FF,$F7,$FF,$FF,$FF,$FF,$FF ; }
; Attributes.
 $86FC DEFB $01                             ; Height = #N(#PEEK(#PC)) bytes.
 $86FD DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $86FE DEFB $70,$70,$70,$70                 ; Attribute data.

; Background Graphic #N$1B
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8702 DEFB $08                             ; Height = #N(#PEEK(#PC)) pixels.
 $8703 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8704 DEFB $00,$00,$00,$00,$E0,$00,$00,$1F ; {Pixel data.
 $870C DEFB $E7,$E0,$7B,$3F,$F3,$F9,$FF,$3B ;
 $8714 DEFB $F3,$9F,$FF,$3F,$F1,$9F,$FF,$BF ;
 $871C DEFB $F9,$FF,$F9,$9F,$BB,$FF,$79,$DF ; }
; Attributes.
 $8724 DEFB $01                             ; Height = #N(#PEEK(#PC)) bytes.
 $8725 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8726 DEFB $70,$70,$70,$70                 ; Attribute data.

; Background Graphic #N$1C
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$872A DEFB $30                             ; Height = #N(#PEEK(#PC)) pixels.
 $872B DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $872C DEFB $FB,$FF,$BF,$FF,$FF,$FF,$8F,$BF ; {Pixel data.
 $8734 DEFB $7F,$FB,$D7,$FF,$80,$1F,$D7,$F8 ;
 $873C DEFB $FE,$E7,$91,$E3,$FE,$F8,$06,$03 ;
 $8744 DEFB $FE,$FF,$97,$E3,$FE,$FF,$87,$E3 ;
 $874C DEFB $EF,$7F,$97,$E3,$EF,$7F,$87,$E7 ;
 $8754 DEFB $EF,$F3,$97,$67,$EF,$F3,$87,$E7 ;
 $875C DEFB $E7,$FF,$87,$E7,$F7,$FF,$87,$E7 ;
 $8764 DEFB $F7,$3F,$87,$F7,$F7,$BF,$C7,$F5 ;
 $876C DEFB $F3,$FF,$CF,$F7,$F3,$FF,$CF,$F7 ;
 $8774 DEFB $FB,$FF,$CE,$F7,$F9,$FF,$CF,$F7 ;
 $877C DEFB $F9,$FF,$CF,$FF,$FD,$FF,$CF,$FF ;
 $8784 DEFB $BC,$FF,$CF,$FF,$FC,$FF,$CF,$F9 ;
 $878C DEFB $F8,$7F,$CF,$F9,$F8,$7F,$CF,$FF ;
 $8794 DEFB $F0,$7D,$CF,$DF,$F0,$7D,$EF,$DF ;
 $879C DEFB $F1,$7D,$EF,$9F,$F3,$3D,$EF,$9F ;
 $87A4 DEFB $F3,$3D,$EF,$9F,$E7,$3D,$EF,$0F ;
 $87AC DEFB $E7,$BD,$EF,$0F,$E7,$BD,$EF,$8F ;
 $87B4 DEFB $EF,$FC,$EF,$8F,$EF,$FC,$FF,$87 ;
 $87BC DEFB $EF,$FC,$FF,$87,$EF,$FC,$FB,$C7 ;
 $87C4 DEFB $FF,$FC,$FD,$C7,$FF,$FC,$7D,$C7 ;
 $87CC DEFB $EF,$FC,$7D,$CF,$EF,$FC,$7F,$CF ;
 $87D4 DEFB $EF,$7C,$7F,$CF,$FF,$7E,$7F,$C7 ;
 $87DC DEFB $7F,$7E,$3B,$87,$00,$7E,$3B,$0C ;
 $87E4 DEFB $00,$3E,$0B,$00,$00,$0E,$03,$00 ; }
; Attributes.
 $87EC DEFB $06                             ; Height = #N(#PEEK(#PC)) bytes.
 $87ED DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $87EE DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $87F6 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ;
 $87FE DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; }

; Background Graphic #N$1D
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8806 DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $8807 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $8808 DEFB $00,$00,$00,$3F,$80,$3F,$00,$00 ; {Pixel data.
 $8810 DEFB $00,$00,$E1,$E3,$FF,$80,$3F,$80 ;
 $8818 DEFB $3F,$CE,$F7,$FF,$80,$FF,$E1,$FF ;
 $8820 DEFB $B8,$FF,$F7,$C0,$FF,$FF,$FF,$B0 ;
 $8828 DEFB $FF,$73,$C0,$FF,$7F,$E3,$D1,$FF ;
 $8830 DEFB $7F,$E0,$FF,$E7,$E7,$FF,$FF,$3F ;
 $8838 DEFB $E0,$FF,$E7,$FF,$FF,$FF,$3F,$F0 ;
 $8840 DEFB $FF,$FF,$BF,$FF,$FF,$03,$F0,$FF ;
 $8848 DEFB $FF,$FF,$30,$FF,$3C,$F8,$C0,$7F ;
 $8850 DEFB $FF,$87,$8C,$3F,$38,$07,$9F,$00 ;
 $8858 DEFB $07,$E3,$1F,$CC,$07,$E0,$FF,$0F ;
 $8860 DEFB $FF,$0F,$F0,$87,$FF,$FF,$1F,$FF ;
 $8868 DEFB $73,$98,$87,$7F,$FF,$1F,$FF,$FD ;
 $8870 DEFB $98,$C7,$FF,$FE,$0F,$FF,$FE,$F0 ;
 $8878 DEFB $C3,$FF,$EE,$1F,$01,$FF,$40,$83 ;
 $8880 DEFB $FC,$EE,$1F,$03,$DF,$00,$83,$FC ;
 $8888 DEFB $DF,$3F,$01,$F6,$00,$83,$FF,$DF ;
 $8890 DEFB $3F,$1C,$F6,$00,$C7,$FF,$BF,$7F ;
 $8898 DEFB $3F,$7C,$00,$E7,$DF,$BE,$7F,$7F ;
 $88A0 DEFB $B8,$00,$E7,$FF,$BF,$3F,$FF,$D8 ;
 $88A8 DEFB $00,$E3,$FF,$3F,$3F,$FF,$C0,$00 ;
 $88B0 DEFB $E3,$FF,$7E,$00,$FF,$C0,$00,$E3 ;
 $88B8 DEFB $FF,$7E,$00,$7B,$C0,$00,$E3,$FD ;
 $88C0 DEFB $7E,$01,$9F,$C0,$00,$E3,$DF,$7F ;
 $88C8 DEFB $03,$E7,$C0,$00,$E3,$FB,$3F,$07 ;
 $88D0 DEFB $F9,$80,$00,$EB,$FF,$1F,$0F,$FD ;
 $88D8 DEFB $00,$00,$EB,$DF,$9F,$1F,$FE,$00 ;
 $88E0 DEFB $00,$CD,$DF,$CF,$1F,$FE,$00,$00 ;
 $88E8 DEFB $ED,$DF,$CF,$1F,$FE,$00,$00,$6D ;
 $88F0 DEFB $DF,$EF,$0F,$EC,$00,$00,$ED,$EB ;
 $88F8 DEFB $EC,$07,$0C,$00,$00,$DD,$EB,$EC ;
 $8900 DEFB $19,$E4,$00,$00,$DD,$F3,$EF,$3E ;
 $8908 DEFB $78,$00,$00,$DD,$F7,$DF,$3F,$98 ;
 $8910 DEFB $00,$00,$FD,$F7,$DF,$3F,$E0,$00 ;
 $8918 DEFB $00,$FD,$F7,$DF,$7F,$F0,$00,$00 ;
 $8920 DEFB $FF,$E3,$FF,$7F,$F8,$00,$78,$BF ;
 $8928 DEFB $E3,$FF,$7F,$D8,$00,$FE,$FF,$E3 ;
 $8930 DEFB $FF,$7F,$B8,$01,$FF,$F3,$E7,$FF ;
 $8938 DEFB $3F,$C8,$01,$CF,$F3,$47,$FF,$1F ;
 $8940 DEFB $F8,$03,$CE,$BF,$C7,$7F,$00,$30 ;
 $8948 DEFB $07,$FE,$3F,$C3,$FF,$1F,$C0,$06 ;
 $8950 DEFB $DC,$3F,$C3,$FF,$3F,$F8,$0F,$FC ;
 $8958 DEFB $3F,$E3,$FF,$3F,$FE,$0F,$F8,$3D ;
 $8960 DEFB $E3,$EF,$3F,$FF,$1F,$E0,$3F,$E1 ;
 $8968 DEFB $FF,$3F,$9F,$9C,$CF,$3F,$F1,$FF ;
 $8970 DEFB $3F,$9D,$9E,$D9,$1F,$E4,$FF,$1F ;
 $8978 DEFB $FF,$94,$BB,$47,$F8,$7F,$1F,$FF ;
 $8980 DEFB $9F,$3E,$81,$E0,$03,$0F,$FF,$8F ;
 $8988 DEFB $1C,$00,$00,$00,$03,$FF,$00,$0C ; }
; Attributes.
 $8990 DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $8991 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $8992 DEFB $70,$70,$70,$70,$70,$7E,$78,$70 ; {Attribute data.
 $899A DEFB $70,$70,$70,$70,$7E,$78,$70,$70 ;
 $89A2 DEFB $70,$70,$7E,$78,$78,$70,$70,$70 ;
 $89AA DEFB $7E,$78,$78,$78,$70,$70,$70,$7E ;
 $89B2 DEFB $78,$78,$78,$70,$70,$70,$7E,$78 ;
 $89BA DEFB $78,$78,$70,$70,$70,$7E,$78,$78 ;
 $89C2 DEFB $78                             ; }

; Background Graphic #N$1E
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$89C3 DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $89C4 DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $89C5 DEFB $00,$3C,$00,$00,$01,$FC,$00,$01 ; {Pixel data.
 $89CD DEFB $FE,$F8,$00,$07,$FF,$80,$03,$FE ;
 $89D5 DEFB $DE,$3F,$9F,$DF,$98,$07,$FE,$FF ;
 $89DD DEFB $FF,$FF,$FF,$9F,$07,$FE,$FF,$EF ;
 $89E5 DEFB $FF,$F3,$DF,$0E,$FE,$E7,$FE,$FD ;
 $89ED DEFB $F3,$DF,$0F,$FE,$67,$FF,$E6,$FF ;
 $89F5 DEFB $FF,$1B,$FC,$FF,$FF,$E6,$7F,$FB ;
 $89FD DEFB $1E,$3C,$FF,$F3,$FF,$3F,$FF,$39 ;
 $8A05 DEFB $CB,$3F,$BF,$FF,$00,$FF,$27,$F3 ;
 $8A0D DEFB $8F,$FF,$FE,$9E,$3F,$1F,$F7,$E3 ;
 $8A15 DEFB $00,$78,$8F,$80,$7F,$E0,$F8,$5F ;
 $8A1D DEFB $02,$8F,$FF,$7B,$CE,$FF,$DF,$FE ;
 $8A25 DEFB $9F,$FF,$3F,$3E,$FF,$DF,$FC,$4F ;
 $8A2D DEFB $FF,$07,$FF,$FF,$DF,$FC,$47,$3F ;
 $8A35 DEFB $0A,$E7,$80,$EF,$FC,$4F,$3F,$08 ;
 $8A3D DEFB $E7,$38,$EF,$7E,$5F,$FF,$00,$DE ;
 $8A45 DEFB $FC,$EF,$76,$4F,$FF,$00,$FD,$FC ;
 $8A4D DEFB $F7,$77,$5F,$FF,$00,$73,$FE,$F7 ;
 $8A55 DEFB $AF,$0F,$7F,$00,$2D,$FE,$FB,$AE ;
 $8A5D DEFB $0F,$7F,$00,$0F,$FE,$FB,$AF,$47 ;
 $8A65 DEFB $7F,$00,$0F,$FE,$FF,$AF,$0F,$7F ;
 $8A6D DEFB $00,$07,$FC,$00,$DE,$5F,$DF,$00 ;
 $8A75 DEFB $07,$F3,$F0,$DF,$1F,$DF,$00,$03 ;
 $8A7D DEFB $CF,$F8,$DF,$89,$DF,$00,$01,$BF ;
 $8A85 DEFB $F8,$DF,$89,$DF,$00,$00,$77,$F0 ;
 $8A8D DEFB $DF,$8F,$EF,$00,$00,$FF,$F0,$BF ;
 $8A95 DEFB $8F,$EF,$00,$00,$9F,$F8,$BF,$87 ;
 $8A9D DEFB $F7,$00,$00,$9F,$F8,$BF,$C7,$F7 ;
 $8AA5 DEFB $00,$00,$FF,$F0,$BF,$C7,$F7,$00 ;
 $8AAD DEFB $00,$FF,$E0,$7B,$CF,$B7,$00,$00 ;
 $8AB5 DEFB $FF,$00,$7B,$EF,$F7,$00,$00,$60 ;
 $8ABD DEFB $F8,$FD,$EF,$FF,$00,$00,$1F,$FC ;
 $8AC5 DEFB $FC,$EF,$F9,$00,$00,$33,$FE,$FC ;
 $8ACD DEFB $6F,$F9,$00,$00,$33,$FE,$FC,$6F ;
 $8AD5 DEFB $BF,$00,$00,$7F,$FE,$FE,$7F,$BF ;
 $8ADD DEFB $00,$00,$7F,$FE,$E6,$7F,$DF,$00 ;
 $8AE5 DEFB $00,$7D,$FC,$E7,$7F,$DF,$00,$00 ;
 $8AED DEFB $5F,$FC,$FF,$7F,$CF,$00,$00,$7F ;
 $8AF5 DEFB $F8,$FE,$3F,$CF,$00,$00,$3F,$F8 ;
 $8AFD DEFB $9E,$3F,$CF,$00,$00,$00,$00,$9E ;
 $8B05 DEFB $3F,$EF,$00,$00,$FF,$80,$FF,$3F ;
 $8B0D DEFB $E7,$0E,$01,$FF,$E0,$FF,$3F,$E7 ;
 $8B15 DEFB $0E,$03,$BF,$F0,$FE,$1F,$E3,$00 ;
 $8B1D DEFB $03,$FB,$F8,$FE,$1F,$E3,$0F,$83 ;
 $8B25 DEFB $FF,$F8,$F6,$2F,$F3,$1F,$87,$E7 ;
 $8B2D DEFB $F8,$FE,$4F,$F3,$3F,$C7,$E7,$F8 ;
 $8B35 DEFB $FE,$9F,$F3,$3F,$C6,$FF,$F0,$FF ;
 $8B3D DEFB $01,$FD,$3F,$C3,$FF,$E0,$FE,$00 ;
 $8B45 DEFB $63,$0F,$01,$FF,$80,$80,$00,$00 ; }
; Attributes.
 $8B4D DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $8B4E DEFB $07                             ; Width = #N(#PEEK(#PC)) bytes.
 $8B4F DEFB $78,$78,$70,$70,$70,$70,$70,$78 ; {Attribute data.
 $8B57 DEFB $7E,$70,$70,$70,$70,$70,$78,$78 ;
 $8B5F DEFB $7E,$70,$70,$70,$70,$78,$78,$78 ;
 $8B67 DEFB $7E,$70,$70,$70,$78,$78,$78,$7E ;
 $8B6F DEFB $70,$70,$70,$78,$78,$78,$7E,$70 ;
 $8B77 DEFB $70,$70,$78,$78,$78,$7E,$70,$70 ;
 $8B7F DEFB $70                             ; }

; Background Graphic #N$1F
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8B80 DEFB $30                             ; Height = #N(#PEEK(#PC)) pixels.
 $8B81 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8B82 DEFB $1F,$FF,$FD,$FC,$3F,$FF,$FD,$DC ; {Pixel data.
 $8B8A DEFB $3F,$FF,$FB,$EE,$03,$FF,$FB,$EE ;
 $8B92 DEFB $7C,$FF,$FB,$F6,$7F,$3F,$FD,$F4 ;
 $8B9A DEFB $3F,$FF,$FD,$F8,$3F,$FF,$FC,$FC ;
 $8BA2 DEFB $1F,$FF,$FC,$F8,$3F,$FF,$FD,$78 ;
 $8BAA DEFB $3F,$FF,$FD,$6C,$3F,$FF,$FB,$AC ;
 $8BB2 DEFB $3F,$FF,$FB,$B4,$1F,$FC,$FB,$FC ;
 $8BBA DEFB $1F,$FF,$3B,$FC,$3F,$FF,$DD,$FC ;
 $8BC2 DEFB $3F,$FF,$E1,$F8,$3F,$FF,$C6,$D8 ;
 $8BCA DEFB $0F,$FF,$9E,$68,$7F,$FF,$7E,$70 ;
 $8BD2 DEFB $03,$FF,$FE,$B8,$7F,$FF,$FD,$CC ;
 $8BDA DEFB $7F,$FF,$FD,$FE,$7F,$FF,$FD,$FE ;
 $8BE2 DEFB $7F,$FF,$FD,$FE,$3F,$FF,$FD,$FE ;
 $8BEA DEFB $3F,$FF,$FD,$B4,$18,$FF,$FB,$D8 ;
 $8BF2 DEFB $18,$FF,$03,$EC,$1F,$FF,$FB,$F4 ;
 $8BFA DEFB $1F,$FF,$F7,$F8,$1F,$FF,$F7,$FC ;
 $8C02 DEFB $3F,$FF,$C7,$F8,$3F,$F8,$03,$F8 ;
 $8C0A DEFB $3F,$FF,$FB,$78,$3F,$FF,$FB,$B0 ;
 $8C12 DEFB $1F,$8F,$FD,$D0,$1F,$F3,$FE,$E8 ;
 $8C1A DEFB $0F,$FC,$FF,$28,$0F,$FF,$FF,$10 ;
 $8C22 DEFB $1F,$FF,$FE,$D8,$01,$FF,$FE,$EC ;
 $8C2A DEFB $1F,$FF,$FE,$F6,$1F,$FF,$FE,$FF ;
 $8C32 DEFB $3F,$FC,$7F,$FF,$3F,$F3,$FE,$FF ;
 $8C3A DEFB $3F,$8C,$FE,$FE,$3F,$FF,$3E,$7E ; }
; Attributes.
 $8C42 DEFB $06                             ; Height = #N(#PEEK(#PC)) bytes.
 $8C43 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8C44 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8C4C DEFB $70,$70,$70,$70,$70,$70,$70,$70 ;
 $8C54 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; }

; Background Graphic #N$20
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8C5C DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $8C5D DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8C5E DEFB $3F,$FF,$FF,$FF,$7F,$FF,$FF,$FF ; {Pixel data.
 $8C66 DEFB $7F,$FF,$FF,$D9,$7F,$FF,$FF,$E2 ;
 $8C6E DEFB $7F,$F3,$FF,$83,$1F,$8F,$FF,$73 ;
 $8C76 DEFB $03,$7F,$FE,$F3,$78,$FF,$1E,$F3 ;
 $8C7E DEFB $7B,$FF,$E0,$FB,$3D,$FF,$FD,$7B ;
 $8C86 DEFB $1E,$FF,$FB,$7D,$67,$FF,$FB,$BD ;
 $8C8E DEFB $79,$FF,$FB,$DD,$FF,$FF,$FD,$DF ;
 $8C96 DEFB $FF,$FF,$9D,$ED,$FF,$F8,$7E,$F7 ;
 $8C9E DEFB $7F,$F7,$FE,$77,$7F,$EF,$FE,$3F ;
 $8CA6 DEFB $7E,$1F,$FD,$9F,$3F,$DF,$C1,$CF ;
 $8CAE DEFB $3F,$DE,$3D,$E7,$1F,$FF,$FE,$F7 ;
 $8CB6 DEFB $1F,$FF,$FE,$FE,$1F,$FF,$FE,$FC ; }
; Attributes.
 $8CBE DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $8CBF DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8CC0 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8CC8 DEFB $70,$70,$70,$70                 ; }

; Background Graphic #N$21
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8CCC DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $8CCD DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8CCE DEFB $FF,$FF,$FF,$FC,$FF,$FF,$FF,$FE ; {Pixel data.
 $8CD6 DEFB $9B,$FF,$FF,$FE,$47,$FF,$FF,$FE ;
 $8CDE DEFB $C1,$FF,$CF,$FE,$CE,$FF,$F1,$F8 ;
 $8CE6 DEFB $CF,$7F,$FE,$C0,$BF,$78,$FF,$1E ;
 $8CEE DEFB $DF,$07,$FF,$DE,$DE,$BF,$FF,$BC ;
 $8CF6 DEFB $BE,$DF,$FF,$78,$BD,$DF,$FF,$E6 ;
 $8CFE DEFB $BB,$DF,$FF,$9E,$FB,$BF,$FF,$FF ;
 $8D06 DEFB $B7,$B9,$FF,$FF,$E7,$7E,$1F,$FF ;
 $8D0E DEFB $EE,$7F,$EF,$FE,$FC,$7F,$F7,$FE ;
 $8D16 DEFB $F9,$BF,$F8,$7E,$F3,$83,$FB,$FC ;
 $8D1E DEFB $E7,$BC,$7B,$FC,$EF,$7F,$FF,$F8 ;
 $8D26 DEFB $7F,$7F,$FF,$F8,$3F,$7F,$FF,$F8 ; }
; Attributes.
 $8D2E DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $8D2F DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8D30 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8D38 DEFB $70,$70,$70,$70                 ; }

; Background Graphic #N$22
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8D3C DEFB $30                             ; Height = #N(#PEEK(#PC)) pixels.
 $8D3D DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8D3E DEFB $3F,$BF,$FF,$F8,$3B,$BF,$FF,$FC ; {Pixel data.
 $8D46 DEFB $77,$DF,$FF,$FC,$77,$DF,$FF,$C0 ;
 $8D4E DEFB $6F,$DF,$FF,$3E,$2F,$BF,$FC,$FE ;
 $8D56 DEFB $1F,$BF,$FC,$FC,$3F,$3F,$FC,$FC ;
 $8D5E DEFB $1F,$3F,$FF,$F8,$1E,$BF,$FF,$FC ;
 $8D66 DEFB $36,$BF,$FF,$FC,$35,$DF,$FF,$FC ;
 $8D6E DEFB $1D,$DF,$FF,$FC,$3F,$DF,$3F,$F8 ;
 $8D76 DEFB $3F,$DC,$FF,$F8,$3F,$BB,$FF,$FC ;
 $8D7E DEFB $1F,$87,$FF,$FC,$1B,$63,$FF,$FC ;
 $8D86 DEFB $16,$79,$FF,$F0,$0E,$7E,$FF,$FE ;
 $8D8E DEFB $1D,$7F,$FF,$C0,$33,$BF,$FF,$FE ;
 $8D96 DEFB $7F,$BF,$FF,$FE,$7F,$BF,$FF,$FE ;
 $8D9E DEFB $7F,$BF,$FF,$FE,$7F,$BF,$FF,$FC ;
 $8DA6 DEFB $2D,$BF,$FF,$FC,$1B,$DF,$FF,$E0 ;
 $8DAE DEFB $37,$C0,$FF,$18,$2F,$DF,$FF,$F8 ;
 $8DB6 DEFB $1F,$EF,$FF,$F8,$EF,$EF,$FF,$F8 ;
 $8DBE DEFB $1F,$E3,$FF,$FC,$1F,$C0,$1F,$FC ;
 $8DC6 DEFB $1E,$DF,$FF,$FC,$0D,$DF,$FF,$FC ;
 $8DCE DEFB $0B,$BF,$F1,$F8,$17,$7F,$CF,$F8 ;
 $8DD6 DEFB $14,$FF,$3F,$F0,$08,$FF,$FF,$F0 ;
 $8DDE DEFB $1B,$7F,$FF,$F8,$37,$7F,$FF,$80 ;
 $8DE6 DEFB $6F,$7F,$FF,$F8,$FF,$7F,$FF,$F8 ;
 $8DEE DEFB $FF,$7E,$3F,$FC,$FF,$7F,$CF,$FC ;
 $8DF6 DEFB $7F,$7F,$31,$FC,$7E,$7C,$FF,$FC ; }
; Attributes.
 $8DFE DEFB $06                             ; Height = #N(#PEEK(#PC)) bytes.
 $8DFF DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $8E00 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8E08 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ;
 $8E10 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; }

; Background Graphic #N$23
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8E18 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $8E19 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $8E1A DEFB $00,$00,$01,$80,$00,$00,$00,$00 ; {Pixel data.
 $8E22 DEFB $07,$E0,$00,$00,$00,$00,$1D,$D8 ;
 $8E2A DEFB $00,$00,$00,$00,$7E,$C6,$00,$00 ;
 $8E32 DEFB $00,$01,$BF,$71,$80,$00,$00,$06 ;
 $8E3A DEFB $7B,$D1,$E0,$00,$00,$1D,$3D,$77 ;
 $8E42 DEFB $18,$00,$00,$73,$8A,$CC,$16,$00 ;
 $8E4A DEFB $01,$F7,$E0,$00,$31,$80,$07,$F9 ;
 $8E52 DEFB $BF,$D9,$60,$60,$0D,$5C,$7C,$57 ;
 $8E5A DEFB $C0,$50,$1C,$BF,$03,$57,$00,$48 ;
 $8E62 DEFB $39,$7E,$E0,$02,$00,$48,$34,$FD ;
 $8E6A DEFB $6B,$6A,$40,$84,$28,$7A,$AE,$EA ;
 $8E72 DEFB $02,$84,$33,$1D,$B7,$69,$27,$04 ;
 $8E7A DEFB $17,$87,$76,$D5,$3E,$08,$1F,$E0 ;
 $8E82 DEFB $7B,$D4,$F8,$08,$0F,$D4,$00,$00 ;
 $8E8A DEFB $C8,$10,$07,$B7,$C0,$02,$40,$20 ;
 $8E92 DEFB $0B,$EE,$AB,$D2,$44,$C0,$08,$FB ;
 $8E9A DEFB $6F,$52,$27,$10,$0E,$1F,$FB,$51 ;
 $8EA2 DEFB $F8,$10,$0A,$C0,$FF,$FF,$03,$50 ;
 $8EAA DEFB $0A,$EF,$00,$00,$F7,$50,$0B,$C7 ;
 $8EB2 DEFB $00,$00,$F7,$50,$0A,$FF,$00,$00 ;
 $8EBA DEFB $E5,$50,$0E,$EF,$00,$00,$F7,$50 ;
 $8EC2 DEFB $0B,$EF,$00,$00,$E1,$50,$0A,$EB ;
 $8ECA DEFB $00,$00,$E7,$50,$0F,$DD,$00,$00 ;
 $8ED2 DEFB $F1,$50,$0A,$EF,$00,$00,$F7,$50 ;
 $8EDA DEFB $0E,$DF,$00,$00,$F5,$50,$0A,$ED ;
 $8EE2 DEFB $00,$00,$E3,$50,$0B,$EF,$00,$00 ;
 $8EEA DEFB $F7,$70,$0E,$EF,$00,$00,$E7,$60 ;
 $8EF2 DEFB $02,$FF,$00,$00,$F3,$40,$01,$FA ;
 $8EFA DEFB $00,$00,$F5,$C0,$00,$6F,$00,$00 ;
 $8F02 DEFB $F6,$00,$00,$06,$00,$00,$60,$00 ; }
; Attributes.
 $8F0A DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $8F0B DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $8F0C DEFB $70,$70,$70,$70,$70,$70,$70,$70 ; {Attribute data.
 $8F14 DEFB $70,$70,$70,$70,$70,$70,$70,$70 ;
 $8F1C DEFB $70,$70,$50,$50,$50,$50,$50,$50 ;
 $8F24 DEFB $50,$50,$50,$50,$50,$50         ; }

; Background Graphic #N$24
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$8F2A DEFB $38                             ; Height = #N(#PEEK(#PC)) pixels.
 $8F2B DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $8F2C DEFB $00,$00,$0E,$40,$00,$00,$01,$00 ; {Pixel data.
 $8F34 DEFB $07,$48,$00,$08,$01,$80,$03,$B0 ;
 $8F3C DEFB $00,$18,$01,$80,$3B,$EC,$00,$18 ;
 $8F44 DEFB $05,$A0,$0F,$DE,$01,$D9,$05,$A0 ;
 $8F4C DEFB $07,$FE,$00,$7E,$04,$E4,$03,$E2 ;
 $8F54 DEFB $07,$BE,$06,$C4,$3F,$C0,$01,$DC ;
 $8F5C DEFB $07,$CC,$01,$C0,$40,$78,$07,$98 ;
 $8F64 DEFB $00,$E0,$60,$3F,$07,$B8,$00,$E0 ;
 $8F6C DEFB $E0,$F8,$03,$78,$00,$60,$E0,$1F ;
 $8F74 DEFB $21,$F0,$00,$70,$E0,$FF,$21,$F1 ;
 $8F7C DEFB $00,$30,$E0,$3C,$31,$F1,$00,$30 ;
 $8F84 DEFB $E0,$18,$39,$E1,$00,$30,$E0,$18 ;
 $8F8C DEFB $1D,$E3,$03,$3C,$C0,$18,$1E,$6C ;
 $8F94 DEFB $01,$0F,$5C,$18,$0F,$CE,$1C,$63 ;
 $8F9C DEFB $FF,$18,$07,$DC,$0E,$39,$F0,$18 ;
 $8FA4 DEFB $03,$DC,$07,$0E,$EE,$18,$13,$F8 ;
 $8FAC DEFB $1B,$73,$DF,$38,$11,$F8,$0F,$FD ;
 $8FB4 DEFB $F0,$38,$11,$F8,$0F,$0F,$CF,$38 ;
 $8FBC DEFB $11,$F1,$77,$03,$EC,$30,$18,$F1 ;
 $8FC4 DEFB $3F,$3F,$82,$70,$18,$F1,$1E,$7F ;
 $8FCC DEFB $1D,$6E,$0C,$F1,$EE,$C7,$7F,$D8 ;
 $8FD4 DEFB $0C,$F3,$36,$03,$E3,$F0,$06,$F6 ;
 $8FDC DEFB $1B,$3F,$01,$E0,$07,$6E,$EE,$7F ;
 $8FE4 DEFB $3C,$FC,$13,$DC,$76,$87,$FF,$FE ;
 $8FEC DEFB $13,$FC,$1A,$63,$03,$C1,$11,$F9 ;
 $8FF4 DEFB $E7,$63,$7B,$F0,$11,$F9,$7F,$77 ;
 $8FFC DEFB $0F,$FC,$31,$FB,$0F,$77,$33,$E6 ;
 $9004 DEFB $30,$F7,$7F,$77,$7F,$80,$38,$EE ;
 $900C DEFB $CF,$77,$8F,$F8,$38,$FC,$07,$37 ;
 $9014 DEFB $07,$CC,$3C,$F8,$07,$37,$3F,$02 ;
 $901C DEFB $3C,$F3,$03,$37,$0F,$00,$3E,$F7 ;
 $9024 DEFB $23,$2F,$0F,$02,$1E,$EF,$23,$2F ;
 $902C DEFB $1E,$04,$07,$6F,$63,$2F,$1E,$08 ;
 $9034 DEFB $7B,$7E,$E3,$9F,$3E,$08,$0D,$FC ;
 $903C DEFB $E1,$9E,$3C,$89,$06,$F8,$F1,$9E ;
 $9044 DEFB $7C,$92,$07,$79,$71,$BE,$FC,$92 ;
 $904C DEFB $03,$73,$7D,$BF,$F8,$54,$3C,$F7 ;
 $9054 DEFB $7B,$BF,$F0,$54,$7F,$7F,$7B,$BF ;
 $905C DEFB $F0,$54,$EF,$BF,$3B,$7F,$E0,$59 ;
 $9064 DEFB $81,$BE,$3B,$7F,$E0,$32,$00,$FE ;
 $906C DEFB $1B,$7F,$E0,$F4,$00,$7C,$0F,$7F ;
 $9074 DEFB $C0,$7C,$00,$7C,$04,$BF,$C0,$3C ; }
; Attributes.
 $907C DEFB $07                             ; Height = #N(#PEEK(#PC)) bytes.
 $907D DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $907E DEFB $60,$20,$60,$60,$60,$60,$60,$20 ; {Attribute data.
 $9086 DEFB $60,$50,$58,$60,$60,$20,$60,$60 ;
 $908E DEFB $60,$50,$60,$20,$60,$60,$60,$60 ;
 $9096 DEFB $60,$20,$60,$50,$60,$60,$60,$20 ;
 $909E DEFB $50,$50,$50,$60,$60,$20,$50,$50 ;
 $90A6 DEFB $50,$60                         ; }

; Background Graphic #N$25
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$90A8 DEFB $58                             ; Height = #N(#PEEK(#PC)) pixels.
 $90A9 DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $90AA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Pixel data.
 $90B2 DEFB $00,$00,$00,$00,$00,$00,$60,$00 ;
 $90BA DEFB $00,$00,$00,$00,$00,$01,$C1,$80 ;
 $90C2 DEFB $00,$00,$02,$00,$00,$0B,$8E,$00 ;
 $90CA DEFB $00,$00,$02,$00,$07,$73,$BC,$00 ;
 $90D2 DEFB $00,$00,$02,$00,$01,$F9,$78,$00 ;
 $90DA DEFB $00,$04,$02,$00,$00,$7C,$F0,$00 ;
 $90E2 DEFB $00,$04,$06,$00,$00,$3E,$F0,$00 ;
 $90EA DEFB $00,$04,$06,$00,$00,$1E,$E3,$F0 ;
 $90F2 DEFB $00,$04,$17,$00,$07,$EE,$EC,$FC ;
 $90FA DEFB $00,$24,$17,$00,$1F,$F7,$DF,$C0 ;
 $9102 DEFB $00,$64,$17,$00,$3F,$FB,$B1,$00 ;
 $910A DEFB $00,$4C,$17,$10,$3F,$FF,$CF,$80 ;
 $9112 DEFB $00,$4C,$57,$90,$70,$13,$3F,$E0 ;
 $911A DEFB $00,$4D,$57,$90,$40,$7F,$FF,$F0 ;
 $9122 DEFB $04,$49,$57,$90,$01,$FB,$C1,$F0 ;
 $912A DEFB $04,$69,$37,$91,$03,$F7,$C0,$38 ;
 $9132 DEFB $04,$69,$17,$91,$07,$EF,$A0,$08 ;
 $913A DEFB $04,$6B,$27,$B2,$0F,$9F,$60,$00 ;
 $9142 DEFB $06,$6B,$67,$B6,$0E,$3E,$E0,$00 ;
 $914A DEFB $26,$6A,$CB,$6C,$1C,$7C,$50,$40 ;
 $9152 DEFB $27,$76,$DE,$9C,$18,$78,$78,$40 ;
 $915A DEFB $33,$B5,$DF,$79,$30,$F8,$30,$48 ;
 $9162 DEFB $18,$F5,$AE,$E3,$20,$F0,$0C,$48 ;
 $916A DEFB $0F,$73,$6D,$9E,$00,$F0,$3C,$48 ;
 $9172 DEFB $07,$D6,$DF,$7C,$00,$60,$38,$48 ;
 $917A DEFB $01,$FD,$9E,$E0,$00,$60,$06,$48 ;
 $9182 DEFB $00,$3B,$65,$DE,$00,$60,$1E,$60 ;
 $918A DEFB $03,$FE,$FB,$BF,$00,$20,$1C,$52 ;
 $9192 DEFB $0F,$FD,$DD,$E0,$00,$20,$02,$52 ;
 $919A DEFB $1C,$1F,$05,$80,$1E,$00,$1E,$54 ;
 $91A2 DEFB $38,$0E,$3B,$30,$7F,$00,$1E,$54 ;
 $91AA DEFB $00,$0C,$07,$1C,$F8,$02,$0C,$68 ;
 $91B2 DEFB $10,$0C,$07,$0E,$F0,$02,$12,$68 ;
 $91BA DEFB $30,$1E,$07,$0F,$E0,$02,$1E,$F0 ;
 $91C2 DEFB $38,$1E,$07,$06,$C0,$02,$1E,$F4 ;
 $91CA DEFB $38,$3F,$07,$07,$80,$F9,$0C,$E8 ;
 $91D2 DEFB $38,$3F,$07,$07,$E1,$FD,$32,$D0 ;
 $91DA DEFB $30,$3F,$87,$0F,$F3,$FF,$3E,$EE ;
 $91E2 DEFB $10,$1E,$A7,$1D,$57,$FE,$BC,$D0 ;
 $91EA DEFB $6E,$06,$E6,$39,$46,$DE,$9F,$00 ;
 $91F2 DEFB $79,$C1,$DC,$39,$04,$8A,$BF,$C0 ;
 $91FA DEFB $0A,$8E,$78,$31,$10,$01,$7F,$E0 ;
 $9202 DEFB $CF,$27,$F1,$21,$30,$02,$FF,$E0 ;
 $920A DEFB $74,$E8,$C7,$01,$30,$02,$FF,$F0 ;
 $9212 DEFB $39,$CF,$5E,$00,$30,$7A,$BB,$B0 ;
 $921A DEFB $05,$C3,$FC,$10,$30,$FD,$B9,$90 ;
 $9222 DEFB $07,$04,$60,$38,$31,$FF,$90,$80 ;
 $922A DEFB $3C,$1B,$9E,$38,$33,$FE,$80,$00 ;
 $9232 DEFB $7E,$DD,$FF,$7C,$13,$FF,$C0,$00 ;
 $923A DEFB $F2,$EE,$FC,$7C,$33,$6D,$60,$3C ;
 $9242 DEFB $07,$F7,$00,$7C,$32,$49,$60,$FE ;
 $924A DEFB $3E,$FF,$70,$3C,$30,$08,$71,$FE ;
 $9252 DEFB $6C,$FB,$FC,$38,$70,$00,$3B,$FF ;
 $925A DEFB $B8,$7C,$7E,$38,$70,$00,$1B,$FF ;
 $9262 DEFB $3E,$3F,$8C,$10,$70,$07,$EC,$5B ;
 $926A DEFB $3F,$0F,$E0,$38,$F0,$0F,$F8,$49 ;
 $9272 DEFB $1F,$93,$F0,$3C,$F0,$1F,$FB,$00 ;
 $927A DEFB $0F,$D1,$F0,$7C,$B8,$3F,$FF,$00 ;
 $9282 DEFB $07,$EF,$70,$54,$B8,$3F,$FD,$80 ;
 $928A DEFB $03,$DF,$C0,$D6,$B8,$37,$7F,$80 ;
 $9292 DEFB $E0,$B8,$00,$B6,$38,$22,$6B,$80 ;
 $929A DEFB $FC,$47,$30,$B2,$38,$02,$47,$3C ;
 $92A2 DEFB $FE,$9F,$E0,$32,$38,$00,$0E,$7E ;
 $92AA DEFB $7F,$FC,$00,$33,$3C,$3E,$1E,$FE ;
 $92B2 DEFB $3F,$E3,$E0,$31,$3C,$7F,$3D,$FF ;
 $92BA DEFB $1F,$EF,$C0,$31,$34,$FF,$BD,$FF ;
 $92C2 DEFB $07,$9F,$B8,$38,$36,$FF,$B9,$6B ;
 $92CA DEFB $70,$9E,$F8,$3C,$32,$D7,$B2,$49 ;
 $92D2 DEFB $FC,$FD,$F0,$3C,$32,$95,$70,$01 ;
 $92DA DEFB $FF,$7B,$F1,$3C,$30,$00,$F0,$00 ;
 $92E2 DEFB $7F,$FB,$E7,$36,$30,$00,$F0,$00 ;
 $92EA DEFB $3F,$C7,$EF,$36,$01,$FF,$E0,$00 ;
 $92F2 DEFB $0F,$E7,$DF,$12,$0F,$FF,$FC,$03 ;
 $92FA DEFB $01,$A7,$BF,$1B,$1F,$97,$1E,$0E ;
 $9302 DEFB $0F,$37,$3F,$1B,$3C,$7F,$E7,$1C ;
 $930A DEFB $3F,$DE,$7E,$19,$73,$FF,$F9,$B9 ;
 $9312 DEFB $7F,$EC,$FE,$38,$4F,$FF,$FE,$BE ;
 $931A DEFB $FF,$CC,$FE,$78,$BF,$20,$1F,$BC ;
 $9322 DEFB $1F,$86,$FC,$78,$FF,$FF,$E0,$BE ;
 $932A DEFB $00,$07,$7C,$78,$00,$7F,$FF,$BC ;
 $9332 DEFB $01,$FB,$F8,$78,$F8,$03,$FF,$BC ;
 $933A DEFB $0F,$FD,$E0,$78,$FF,$80,$DE,$BE ;
 $9342 DEFB $1F,$FF,$80,$D8,$7F,$FF,$F9,$B0 ;
 $934A DEFB $3F,$FF,$E0,$D8,$3C,$FF,$C7,$1C ;
 $9352 DEFB $1F,$FE,$F8,$D8,$1F,$00,$3E,$06 ;
 $935A DEFB $07,$F8,$2E,$98,$07,$FF,$F8,$00 ;
 $9362 DEFB $00,$00,$1A,$18,$01,$FF,$E0,$00 ; }
; Attributes.
 $936A DEFB $0B                             ; Height = #N(#PEEK(#PC)) bytes.
 $936B DEFB $08                             ; Width = #N(#PEEK(#PC)) bytes.
 $936C DEFB $70,$70,$70,$70,$60,$60,$60,$60 ; {Attribute data.
 $9374 DEFB $70,$70,$70,$70,$60,$60,$60,$60 ;
 $937C DEFB $70,$70,$70,$70,$60,$60,$50,$60 ;
 $9384 DEFB $70,$70,$70,$70,$60,$60,$50,$60 ;
 $938C DEFB $50,$60,$60,$60,$60,$70,$50,$60 ;
 $9394 DEFB $60,$60,$60,$60,$60,$70,$70,$70 ;
 $939C DEFB $60,$60,$60,$58,$20,$70,$70,$70 ;
 $93A4 DEFB $60,$60,$60,$20,$20,$70,$70,$70 ;
 $93AC DEFB $60,$60,$60,$20,$20,$70,$70,$70 ;
 $93B4 DEFB $60,$60,$60,$20,$68,$68,$68,$60 ;
 $93BC DEFB $60,$60,$60,$20,$68,$68,$68,$60 ; }

; Background Graphic #N$26
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$93C4 DEFB $28                             ; Height = #N(#PEEK(#PC)) pixels.
 $93C5 DEFB $09                             ; Width = #N(#PEEK(#PC)) bytes.
 $93C6 DEFB $00,$04,$00,$00,$00,$00,$01,$FF ; {Pixel data.
 $93CE DEFB $00,$00,$48,$00,$00,$00,$00,$3F ;
 $93D6 DEFB $FF,$E0,$00,$49,$00,$00,$00,$01 ;
 $93DE DEFB $FF,$FF,$F0,$00,$52,$00,$00,$1F ;
 $93E6 DEFB $0C,$FF,$FF,$F0,$00,$34,$00,$3F ;
 $93EE DEFB $FF,$FF,$FF,$F7,$F0,$04,$38,$00 ;
 $93F6 DEFB $FF,$FF,$FF,$FF,$CF,$E0,$05,$10 ;
 $93FE DEFB $07,$FF,$FF,$FF,$FF,$FF,$E0,$05 ;
 $9406 DEFB $10,$0F,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $940E DEFB $2A,$00,$0F,$F7,$FF,$FF,$FF,$FF ;
 $9416 DEFB $FC,$2A,$00,$1F,$EB,$FF,$FF,$FB ;
 $941E DEFB $FF,$FE,$2A,$03,$FF,$9F,$DF,$FF ;
 $9426 DEFB $E5,$FF,$FE,$2A,$0F,$FF,$FF,$AF ;
 $942E DEFB $FF,$9F,$FF,$FE,$1C,$1F,$FF,$FE ;
 $9436 DEFB $7F,$F7,$FF,$FF,$FC,$1C,$3F,$FF ;
 $943E DEFB $FF,$FF,$EB,$FF,$FF,$F0,$1C,$1F ;
 $9446 DEFB $FF,$FF,$FF,$9D,$FF,$FF,$00,$1C ;
 $944E DEFB $0F,$FF,$FF,$FF,$FF,$FF,$C0,$00 ;
 $9456 DEFB $00,$7F,$F7,$FF,$FF,$FF,$FF,$00 ;
 $945E DEFB $00,$03,$FF,$E3,$FE,$FF,$FF,$FE ;
 $9466 DEFB $04,$60,$07,$FF,$8D,$FD,$7E,$FF ;
 $946E DEFB $FC,$14,$66,$03,$FF,$FF,$E3,$7C ;
 $9476 DEFB $7F,$F8,$15,$66,$01,$FF,$FF,$FF ;
 $947E DEFB $F9,$BF,$F0,$2A,$66,$00,$FF,$FF ;
 $9486 DEFB $FF,$E7,$FF,$C0,$2A,$64,$00,$FF ;
 $948E DEFB $FF,$FF,$FF,$FF,$80,$AC,$6C,$01 ;
 $9496 DEFB $FF,$FF,$FF,$FF,$FF,$80,$B4,$6C ;
 $949E DEFB $07,$FF,$FF,$FF,$FF,$FF,$C0,$74 ;
 $94A6 DEFB $24,$1F,$FF,$FF,$FF,$FF,$EF,$E0 ;
 $94AE DEFB $74,$28,$3F,$FE,$FF,$FF,$FF,$C7 ;
 $94B6 DEFB $F0,$38,$28,$1F,$FD,$7F,$FF,$FF ;
 $94BE DEFB $19,$F8,$38,$28,$07,$F3,$BF,$FB ;
 $94C6 DEFB $FC,$FF,$FC,$38,$2A,$1F,$BF,$FF ;
 $94CE DEFB $F1,$FF,$FF,$FE,$38,$2A,$3F,$FF ;
 $94D6 DEFB $FF,$E6,$FF,$FF,$FE,$00,$92,$7F ;
 $94DE DEFB $FF,$FF,$CF,$7F,$FF,$FF,$00,$94 ;
 $94E6 DEFB $FF,$FF,$FF,$9F,$FF,$FF,$FF,$20 ;
 $94EE DEFB $94,$FF,$FF,$FF,$FF,$FF,$DF,$FF ;
 $94F6 DEFB $A8,$54,$FF,$FF,$FF,$FF,$FF,$AF ;
 $94FE DEFB $FF,$54,$58,$FF,$FF,$FF,$FF,$FF ;
 $9506 DEFB $3F,$FE,$69,$58,$7F,$F8,$0F,$FF ;
 $950E DEFB $F0,$F7,$FC,$51,$30,$1F,$80,$03 ;
 $9516 DEFB $FF,$FF,$FF,$F8,$51,$B0,$00,$00 ;
 $951E DEFB $00,$FF,$FF,$FF,$F0,$60,$30,$00 ;
 $9526 DEFB $00,$00,$1F,$FF,$FF,$80,$40,$30 ; }
; Attributes.
 $952E DEFB $05                             ; Height = #N(#PEEK(#PC)) bytes.
 $952F DEFB $09                             ; Width = #N(#PEEK(#PC)) bytes.
 $9530 DEFB $60,$60,$48,$48,$48,$48,$48,$4D ; {Attribute data.
 $9538 DEFB $48,$48,$48,$48,$4D,$4D,$4D,$4D ;
 $9540 DEFB $48,$48,$48,$48,$4D,$4D,$4D,$4D ;
 $9548 DEFB $48,$60,$70,$48,$4D,$4D,$4D,$4D ;
 $9550 DEFB $4D,$48,$60,$60,$48,$48,$48,$48 ;
 $9558 DEFB $4D,$4D,$48,$60,$60             ; }

; Background Graphic #N$27
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$955D DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $955E DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $955F DEFB $00,$03,$10,$00,$07,$67,$B8,$02 ; {Pixel data.
 $9567 DEFB $07,$F3,$74,$24,$07,$E0,$AE,$14 ;
 $956F DEFB $F7,$DD,$9D,$99,$FB,$DE,$6B,$D9 ;
 $9577 DEFB $FB,$BE,$E7,$6A,$0C,$4F,$DB,$0A ;
 $957F DEFB $7E,$78,$38,$F2,$FF,$FD,$7D,$FA ;
 $9587 DEFB $EF,$FD,$61,$FA,$DF,$FD,$5D,$02 ;
 $958F DEFB $9E,$FD,$3E,$FC,$9E,$FB,$60,$FE ;
 $9597 DEFB $9D,$FB,$1E,$FE,$1D,$DB,$7F,$7E ;
 $959F DEFB $D9,$F3,$41,$40,$D5,$F6,$0E,$3E ;
 $95A7 DEFB $D4,$66,$3F,$7F,$C7,$16,$7F,$7F ;
 $95AF DEFB $FF,$F6,$7F,$7F,$FF,$F6,$7F,$7F ;
 $95B7 DEFB $7F,$F8,$3F,$7E,$3F,$E0,$1E,$1C ; }
; Attributes.
 $95BF DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $95C0 DEFB $04                             ; Width = #N(#PEEK(#PC)) bytes.
 $95C1 DEFB $60,$60,$60,$60,$60,$60,$60,$60 ; {Attribute data.
 $95C9 DEFB $60,$60,$60,$60                 ; }

; Background Graphic #N$28
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$95CD DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $95CE DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $95CF DEFB $18,$18,$02,$20,$00,$00,$1C,$38 ; {Pixel data.
 $95D7 DEFB $03,$3C,$00,$00,$0E,$70,$03,$A0 ;
 $95DF DEFB $00,$00,$0E,$F1,$83,$98,$07,$C0 ;
 $95E7 DEFB $0E,$E7,$E1,$7C,$3E,$30,$06,$DF ;
 $95EF DEFB $DC,$C0,$78,$00,$3B,$BF,$1E,$38 ;
 $95F7 DEFB $F0,$00,$FD,$F8,$0F,$78,$EF,$80 ;
 $95FF DEFB $FF,$E0,$07,$EB,$DF,$C0,$01,$70 ;
 $9607 DEFB $01,$9B,$B0,$60,$07,$68,$00,$3B ;
 $960F DEFB $6C,$10,$0F,$18,$7C,$78,$DF,$08 ;
 $9617 DEFB $1F,$38,$7E,$72,$3F,$C8,$1E,$34 ;
 $961F DEFB $3F,$6E,$7F,$E0,$1C,$0C,$0F,$5E ;
 $9627 DEFB $E1,$F0,$30,$3C,$01,$3C,$C0,$70 ;
 $962F DEFB $00,$3C,$3F,$38,$F0,$38,$49,$18 ;
 $9637 DEFB $FF,$F3,$EC,$18,$4A,$24,$3F,$CF ;
 $963F DEFB $1E,$08,$2A,$78,$00,$1E,$FF,$08 ;
 $9647 DEFB $2A,$78,$3E,$7C,$FF,$00,$2C,$30 ;
 $964F DEFB $FF,$F0,$FF,$00,$1C,$C8,$7F,$EF ;
 $9657 DEFB $FF,$00,$1C,$F8,$00,$FC,$FE,$00 ; }
; Attributes.
 $965F DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $9660 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $9661 DEFB $60,$60,$60,$60,$20,$20,$60,$50 ; {Attribute data.
 $9669 DEFB $60,$60,$20,$20,$60,$50,$60,$60 ;
 $9671 DEFB $70,$20                         ; }

; Background Graphic #N$29
;
; #BG(#PC)(background-#PC)
;
; .
;
; Pixels.
b$9673 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $9674 DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $9675 DEFB $08,$08,$19,$19,$19,$09,$0A,$0A ; {Pixel data.
 $967D DEFB $0A,$0A,$4A,$4A,$6A,$AC,$AC,$AC ;
 $9685 DEFB $2C,$1C,$1C,$18,$9A,$5A,$3C,$1C ; }
; Attributes.
 $968D DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $968E DEFB $01                             ; Width = #N(#PEEK(#PC)) bytes.
 $968F DEFB $60,$60,$60                     ; Attribute data.

; Game Options
;
; #TABLE(default,centre,centre,centre)
; { =h Byte Value | =h Binary | =h Option }
; { #N$00 | #EVAL($00,$02,$08) | 1 Player Game }
; { #N$01 | #EVAL($01,$02,$08) | 2 Player Game }
; { #N$02 | #EVAL($02,$02,$08) | Kempston Joystick }
; { #N$04 | #EVAL($04,$02,$08) | Cursor Joystick }
; { #N$06 | #EVAL($06,$02,$08) | Interface II Joystick }
; TABLE#
@label=GameOptions
g$9692 DEFB $00

; Counter
@label=CounterLow
g$9693 DEFB $00
@label=CounterHigh
 $9694 DEFB $00

; Rand8
g$9695 DEFB $00

; Last Frame
@label=LastFrame
g$9696 DEFB $00

; Frame Updated
;
; Has the frame been updated?
; #TABLE(default,centre,centre) { =h Value | =h Updated? }
; { #N$00 | Not updated }
; { #N$FF | Updated }
; TABLE#
@label=FrameUpdated
g$9697 DEFB $00

; 1UP Score
;
; 3-byte representation of the score.
@label=1UP_Score_1
g$9698 DEFB $00      ; Byte #1.
@label=1UP_Score_2
 $9699 DEFB $00      ; Byte #2.
@label=1UP_Score_3
 $969A DEFB $00      ; Byte #3.

; 2UP Score
;
; 3-byte representation of the score.
@label=2UP_Score_1
g$969B DEFB $00      ; Byte #1.
@label=2UP_Score_2
 $969C DEFB $00      ; Byte #2.
@label=2UP_Score_3
 $969D DEFB $00      ; Byte #3.

; Flag: Active Player
;
; Which player is currently active.
; #TABLE(default,centre,centre) { =h Value | =h Player }
; { #N$00 | 1UP }
; { #N$FF | 2UP }
; TABLE#
@label=Flag_ActivePlayer
g$969E DEFB $00

; Saved Frame
@label=Saved_Frame
g$969F DEFB $00

; Saved X
@label=Saved_X
g$96A0 DEFB $00

; Saved Y
@label=Saved_Y
g$96A1 DEFB $00

; Saved Location (Room)
@label=Saved_Room
g$96A2 DEFB $00

; Some Height
@label=SomeHeight
g$96A3 DEFB $00

; Some Width
@label=SomeWidth
g$96A4 DEFB $00

; Game status buffer entry at 96A5
g$96A5 DEFB $00,$00,$00

; Current Menu Item Colour attribute
@label=Current_MenuAttr
g$96A8 DEFB $00

; Data block at 96A9
b$96A9 DEFB $00,$00
 $96AB DEFB $00
 $96AC DEFB $00
 $96AD DEFB $00
 $96AE DEFB $00
 $96AF DEFB $00

; Orchid Effect Timer
@label=OrchidEffectTimer
g$96B0 DEFB $00

; Game status buffer entry at 96B1
g$96B1 DEFB $00
 $96B2 DEFB $00
 $96B3 DEFB $00
 $96B4 DEFB $00

; Game Delay Timer
;
; At the beginning of each player turn there is a delay to allow the player to be ready for play.
; #TABLE(default,centre,centre)
; { =h Value | =h Game Mode }
; { #N$80 | 1UP }
; { #N$FF | 2UP }
; TABLE#
; The larger delay for a 2UP game is useful for swapping players controls.
@label=GameDelayTimer
g$96B5 DEFB $00
 $96B6 DEFB $00

; Flag: Hall Of Fame
@label=FlagHallOfFame
g$96B7 DEFB $00

; Counter: Hall Of Fame
;
; Counter for game selection screen, which tells the routine when to flip
;       to display the Hall Of Fame.
@label=CounterHallOfFame
g$96B8 DEFW $0000

; Game status buffer entry at 96BA
g$96BA DEFB $00

; High Score Position
;
; Used when calculating the players position in the high score table.
@label=HighScorePosition
g$96BB DEFB $00

; Active Player:
g$96BC DEFB $00

; Active Player: Lives
@label=ActivePlayer_Lives
g$96BD DEFB $00

; Game status buffer entry at 96BE
g$96BE DEFB $00

; Visited Rooms
@label=VisitedRooms
g$96BF DEFB $00
 $96C0 DEFB $00
 $96C1 DEFB $00
 $96C2 DEFB $00
 $96C3 DEFB $00
 $96C4 DEFB $00
 $96C5 DEFB $00
 $96C6 DEFB $00
 $96C7 DEFB $00
 $96C8 DEFB $00
 $96C9 DEFB $00
 $96CA DEFB $00
 $96CB DEFB $00
 $96CC DEFB $00
 $96CD DEFB $00
 $96CE DEFB $00
 $96CF DEFB $00
 $96D0 DEFB $00
 $96D1 DEFB $00
 $96D2 DEFB $00
 $96D3 DEFB $00
 $96D4 DEFB $00
 $96D5 DEFB $00
 $96D6 DEFB $00
 $96D7 DEFB $00
 $96D8 DEFB $00
 $96D9 DEFB $00
 $96DA DEFB $00
 $96DB DEFB $00
 $96DC DEFB $00
 $96DD DEFB $00
 $96DE DEFB $00
; View the equivalent code in;
; #LIST
; { #ATICATAC$5E40 }
; LIST#

; Inactive Player:
g$96DF DEFB $00

; Inactive Player Lives
@label=InactivePlayer_Lives
g$96E0 DEFB $00

; Game status buffer entry at 96E1
g$96E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $96F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9701 DEFB $00

; Immortal Data
@label=ImmortalData
g$9702 DEFB $00
 $9703 DEFB $00,$00
 $9705 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $970D DEFB $00
 $970E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9716 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $971E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9726 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $972E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9736 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $973E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9746 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $974E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9756 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $975E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9766 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $976E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9776 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $977E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9786 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $978E DEFB $00,$00,$00,$00

; Nastie Data
@label=NastieData
g$9792 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $979A DEFB $00,$00,$00,$00
 $979E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97A6 DEFB $00,$00,$00,$00
 $97AA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97B2 DEFB $00,$00,$00,$00
 $97B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97BE DEFB $00,$00,$00,$00
 $97C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97CA DEFB $00,$00,$00,$00
 $97CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97D6 DEFB $00,$00,$00,$00

; Orchid Data
@label=OrchidData
g$97DA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97E2 DEFB $00,$00,$00,$00

; Object Data
@label=ObjectData
g$97E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $97F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Amulet Data
;
; .
;
; .
;
; Amulet part: #N(#EVAL((#PC - $97FE) / $0C) + $01).
@label=AmuletData
g$97FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9806 DEFB $00,$00,$00,$00
; Amulet part: #N(#EVAL((#PC - $97FE) / $0C) + $01).
 $980A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9812 DEFB $00,$00,$00,$00
; Amulet part: #N(#EVAL((#PC - $97FE) / $0C) + $01).
 $9816 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $981E DEFB $00,$00,$00,$00
; Amulet part: #N(#EVAL((#PC - $97FE) / $0C) + $01).
 $9822 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $982A DEFB $00,$00,$00,$00

; Data block at 982E
b$982E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9836 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $983E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9846 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $984E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9856 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $985E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9866 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $986E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9876 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $987E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9886 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $988E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9896 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $989E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98AE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98B6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98BE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98C6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98CE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98D6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98DE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98E6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98EE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $98FE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9906 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $990E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9916 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $991E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9926 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $992E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9936 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $993E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9946 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $994E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9956 DEFB $00,$00,$00,$00

; Security Check
;
; Used by the routine at #R$6000.
@label=SecurityCheck
c$995A LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $995D CP $7D        ; {Return if #REGa is not #N$7D.
 $995F RET NZ        ; }
; Continue on to #R$9960.
; .
; View the equivalent code in;
; #LIST
; { #COOKIE$5F00 }
; { #JETPAC$61E5 }
; { #LUNARJETMAN$8000 }
; { #PSSST$61C6 }
; { #TRANZAM$5F00 }
; LIST#

; Game Initialisation
@label=GameInitialisation
c$9960 CALL $BB9F    ; Call #R$BB9F.
 $9963 XOR A         ; {Set the border to black.
 $9964 OUT ($FE),A   ; }
 $9966 CALL $BB8F    ; Call #R$BB8F.
 $9969 CALL $BB81    ; Call #R$BB81.
 $996C CALL $B902    ; Call #R$B902.
; Set the attributes for the top banner (the whole line is INK:#N$47).
 $996F LD HL,$5800   ; #REGhl=#N$5800 (attribute buffer).
 $9972 LD BC,$2047   ; #REGbc=counter:#N$20, INK:#N$47.
@label=CreateWindow_Loop_Banner
*$9975 LD (HL),C     ; Write #N$47 to the attribute buffer.
 $9976 INC L         ; Move onto the next column.
 $9977 DJNZ $9975    ; Decrease counter by one and loop back to #R$9975 until
                     ; counter is zero.
 $9979 CALL $B563    ; Call #R$B563.
; Set the attributes for the score line (the whole line is INK:#N$46).
 $997C LD HL,$5820   ; #REGhl=#N$5820 (attribute buffer).
 $997F LD BC,$2046   ; #REGbc=counter:#N$20, INK:#N$46.
@label=CreateWindow_Loop_Score
*$9982 LD (HL),C     ; Write #N$46 to the attribute buffer.
 $9983 INC L         ; Move onto the next column.
 $9984 DJNZ $9982    ; Decrease counter by one and loop back to #R$9982 until
                     ; counter is zero.
 $9986 CALL $B5CC    ; Call #R$B5CC.
 $9989 CALL $B5D4    ; Call #R$B5D4.
 $998C CALL $B5DC    ; Call #R$B5DC.
; This entry point is used by the routine at #R$AA6A.
@label=Game_Restart
*$998F CALL $B3D5    ; Call #R$B3D5.
; Writes #N$00 to every address from #R$9698 to #R$995A.
 $9992 LD HL,$9698   ; #REGhl=#N$9698.
 $9995 LD BC,$02C2   ; #REGbc=#N$02C2.
 $9998 CALL $BBA5    ; Call #R$BBA5.
 $999B CALL $B5CC    ; Call #R$B5CC.
 $999E CALL $B5D4    ; Call #R$B5D4.
 $99A1 LD DE,$BD45   ; #REGde=#R$BD45.
 $99A4 CALL $BD6E    ; Call #R$BD6E.
 $99A7 CALL $B1D4    ; Call #R$B1D4.
; This entry point is used by the routine at #R$9A1D.
*$99AA LD SP,$6000   ; #REGsp=#R$6000.
 $99AD EI            ; Enable interrupts.
 $99AE LD IX,$970E   ; #REGix=#R$970E.
; This entry point is used by the routine at #R$99F0.
*$99B2 LD A,($5C78)  ; {#HTML(#REGc=<a
 $99B5 LD C,A        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
 $99B6 LD A,($9696)  ; #REGa=#R$9696.
 $99B9 CP C          ;
 $99BA JR Z,$99D0    ;
@label=FrameUpdate
 $99BC DI            ; Disable interrupts.
 $99BD LD A,($5C78)  ; {#HTML(Store <a
 $99C0 LD ($9696),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; at #R$9696.)}
 $99C3 LD A,$01      ; {Set #R$9697 to #N$01 (frame has updated).
 $99C5 LD ($9697),A  ; }
 $99C8 LD ($96A9),IX ;
 $99CC LD IX,$9702   ; #REGix=#R$9702.
*$99D0 LD A,R        ;
 $99D2 LD C,A        ;
 $99D3 LD A,($9695)  ;
 $99D6 ADC A,C       ;
 $99D7 LD ($9695),A  ;
 $99DA LD HL,$99F0   ; {Push #R$99F0 onto the stack.
 $99DD PUSH HL       ; }
 $99DE LD BC,$9B3E   ; #REGbc=#R$9B3E.
 $99E1 LD A,(IX+$00) ;
 $99E4 LD L,A        ;
 $99E5 LD H,$00      ;
 $99E7 ADD HL,HL     ;
 $99E8 ADD HL,BC     ;
 $99E9 LD A,(HL)     ;
 $99EA INC HL        ;
 $99EB LD H,(HL)     ;
 $99EC LD L,A        ;
 $99ED JP $5CB0      ;
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #JETPAC$61EB }
; { #LUNARJETMAN$800A }
; { #PSSST$61CD }
; { #TRANZAM$5F07 }
; LIST#

; Routine at 99F0
c$99F0 LD DE,$000C   ; #REGde=#N($000C, $04, $04).
 $99F3 ADD IX,DE     ;
 $99F5 PUSH IX       ;
 $99F7 POP HL        ;
 $99F8 LD A,($9697)  ;
 $99FB AND A         ;
 $99FC JR NZ,$9A18   ;
 $99FE LD DE,$982E   ; #REGde=#R$982E.
*$9A01 AND A         ;
 $9A02 SBC HL,DE     ;
 $9A04 JR C,$99B2    ;
 $9A06 LD A,($9697)  ;
 $9A09 AND A         ;
 $9A0A JR Z,$9A1D    ;
 $9A0C LD IX,($96A9) ;
 $9A10 XOR A         ;
 $9A11 LD ($9697),A  ;
 $9A14 EI            ;
 $9A15 JP $99B2      ;
*$9A18 LD DE,$970E   ; #REGde=#R$970E.
 $9A1B JR $9A01      ; Jump to #R$9A01.

; Routine at 9A1D
;
; Used by the routine at #R$99F0.
c$9A1D LD HL,($9693) ; #REGhl=#R$9693.
 $9A20 INC HL        ; {Increment #REGhl by one, and write this value back to
 $9A21 LD ($9693),HL ; #R$9693.}
 $9A24 LD A,($9695)  ; #REGa=#R$9695.
 $9A27 ADD A,L       ;
 $9A28 LD L,A        ;
 $9A29 LD A,($5C78)  ;
 $9A2C ADD A,L       ;
 $9A2D LD ($9695),A  ;
 $9A30 CALL $AC28    ; Call #R$AC28.
 $9A33 CALL $9A3C    ; Call #R$9A3C.
 $9A36 CALL $9ABC    ; Call #R$9ABC.
 $9A39 JP $99AA      ; Jump to #R$99AA.

; Handler: Destructable Enemies
;
; Used by the routine at #R$9A1D.
@label=HandlerDestructableEnemies
c$9A3C LD A,($96B5)  ; {If #R$96B5 is not zero, return.
 $9A3F AND A         ;
 $9A40 RET NZ        ; }
 $9A41 LD A,($96B1)  ; {If #R$96B1 is zero, jump to #R$9A4C.
 $9A44 AND A         ;
 $9A45 JR Z,$9A4C    ; }
 $9A47 DEC A         ; Decrease #REGa by one.
 $9A48 LD ($96B1),A  ; Write the value back to #R$96B1.
 $9A4B RET           ; Return.
*$9A4C LD A,($9702)  ; #REGa=#R$9702.
 $9A4F SUB $10       ;
 $9A51 CP $20        ;
 $9A53 RET NC        ;
 $9A54 LD IX,$9792   ; #REGix=#R$9792.
 $9A58 LD DE,$000C   ; #REGde=#N($000C,$04,$04).
 $9A5B LD B,$06      ; #REGb=#N$06 (counter).
*$9A5D LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $9A60 AND A         ; {If #REGa is zero, jump to #R$9A68.
 $9A61 JR Z,$9A68    ; }
 $9A63 ADD IX,DE     ; #REGix=#REGix+#REGde.
 $9A65 DJNZ $9A5D    ; Decrease counter by one and loop back to #R$9A5D until
                     ; counter is zero.
 $9A67 RET           ; Return.

; Routine at 9A68
;
; Used by the routine at #R$9A3C.
c$9A68 LD HL,$9792     ; #REGhl=#R$9792.
 $9A6B LD B,$06        ; #REGb=#N$06 (counter).
 $9A6D LD D,$00        ; #REGd=#N$00.
 $9A6F LD A,($9703)    ; {#REGe=#R$9703.
 $9A72 LD E,A          ; }
*$9A73 LD A,(HL)       ; #REGa=.
 $9A74 AND A           ;
 $9A75 JR Z,$9A7E      ;
 $9A77 INC HL          ;
 $9A78 LD A,E          ;
 $9A79 CP (HL)         ;
 $9A7A DEC HL          ;
 $9A7B JR NZ,$9A7E     ;
 $9A7D INC D           ;
*$9A7E LD A,$0C        ; #REGa=#N$0C.
 $9A80 CALL $9B37      ; Call #R$9B37.
 $9A83 DJNZ $9A73      ;
 $9A85 LD A,($96BE)    ;
 $9A88 CP D            ;
 $9A89 RET Z           ;
 $9A8A CALL $9B0D      ; Call #R$9B0D.
 $9A8D RET C           ;
 $9A8E LD A,($9693)    ; #REGa=#R$9693.
 $9A91 AND %00000011   ; Keep only bits 0-1.
 $9A93 LD L,A          ; {Create an offset.
 $9A94 LD H,$00        ; }
 $9A96 LD BC,$9AB8     ; {#REGhl=#R$9AB8 + #REGa.
 $9A99 ADD HL,BC       ; }
 $9A9A LD A,(HL)       ;
 $9A9B LD (IX+$05),A   ;
 $9A9E LD (IX+$00),$01 ;
; This entry point is used by the routine at #R$9ABC.
*$9AA2 XOR A           ; {Writes #N$00 to: #TABLE(default,centre)
 $9AA3 LD (IX+$06),A   ; { #REGix+#N$06 }
 $9AA6 LD (IX+$07),A   ; { #REGix+#N$07 }
 $9AA9 LD (IX+$08),A   ; { #REGix+#N$08 }
 $9AAC LD (IX+$09),A   ; { #REGix+#N$09 }
 $9AAF LD (IX+$0A),A   ; { #REGix+#N$0A }
 $9AB2 LD (IX+$0B),A   ; { #REGix+#N$0B }
                       ; TABLE#}
 $9AB5 JP $B919        ; Jump to #R$B919.

; Data block at 9AB8
@label=ColourBytes
b$9AB8 DEFB $42      ; TODO - make a colour block to demo the attribute:
                     ; #PEEK(#PC)
 $9AB9 DEFB $43      ; TODO - make a colour block to demo the attribute:
                     ; #PEEK(#PC)
 $9ABA DEFB $45      ; TODO - make a colour block to demo the attribute:
                     ; #PEEK(#PC)
 $9ABB DEFB $46      ; TODO - make a colour block to demo the attribute:
                     ; #PEEK(#PC)

; Routine at 9ABC
;
; Used by the routine at #R$9A1D.
c$9ABC LD A,($9702)    ;
 $9ABF SUB $10         ;
 $9AC1 CP $20          ;
 $9AC3 RET NC          ;
 $9AC4 LD A,($96B5)    ;
 $9AC7 AND A           ;
 $9AC8 RET NZ          ;
 $9AC9 LD DE,$9762     ;
 $9ACC LD A,(DE)       ;
 $9ACD AND A           ;
 $9ACE RET NZ          ;
 $9ACF LD HL,$96B4     ;
 $9AD2 LD A,(HL)       ;
 $9AD3 AND A           ;
 $9AD4 JR Z,$9AD8      ;
 $9AD6 DEC (HL)        ;
 $9AD7 RET NZ          ;
*$9AD8 PUSH DE         ;
 $9AD9 POP IX          ;
 $9ADB CALL $9AE9      ;
 $9ADE RET C           ;
 $9ADF LD (IX+$00),$34 ;
 $9AE3 LD (IX+$05),$46 ;
 $9AE7 JR $9AA2        ;

; Routine at 9AE9
;
; Used by the routine at #R$9ABC.
c$9AE9 LD A,($9693)  ;
 $9AEC AND %00000001 ; Keep bit 0.
 $9AEE JR NZ,$9AF9   ;
 $9AF0 LD A,($9705)  ;
 $9AF3 LD (IX+$03),A ;
 $9AF6 LD E,A        ;
 $9AF7 JR $9B18      ; Jump to #R$9B18.

; Routine at 9AF9
;
; Used by the routine at #R$9AE9.
c$9AF9 LD A,($9706)  ;
 $9AFC LD (IX+$04),A ;
 $9AFF LD D,A        ;
 $9B00 LD A,($9695)  ;
 $9B03 AND %01111111 ; Keep bits 0-6.
 $9B05 ADD A,$30     ;
 $9B07 LD E,A        ;
 $9B08 LD (IX+$03),A ;
 $9B0B JR $9B23      ; Jump to #R$9B23.

; Routine at 9B0D
;
; Used by the routine at #R$9A68.
c$9B0D LD A,($9695)  ; #REGa=#R$9695.
 $9B10 AND %01111111 ; Keep bits 0-6.
 $9B12 ADD A,$30     ;
 $9B14 LD E,A        ;
 $9B15 LD (IX+$03),A ;
; This entry point is used by the routine at #R$9AE9.
*$9B18 LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $9B1B AND %01111111 ; Keep bits 0-6.
 $9B1D ADD A,$30     ;
 $9B1F LD D,A        ;
 $9B20 LD (IX+$04),A ;
; This entry point is used by the routine at #R$9AF9.
*$9B23 LD A,($9703)  ; #REGa=#R$9703.
 $9B26 LD (IX+$01),A ;
 $9B29 LD BC,$1717   ; #REGbc=#N$1717.
 $9B2C CALL $AB01    ; Call #R$AB01.
 $9B2F RET C         ;
 $9B30 LD BC,$1717   ; #REGbc=#N$1717.
 $9B33 CALL $B81C    ; Call #R$B81C.
 $9B36 RET           ; Return.

; Add: #REGhl + #REGa
;
; Used by the routine at #R$9A68.
@label=Add_HL_A
c$9B37 ADD A,L       ; {#REGl=#REGa+#REGl.
 $9B38 LD L,A        ; }
 $9B39 LD A,H        ; {#REGh=#REGh+any carry.
 $9B3A ADC A,$00     ;
 $9B3C LD H,A        ; }
 $9B3D RET           ; Return.

; Jump Table
@label=JumpTable
w$9B3E DEFW $ADBD
 $9B40 DEFW $A3C5
 $9B42 DEFW $A3C5
 $9B44 DEFW $A3C5
 $9B46 DEFW $A3C5
 $9B48 DEFW $A3C5
 $9B4A DEFW $A3E0
 $9B4C DEFW $ADBD
 $9B4E DEFW $A42A
 $9B50 DEFW $A42A
 $9B52 DEFW $A42A
 $9B54 DEFW $A42A
 $9B56 DEFW $A42A
 $9B58 DEFW $A43B
 $9B5A DEFW $ADBD
 $9B5C DEFW $ADBD
 $9B5E DEFW $AECF
 $9B60 DEFW $AECF
 $9B62 DEFW $AECF
 $9B64 DEFW $AECF
 $9B66 DEFW $AECF
 $9B68 DEFW $AECF
 $9B6A DEFW $AECF
 $9B6C DEFW $AECF
 $9B6E DEFW $AECF
 $9B70 DEFW $AECF
 $9B72 DEFW $AECF
 $9B74 DEFW $AECF
 $9B76 DEFW $AECF
 $9B78 DEFW $AECF
 $9B7A DEFW $AECF
 $9B7C DEFW $AECF
 $9B7E DEFW $ADD0
 $9B80 DEFW $ADD0
 $9B82 DEFW $ADD0
 $9B84 DEFW $ADD0
 $9B86 DEFW $ADD0
 $9B88 DEFW $ADD0
 $9B8A DEFW $ADD0
 $9B8C DEFW $ADD0
 $9B8E DEFW $ADD0
 $9B90 DEFW $ADD0
 $9B92 DEFW $ADD0
 $9B94 DEFW $ADD0
 $9B96 DEFW $ADD0
 $9B98 DEFW $ADD0
 $9B9A DEFW $ADD0
 $9B9C DEFW $ADD0
 $9B9E DEFW $AD07
 $9BA0 DEFW $AD07
 $9BA2 DEFW $AD07
 $9BA4 DEFW $AD07
 $9BA6 DEFW $9D91
 $9BA8 DEFW $9D91
 $9BAA DEFW $9D91
 $9BAC DEFW $9D91
 $9BAE DEFW $AB74
 $9BB0 DEFW $AB74
 $9BB2 DEFW $AB74
 $9BB4 DEFW $AB74
 $9BB6 DEFW $AB74
 $9BB8 DEFW $AB74
 $9BBA DEFW $AB74
 $9BBC DEFW $AB74
 $9BBE DEFW $A9BE
 $9BC0 DEFW $AA0D
 $9BC2 DEFW $AA0D
 $9BC4 DEFW $A61B
 $9BC6 DEFW $A9BE
 $9BC8 DEFW $AA0D
 $9BCA DEFW $AA0D
 $9BCC DEFW $A61B
 $9BCE DEFW $A680
 $9BD0 DEFW $A680
 $9BD2 DEFW $A680
 $9BD4 DEFW $A680
 $9BD6 DEFW $A680
 $9BD8 DEFW $A680
 $9BDA DEFW $A680
 $9BDC DEFW $A680
 $9BDE DEFW $A858
 $9BE0 DEFW $A858
 $9BE2 DEFW $A858
 $9BE4 DEFW $A858
 $9BE6 DEFW $A858
 $9BE8 DEFW $A858
 $9BEA DEFW $A858
 $9BEC DEFW $A858
 $9BEE DEFW $A8F5
 $9BF0 DEFW $A964
 $9BF2 DEFW $ADBD
 $9BF4 DEFW $ADBD
 $9BF6 DEFW $A8F5
 $9BF8 DEFW $A964
 $9BFA DEFW $ADBD
 $9BFC DEFW $ADBD
 $9BFE DEFW $A54F
 $9C00 DEFW $A54F
 $9C02 DEFW $A54F
 $9C04 DEFW $A54F
 $9C06 DEFW $A54F
 $9C08 DEFW $A54F
 $9C0A DEFW $A54F
 $9C0C DEFW $A54F
 $9C0E DEFW $A4D7
 $9C10 DEFW $A4D7
 $9C12 DEFW $A4D7
 $9C14 DEFW $A4D7
 $9C16 DEFW $A54F
 $9C18 DEFW $A54F
 $9C1A DEFW $A54F
 $9C1C DEFW $A54F
 $9C1E DEFW $A54F
 $9C20 DEFW $A54F
 $9C22 DEFW $A54F
 $9C24 DEFW $A54F
 $9C26 DEFW $A4D7
 $9C28 DEFW $A4D7
 $9C2A DEFW $A4D7
 $9C2C DEFW $A4D7
 $9C2E DEFW $A4D7
 $9C30 DEFW $A4D7
 $9C32 DEFW $A4D7
 $9C34 DEFW $A4D7
 $9C36 DEFW $ADBD
 $9C38 DEFW $ADBD
 $9C3A DEFW $ADBD
 $9C3C DEFW $ADBD
 $9C3E DEFW $A312
 $9C40 DEFW $A312
 $9C42 DEFW $A312
 $9C44 DEFW $A312
 $9C46 DEFW $A312
 $9C48 DEFW $A305
 $9C4A DEFW $A312
 $9C4C DEFW $A312
 $9C4E DEFW $A312
 $9C50 DEFW $A312
 $9C52 DEFW $A312
 $9C54 DEFW $A312
 $9C56 DEFW $A312
 $9C58 DEFW $A312
 $9C5A DEFW $A312
 $9C5C DEFW $A312
 $9C5E DEFW $A1AB
 $9C60 DEFW $A1AB
 $9C62 DEFW $A1AB
 $9C64 DEFW $A1AB
 $9C66 DEFW $9F16
 $9C68 DEFW $9F16
 $9C6A DEFW $ADBD
 $9C6C DEFW $ADBD
 $9C6E DEFW $A54F
 $9C70 DEFW $A54F
 $9C72 DEFW $A54F
 $9C74 DEFW $A54F
 $9C76 DEFW $A54F
 $9C78 DEFW $A54F
 $9C7A DEFW $A54F
 $9C7C DEFW $A54F
 $9C7E DEFW $9E72
 $9C80 DEFW $9E72
 $9C82 DEFW $9E72
 $9C84 DEFW $9E72
 $9C86 DEFW $9EB3
 $9C88 DEFW $9EB3
 $9C8A DEFW $9EB3
 $9C8C DEFW $9EB3
 $9C8E DEFW $9E72
 $9C90 DEFW $9E72
 $9C92 DEFW $9E72
 $9C94 DEFW $9E72
 $9C96 DEFW $9EB3
 $9C98 DEFW $9EB3
 $9C9A DEFW $9EB3
 $9C9C DEFW $9EB3
 $9C9E DEFW $A54F
 $9CA0 DEFW $A54F
 $9CA2 DEFW $A54F
 $9CA4 DEFW $A54F
 $9CA6 DEFW $A54F
 $9CA8 DEFW $A54F
 $9CAA DEFW $A54F
 $9CAC DEFW $A54F
 $9CAE DEFW $A54F
 $9CB0 DEFW $A54F
 $9CB2 DEFW $A54F
 $9CB4 DEFW $A54F
 $9CB6 DEFW $A54F
 $9CB8 DEFW $A54F
 $9CBA DEFW $A54F
 $9CBC DEFW $A54F
 $9CBE DEFW $A54F
 $9CC0 DEFW $A54F
 $9CC2 DEFW $A54F
 $9CC4 DEFW $A54F

; Print Rooms Visited
;
; Used by the routine at #R$AA6A.
@label=PrintRoomsVisited
c$9CC6 LD DE,$0000   ; #REGde=#N($0000,$04,$04).
 $9CC9 LD BC,$0820   ; #REGbc=#N$0820.
 $9CCC LD HL,$96BF   ; #REGhl=#R$96BF.
*$9CCF PUSH BC       ; Stash #REGbc on the stack.
 $9CD0 LD A,(HL)     ;
 $9CD1 INC HL        ;
*$9CD2 RRCA          ;
 $9CD3 JR NC,$9CD6   ;
 $9CD5 INC DE        ;
*$9CD6 DJNZ $9CD2    ;
 $9CD8 POP BC        ;
 $9CD9 DEC C         ;
 $9CDA JR NZ,$9CCF   ;
 $9CDC LD A,($970D)  ; #REGa=#R$970D.
 $9CDF LD B,$04      ; #REGb=#N$04.
*$9CE1 RRCA          ;
 $9CE2 JR NC,$9CE5   ;
 $9CE4 INC DE        ;
*$9CE5 DJNZ $9CE1    ;
 $9CE7 LD BC,$6276   ; #REGbc=#R$6276.
 $9CEA LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
 $9CED XOR A         ;
*$9CEE ADD HL,BC     ;
 $9CEF ADC A,$00     ;
 $9CF1 DAA           ;
 $9CF2 DEC DE        ;
 $9CF3 PUSH AF       ;
 $9CF4 LD A,E        ;
 $9CF5 OR D          ;
 $9CF6 JR Z,$9CFB    ;
 $9CF8 POP AF        ;
 $9CF9 JR $9CEE      ; Jump to #R$9CEE.
*$9CFB POP AF        ;
 $9CFC LD BC,$0028   ;
 $9CFF ADD HL,BC     ;
 $9D00 ADC A,$00     ;
 $9D02 DAA           ;
 $9D03 LD ($96B7),A  ;
 $9D06 LD A,$00      ;
 $9D08 ADC A,$00     ;
 $9D0A DAA           ;
 $9D0B LD ($96B6),A  ;
 $9D0E LD HL,$48F8   ; #REGhl=#N$48F8.
 $9D11 LD DE,$96B6   ; #REGde=#R$96B6.
 $9D14 LD B,$01      ; #REGb=#N$01.
 $9D16 LD A,(DE)     ;
 $9D17 AND A         ;
 $9D18 JR Z,$9D1E    ;
 $9D1A INC B         ;
 $9D1B JP $B5F0      ; Jump to #R$B5F0.
*$9D1E INC HL        ;
 $9D1F INC DE        ;
 $9D20 JP $B5E4      ; Jump to #R$B5E4.
; View the equivalent code in;
; #LIST
; { #ATICATAC$96C9 }
; LIST#

; Visit Room
;
; Used by the routines at #R$B12F and #R$B1D4.
@label=VisitRoom
c$9D23 LD A,(IX+$01) ; {#REGc=#REGix+#N$01 (current location).
 $9D26 LD C,A        ; }
 $9D27 RRCA          ;
 $9D28 RRCA          ;
 $9D29 RRCA          ;
 $9D2A AND %00011111 ; Keep only bits 0-4.
 $9D2C LD L,A        ; {Create an offset in #REGhl.
 $9D2D LD H,$00      ; }
 $9D2F LD A,C        ; #REGa=#REGix+#N$01 (current location).
 $9D30 RLCA          ;
 $9D31 RLCA          ;
 $9D32 RLCA          ;
 $9D33 AND %00111000 ; Keep only bits 3-5.
 $9D35 OR %11000110  ; Set bits 1-2, 6-7.
 $9D37 LD ($9D3F),A  ; Write this value to #R$9D3E(#N$9D3F) which updates the
                     ; bit to set.
 $9D3A LD BC,$96BF   ; {#REGhl=#R$96BF+#REGbc.
 $9D3D ADD HL,BC     ; }
 $9D3E SET 0,(HL)    ; With above, set the bit to mark the room as having been
                     ; visited.
 $9D40 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$96AF }
; LIST#

; Routine at 9D41
;
; Used by the routine at #R$AAED.
;
; .
;
; Each block of amulet data is #N$0B bytes long.
c$9D41 LD DE,$000B   ; #REGde=#N($000B,$04,$04).
 $9D44 LD HL,$97FE   ; #REGhl=#R$97FE.
; There are four pieces of the amulet.
 $9D47 LD B,$04      ; #REGb=#N$04.
*$9D49 LD A,(HL)     ; #REGa=#REGhl (a byte of amulet data).
 $9D4A INC HL        ; Increment #REGhl by one.
 $9D4B AND A         ; {If #REGa is zero, jump to #R$9D66.
 $9D4C JR Z,$9D66    ; }
 $9D4E LD A,(HL)     ; #REGa=#REGhl (a byte of amulet data).
 $9D4F AND %00001111 ; Keep only bits 0-3.
 $9D51 LD C,A        ; Store the result in #REGc.
 $9D52 LD A,(IX+$01) ; #REGa=#REGix+#N$01 (current location).
 $9D55 AND %00001111 ; Keep only bits 0-3.
 $9D57 CP C          ;
 $9D58 JR Z,$9D6B    ;
*$9D5A LD A,(HL)     ;
 $9D5B AND %11110000 ; Keep only bits 4-7.
 $9D5D LD C,A        ;
 $9D5E LD A,(IX+$01) ; #REGa=#REGix+#N$01 (current location).
 $9D61 AND %11110000 ; Keep only bits 4-7.
 $9D63 CP C          ;
 $9D64 JR Z,$9D7D    ;
*$9D66 ADD HL,DE     ;
 $9D67 DJNZ $9D49    ;
 $9D69 AND A         ;
 $9D6A RET           ; Return.
*$9D6B INC HL        ; {Increment #REGhl by two.
 $9D6C INC HL        ; }
 $9D6D LD A,(HL)     ;
 $9D6E DEC HL        ;
 $9D6F DEC HL        ;
 $9D70 SUB (IX+$03)  ;
 $9D73 JP P,$9D78    ;
 $9D76 NEG           ;
*$9D78 CP $10        ;
 $9D7A JR NC,$9D5A   ;
 $9D7C RET           ; Return.
*$9D7D INC HL        ;
 $9D7E INC HL        ;
 $9D7F INC HL        ;
 $9D80 LD A,(HL)     ;
 $9D81 DEC HL        ;
 $9D82 DEC HL        ;
 $9D83 DEC HL        ;
 $9D84 SUB (IX+$04)  ;
 $9D87 JP P,$9D8C    ;
 $9D8A NEG           ;
*$9D8C CP $10        ;
 $9D8E JR NC,$9D66   ;
 $9D90 RET           ; Return.

; Routine at 9D91
c$9D91 LD A,($9703)  ; #REGa=#R$9703.
 $9D94 CP (IX+$01)   ;
 $9D97 JP NZ,$A493   ;
 $9D9A LD A,$17      ; {Write #N$17 to #R$9D9A.
 $9D9C LD ($96AD),A  ; }
 $9D9F CALL $BB0B    ; Call #R$BB0B.
 $9DA2 LD A,($9702)  ; #REGa=#R$9702.
 $9DA5 SUB $10       ;
 $9DA7 CP $20        ;
 $9DA9 JP NC,$A4A6   ;
 $9DAC DEC (IX+$08)  ;
 $9DAF JP Z,$A4A1    ;
 $9DB2 DEC (IX+$02)  ;
 $9DB5 CALL Z,$9E0E  ;
 $9DB8 CALL $A44B    ; Call #R$A44B.
 $9DBB BIT 0,B       ;
 $9DBD JR NZ,$9E04   ;
 $9DBF BIT 1,B       ;
 $9DC1 JR NZ,$9E09   ;
; This entry point is used by the routines at #R$9E04 and #R$9E09.
*$9DC3 LD BC,$170F   ; #REGbc=#N$170F.
 $9DC6 CALL $B81C    ; Call #R$B81C.
 $9DC9 CALL $AAED    ; Call #R$AAED.
 $9DCC CALL Z,$9E0E  ;
 $9DCF LD A,($9695)  ;
 $9DD2 AND $03       ;
 $9DD4 OR $34        ;
 $9DD6 LD (IX+$00),A ;
 $9DD9 CALL $9E64    ; Call #R$9E64.
 $9DDC LD (IX+$05),A ;
 $9DDF LD (IX+$03),E ;
 $9DE2 LD (IX+$04),D ;
 $9DE5 LD A,($9707)  ;
 $9DE8 CP $47        ;
 $9DEA JR NZ,$9DFE   ;
 $9DEC LD BC,$130F   ; #REGbc=#N$130F.
 $9DEF CALL $AB01    ; Call #R$AB01.
 $9DF2 JR NC,$9DFE   ;
 $9DF4 LD A,($9705)  ;
 $9DF7 RLCA          ;
 $9DF8 AND %00000001 ; Keep only bit 0.
 $9DFA INC A         ;
 $9DFB LD ($9704),A  ;
*$9DFE CALL $AD5D    ; Call #R$AD5D.
 $9E01 JP $BECC      ; Jump to #R$BECC.

; Routine at 9E04
;
; Used by the routine at #R$9D91.
c$9E04 CALL $A5A9    ; Call #R$A5A9.
 $9E07 JR $9DC3      ; Jump to #R$9DC3.

; Routine at 9E09
;
; Used by the routine at #R$9D91.
c$9E09 CALL $A5BA    ; Call #R$A5BA.
 $9E0C JR $9DC3      ; Jump to #R$9DC3.

; Routine at 9E0E
;
; Used by the routine at #R$9D91.
c$9E0E LD (IX+$02),$40 ;
 $9E12 LD A,($9693)    ;
 $9E15 AND %00000001   ; Keep only bit 0.
 $9E17 JR NZ,$9E2F     ;
 $9E19 LD A,($9695)    ;
 $9E1C AND %00000111   ; Keep only bits 0-2.
 $9E1E CALL $9E53      ; Call #R$9E53.
 $9E21 LD (IX+$06),A   ;
 $9E24 LD A,R          ;
 $9E26 LD C,A          ;
 $9E27 LD A,($9693)    ;
 $9E2A ADD A,C         ;
 $9E2B LD (IX+$07),A   ;
 $9E2E RET             ; Return.

; Routine at 9E2F
;
; Used by the routine at #R$9E0E.
c$9E2F LD A,($9705)    ;
 $9E32 CP (IX+$03)     ;
 $9E35 JR C,$9E48      ;
 $9E37 LD (IX+$06),$40 ;
; This entry point is used by the routine at #R$9E48.
*$9E3B LD A,($9706)    ;
 $9E3E CP (IX+$04)     ;
 $9E41 JR C,$9E4E      ;
 $9E43 LD (IX+$07),$40 ;
 $9E47 RET             ;

; Routine at 9E48
;
; Used by the routine at #R$9E2F.
c$9E48 LD (IX+$06),$C0 ;
 $9E4C JR $9E3B        ;

; Routine at 9E4E
;
; Used by the routine at #R$9E2F.
c$9E4E LD (IX+$06),$40 ;
 $9E52 RET             ;

; Routine at 9E53
;
; Used by the routine at #R$9E0E.
c$9E53 LD BC,$9E5C   ; #REGb=#R$9E5C.
 $9E56 LD L,A        ;
 $9E57 LD H,$00      ;
 $9E59 ADD HL,BC     ;
 $9E5A LD A,(HL)     ;
 $9E5B RET           ; Return.

; Data block at 9E5C
b$9E5C DEFB $50,$60,$70,$60,$80,$90,$A0,$B0

; Routine at 9E64
;
; Used by the routine at #R$9D91.
c$9E64 LD A,($9695)  ; #REGa=#R$9695.
 $9E67 AND %00000111 ; Keep only bits 0-2.
 $9E69 CP $02        ;
 $9E6B JR NC,$9E6F   ;
 $9E6D OR %00000110  ; Set bits 1-2.
*$9E6F OR %01000000  ; Set bit 6.
 $9E71 RET           ; Return.

; Routine at 9E72
c$9E72 CALL $BB0B      ; Call #R$BB0B.
 $9E75 CALL $AD93      ; Call #R$AD93.
 $9E78 LD A,$20        ; {Write #N$20 to #R$96AD.
 $9E7A LD ($96AD),A    ; }
 $9E7D LD A,(IX+$02)   ;
 $9E80 AND A           ;
 $9E81 JR NZ,$9E99     ;
 $9E83 CALL $AFE8      ; Call #R$AFE8.
 $9E86 LD BC,$171F     ; #REGbc=#N$171F.
 $9E89 CALL $B81C      ; Call #R$B81C.
 $9E8C CALL $AAED      ; Call #R$AAED.
 $9E8F JP NZ,$AD28     ;
 $9E92 SET 2,(IX+$00)  ;
 $9E96 JP $AD46        ; Jump to #R$AD46.
*$9E99 DEC A           ;
 $9E9A LD (IX+$02),A   ;
 $9E9D LD E,(IX+$03)   ;
 $9EA0 LD D,(IX+$04)   ;
 $9EA3 LD A,(IX+$00)   ;
 $9EA6 RRCA            ;
 $9EA7 AND %00000001   ; Keep only bit 0.
 $9EA9 LD D,A          ; Store the result in #REGd.
 $9EAA LD BC,$0F1C     ; #REGbc=#N$0F1C.
 $9EAD CALL $AB36      ; Call #R$AB36.
 $9EB0 JP $AD46        ; Jump to #R$AD46.
 $9EB3 LD C,(IX+$01)   ;
 $9EB6 PUSH BC         ;
 $9EB7 CALL $A630      ; Call #R$A630.
 $9EBA POP BC          ;
 $9EBB LD A,(IX+$01)   ;
 $9EBE CP C            ;
 $9EBF CALL NZ,$9F06   ;
 $9EC2 LD A,($9703)    ;
 $9EC5 CP (IX+$01)     ;
 $9EC8 RET NZ          ;
 $9EC9 CALL $BB0B      ; Call #R$BB0B.
 $9ECC LD A,$20        ; {Write #N$20 to #R$96AD.
 $9ECE LD ($96AD),A    ; }
 $9ED1 LD A,(IX+$00)   ;
 $9ED4 RRCA            ;
 $9ED5 AND %00000001   ; Keep only bit 0.
 $9ED7 LD D,A          ;
 $9ED8 LD BC,$0F1C     ; #REGbc=#N$0F1C.
 $9EDB LD A,($96B5)    ; {If #R$96B5 is not zero, jump to #R$9F01.
 $9EDE AND A           ;
 $9EDF JR NZ,$9F01     ; }
 $9EE1 LD A,($9702)    ;
 $9EE4 SUB $10         ;
 $9EE6 CP $20          ;
 $9EE8 JR NC,$9F01     ;
 $9EEA CALL $AB36      ; Call #R$AB36.
*$9EED JP NC,$AD5D     ;
 $9EF0 RES 2,(IX+$00)  ;
 $9EF4 CALL $ADA2      ; Call #R$ADA2.
 $9EF7 LD (IX+$02),$0F ;
 $9EFB CALL $AD5D      ; Call #R$AD5D.
 $9EFE JP $BF17        ; Jump to #R$BF17.
*$9F01 CALL $AB0E      ; Call #R$AB0E.
 $9F04 JR $9EED        ; Jump to #R$9EED.
*$9F06 LD A,($9695)    ;
 $9F09 AND $08         ;
 $9F0B LD C,A          ;
 $9F0C LD A,(IX+$00)   ;
 $9F0F AND $F3         ;
 $9F11 OR C            ;
 $9F12 LD (IX+$00),A   ;
 $9F15 RET             ;
 $9F16 LD A,($9703)    ;
 $9F19 CP (IX+$01)     ;
 $9F1C RET NZ          ;
 $9F1D CALL $BB0B      ;
 $9F20 LD A,($970D)    ;
 $9F23 AND $0F         ;
 $9F25 CP $0F          ;
 $9F27 JR Z,$9F40      ;
 $9F29 CALL $AD93      ;
 $9F2C LD BC,$170F     ;
 $9F2F CALL $AB3D      ;
 $9F32 JP NC,$AD5D     ;
 $9F35 LD A,$80        ;
 $9F37 LD ($9704),A    ;
 $9F3A CALL $BF17      ;
 $9F3D JP $AD5D        ;
*$9F40 LD A,($9705)    ;
 $9F43 BIT 7,A         ;
 $9F45 JR Z,$9F5D      ;
 $9F47 LD (IX+$06),$E0 ;
 $9F4B CALL $AFE8      ;
 $9F4E LD A,E          ;
 $9F4F CP $40          ;
*$9F51 JP C,$AD5D      ;
 $9F54 LD (IX+$03),E   ;
 $9F57 CALL $AD93      ;
 $9F5A JP $AD5D        ;
*$9F5D LD (IX+$06),$20 ;
 $9F61 CALL $AFE8      ;
 $9F64 LD A,E          ;
 $9F65 CP $C0          ;
 $9F67 CCF             ;
 $9F68 JR $9F51        ;

; Game Complete
;
; Used by the routine at #R$A18C.
;
; .
;
; Clear down the play area.
@label=GameComplete
c$9F6A CALL $BB7C    ; Call #R$BB7C.
 $9F6D CALL $BB5C    ; Call #R$BB5C.
; Display the "Game Complete" screen.
 $9F70 LD HL,$C386   ; #REGhl=#R$C386.
 $9F73 CALL $BBF7    ; Call #R$BBF7.
; Display the "Game Complete" messaging.
 $9F76 LD DE,$9F91   ; #REGde=#R$9F91.
; There are six lines of text.
 $9F79 LD B,$06      ; #REGb=#N$06.
 $9F7B CALL $A036    ; Call #R$A036.
 $9F7E LD DE,$BC67   ; #REGde=#R$BC67.
 $9F81 CALL $BD6E    ; Call #R$BD6E.
 $9F84 CALL $AC28    ; Call #R$AC28.
 $9F87 XOR A         ; {Write #N$00 to #R$96BD.
 $9F88 LD ($96BD),A  ; }
 $9F8B CALL $B7CD    ; Call #R$B7CD.
 $9F8E JP $AA27      ; Jump to #R$AA27.

; Congratulations Messaging
;
; #TABLE(default,centre,centre,centre)
; { =h X Position | =h Y Position | =h Attribute | =h Text }
; #FOREACH($9F91,$9F9C,$9FB6,$9FD1,$9FF0,$A003)(n,{ #N(#EVAL(#PEEKn / $08)) | #N(#EVAL(#PEEK(n + $01) / $08)) | #N(#PEEK(n + $02)) | #STR(n + $03) })
; TABLE#
@label=GameComplete_Copy
b$9F91 DEFB $60,$20                                     ; X / Y position.
 $9F93 DEFB $47                                         ; Attribute.
 $9F94 DEFM "THE NEX","T"+$80                           ; "#STR(#PC)".
 $9F9C DEFB $28,$30                                     ; X / Y position.
 $9F9E DEFB $47                                         ; Attribute.
 $9F9F DEFM "ADVENTURES OF SABRE MA","N"+$80            ; "#STR(#PC)".
 $9FB6 DEFB $20,$40                                     ; X / Y position.
 $9FB8 DEFB $47                                         ; Attribute.
 $9FB9 DEFM "WILL BE CONTINUED IN TH","E"+$80           ; "#STR(#PC)".
 $9FD1 DEFB $10,$88                                     ; X / Y position.
 $9FD3 DEFB $45                                         ; Attribute.
 $9FD4 DEFM "THE UNDER-WURLDE ",$7F," COPYRIGH","T"+$80 ; "#STR(#PC)".
 $9FF0 DEFB $48,$98                                     ; X / Y position.
 $9FF2 DEFB $45                                         ; Attribute.
 $9FF3 DEFM "1984 A.C.G. LTD","."+$80                   ; "#STR(#PC)".
 $A003 DEFB $30,$A8                                     ; X / Y position.
 $A005 DEFB $45                                         ; Attribute.
 $A006 DEFM "-ALL RIGHTS RESERVED","-"+$80              ; "#STR(#PC)".

; Display Poem
;
; Used by the routine at #R$A234.
;
; IX Actor Entity
@label=DisplayPoem
c$A01B LD A,(IX+$0B)                            ; Fetch the current number of
                                                ; amulet pieces which need to
                                                ; be collected.
; Convert "number of pieces to collect" into "number of pieces collected".
 $A01E LD BC,$0400                              ; #REGbc=#N$0400 counter =
                                                ; #N$04 (total number of
                                                ; pieces) and initialise #REGc
                                                ; to #N$00.
@label=Poem_CollectCollected_Loop
*$A021 RRCA                                     ; {The number of amulet pieces which need to be collected is held in bits, so rotate #REGa
 $A022 JR NC,$A025                              ;           and if there are no bits to carry over then jump to #R$A025.
                                                ; }
 $A024 INC C                                    ; Increment #REGc by one.
@label=Poem_CollectCollected_Skip
*$A025 DJNZ $A021                               ; Decrease counter by one and
                                                ; loop back to #R$A021 until
                                                ; counter is zero.
 $A027 LD A,C                                   ; #REGa=#REGc (the number of
                                                ; amulet pieces collected).
; Check if poem "1" should be displayed.
 $A028 DEC A                                    ; {Decrease #REGa by one and
 $A029 JR Z,$A046                               ; jump to #R$A046 if #REGa is
                                                ; now zero.}
; Check if poem "2" should be displayed.
 $A02B DEC A                                    ; {Decrease #REGa by one and
 $A02C JR Z,$A04B                               ; jump to #R$A04B if #REGa is
                                                ; now zero.}
; Check if poem "3" should be displayed.
 $A02E DEC A                                    ; {Decrease #REGa by one and
 $A02F JR Z,$A050                               ; jump to #R$A050 if #REGa is
                                                ; now zero.}
; Handles pointing to poem "4".
 $A031 LD DE,$A13B                              ; #REGde=#R$A13B.
; Each poem is four lines of prose.
@label=Poem_Start
*$A034 LD B,$04                                 ; #REGb=#N$04.
; This entry point is used by the routine at #R$9F6A.
@label=Poem_Loop
*$A036 EX DE,HL                                 ;
 $A037 LD E,(HL)                                ;
 $A038 INC HL                                   ;
 $A039 LD D,(HL)                                ;
 $A03A INC HL                                   ;
 $A03B EX DE,HL                                 ;
 $A03C PUSH BC                                  ; Stash #REGbc on the stack.
 $A03D CALL $B53D                               ; Call #R$B53D.
 $A040 EXX                                      ; Switch to the shadow
                                                ; registers.
 $A041 INC DE                                   ; Increment #REGde by one.
 $A042 POP BC                                   ; Restore #REGbc from the
                                                ; stack.
 $A043 DJNZ $A036                               ; Decrease counter by one and
                                                ; loop back to #R$A036 until
                                                ; counter is zero.
 $A045 RET                                      ; Return.
; Handles pointing to poem "1".
@label=Poem_1_Reference
*$A046 LD DE,$A055                              ; #REGde=#R$A055.
 $A049 JR $A034                                 ; Jump to #R$A034.
; Handles pointing to poem "2".
@label=Poem_2_Reference
*$A04B LD DE,$A0A7                              ; #REGde=#R$A0A7.
 $A04E JR $A034                                 ; Jump to #R$A034.
; Handles pointing to poem "3".
@label=Poem_3_Reference
*$A050 LD DE,$A0F4                              ; #REGde=#R$A0F4.
 $A053 JR $A034                                 ; Jump to #R$A034.
; Poem 1. #TABLE(default,centre,centre,centre)
; { =h X Position | =h Y Position | =h Attribute | =h Text }
; #FOREACH($A055,$A071,$A07E,$A097)(n,{ #N(#EVAL(#PEEKn / $08)) | #N(#EVAL(#PEEK(n + $01) / $08)) | #N(#PEEK(n + $02)) | #STR(n + $03) })
; TABLE#
@label=Poem_1_Copy
 $A055 DEFB $20,$80                             ; X / Y position.
 $A057 DEFB $47                                 ; Attribute.
 $A058 DEFM "ONE PIECE IS ALL THAT YO","U"+$80  ; "#STR(#PC)".
 $A071 DEFB $58,$90                             ; X / Y position.
 $A073 DEFB $47                                 ; Attribute.
 $A074 DEFM "HAVE FOUN","D"+$80                 ; "#STR(#PC)".
 $A07E DEFB $28,$A0                             ; X / Y position.
 $A080 DEFB $45                                 ; Attribute.
 $A081 DEFM "COLLECT THREE MORE AN","D"+$80     ; "#STR(#PC)".
 $A097 DEFB $48,$B0                             ; X / Y position.
 $A099 DEFB $45                                 ; Attribute.
 $A09A DEFM "OUTWARD BOUN","D"+$80              ; "#STR(#PC)".
; Poem 2. #TABLE(default,centre,centre,centre)
; { =h X Position | =h Y Position | =h Attribute | =h Text }
; #FOREACH($A0A7,$A0C4,$A0CE,$A0E9)(n,{ #N(#EVAL(#PEEKn / $08)) | #N(#EVAL(#PEEK(n + $01) / $08)) | #N(#PEEK(n + $02)) | #STR(n + $03) })
; TABLE#
@label=Poem_2_Copy
 $A0A7 DEFB $18,$80                             ; X / Y position.
 $A0A9 DEFB $47                                 ; Attribute.
 $A0AA DEFM "TWO PIECES FOUND ARE YOUR","S"+$80 ; "#STR(#PC)".
 $A0C4 DEFB $60,$90                             ; X / Y position.
 $A0C6 DEFB $47                                 ; Attribute.
 $A0C7 DEFM "TO KEE","P"+$80                    ; "#STR(#PC)".
 $A0CE DEFB $20,$A0                             ; X / Y position.
 $A0D0 DEFB $45                                 ; Attribute.
 $A0D1 DEFM "THIS SCORE AGAIN IS WHA","T"+$80   ; "#STR(#PC)".
 $A0E9 DEFB $60,$B0                             ; X / Y position.
 $A0EB DEFB $45                                 ; Attribute.
 $A0EC DEFM "YOU SEE","K"+$80                   ; "#STR(#PC)".
; Poem 3. #TABLE(default,centre,centre,centre)
; { =h X Position | =h Y Position | =h Attribute | =h Text }
; #FOREACH($A0F4,$A10A,$A116,$A130)(n,{ #N(#EVAL(#PEEKn / $08)) | #N(#EVAL(#PEEK(n + $01) / $08)) | #N(#PEEK(n + $02)) | #STR(n + $03) })
; TABLE#
@label=Poem_3_Copy
 $A0F4 DEFB $38,$80                             ; X / Y position.
 $A0F6 DEFB $47                                 ; Attribute.
 $A0F7 DEFM "ONE PIECE MORE MUS","T"+$80        ; "#STR(#PC)".
 $A10A DEFB $60,$90                             ; X / Y position.
 $A10C DEFB $47                                 ; Attribute.
 $A10D DEFM "YOU AMAS","S"+$80                  ; "#STR(#PC)".
 $A116 DEFB $28,$A0                             ; X / Y position.
 $A118 DEFB $45                                 ; Attribute.
 $A119 DEFM "AND FIND THE KEEPER YO","U"+$80    ; "#STR(#PC)".
 $A130 DEFB $60,$B0                             ; X / Y position.
 $A132 DEFB $45                                 ; Attribute.
 $A133 DEFM "MAY PAS","S"+$80                   ; "#STR(#PC)".
; Poem 4. #TABLE(default,centre,centre,centre)
; { =h X Position | =h Y Position | =h Attribute | =h Text }
; #FOREACH($A13B,$A158,$A165,$A180)(n,{ #N(#EVAL(#PEEKn / $08)) | #N(#EVAL(#PEEK(n + $01) / $08)) | #N(#PEEK(n + $02)) | #STR(n + $03) })
; TABLE#
@label=Poem_4_Copy
 $A13B DEFB $18,$80                             ; X / Y position.
 $A13D DEFB $47                                 ; Attribute.
 $A13E DEFM "FOUR PIECES FOUND HAVE NO","W"+$80 ; "#STR(#PC)".
 $A158 DEFB $58,$90                             ; X / Y position.
 $A15A DEFB $47                                 ; Attribute.
 $A15B DEFM "MADE WHOL","E"+$80                 ; "#STR(#PC)".
 $A165 DEFB $20,$A0                             ; X / Y position.
 $A167 DEFB $45                                 ; Attribute.
 $A168 DEFM "TO FIND THE CAVE MUST B","E"+$80   ; "#STR(#PC)".
 $A180 DEFB $58,$B0                             ; X / Y position.
 $A182 DEFB $45                                 ; Attribute.
 $A183 DEFM "YOUR GOA","L"+$80                  ; "#STR(#PC)".

; Routine at A18C
;
; Used by the routines at #R$ADD0 and #R$AEEF.
c$A18C LD A,(IX+$01)   ; #REGa=#REGix+#N$01 (current location).
 $A18F CP $88          ; {If this is not location #N$88 (room #N$07) then jump
 $A191 JR NZ,$A19F     ; to #R$A19F.}
 $A193 LD A,(IX+$04)   ; #REGa=#REGix+#N$04 (sprite y co-ordinate).
 $A196 CP $80          ;
 $A198 JR NC,$A19F     ;
 $A19A INC SP          ;
 $A19B INC SP          ;
 $A19C JP $9F6A        ; Jump to #R$9F6A.
*$A19F BIT 7,(IX+$0B)  ;
 $A1A3 RET Z           ;
 $A1A4 RES 7,(IX+$0B)  ;
 $A1A8 JP $A207        ; Jump to #R$A207.
 $A1AB LD A,($9703)    ;
 $A1AE CP (IX+$01)     ;
 $A1B1 RET NZ          ;
 $A1B2 LD BC,$0C0C     ; #REGbc=#N$0C0C.
 $A1B5 LD A,($9693)    ; #REGa=#R$9693.
 $A1B8 AND %00000001   ; Keep only bit 0.
 $A1BA JR NZ,$A1C7     ;
 $A1BC LD A,(IX+$05)   ; #REGa=#REGix+#N$05 (entity colour).
 $A1BF INC A           ;
 $A1C0 AND %00000011   ; Keep only bits 0-1.
 $A1C2 OR %01000100    ; Set bits 2 and 6.
 $A1C4 LD (IX+$05),A   ; Write #REGa back to #REGix+#N$05 (entity colour).
*$A1C7 CALL $AB01      ; Call #R$AB01.
 $A1CA JP NC,$A31A     ;
 $A1CD LD A,($970D)    ;
 $A1D0 OR $80          ;
 $A1D2 LD C,A          ;
 $A1D3 LD A,(IX+$00)   ;
 $A1D6 SUB $90         ;
 $A1D8 JR Z,$A1F3      ;
 $A1DA DEC A           ;
 $A1DB JR Z,$A1F7      ;
 $A1DD DEC A           ;
 $A1DE JR Z,$A1FB      ;
 $A1E0 SET 3,C         ;
*$A1E2 LD A,C          ;
 $A1E3 LD ($970D),A    ;
 $A1E6 CALL $B919      ; Call #R$B919.
 $A1E9 LD (IX+$00),$00 ; Write #N$00 to #REGix+#N$00 (sprite reference).
; Add #N$7500 points to the players score.
 $A1ED LD BC,$7500     ; #REGbc=#N$7500.
 $A1F0 JP $B5A9        ; Jump to #R$B5A9.
*$A1F3 SET 0,C         ;
 $A1F5 JR $A1E2        ;
*$A1F7 SET 1,C         ;
 $A1F9 JR $A1E2        ;
*$A1FB SET 2,C         ;
 $A1FD JR $A1E2        ;

; Pause
;
; Used by the routines at #R$A234, #R$AA6A, #R$B6D7 and #R$B743.
@label=Pause
c$A1FF DEC HL        ; Decrease #REGhl by one.
 $A200 LD A,L        ; {Loop back to #R$A1FF until #REGhl is zero.
 $A201 OR H          ;
 $A202 JR NZ,$A1FF   ; }
 $A204 DJNZ $A1FF    ; Decrease counter by one and loop back to #R$A1FF until
                     ; counter is zero.
 $A206 RET           ; Return.

; Routine at A207
;
; Used by the routine at #R$A18C.
c$A207 CALL $BB7C    ; Call #R$BB7C.
 $A20A CALL $BB5C    ; Call #R$BB5C.
 $A20D LD A,(IX+$0B) ; {#REGc=#REGix+#N$0B.
 $A210 LD C,A        ; }
 $A211 LD HL,$C374   ; #REGhl=#R$C374.
*$A214 LD E,(HL)     ;
 $A215 INC HL        ;
 $A216 LD D,(HL)     ;
 $A217 LD A,E        ;
 $A218 OR D          ;
 $A219 JR Z,$A234    ;
 $A21B INC HL        ;
 $A21C SRL C         ;
 $A21E JR NC,$A225   ;
 $A220 LD A,$01      ; {Write #N$01 to #R$96B2.
 $A222 LD ($96B2),A  ; }
*$A225 PUSH BC       ;
 $A226 LD C,(HL)     ;
 $A227 INC HL        ;
 $A228 LD B,(HL)     ;
 $A229 INC HL        ;
 $A22A PUSH HL       ;
 $A22B LD H,B        ;
 $A22C LD L,C        ;
 $A22D CALL $BC0B    ; Call #R$BC0B.
 $A230 POP HL        ; {Stash #REGhl and #REGbc on the stack.
 $A231 POP BC        ; }
 $A232 JR $A214      ; Jump to #R$A214.

; Handler: Poems
;
; Used by the routine at #R$A207.
;
; .
;
; Display the poem copy.
@label=HandlerPoems
c$A234 CALL $A01B    ; Call #R$A01B.
; Play music.
 $A237 LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
 $A23A LD DE,$BD33   ; #REGde=#R$BD33.
 $A23D CALL $BD6E    ; Call #R$BD6E.
; Pause so the player has a chance to read and listen.
 $A240 LD B,$08      ; #REGb=#N$08.
 $A242 CALL $A1FF    ; Call #R$A1FF.
 $A245 CALL $AC28    ; Call #R$AC28.
 $A248 CALL $BB7C    ; Call #R$BB7C.
 $A24B CALL $BB5C    ; Call #R$BB5C.
 $A24E CALL $BBDD    ; Call #R$BBDD.
 $A251 CALL $B919    ; Call #R$B919.
 $A254 RET           ; Return.

; Place Amulet Pieces
;
; Used by the routine at #R$B21E.
@label=PlaceAmuletPieces
c$A255 LD IX,$97FE                          ; #REGix=#R$97FE.
 $A259 LD A,($9695)                         ; #REGa=#R$9695.
 $A25C AND %00000111                        ; Keep only bits 0-2.
 $A25E LD L,A                               ; {Create an offset.
 $A25F LD H,$00                             ; }
 $A261 ADD HL,HL                            ;
 $A262 ADD HL,HL                            ;
 $A263 LD BC,$A29D                          ;
 $A266 ADD HL,BC                            ; #REGhl=#R$A29D + (#REGa * #N$02).
 $A267 EX DE,HL                             ;
; There are four pieces of the amulet to collect.
 $A268 LD B,$04                             ; #REGb=#N$04.
@label=PlaceAmuletPieces_Loop
*$A26A PUSH BC                              ; Stash the counter on the stack.
 $A26B LD A,B                               ;
 $A26C ADD A,$8F                            ;
 $A26E LD (IX+$00),A                        ;
 $A271 LD A,(DE)                            ;
 $A272 INC DE                               ;
 $A273 LD (IX+$01),A                        ;
 $A276 LD L,A                               ;
 $A277 LD H,$00                             ;
 $A279 LD BC,$6066                          ; #REGbc=#R$6066.
 $A27C ADD HL,BC                            ;
 $A27D LD L,(HL)                            ;
 $A27E LD H,$00                             ;
 $A280 ADD HL,HL                            ;
 $A281 ADD HL,HL                            ;
 $A282 ADD HL,HL                            ;
 $A283 LD BC,$DC6C                          ; #REGbc=#R$DC6C.
 $A286 ADD HL,BC                            ;
 $A287 LD A,(HL)                            ;
 $A288 INC HL                               ;
 $A289 LD (IX+$03),A                        ;
 $A28C LD A,(HL)                            ;
 $A28D LD (IX+$04),A                        ;
 $A290 LD (IX+$05),$46                      ;
 $A294 LD BC,$000C                          ; #REGbc=#N$000C.
 $A297 ADD IX,BC                            ;
 $A299 POP BC                               ; Restore the counter from the
                                            ; stack.
 $A29A DJNZ $A26A                           ; Decrease counter by one and loop
                                            ; back to #R$A26A until counter is
                                            ; zero.
 $A29C RET                                  ; Return.
@label=Initialisation_Amulet
 $A29D DEFB $43,$91,$4D,$CB,$9D,$AC,$2D,$26 ;
 $A2A5 DEFB $E1,$73,$44,$2D,$35,$C3,$4D,$A9 ;
 $A2AD DEFB $8A,$4D,$E1,$52,$43,$58,$39,$E7 ;
 $A2B5 DEFB $59,$A7,$E2,$91,$26,$35,$CB,$A3 ;

; Routine at A2BD
;
; Used by the routine at #R$B21E.
c$A2BD LD HL,$DDEC   ; #REGhl=#R$DDEC.
 $A2C0 LD A,($5C78)  ; {#HTML(#REGe=<a
 $A2C3 LD E,A        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
 $A2C4 LD A,($9693)  ; #REGa=#R$9693.
 $A2C7 AND %00011111 ; Keep only bits 0-4.
 $A2C9 LD D,A        ; Store the result in #REGd.
 $A2CA LD BC,$0200   ; #REGbc=#N($0200,$04,$04).
*$A2CD LD A,(DE)     ;
 $A2CE INC DE        ;
 $A2CF CP $80        ;
 $A2D1 JR C,$A2DC    ;
 $A2D3 LD (HL),$00   ;
 $A2D5 INC HL        ;
*$A2D6 DEC BC        ;
 $A2D7 LD A,B        ;
 $A2D8 OR C          ;
 $A2D9 JR NZ,$A2CD   ;
 $A2DB RET           ; Return.
*$A2DC PUSH BC       ;
 $A2DD LD A,C        ;
 $A2DE RRCA          ;
 $A2DF RRCA          ;
 $A2E0 AND %11000000 ; Keep only bits 6-7.
 $A2E2 LD C,A        ;
 $A2E3 LD A,($9695)  ;
 $A2E6 AND %00001111 ; Keep only bits 0-3.
 $A2E8 OR C          ;
 $A2E9 LD (HL),A     ;
 $A2EA INC HL        ;
 $A2EB LD A,R        ;
 $A2ED LD C,A        ;
 $A2EE LD A,($9695)  ; #REGa=#N$9695.
 $A2F1 ADD A,C       ;
 $A2F2 LD ($9695),A  ;
 $A2F5 POP BC        ;
 $A2F6 JR $A2D6      ; Jump to #R$A2D6.

; Routine at A2F8
;
; Used by the routine at #R$A305.
c$A2F8 LD A,($96BD)  ;
 $A2FB CP $09        ;
 $A2FD RET NC        ;
 $A2FE INC A         ;
 $A2FF LD ($96BD),A  ;
 $A302 JP $B7CD      ;

; Routine at A305
;
; .
;
; .
;
; This may be data?
c$A305 LD BC,$0C0C   ;
 $A308 CALL $AB01    ;
 $A30B JR NC,$A31A   ;
 $A30D CALL $A2F8    ;
 $A310 JR $A323      ;
 $A312 LD BC,$0C0C   ;
 $A315 CALL $AB01    ;
 $A318 JR C,$A323    ;

; Routine at A31A
;
; Used by the routines at #R$A18C and #R$A305.
c$A31A LD HL,$0210   ;
 $A31D LD ($96A5),HL ;
 $A320 JP $BB24      ;

; Routine at A323
;
; Used by the routine at #R$A305.
c$A323 CALL $B919      ;
 $A326 LD L,(IX+$06)   ;
 $A329 LD H,(IX+$07)   ;
 $A32C LD (HL),$00     ;
 $A32E LD (IX+$00),$00 ;
 $A332 LD BC,$0150     ;
 $A335 CALL $B5A9      ;
 $A338 JP $BF25        ;

; Routine at A33B
;
; Used by the routines at #R$B1D4 and #R$BBAE.
c$A33B LD DE,$97E6   ;
 $A33E XOR A         ;
 $A33F LD (DE),A     ;
 $A340 CALL $A39C    ;
 $A343 LD A,(HL)     ;
 $A344 AND A         ;
 $A345 JR Z,$A34A    ;
 $A347 CALL $A356    ;
*$A34A LD DE,$97F2   ;
 $A34D XOR A         ;
 $A34E LD (DE),A     ;
 $A34F CALL $A39C    ;
 $A352 INC HL        ;
 $A353 LD A,(HL)     ;
 $A354 AND A         ;
 $A355 RET Z         ;
*$A356 PUSH HL       ;
 $A357 LD C,A        ;
 $A358 AND $0F       ;
 $A35A ADD A,$80     ;
 $A35C LD (DE),A     ;
 $A35D INC DE        ;
 $A35E LD A,(IX+$01) ;
 $A361 LD (DE),A     ;
 $A362 INC DE        ;
 $A363 INC DE        ;
 $A364 LD L,A        ;
 $A365 LD H,$00      ;
 $A367 PUSH DE       ;
 $A368 LD DE,$6066   ;
 $A36B ADD HL,DE     ;
 $A36C LD L,(HL)     ;
 $A36D LD H,$00      ;
 $A36F ADD HL,HL     ;
 $A370 ADD HL,HL     ;
 $A371 ADD HL,HL     ;
 $A372 LD A,C        ;
 $A373 RLCA          ;
 $A374 RLCA          ;
 $A375 RLCA          ;
 $A376 AND $06       ;
 $A378 LD E,A        ;
 $A379 LD D,$00      ;
 $A37B ADD HL,DE     ;
 $A37C LD DE,$DC6C   ;
 $A37F ADD HL,DE     ;
 $A380 POP DE        ;
 $A381 LD A,(HL)     ;
 $A382 INC HL        ;
 $A383 LD (DE),A     ;
 $A384 INC DE        ;
 $A385 LD A,(HL)     ;
 $A386 LD (DE),A     ;
 $A387 INC DE        ;
 $A388 LD A,C        ;
 $A389 AND $0F       ;
 $A38B LD C,A        ;
 $A38C LD B,$00      ;
 $A38E LD HL,$A3A7   ;
 $A391 ADD HL,BC     ;
 $A392 LD A,(HL)     ;
 $A393 LD (DE),A     ;
 $A394 INC DE        ;
 $A395 POP HL        ;
 $A396 LD A,L        ;
 $A397 LD (DE),A     ;
 $A398 INC DE        ;
 $A399 LD A,H        ;
 $A39A LD (DE),A     ;
 $A39B RET           ; Return.
*$A39C LD L,(IX+$01) ;
 $A39F LD H,$00      ;
 $A3A1 ADD HL,HL     ;
 $A3A2 LD BC,$DDEC   ;
 $A3A5 ADD HL,BC     ;
 $A3A6 RET           ; Return.

; Data block at A3A7
b$A3A7 DEFB $42,$43,$44,$45,$46,$42,$43,$44
 $A3AF DEFB $45,$46,$42,$43,$44,$45,$46,$42

; Routine at A3B7
;
; Used by the routine at #R$A3C5.
c$A3B7 LD A,($9702)  ;
 $A3BA SUB $20       ;
 $A3BC CP $10        ;
 $A3BE RET NC        ;
 $A3BF LD BC,$0C10   ;
 $A3C2 JP $AB01      ;

; Routine at A3C5
c$A3C5 LD A,($9703)  ; #REGa=#R$9703.
 $A3C8 CP (IX+$01)   ;
 $A3CB JP NZ,$A493   ;
 $A3CE CALL $BB0B    ; Call #R$BB0B.
 $A3D1 CALL $A3B7    ; Call #R$A3B7.
 $A3D4 JP C,$A4A6    ;
 $A3D7 INC (IX+$00)  ;
 $A3DA CALL $BF08    ; Call #R$BF08.
 $A3DD JP $AD5D      ; Jump to #R$AD5D.

; Routine at A3E0
c$A3E0 LD A,($9703)  ; #REGa=#R$9703.
 $A3E3 CP (IX+$01)   ;
 $A3E6 JP NZ,$A493   ;
 $A3E9 CALL $BB0B    ; Call #R$BB0B.
 $A3EC LD A,($970D)  ; #REGa=#R$970D.
 $A3EF LD C,$00      ; #REGc=#N$00.
 $A3F1 LD B,$04      ; #REGb=#N$4.
*$A3F3 RRCA          ;
 $A3F4 JR NC,$A3F7   ;
 $A3F6 INC C         ;
*$A3F7 DJNZ $A3F3    ;
 $A3F9 SLA C         ;
 $A3FB LD A,C        ;
 $A3FC ADD A,$08     ;
 $A3FE LD C,A        ;
 $A3FF LD A,($9693)  ; #REGa=#R$9693.
 $A402 AND %00001111 ; Keep only bits 0-3.
 $A404 CP C          ;
 $A405 JR C,$A409    ;
 $A407 AND %00000111 ; Keep only bits 0-2.
*$A409 LD C,A        ; {Create an offset.
 $A40A LD B,$00      ; }
 $A40C LD HL,$A41A   ; {#REGhl=#R$A41A + offset.
 $A40F ADD HL,BC     ; }
 $A410 LD A,(HL)     ;
 $A411 LD (IX+$00),A ;
 $A414 CALL $A5CD    ; Call #R$A5CD.
 $A417 JP $AD5D      ; Jump to #R$AD5D.

; Data block at A41A
@label=SpriteReference
b$A41A DEFB $60      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A41B DEFB $64      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A41C DEFB $68      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A41D DEFB $6C      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A41E DEFB $70      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A41F DEFB $74      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A420 DEFB $78      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A421 DEFB $60      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A422 DEFB $98      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A423 DEFB $9C      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A424 DEFB $B0      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A425 DEFB $B4      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A426 DEFB $B8      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A427 DEFB $BC      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A428 DEFB $C0      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))
 $A429 DEFB $98      ; #LET(result=$BF84 + (#PEEK(#PC) * $02)) Sprite ID:
                     ; #R(#PEEK({result}) + #PEEK({result} + $01) *
                     ; $100)(#N(#PEEK(#PC))) #SPRITENAME(#PEEK(#PC))

; Routine at A42A
c$A42A LD A,($9703)  ; #REGa=#R$9703.
 $A42D CP (IX+$01)   ;
 $A430 JR NZ,$A446   ;
 $A432 CALL $BB0B    ; Call #R$BB0B.
 $A435 INC (IX+$00)  ; Increment #REGix+#N$00 (sprite reference) by one.
 $A438 JP $AD5D      ; Jump to #R$AD5D.

; Routine at A43B
c$A43B LD A,($9703)    ; #REGa=#R$9703.
 $A43E CP (IX+$01)     ;
 $A441 JR NZ,$A446     ;
 $A443 CALL $B919      ; Call #R$B919.
; This entry point is used by the routine at #R$A42A.
@label=RemoveExplosion
*$A446 LD (IX+$00),$00 ; Set #REGix+#N$00 (sprite reference) to #N$00.
 $A44A RET             ; Return.

; Routine at A44B
;
; Used by the routines at #R$9D91, #R$A4D7 and #R$A54F.
c$A44B LD B,$00       ;
 $A44D LD A,($96AD)   ;
 $A450 LD C,A         ;
 $A451 LD A,(IX+$06)  ;
 $A454 CALL $B031     ;
 $A457 JP M,$A47D     ;
 $A45A ADD A,(IX+$03) ;
 $A45D LD E,A         ;
 $A45E ADD A,C        ;
 $A45F JR C,$A476     ;
*$A461 LD A,(IX+$07)  ;
 $A464 CALL $B031     ;
 $A467 JP M,$A488     ;
 $A46A ADD A,(IX+$04) ;
 $A46D LD D,A         ;
 $A46E CP $BF         ;
 $A470 RET C          ;
 $A471 LD D,$BF       ;
*$A473 SET 1,B        ;
 $A475 RET            ;
*$A476 LD A,C         ;
 $A477 NEG            ;
 $A479 LD E,A         ;
 $A47A SET 0,B        ;
 $A47C RET            ;
*$A47D ADD A,(IX+$03) ;
 $A480 LD E,A         ;
 $A481 JR C,$A461     ;
 $A483 LD E,$00       ;
 $A485 SET 0,B        ;
 $A487 RET            ;
*$A488 ADD A,(IX+$04) ;
 $A48B LD D,A         ;
 $A48C CP $27         ;
 $A48E RET NC         ;
 $A48F LD D,$27       ;
 $A491 JR $A473       ;

; Routine at A493
;
; Used by the routines at #R$9D91, #R$A3C5, #R$A3E0, #R$A4D7 and #R$A54F.
c$A493 INC (IX+$08)    ;
 $A496 LD A,(IX+$08)   ;
 $A499 CP $40          ;
 $A49B RET C           ;
 $A49C LD (IX+$00),$00 ; Set #REGix+#N$00 (sprite reference) to #N$00.
 $A4A0 RET             ; Return.

; Routine at A4A1
;
; Used by the routine at #R$9D91.
c$A4A1 LD A,$10        ; {Write #N$10 to #R$96B4.
 $A4A3 LD ($96B4),A    ; }
; This entry point is used by the routines at #R$9D91, #R$A3C5, #R$A4D7 and
; #R$A54F.
*$A4A6 CALL $BEEE      ; Call #R$BEEE.
 $A4A9 CALL $A4B3      ; Call #R$A4B3.
 $A4AC LD (IX+$00),$08 ; Set #REGix+#N$00 (sprite reference) to #N$08
                       ; (#SPRITENAME$08 | #R$D747).
 $A4B0 JP $AD5D        ; Jump to #R$AD5D.

; Routine at A4B3
;
; Used by the routine at #R$A4A1.
c$A4B3 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $A4B6 RLCA          ;
 $A4B7 RLCA          ;
 $A4B8 RLCA          ;
 $A4B9 AND %00110000 ; Keep only bits 4-5.
 $A4BB ADD A,$65     ; {#REGc=#REGa+#N$65.
 $A4BD LD C,A        ; }
 $A4BE LD B,$01      ; #REGb=#N$01.
 $A4C0 JP $B5A9      ; Jump to #R$B5A9.

; Routine at A4C3
;
; Used by the routine at #R$A4D7.
c$A4C3 LD A,(IX+$06) ; #REGa=#REGix+#N$06.
 $A4C6 RLCA          ;
 $A4C7 RLCA          ;
 $A4C8 AND %00000010 ; Keep only bit 1.
 $A4CA LD C,A        ; Store the result in #REGc.
 $A4CB LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $A4CE AND %11111101 ; Keep only bits 0, 2-7.
 $A4D0 OR C          ;
 $A4D1 XOR %00000011 ;
 $A4D3 LD (IX+$00),A ; Write #REGa to  #REGix+#N$00 (sprite reference).
 $A4D6 RET           ; Return.

; Routine at A4D7
c$A4D7 LD A,($9703)   ; #REGa=#R$9703.
 $A4DA CP (IX+$01)    ;
 $A4DD JR NZ,$A493    ;
 $A4DF LD A,$17       ; {Write #N$17 to #R$96AD.
 $A4E1 LD ($96AD),A   ; }
 $A4E4 CALL $BB0B     ; Call #R$BB0B.
 $A4E7 LD A,($9702)   ; #REGa=#R$9702.
 $A4EA SUB $10        ;
 $A4EC CP $20         ;
 $A4EE JR NC,$A4A6    ;
 $A4F0 LD BC,$3008    ; #REGbc=#N$3008.
 $A4F3 LD A,($9705)   ; #REGa=#R$9705.
 $A4F6 SUB (IX+$03)   ;
 $A4F9 JR Z,$A506     ;
 $A4FB LD A,C         ;
 $A4FC JR NC,$A500    ;
 $A4FE NEG            ;
*$A500 ADD A,(IX+$06) ;
 $A503 CALL $AFD0     ; Call #R$AFD0.
*$A506 LD (IX+$06),A  ;
 $A509 LD A,($9706)   ;
 $A50C CP (IX+$04)    ;
 $A50F JR Z,$A51C     ;
 $A511 LD A,C         ;
 $A512 JR NC,$A516    ;
 $A514 NEG            ;
*$A516 ADD A,(IX+$07) ;
 $A519 CALL $AFD0     ;
*$A51C LD (IX+$07),A  ;
 $A51F CALL $A4C3     ;
 $A522 CALL $A44B     ;
 $A525 BIT 0,B        ;
 $A527 JR NZ,$A545    ;
 $A529 BIT 1,B        ;
 $A52B JR NZ,$A54A    ;
; This entry point is used by the routines at #R$A545 and #R$A54A.
*$A52D LD BC,$1717    ; #REGbc=#N$1717.
 $A530 CALL $B81C     ; Call #R$B81C.
 $A533 LD (IX+$03),E  ;
 $A536 LD (IX+$04),D  ;
 $A539 LD BC,$1313    ; #REGbc=#N$1313.
 $A53C CALL $AB36     ; Call #R$AB36.
 $A53F JP NC,$AD5D    ;
 $A542 JP $A4A6       ; Jump to #R$A4A6.

; Routine at A545
;
; Used by the routine at #R$A4D7.
c$A545 CALL $A5A9    ; Call #R$A5A9.
 $A548 JR $A52D      ; Jump to #R$A52D.

; Routine at A54A
;
; Used by the routine at #R$A4D7.
c$A54A CALL $A5BA    ; Call #R$A5BA.
 $A54D JR $A52D      ; Jump to #R$A52D.

; Routine at A54F
c$A54F LD A,($9703)  ; #REGa=#R$9703.
 $A552 CP (IX+$01)   ;
 $A555 JP NZ,$A493   ;
 $A558 LD A,$17      ; {Write #N$17 to #R$96AD.
 $A55A LD ($96AD),A  ; }
 $A55D CALL $BB0B    ; Call #R$BB0B.
 $A560 LD A,($9702)  ; #REGa=#R$9702.
 $A563 SUB $10       ;
 $A565 CP $20        ;
 $A567 JP NC,$A4A6   ;
 $A56A DEC (IX+$02)  ;
 $A56D CALL Z,$A5CD  ;
 $A570 LD A,(IX+$06) ; #REGa=#REGix+#N$06.
 $A573 OR (IX+$07)   ;
 $A576 JR Z,$A59D    ;
 $A578 CALL $A44B    ; Call #R$A44B.
 $A57B BIT 0,B       ;
 $A57D JR NZ,$A5C3   ;
 $A57F BIT 1,B       ;
 $A581 JR NZ,$A5C8   ;
; This entry point is used by the routines at #R$A5C3 and #R$A5C8.
*$A583 LD BC,$1717   ; #REGbc=#N$1717.
 $A586 CALL $B81C    ; Call #R$B81C.
 $A589 CALL $AAED    ; Call #R$AAED.
 $A58C CALL Z,$A5CD  ;
 $A58F LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $A592 XOR %00000001 ;
 $A594 LD (IX+$00),A ;
 $A597 LD (IX+$03),E ;
 $A59A LD (IX+$04),D ;
*$A59D LD BC,$1313   ; #REGbc=#N$1313.
 $A5A0 CALL $AB36    ; Call #R$AB36.
 $A5A3 JP NC,$AD5D   ;
 $A5A6 JP $A4A6      ; Jump to #R$A4A6.

; Routine at A5A9
;
; Used by the routines at #R$9E04, #R$A545 and #R$A5C3.
c$A5A9 LD A,(IX+$06) ; #REGa=#REGix+#N$06.
 $A5AC NEG           ;
 $A5AE LD (IX+$06),A ;
 $A5B1 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $A5B4 XOR %00000010 ; Reset bit 2.
 $A5B6 LD (IX+$00),A ; Write #REGa to #REGix+#N$00 (sprite reference).
 $A5B9 RET           ; Return.

; Routine at A5BA
;
; Used by the routines at #R$9E09, #R$A54A and #R$A5C8.
c$A5BA LD A,(IX+$07) ; #REGa=#REGix+#N$07.
 $A5BD NEG           ;
 $A5BF LD (IX+$07),A ; Write #REGa to #REGix+#N$07.
 $A5C2 RET           ; Return.

; Routine at A5C3
;
; Used by the routine at #R$A54F.
c$A5C3 CALL $A5A9    ; Call #R$A5A9.
 $A5C6 JR $A583      ; Jump to #R$A583.

; Routine at A5C8
;
; Used by the routine at #R$A54F.
c$A5C8 CALL $A5BA    ; Call #R$A5BA.
 $A5CB JR $A583      ; Jump to #R$A583.

; Routine at A5CD
;
; Used by the routines at #R$A3E0 and #R$A54F.
c$A5CD LD A,(IX+$06)                        ; #REGa=#REGix+#N$06.
 $A5D0 OR (IX+$07)                          ;
 $A5D3 JR NZ,$A609                          ;
 $A5D5 LD A,($9695)                         ; #REGa=#R$9695.
 $A5D8 AND %00000111                        ; Keep only bits 0-2.
 $A5DA LD L,A                               ;
 $A5DB LD H,$00                             ;
 $A5DD LD BC,$A601                          ; #REGbc=#R$A601.
 $A5E0 ADD HL,BC                            ;
 $A5E1 LD A,(HL)                            ;
 $A5E2 LD (IX+$06),A                        ;
 $A5E5 BIT 7,A                              ;
 $A5E7 JR Z,$A5FB                           ;
 $A5E9 RES 1,(IX+$00)                       ;
*$A5ED LD A,($5C78)                         ; #HTML(#REGa=<a
                                            ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $A5F0 AND %00000111                        ; Keep only bits 0-2.
 $A5F2 LD L,A                               ;
 $A5F3 LD H,$00                             ;
 $A5F5 ADD HL,BC                            ;
 $A5F6 LD A,(HL)                            ;
 $A5F7 LD (IX+$07),A                        ;
 $A5FA RET                                  ; Return.
*$A5FB SET 1,(IX+$00)                       ;
 $A5FF JR $A5ED                             ; Jump to #R$A5ED.
 $A601 DEFB $A0,$B0,$C0,$D0,$30,$40,$50,$60 ;

; Routine at A609
;
; Used by the routine at #R$A5CD.
c$A609 XOR A         ; {Write #N$00 to #REGix+#N$06 and #REGix+#N$07.
 $A60A LD (IX+$06),A ;
 $A60D LD (IX+$07),A ; }
 $A610 LD A,($9695)  ; #REGa=#R$9695.
 $A613 AND %00000111 ; Keep only bits 0-2.
 $A615 OR %00001000  ; Set bit 3.
 $A617 LD (IX+$02),A ; Write the result to #REGix+#N$02.
 $A61A RET           ; Return.

; Handler: Stand Up (After Yellow Orchid)
@label=HandlerYellowOrchid_StandUp
c$A61B CALL $BB0B    ; Call #R$BB0B.
; This entry point is used by the routine at #R$AE8F.
*$A61E CALL $AE7A    ; Call #R$AE7A.
 $A621 JR NZ,$A62D   ; Jump to #R$A62D if the orchid counter is not yet zero.
 $A623 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
; Number between #N$00-#N$07.
 $A626 AND %00000111 ; Keep only bits 0-2.
; Add #N$16.
 $A628 OR %00010000  ; Set bit 4.
; #TABLE(default,centre,centre)
; { =h Sprite ID | =h Sprite Name | =h Sprite Address }
; { #N$16 | #SPRITENAME$16 | #R$C77A }
; { #N$17 | #SPRITENAME$17 | #R$C74C }
; { #N$18 | #SPRITENAME$18 | #R$C40C }
; { #N$19 | #SPRITENAME$19 | #R$C438 }
; { #N$1A | #SPRITENAME$1A | #R$C464 }
; { #N$1B | #SPRITENAME$1B | #R$C438 }
; { #N$1C | #SPRITENAME$1C | #R$C490 }
; TABLE#
 $A62A LD (IX+$00),A ; Write the result to #REGix+#N$00 (sprite reference).
@label=HandlerYellowOrchid_StandUp_Skip
*$A62D JP $AF7A      ; Jump to #R$AF7A.

; Routine at A630
;
; Used by the routines at #R$9E72 and #R$AAED.
c$A630 LD A,($9703)  ;
 $A633 CP (IX+$01)   ;
 $A636 RET Z         ;
 $A637 LD B,A        ;
 $A638 RRCA          ;
 $A639 RRCA          ;
 $A63A RRCA          ;
 $A63B RRCA          ;
 $A63C AND %00001111 ; Keep only bits 0-4.
 $A63E LD C,A        ;
 $A63F LD A,(IX+$01) ;
 $A642 RRCA          ;
 $A643 RRCA          ;
 $A644 RRCA          ;
 $A645 RRCA          ;
 $A646 AND $0F       ;
 $A648 SUB C         ;
 $A649 JP P,$A64E    ;
 $A64C NEG           ;
*$A64E CP $02        ;
 $A650 RET C         ;
 $A651 LD A,($9695)  ;
 $A654 AND $01       ;
 $A656 JR NZ,$A678   ;
 $A658 LD A,B        ;
 $A659 SUB $10       ;
; This entry point is used by the routine at #R$A678.
*$A65B JR C,$A67D    ;
; This entry point is used by the routine at #R$A67D.
*$A65D AND $FC       ;
 $A65F LD C,A        ;
 $A660 LD A,(IX+$01) ;
 $A663 AND $03       ;
 $A665 OR C          ;
 $A666 CP B          ;
 $A667 RET Z         ;
 $A668 LD (IX+$01),A ;
 $A66B CALL $A7D4    ;
 $A66E LD A,(HL)     ;
 $A66F LD (IX+$03),A ;
 $A672 INC HL        ;
 $A673 LD A,(HL)     ;
 $A674 LD (IX+$04),A ;
 $A677 RET           ;

; Routine at A678
;
; Used by the routine at #R$A630.
c$A678 LD A,B        ; {#REGa=#REGb+#N$10.
 $A679 ADD A,$10     ; }
 $A67B JR $A65B      ; Jump to #R$A65B.

; Routine at A67D
;
; Used by the routine at #R$A630.
c$A67D LD A,B        ; #REGa=#REGb.
 $A67E JR $A65D      ; Jump to #R$A65D.

; Routine at A680
c$A680 CALL $BB0B    ; Call #R$BB0B.
 $A683 LD L,(IX+$06) ;
 $A686 LD H,(IX+$07) ;
 $A689 LD A,H        ;
 $A68A OR L          ;
 $A68B JR Z,$A6D4    ;
 $A68D LD A,($9702)  ;
 $A690 SUB $10       ;
 $A692 CP $20        ;
 $A694 JR NC,$A69D   ;
 $A696 LD A,($96B5)  ;
 $A699 AND A         ;
 $A69A JR NZ,$A69D   ;
 $A69C DEC HL        ;
; This entry point is used by the routine at #R$A70D.
*$A69D LD (IX+$06),L ;
 $A6A0 LD (IX+$07),H ;
 $A6A3 CALL $A737    ; Call #R$A737.
; This entry point is used by the routines at #R$A6D4 and #R$A70D.
*$A6A6 CALL $B9A9    ; Call #R$B9A9.
 $A6A9 LD L,(IX+$03) ;
 $A6AC LD H,(IX+$04) ;
 $A6AF CALL $B8DD    ; Call #R$B8DD.
 $A6B2 LD C,$01      ; #REGc=#N$01.
 $A6B4 LD D,$44      ; #REGd=#N$44.
 $A6B6 LD B,$02      ; #REGb=#N$02.
 $A6B8 CALL $A6C8    ; Call #R$A6C8.
 $A6BB LD A,(IX+$00) ;
 $A6BE AND %00000111 ; Keep only bits 0-2.
 $A6C0 RET Z         ;
 $A6C1 LD C,$01      ; #REGc=#N$01.
 $A6C3 LD D,(IX+$05) ;
 $A6C6 LD B,$02      ; #REGb=#N$02.
*$A6C8 LD A,(IX+$00) ;
 $A6CB CPL           ;
 $A6CC AND %00000111 ; Keep only bits 0-2.
 $A6CE JR NZ,$A6D1   ;
 $A6D0 INC B         ;
*$A6D1 JP $BB45      ; Jump to #R$BB45.

; Routine at A6D4
;
; Used by the routine at #R$A680.
c$A6D4 LD A,($9693)  ; #REGa=#R$9693.
 $A6D7 AND $01       ;
 $A6D9 JR NZ,$A6A6   ;
 $A6DB LD A,(IX+$02) ;
 $A6DE AND A         ;
 $A6DF JR Z,$A70D    ;
 $A6E1 DEC (IX+$00)  ;
 $A6E4 LD A,(IX+$00) ;
 $A6E7 AND %00000111 ; Keep only bits 0-2.
 $A6E9 JR NZ,$A6A6   ;
 $A6EB LD A,($5C78)  ;
 $A6EE AND %00001111 ; Keep only bits 0-3.
 $A6F0 LD L,A        ;
 $A6F1 LD H,$00      ;
 $A6F3 LD BC,$A6FD   ; #REGbc=#R$A6FD.
 $A6F6 ADD HL,BC     ;
 $A6F7 LD A,(HL)     ;
 $A6F8 LD (IX+$05),A ;
 $A6FB JR $A71A      ; Jump to #R$A71A.

; Data block at A6FD
@label=OrchidColour
b$A6FD DEFB $42,$43,$45,$46,$43,$45,$46,$42
 $A705 DEFB $45,$46,$42,$43,$47,$47,$47,$47

; Routine at A70D
;
; Used by the routine at #R$A6D4.
c$A70D INC (IX+$00)  ;
 $A710 LD A,(IX+$00) ;
 $A713 CPL           ;
 $A714 AND %00000111 ; Keep only bits 0-2.
 $A716 JR Z,$A71A    ;
 $A718 JR $A6A6      ; Jump to #R$A6A6.
; This entry point is used by the routine at #R$A6D4.
*$A71A LD A,(IX+$02) ; #REGa=#REGix+#N$02.
 $A71D XOR $08       ;
 $A71F LD (IX+$02),A ;
 $A722 JR NZ,$A731   ;
 $A724 LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $A727 AND %00111111 ; Keep only bits 0-5.
 $A729 ADD A,$80     ;
 $A72B LD L,A        ;
 $A72C LD H,$00      ;
 $A72E JP $A69D      ; Jump to #R$A69D.
*$A731 LD HL,$0010   ; #REGhl=#N($0010,$04,$04).
 $A734 JP $A69D      ; Jump to #R$A69D.

; Routine at A737
;
; Used by the routine at #R$A680.
c$A737 LD A,(IX+$00) ;
 $A73A CPL           ;
 $A73B AND %00000111 ; Keep only bits 0-2.
 $A73D RET NZ        ;
 $A73E LD BC,$0F0F   ; #REGbc=#N$0F0F.
 $A741 CALL $AB01    ; Call #R$AB01.
 $A744 RET NC        ;
 $A745 LD A,$C0      ; {Write #N$C0 to #R$96B0.
 $A747 LD ($96B0),A  ; }
 $A74A XOR A         ;
 $A74B LD (IX+$06),A ;
 $A74E LD (IX+$07),A ;
 $A751 LD A,(IX+$05) ;
 $A754 LD ($9707),A  ;
 $A757 CP $47        ;
 $A759 JP NZ,$BF2A   ;
 $A75C XOR A         ; {Write #N$00 to #R$96B0.
 $A75D LD ($96B0),A  ; }
 $A760 JP $BF2A      ; Jump to #R$BF2A.

; Routine at A763
;
; Used by the routines at #R$B1D4 and #R$BBAE.
;
; IX Actor Entity
c$A763 LD A,(IX+$01) ; #REGa=#REGix+#N$01 (current location).
 $A766 CALL $A7E8    ; Call #R$A7E8.
 $A769 LD DE,$97DA   ; #REGde=#R$97DA.
 $A76C LD C,(HL)     ; {#REGbc=the orchid type from #REGhl.
 $A76D INC HL        ;
 $A76E LD B,(HL)     ; }
 $A76F LD A,C        ; #REGa=#REGc.
 $A770 AND %00000111 ; Keep only bits 0-2.
 $A772 OR %01001000  ; Set bits 3 and 6.
 $A774 LD (DE),A     ;
 $A775 INC DE        ;
 $A776 LD A,(IX+$01) ;
 $A779 LD (DE),A     ;
 $A77A INC DE        ;
 $A77B LD A,C        ;
 $A77C AND %00001000 ; Keep only bit 3.
 $A77E LD (DE),A     ;
 $A77F INC DE        ;
 $A780 CALL $A7D4    ; Call #R$A7D4.
 $A783 LD A,(HL)     ;
 $A784 INC HL        ;
 $A785 LD (DE),A     ;
 $A786 INC DE        ;
 $A787 LD A,(HL)     ;
 $A788 LD (DE),A     ;
 $A789 INC DE        ;
 $A78A LD A,B        ;
 $A78B AND %00000111 ; Keep only bits 0-2.
 $A78D OR %01000000  ; Set bit 6.
 $A78F LD (DE),A     ;
 $A790 INC DE        ;
 $A791 LD A,B        ;
 $A792 AND %11111000 ; Keep only bits 3-7.
 $A794 LD (DE),A     ;
 $A795 INC DE        ;
 $A796 LD A,C        ;
 $A797 RRCA          ;
 $A798 RRCA          ;
 $A799 RRCA          ;
 $A79A RRCA          ;
 $A79B AND %00001111 ; Keep only bits 0-3.
 $A79D LD (DE),A     ;
 $A79E RET           ; Return.

; Routine at A79F
;
; Used by the routine at #R$BBAE.
c$A79F LD A,($96AB)  ; #REGa=#R$96AB.
 $A7A2 CALL $A7E8    ; Call #R$A7E8.
 $A7A5 PUSH IX       ;
 $A7A7 LD IX,$97DA   ; #REGix=#R$97DA.
 $A7AB LD A,(IX+$00) ;
 $A7AE AND %00000111 ; Keep only bits 0-2.
 $A7B0 LD C,A        ;
 $A7B1 LD A,(IX+$02) ;
 $A7B4 AND %00001000 ; Keep only bit 3.
 $A7B6 OR C          ;
 $A7B7 LD C,A        ;
 $A7B8 LD A,(IX+$07) ;
 $A7BB RLCA          ;
 $A7BC RLCA          ;
 $A7BD RLCA          ;
 $A7BE RLCA          ;
 $A7BF AND %11110000 ; Keep only bits 4-7.
 $A7C1 OR C          ;
 $A7C2 LD (HL),A     ;
 $A7C3 INC HL        ;
 $A7C4 LD A,(IX+$05) ;
 $A7C7 AND %00000111 ; Keep only bits 0-2.
 $A7C9 LD B,A        ;
 $A7CA LD A,(IX+$06) ;
 $A7CD AND %11111000 ; Keep only bits 3-7.
 $A7CF OR B          ;
 $A7D0 LD (HL),A     ;
 $A7D1 POP IX        ;
 $A7D3 RET           ; Return.

; Handler: Orchid Position
;
; Used by the routines at #R$A630 and #R$A763.
;
;   IX Actor Entity
; O:HL Pointer to Orchid Position
@label=HandlerOrchidPosition
c$A7D4 PUSH BC       ; Stash #REGbc on the stack.
; Fetch the Room ID from the layout map.
 $A7D5 LD L,(IX+$01) ; {Create an offset with #REGix+#N$01 (current location).
 $A7D8 LD H,$00      ; }
 $A7DA LD BC,$6066   ; {#REGhl=#R$6066 + offset.
 $A7DD ADD HL,BC     ; }
; Fetch the orchid position from the orchid position table.
 $A7DE LD L,(HL)     ; {Create an offset.
 $A7DF LD H,$00      ; }
 $A7E1 ADD HL,HL     ; {#REGhl=#R$D6A6 + (offset * #N$02).
 $A7E2 LD BC,$D6A6   ;
 $A7E5 ADD HL,BC     ; }
 $A7E6 POP BC        ; Restore #REGbc from the stack.
 $A7E7 RET           ; Return.

; Handler: Orchid Type
;
; Used by the routines at #R$A763 and #R$A79F.
;
;   A Location ID
; O:HL Pointer to Orchid Type
;
; Fetch the Room ID from the layout map.
@label=HandlerOrchidType
c$A7E8 LD L,A        ; {Create an offset.
 $A7E9 LD H,$00      ; }
 $A7EB LD BC,$6066   ; {#REGhl=#R$6066 + #REGa.
 $A7EE ADD HL,BC     ; }
; Fetch the orchid type from the orchid type table.
 $A7EF LD L,(HL)     ; {Create an offset using the room ID.
 $A7F0 LD H,$00      ; }
 $A7F2 ADD HL,HL     ; {#REGhl=#R$A7F8 + (offset * #N$02).
 $A7F3 LD BC,$A7F8   ;
 $A7F6 ADD HL,BC     ; }
 $A7F7 RET           ; Return.

; Table: Orchid Types
@label=TableOrchidTypes
b$A7F8 DEFB $00,$02
 $A7FA DEFB $0F,$03
 $A7FC DEFB $00,$05
 $A7FE DEFB $0F,$06
 $A800 DEFB $00,$02
 $A802 DEFB $0F,$03
 $A804 DEFB $00,$05
 $A806 DEFB $0F,$06
 $A808 DEFB $00,$02
 $A80A DEFB $0F,$03
 $A80C DEFB $00,$05
 $A80E DEFB $0F,$06
 $A810 DEFB $00,$02
 $A812 DEFB $0F,$03
 $A814 DEFB $00,$05
 $A816 DEFB $0F,$06
 $A818 DEFB $00,$02
 $A81A DEFB $0F,$03
 $A81C DEFB $00,$05
 $A81E DEFB $0F,$06
 $A820 DEFB $00,$02
 $A822 DEFB $0F,$03
 $A824 DEFB $00,$05
 $A826 DEFB $0F,$06
 $A828 DEFB $00,$02
 $A82A DEFB $0F,$03
 $A82C DEFB $00,$05
 $A82E DEFB $0F,$06
 $A830 DEFB $00,$02
 $A832 DEFB $0F,$03
 $A834 DEFB $00,$05
 $A836 DEFB $0F,$06
 $A838 DEFB $00,$02
 $A83A DEFB $0F,$03
 $A83C DEFB $00,$05
 $A83E DEFB $0F,$06
 $A840 DEFB $00,$02
 $A842 DEFB $0F,$03
 $A844 DEFB $00,$05
 $A846 DEFB $0F,$06
 $A848 DEFB $00,$02
 $A84A DEFB $0F,$03
 $A84C DEFB $00,$05
 $A84E DEFB $0F,$06
 $A850 DEFB $00,$02
 $A852 DEFB $0F,$03
 $A854 DEFB $00,$05
 $A856 DEFB $0F,$06

; Routine at A858
c$A858 CALL $BB0B    ; Call #R$BB0B.
 $A85B LD A,$20      ; {Write #N$20 to #R$96AD.
 $A85D LD ($96AD),A  ; }
 $A860 CALL $AC0E    ; Call #R$AC0E.
 $A863 CALL $A922    ; Call #R$A922.
 $A866 CALL $A8B2    ; Call #R$A8B2.
; This entry point is used by the routine at #R$A964.
*$A869 CALL $AFE8    ; Call #R$AFE8.
 $A86C LD BC,$171F   ; #REGbc=#N$171F.
 $A86F CALL $B81C    ; Call #R$B81C.
 $A872 CALL $AAED    ; Call #R$AAED.
 $A875 JR NZ,$A87A   ;
 $A877 CALL $ADB3    ; Call #R$ADB3.
*$A87A LD (IX+$03),E ;
 $A87D LD (IX+$04),D ;
; This entry point is used by the routine at #R$A8F5.
*$A880 LD A,($9707)  ;
 $A883 CP $47        ;
 $A885 JR NZ,$A8AF   ;
 $A887 LD A,($9703)  ;
 $A88A CP (IX+$01)   ;
 $A88D JR NZ,$A8AF   ;
 $A88F LD BC,$0F1C   ;
 $A892 CALL $AB01    ; Call #R$AB01.
 $A895 JR NC,$A8AF   ;
 $A897 LD A,(IX+$00) ;
 $A89A CPL           ;
 $A89B RRCA          ;
 $A89C RRCA          ;
 $A89D AND %00000001 ; Keep only bit 0.
 $A89F INC A         ;
 $A8A0 LD ($9704),A  ;
 $A8A3 LD A,($9702)  ;
 $A8A6 SUB $20       ;
 $A8A8 CP $10        ;
 $A8AA JR C,$A8AF    ;
 $A8AC CALL $ADB3    ; Call #R$ADB3.
*$A8AF JP $AD46      ; Jump to #R$AD46.

; Routine at A8B2
;
; Used by the routine at #R$A858.
c$A8B2 LD A,($9703)    ;
 $A8B5 CP (IX+$01)     ;
 $A8B8 RET NZ          ;
 $A8B9 LD A,(IX+$02)   ;
 $A8BC AND %11110000   ; Keep only bits 4-7.
 $A8BE RET NZ          ;
 $A8BF LD A,(IX+$06)   ;
 $A8C2 AND A           ;
 $A8C3 JP P,$A8E4      ;
 $A8C6 LD A,($9705)    ;
 $A8C9 CP (IX+$03)     ;
 $A8CC RET NC          ;
 $A8CD LD A,($9702)    ;
 $A8D0 SUB $28         ;
 $A8D2 CP $08          ;
 $A8D4 RET NC          ;
; This entry point is used by the routine at #R$A8E4.
*$A8D5 LD A,(IX+$00)   ;
 $A8D8 AND %11111100   ; Keep only bits 2-7.
 $A8DA OR %00001000    ; Set bit 3.
 $A8DC LD (IX+$00),A   ;
 $A8DF LD (IX+$02),$0F ;
 $A8E3 RET             ; Return.

; Routine at A8E4
;
; Used by the routine at #R$A8B2.
c$A8E4 LD A,($9705)  ;
 $A8E7 CP (IX+$03)   ;
 $A8EA RET C         ;
 $A8EB LD A,($9702)  ;
 $A8EE SUB $20       ;
 $A8F0 CP $08        ;
 $A8F2 RET NC        ;
 $A8F3 JR $A8D5      ; Jump to #R$A8D5.

; Routine at A8F5
c$A8F5 CALL $BB0B      ; Call #R$BB0B.
 $A8F8 LD A,($9703)    ;
 $A8FB CP (IX+$01)     ;
 $A8FE JR NZ,$A913     ;
 $A900 LD A,($9702)    ;
 $A903 SUB $20         ;
 $A905 CP $10          ;
 $A907 JR NC,$A913     ;
 $A909 RRCA            ;
 $A90A AND %00000100   ; Keep only bit 2.
 $A90C XOR (IX+$00)    ;
 $A90F AND $04         ;
 $A911 JR NZ,$A91F     ;
*$A913 DEC (IX+$02)    ;
 $A916 JR NZ,$A91F     ;
 $A918 INC (IX+$00)    ;
 $A91B LD (IX+$02),$08 ;
*$A91F JP $A880        ; Jump to #R$A880.

; Routine at A922
;
; Used by the routine at #R$A858.
c$A922 LD A,($9703)    ;
 $A925 AND %11110000   ; Keep only bits 4-7.
 $A927 LD C,A          ;
 $A928 LD A,(IX+$01)   ;
 $A92B AND %11110000   ; Keep only bits 4-7.
 $A92D CP C            ;
 $A92E JR Z,$A935      ;
 $A930 LD (IX+$02),$00 ;
 $A934 RET             ; Return.
*$A935 LD A,(IX+$02)   ;
 $A938 AND A           ;
 $A939 RET NZ          ;
 $A93A LD (IX+$02),$01 ;
 $A93E LD A,($9703)    ;
 $A941 CP (IX+$01)     ;
 $A944 JR Z,$A95A      ;
 $A946 JR NC,$A951     ;
; This entry point is used by the routine at #R$A95A.
*$A948 LD (IX+$06),$C0 ;
 $A94C RES 2,(IX+$00)  ;
 $A950 RET             ; Return.

; Routine at A951
;
; Used by the routines at #R$A922 and #R$A95A.
c$A951 LD (IX+$06),$40 ;
 $A955 SET 2,(IX+$00)  ;
 $A959 RET             ; Return.

; Routine at A95A
;
; Used by the routine at #R$A922.
c$A95A LD A,($9705)  ;
 $A95D CP (IX+$03)   ;
 $A960 JR C,$A948    ;
 $A962 JR $A951      ; Jump to #R$A951.

; Routine at A964
c$A964 CALL $BB0B      ; Call #R$BB0B.
 $A967 DEC (IX+$02)    ;
 $A96A JR NZ,$A982     ;
 $A96C RES 3,(IX+$00)  ;
 $A970 LD (IX+$02),$10 ;
 $A974 LD A,(IX+$06)   ;
 $A977 AND A           ;
 $A978 JP P,$A97D      ;
 $A97B SUB $40         ;
*$A97D ADD A,$20       ;
 $A97F LD (IX+$06),A   ;
*$A982 JP $A869        ; Jump to #R$A869.

; Routine at A985
;
; Used by the routines at #R$ADD0 and #R$AEEF.
c$A985 LD (IX+$02),$20 ;
 $A989 BIT 7,A         ;
 $A98B JR NZ,$A9AB     ;
 $A98D LD (IX+$07),$00 ;
 $A991 CP $02          ;
 $A993 JR Z,$A9A0      ;
 $A995 LD (IX+$00),$40 ;
 $A999 LD (IX+$06),$03 ;
 $A99D JP $AD5D        ; Jump to #R$AD5D.

; Routine at A9A0
;
; Used by the routine at #R$A985.
c$A9A0 LD (IX+$00),$44 ;
 $A9A4 LD (IX+$06),$FD ;
 $A9A8 JP $AD5D        ; Jump to #R$AD5D.

; Routine at A9AB
;
; Used by the routine at #R$A985.
c$A9AB LD (IX+$00),$40 ;
 $A9AF LD (IX+$06),$00 ;
 $A9B3 LD (IX+$07),$04 ;
 $A9B7 LD (IX+$03),$78 ;
 $A9BB JP $AD5D        ; Jump to #R$AD5D.

; Routine at A9BE
c$A9BE CALL $BB0B     ; Call #R$BB0B.
 $A9C1 LD A,(IX+$06)  ;
 $A9C4 ADD A,(IX+$03) ;
 $A9C7 LD E,A         ;
 $A9C8 LD A,(IX+$04)  ;
 $A9CB ADD A,(IX+$07) ;
 $A9CE LD D,A         ;
 $A9CF LD BC,$170F    ; #REGbc=#N$170F.
 $A9D2 CALL $B81C     ; Call #R$B81C.
 $A9D5 CALL $AAED     ; Call #R$AAED.
 $A9D8 JR Z,$AA00     ;
 $A9DA LD A,E         ;
 $A9DB CP $04         ;
 $A9DD JR C,$AA00     ;
 $A9DF CP $EC         ;
 $A9E1 JR NC,$AA00    ;
 $A9E3 LD A,D         ;
 $A9E4 CP $28         ;
 $A9E6 JR C,$AA00     ;
 $A9E8 CP $C0         ;
 $A9EA JR NC,$AA00    ;
 $A9EC LD (IX+$03),E  ;
 $A9EF LD (IX+$04),D  ;
 $A9F2 CALL $AD5D     ; Call #R$AD5D.
 $A9F5 INC (IX+$02)   ;
 $A9F8 LD B,(IX+$02)  ;
 $A9FB LD C,$04       ; #REGc=#N$04.
 $A9FD JP $BF6D       ; Jump to #R$BF6D.

; Routine at AA00
;
; Used by the routine at #R$A9BE.
c$AA00 INC (IX+$00)    ;
 $AA03 LD (IX+$02),$3F ;
 $AA07 CALL $AD5D      ; Call #R$AD5D.
 $AA0A JP $BF2F        ; Jump to #R$BF2F.

; Routine at AA0D
c$AA0D CALL $BB0B    ; Call #R$BB0B.
 $AA10 DEC (IX+$02)  ;
 $AA13 JR Z,$AA27    ;
 $AA15 LD A,($96BD)  ;
 $AA18 AND A         ;
 $AA19 JR NZ,$AA57   ;
 $AA1B LD A,(IX+$02) ;
 $AA1E CP $30        ;
 $AA20 JR NZ,$AA57   ;
 $AA22 INC (IX+$00)  ;
 $AA25 JR $AA57      ; Jump to #R$AA57.

; Routine at AA27
;
; Used by the routines at #R$9F6A and #R$AA0D.
;
; .
;
; Is this a one or two player game?
c$AA27 LD A,($9692)    ; #REGa=#R$9692.
 $AA2A AND %00000001   ; Keep only bit 0.
 $AA2C JR NZ,$AA5A     ; Jump to #R$AA5A if this is a two player game.
; This is a one player game.
*$AA2E LD A,($96BD)    ; {If #R$96BD is zero then jump to #R$AAA4.
 $AA31 AND A           ;
 $AA32 JR Z,$AAA4      ; }
 $AA34 LD HL,$96BD     ; #REGhl=#R$96BD.
 $AA37 DEC (HL)        ;
 $AA38 CALL $B7CD      ; Call #R$B7CD.
 $AA3B LD A,(IX+$00)   ;
 $AA3E AND %00000111   ; Keep only bits 0-2.
 $AA40 OR %00010000    ; Set bit 4.
 $AA42 LD (IX+$00),A   ;
 $AA45 LD (IX+$05),$47 ;
 $AA49 XOR A           ; {Write #N$00 to #R$96B0.
 $AA4A LD ($96B0),A    ; }
 $AA4D LD A,$10        ; {Write #N$10 to #R$96B1.
 $AA4F LD ($96B1),A    ; }
 $AA52 LD A,$80        ; {Write #N$80 to #R$96B4.
 $AA54 LD ($96B4),A    ; }
; This entry point is used by the routine at #R$AA0D.
*$AA57 JP $AD5D        ; Jump to #R$AD5D.
; This is a two player game.
*$AA5A LD A,($96E0)    ; {If #R$96E0 is zero then jump to #R$AA2E.
 $AA5D AND A           ;
 $AA5E JR Z,$AA2E      ; }
 $AA60 LD A,($96BD)    ;
 $AA63 AND A           ;
 $AA64 CALL Z,$AA9C    ;
 $AA67 JP $B205        ; Jump to #R$B205.

; Game Over
;
; .
;
; .
;
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 1UP.)
@label=GameOver_1UP
c$AA6A LD A,"1"+$80  ; #REGa="1" + #N$80 (escape character).
; Print the messaging and pause to show it for a period of time.
@label=GameOver_Write
*$AA6C LD ($AAD3),A  ; Write ASCII player number to
                     ; #R$AAC1(#N$AAD3)(GameOver_Text).
 $AA6F CALL $BB7C    ; Call #R$BB7C.
 $AA72 CALL $BB5C    ; Call #R$BB5C.
 $AA75 LD DE,$AAD4   ; #REGde=#R$AAD4.
 $AA78 LD HL,$7820   ; #REGhl=#N$7820.
 $AA7B CALL $B53D    ; Call #R$B53D.
 $AA7E LD DE,$AAC1   ; #REGde=#R$AAC1.
 $AA81 LD HL,$6038   ; #REGhl=#N$6038.
 $AA84 CALL $B53D    ; Call #R$B53D.
 $AA87 CALL $9CC6    ; Call #R$9CC6.
 $AA8A LD DE,$BD28   ; #REGde=#R$BD28.
 $AA8D CALL $BD6E    ; Call #R$BD6E.
; Introduce a pause by counting down from #N$10000 twice.
 $AA90 LD B,$02      ; #REGb=#N$02 (counter).
 $AA92 LD HL,$0000   ; #REGhl=#N$0000 (large counter).
 $AA95 JP $A1FF      ; Call #R$A1FF.
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 2UP.)
@label=GameOver_2UP
*$AA98 LD A,"2"+$80  ; #REGa="2" + #N$80 (escape character).
 $AA9A JR $AA6C      ; Jump to #R$AA6C.
; This controller simply returns on end. This is for when the game continues
; after the messaging.
@label=GameOver_Controller
*$AA9C LD A,($969E)  ; {If #R$969E is zero, jump to #R$AA6A.
 $AA9F AND A         ;
 $AAA0 JR Z,$AA6A    ; }
 $AAA2 JR $AA98      ; Else, jump to #R$AA98.
; This is a controller with a jump to #R$998F to return to the game selection
; screen.
@label=GameOver_ControllerRestart
*$AAA4 LD A,($969E)  ; {If #R$969E is not zero, jump to #R$AABC.
 $AAA7 AND A         ;
 $AAA8 JR NZ,$AABC   ; }
 $AAAA CALL $AA6A    ; Call #R$AA6A.
*$AAAD CALL $B5FC    ; Call #R$B5FC.
 $AAB0 LD A,($96BA)  ; {If #R$96BA is not zero, jump to #R$AAB9.
 $AAB3 AND A         ;
 $AAB4 JR Z,$AAB9    ; }
 $AAB6 CALL $B27E    ; Call #R$B27E.
@label=GameOver_Restart
*$AAB9 JP $998F      ; Jump to #R$998F.
@label=GameOver_Restart2UP
*$AABC CALL $AA98    ; Call #R$AA98.
 $AABF JR $AAAD      ; Jump to #R$AAAD.

; Game Over Messaging
;
; This message is altered directly to change from "1" to "2" for the correct player.
;       See #R$AA6A and #R$AA98.
@label=GameOver_Text
b$AAC1 DEFB $47                         ; Attribute: #N(#PEEK(#PC)).
 $AAC2 DEFM "GAME OVER PLAYER ","1"+$80 ; #HTML("GAME OVER PLAYER <em>X</em>".)

; Adventure Completed Messaging
@label=AdventureCompleted_Text
b$AAD4 DEFB $47                               ; Attribute: #N(#PEEK(#PC)).
 $AAD5 DEFM "ADVENTURE COMPLETED    ","%"+$80 ; "#STR(#PC)".

; Routine at AAED
;
; Used by the routines at #R$9D91, #R$9E72, #R$A54F, #R$A858, #R$A9BE, #R$AD07,
; #R$ADD0 and #R$AEEF.
c$AAED LD A,E          ;
 $AAEE XOR (IX+$03)    ;
 $AAF1 RET NZ          ;
 $AAF2 LD A,D          ;
 $AAF3 XOR (IX+$04)    ;
 $AAF6 RET             ;
 $AAF7 LD A,E          ;
 $AAF8 CP (IX+$03)     ;
 $AAFB RET Z           ;
 $AAFC LD A,D          ;
 $AAFD CP (IX+$04)     ;
 $AB00 RET             ;
; This entry point is used by the routines at #R$9B0D, #R$9D91, #R$A18C,
; #R$A305, #R$A3B7, #R$A737 and #R$A858.
*$AB01 LD A,($96B5)    ;
 $AB04 AND A           ;
 $AB05 RET NZ          ;
 $AB06 LD A,($9702)    ;
 $AB09 SUB $10         ;
 $AB0B CP $20          ;
 $AB0D RET NC          ;
; This entry point is used by the routine at #R$9E72.
*$AB0E LD HL,$0F0C     ;
 $AB11 CP $10          ;
 $AB13 JR C,$AB18      ;
 $AB15 LD HL,$0F1C     ;
*$AB18 LD A,($9705)    ;
 $AB1B SUB (IX+$03)    ;
 $AB1E JR C,$AB2C      ;
 $AB20 CP C            ;
*$AB21 RET NC          ;
 $AB22 LD A,($9706)    ;
 $AB25 SUB (IX+$04)    ;
 $AB28 JR C,$AB31      ;
 $AB2A CP H            ;
*$AB2B RET             ;
*$AB2C NEG             ;
 $AB2E CP L            ;
 $AB2F JR $AB21        ;
*$AB31 NEG             ;
 $AB33 CP B            ;
 $AB34 JR $AB2B        ;
; This entry point is used by the routines at #R$9E72, #R$A4D7, #R$A54F and
; #R$AD07.
*$AB36 LD A,($9707)    ;
 $AB39 SUB $47         ;
 $AB3B AND A           ;
 $AB3C RET NZ          ;
; This entry point is used by the routine at #R$9E72.
*$AB3D LD A,($9703)    ;
 $AB40 SUB (IX+$01)    ;
 $AB43 AND A           ;
 $AB44 RET NZ          ;
 $AB45 CALL $AB01      ;
 $AB48 RET NC          ;
 $AB49 LD A,($9702)    ;
 $AB4C SUB $10         ;
 $AB4E CP $10          ;
 $AB50 JR C,$AB5E      ;
 $AB52 BIT 3,A         ;
 $AB54 JR NZ,$AB6A     ;
 $AB56 LD A,($9705)    ;
 $AB59 SUB (IX+$03)    ;
 $AB5C JR NC,$AB68     ;
*$AB5E BIT 0,D         ;
 $AB60 LD A,$01        ;
 $AB62 JR NZ,$AB65     ;
 $AB64 INC A           ;
*$AB65 LD ($9704),A    ;
*$AB68 SCF             ;
 $AB69 RET             ;
*$AB6A LD A,($9705)    ;
 $AB6D SUB (IX+$03)    ;
 $AB70 JR C,$AB68      ;
 $AB72 JR $AB5E        ;
 $AB74 CALL $A630      ;
 $AB77 CALL $BB0B      ;
 $AB7A LD A,$10        ;
 $AB7C LD ($96AD),A    ;
 $AB7F CALL $AFE8      ;
 $AB82 LD BC,$170F     ;
 $AB85 CALL $B81C      ;
 $AB88 CALL $ABDE      ;
 $AB8B LD (IX+$03),E   ;
 $AB8E LD (IX+$04),D   ;
 $AB91 CALL $AC0E      ;
 $AB94 LD A,(IX+$00)   ;
 $AB97 RRCA            ;
 $AB98 RRCA            ;
 $AB99 AND $01         ;
 $AB9B LD D,A          ;
 $AB9C LD BC,$0F0C     ;
 $AB9F CALL $AB36      ;
 $ABA2 JR NC,$ABB6     ;
 $ABA4 LD A,($9702)    ;
 $ABA7 AND $08         ;
 $ABA9 JR Z,$ABDA      ;
 $ABAB LD A,$40        ;
*$ABAD LD BC,$AC24     ;
 $ABB0 CALL $ABEF      ;
 $ABB3 CALL $BF17      ;
*$ABB6 CALL $9D41      ;
 $ABB9 JP NC,$AD46     ;
 $ABBC LD C,A          ;
 $ABBD LD A,($9703)    ;
 $ABC0 CP (IX+$01)     ;
 $ABC3 JP NZ,$AD46     ;
 $ABC6 LD A,C          ;
 $ABC7 CALL $BF3D      ;
 $ABCA LD A,(IX+$05)   ;
 $ABCD PUSH AF         ;
 $ABCE LD (IX+$05),$46 ;
 $ABD2 CALL $AD46      ;
 $ABD5 POP AF          ;
 $ABD6 LD (IX+$05),A   ;
 $ABD9 RET             ;
*$ABDA LD A,$C0        ;
 $ABDC JR $ABAD        ;
*$ABDE CALL $AAED      ;
 $ABE1 RET NZ          ;
 $ABE2 LD BC,$AC24     ;
 $ABE5 LD A,($9695)    ;
 $ABE8 AND $03         ;
 $ABEA LD L,A          ;
 $ABEB LD H,$00        ;
 $ABED ADD HL,BC       ;
 $ABEE LD A,(HL)       ;
*$ABEF LD (IX+$06),A   ;
 $ABF2 AND A           ;
 $ABF3 JP M,$AC08      ;
 $ABF6 SET 2,(IX+$00)  ;
*$ABFA LD A,($5C78)    ;
 $ABFD AND $03         ;
 $ABFF LD L,A          ;
 $AC00 LD H,$00        ;
 $AC02 ADD HL,BC       ;
 $AC03 LD A,(HL)       ;
 $AC04 LD (IX+$07),A   ;
 $AC07 RET             ;
*$AC08 RES 2,(IX+$00)  ;
 $AC0C JR $ABFA        ;
; This entry point is used by the routine at #R$A858.
*$AC0E LD A,($9693)    ;
 $AC11 AND $01         ;
 $AC13 RET NZ          ;
 $AC14 LD A,(IX+$00)   ;
 $AC17 LD C,A          ;
 $AC18 INC A           ;
 $AC19 AND $03         ;
 $AC1B LD B,A          ;
 $AC1C LD A,C          ;
 $AC1D AND $FC         ;
 $AC1F OR B            ;
 $AC20 LD (IX+$00),A   ;
 $AC23 RET             ;

; Data block at AC24
b$AC24 DEFB $D0,$E0,$20,$30

; Routine at AC28
;
; Used by the routines at #R$9A1D, #R$9F6A and #R$A234.
c$AC28 EI            ; Enable interrupts.
 $AC29 LD A,$7E      ; {Read from the keyboard;
 $AC2B OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $AC2D IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { =r2 #N$7E | SPACE | FULL-STOP | M | N | B }
                     ; { Shift | Z | X | C | V }
                     ; TABLE#}
 $AC2F BIT 0,A       ;
 $AC31 RET NZ        ;
 $AC32 CPL           ; Flip the bits.
 $AC33 AND %00011110 ; Keep only bits 1-4.
 $AC35 RET NZ        ;
*$AC36 LD A,$7E      ; {Read from the keyboard;
 $AC38 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $AC3A IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { =r2 #N$7E | SPACE | FULL-STOP | M | N | B }
                     ; { Shift | Z | X | C | V }
                     ; TABLE#}
 $AC3C BIT 0,A       ;
 $AC3E JR Z,$AC36    ;
*$AC40 LD HL,$5C78   ; {#HTML(#REGhl=<a
 $AC43 LD A,(HL)     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
*$AC44 CP (HL)       ;
 $AC45 JR Z,$AC44    ;
 $AC47 LD A,D        ;
 $AC48 ADD A,$04     ;
 $AC4A LD D,A        ;
 $AC4B RLCA          ;
 $AC4C RLCA          ;
 $AC4D AND %00000010 ; Keep only bit 1.
 $AC4F OR %00000001  ;
 $AC51 OUT ($FE),A   ;
 $AC53 LD A,$7E      ; {Read from the keyboard;
 $AC55 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $AC57 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7E | SPACE | FULL-STOP | M | N | B | Shift | Z | X | C | V }
                     ; TABLE#}
 $AC59 BIT 0,A       ;
 $AC5B JR NZ,$AC40   ;
*$AC5D LD A,$7E      ; {Read from the keyboard;
 $AC5F OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $AC61 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7E | SPACE | FULL-STOP | M | N | B | Shift | Z | X | C | V }
                     ; TABLE#}
 $AC63 BIT 0,A       ;
 $AC65 JR Z,$AC5D    ;
 $AC67 XOR A         ;
 $AC68 OUT ($FE),A   ;
 $AC6A RET           ; Return.
; This entry point is used by the routine at #R$B21E.
*$AC6B LD HL,$AC77   ; {Copy #N$0090 bytes of data from #R$AC77 to #R$9702.
 $AC6E LD DE,$9702   ;
 $AC71 LD BC,$0090   ;
 $AC74 LDIR          ; }
 $AC76 RET           ; Return.

; Data block at AC77
b$AC77 DEFB $10,$A8,$00,$78,$70,$47,$00,$00
 $AC7F DEFB $00,$00,$00,$00,$30,$98,$00,$70
 $AC87 DEFB $83,$43,$D0,$00,$00,$00,$00,$00
 $AC8F DEFB $32,$07,$00,$70,$3F,$43,$30,$00
 $AC97 DEFB $00,$00,$00,$00,$30,$F3,$00,$70
 $AC9F DEFB $83,$43,$D0,$00,$00,$00,$00,$00
 $ACA7 DEFB $32,$98,$00,$70,$3F,$43,$30,$00
 $ACAF DEFB $00,$00,$00,$00,$3C,$A7,$00,$50
 $ACB7 DEFB $50,$42,$02,$02,$00,$00,$00,$00
 $ACBF DEFB $3C,$44,$00,$50,$50,$43,$02,$FE
 $ACC7 DEFB $00,$00,$00,$00,$3C,$E2,$00,$30
 $ACCF DEFB $78,$45,$FD,$FD,$00,$00,$00,$00
 $ACD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $ACDF DEFB $00,$00,$00,$00,$50,$F6,$00,$70
 $ACE7 DEFB $3F,$45,$C0,$00,$00,$00,$00,$00
 $ACEF DEFB $A0,$83,$00,$78,$87,$46,$E0,$00
 $ACF7 DEFB $00,$00,$00,$00,$94,$88,$00,$70
 $ACFF DEFB $87,$45,$00,$00,$00,$00,$00,$00

; Routine at AD07
c$AD07 CALL $BB0B    ; Call #R$BB0B.
 $AD0A CALL $AD93    ; Call #R$AD93.
 $AD0D LD A,$20      ; {Write #N$20 to #R$96AD.
 $AD0F LD ($96AD),A  ; }
 $AD12 CALL $AFE8    ; Call #R$AFE8.
 $AD15 LD BC,$171F   ; #REGbc=#N$171F.
 $AD18 CALL $B81C    ; Call #R$B81C.
 $AD1B CALL $AAED    ; Call #R$AAED.
 $AD1E JR NZ,$AD28   ;
 $AD20 LD A,$30      ; #REGa=#N$30.
 $AD22 CALL $AD86    ; Call #R$AD86.
 $AD25 CALL $ADA2    ; Call #R$ADA2.
; This entry point is used by the routine at #R$9E72.
*$AD28 LD (IX+$03),E ;
 $AD2B LD (IX+$04),D ;
 $AD2E LD A,(IX+$00) ;
 $AD31 RRCA          ;
 $AD32 AND %00000001 ; Keep only bit 0.
 $AD34 LD D,A        ; Store the result in #REGd.
 $AD35 LD BC,$0F1C   ; #REGbc=#N$0F1C.
 $AD38 CALL $AB36    ; Call #R$AB36.
 $AD3B JR NC,$AD46   ;
 $AD3D LD A,($9704)  ;
 $AD40 AND A         ;
 $AD41 JR Z,$AD69    ;
 $AD43 CALL $ADA2    ; Call #R$ADA2.
; This entry point is used by the routines at #R$9E72, #R$A858, #R$AAED and
; #R$AD69.
*$AD46 LD A,($9703)  ;
 $AD49 LD C,A        ;
 $AD4A CP (IX+$01)   ;
 $AD4D JR Z,$AD57    ;
 $AD4F LD A,($96A2)  ;
 $AD52 CP C          ;
 $AD53 RET NZ        ;
 $AD54 JP $B8F5      ; Jump to #R$B8F5.

; Routine at AD57
;
; Used by the routine at #R$AD07.
c$AD57 LD A,($96A2)  ; #REGa=#R$96A2.
 $AD5A CP C          ;
 $AD5B JR NZ,$AD63   ;
; This entry point is used by the routines at #R$9D91, #R$9E72, #R$A3C5,
; #R$A3E0, #R$A42A, #R$A4A1, #R$A4D7, #R$A54F, #R$A985, #R$A9A0, #R$A9AB,
; #R$A9BE, #R$AA00, #R$AA27 and #R$ADD0.
*$AD5D CALL $B9A9    ; Call #R$B9A9.
 $AD60 JP $BB24      ; Jump to #R$BB24.
*$AD63 CALL $B919    ; Call #R$B919.
 $AD66 JP $BB24      ; Jump to #R$BB24.

; Routine at AD69
;
; Used by the routine at #R$AD07.
c$AD69 LD A,($9702)   ;
 $AD6C BIT 3,A        ;
 $AD6E JR NZ,$AD7E    ;
 $AD70 RES 1,(IX+$00) ;
 $AD74 LD A,$A0       ;
*$AD76 LD (IX+$06),A  ;
 $AD79 CALL $BF17     ;
 $AD7C JR $AD46       ;
*$AD7E SET 1,(IX+$00) ;
 $AD82 LD A,$60       ;
 $AD84 JR $AD76       ;
; This entry point is used by the routine at #R$AD07.
*$AD86 BIT 7,(IX+$06) ;
 $AD8A JP P,$AD8F     ;
 $AD8D NEG            ;
*$AD8F LD (IX+$06),A  ;
 $AD92 RET            ; Return.

; Routine at AD93
;
; Used by the routines at #R$9E72 and #R$AD07.
c$AD93 LD A,($9693)  ; #REGa=#R$9693.
 $AD96 AND %00000001 ; Keep only bit 0.
 $AD98 RET NZ        ;
 $AD99 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $AD9C XOR %00000001 ; Toggle.
 $AD9E LD (IX+$00),A ; Write #REGa to #REGix+#N$00 (sprite reference).
 $ADA1 RET           ; Return.

; Routine at ADA2
;
; Used by the routines at #R$9E72 and #R$AD07.
c$ADA2 LD A,(IX+$00) ;
 $ADA5 XOR $02       ;
 $ADA7 LD (IX+$00),A ;
; This entry point is used by the routine at #R$ADB3.
*$ADAA LD A,(IX+$06) ;
 $ADAD NEG           ;
 $ADAF LD (IX+$06),A ;
 $ADB2 RET           ; Return.

; Routine at ADB3
;
; Used by the routine at #R$A858.
c$ADB3 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $ADB6 XOR %00000100 ; Toggle.
 $ADB8 LD (IX+$00),A ; Write #REGa to #REGix+#N$00 (sprite reference).
 $ADBB JR $ADAA      ; Jump to #R$ADAA.

; Routine at ADBD
c$ADBD RET           ;
 $ADBE RET           ;

; Routine at ADBF
;
; Used by the routine at #R$AEEF.
c$ADBF LD A,(IX+$00) ;
 $ADC2 RLCA          ;
 $ADC3 AND %00001111 ; Keep only bits 0-3.
 $ADC5 OR %00100000  ; Set bit 5.
 $ADC7 LD (IX+$00),A ;
 $ADCA LD A,$18      ; {Write #N$18 to #R$96AD.
 $ADCC LD ($96AD),A  ; }
 $ADCF RET           ; Return.

; Player Movement
@label=PlayerMovement
c$ADD0 CALL $BB0B    ; Call #R$BB0B.
 $ADD3 CALL $A18C    ; Call #R$A18C.
 $ADD6 LD A,$10      ; {Write #N$10 to #R$96AD.
 $ADD8 LD ($96AD),A  ; }
 $ADDB LD A,(IX+$02) ;
 $ADDE AND A         ;
 $ADDF JP NZ,$A985   ;
; Initialise the player movement (#N($0000,$04,$04) == no movement).
 $ADE2 LD DE,$0000   ; #REGde=#N($0000,$04,$04).
 $ADE5 CALL $B0A3    ; Call #R$B0A3.
; Check if the player is under the influence of an orchid.
 $ADE8 LD A,(IX+$05) ; #REGa=the colour of the player.
 $ADEB CP $47        ; {If the player is not using attribute #N$47 (white) then
 $ADED JR NZ,$AE34   ; jump to #R$AE34.}
; Controllers for player controls.
; .
; Handle "fire".
 $ADEF BIT 4,C       ; {Jump to #R$AE34 if "fire" was pressed.
 $ADF1 JR Z,$AE34    ; }
; Handle "right".
 $ADF3 BIT 1,C       ; {Jump to #R$ADFB if "right" was pressed.
 $ADF5 JR Z,$ADFB    ; }
; Update movement for moving right.
 $ADF7 LD A,E        ; {#REGe=#REGe+#N$20.
 $ADF8 ADD A,$20     ;
 $ADFA LD E,A        ; }
; Handle "left".
@label=PlayerMovement_Left
*$ADFB BIT 0,C       ; {Jump to #R$AE03 if "left" was pressed.
 $ADFD JR Z,$AE03    ; }
; Update movement for moving left.
 $ADFF LD A,E        ; {#REGe=#REGe-#N$20.
 $AE00 SUB $20       ;
 $AE02 LD E,A        ; }
; Handle "down".
@label=PlayerMovement_Down
*$AE03 BIT 2,C       ; {Jump to #R$AE0B if "down" was pressed.
 $AE05 JR Z,$AE0B    ; }
; Update movement for moving down.
 $AE07 LD A,D        ; {#REGd=#REGd-#N$20.
 $AE08 SUB $20       ;
 $AE0A LD D,A        ; }
; Handle "up".
@label=PlayerMovement_Up
*$AE0B BIT 3,C       ; {Jump to #R$AE13 if "up" was pressed.
 $AE0D JR Z,$AE13    ; }
; Update movement for moving up.
 $AE0F LD A,D        ; {#REGd=#REGd+#N$20.
 $AE10 ADD A,$20     ;
 $AE12 LD D,A        ; }
; Update the player Actor Entity.
*$AE13 LD (IX+$06),E ; Write #REGe to #REGix+#N$06.
 $AE16 LD (IX+$07),D ; Write #REGd to #REGix+#N$07.
 $AE19 CALL $AFE8    ; Call #R$AFE8.
 $AE1C LD BC,$160E   ; #REGbc=#N$160E.
 $AE1F CALL $B81C    ; Call #R$B81C.
 $AE22 CALL $AE4B    ; Call #R$AE4B.
 $AE25 CALL $AAED    ; Call #R$AAED.
 $AE28 LD (IX+$03),E ; Write #REGe to #REGix+#N$03 (sprite x co-ordinate).
 $AE2B LD (IX+$04),D ; Write #REGd to #REGix+#N$04 (sprite y co-ordinate).
 $AE2E CALL NZ,$BF4B ;
 $AE31 JP $AD5D      ; Jump to #R$AD5D.

; Routine at AE34
;
; Used by the routine at #R$ADD0.
c$AE34 BIT 3,(IX+$00) ;
 $AE38 JR Z,$AE47     ;
 $AE3A LD A,$14       ;
; This entry point is used by the routine at #R$AE47.
*$AE3C LD (IX+$00),A  ;
 $AE3F LD A,$10       ;
 $AE41 LD ($96AD),A   ;
 $AE44 JP $AF1C       ; Jump to #R$AF1C.

; Routine at AE47
;
; Used by the routine at #R$AE34.
c$AE47 LD A,$10      ; #REGa=#N$10.
 $AE49 JR $AE3C      ; Jump to #R$AE3C.

; Routine at AE4B
;
; Used by the routine at #R$ADD0.
c$AE4B LD A,(IX+$06) ; #REGa=#REGix+#N$06.
 $AE4E AND A         ;
 $AE4F JR Z,$AE5C    ;
 $AE51 JP M,$AE73    ;
 $AE54 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $AE57 OR %00001000  ; Set bit 3.
*$AE59 LD (IX+$00),A ; Write the result back to #REGix+#N$00 (sprite
                     ; reference).
*$AE5C LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $AE5F AND %00000011 ; Keep only bits 0-1.
 $AE61 RET NZ        ;
 $AE62 LD C,(IX+$00) ; #REGc=#REGix+#N$00 (sprite reference).
 $AE65 LD A,($9695)  ; #REGa=#R$9695.
 $AE68 AND %00000111 ; Keep only bits 0-2.
 $AE6A LD B,A        ;
 $AE6B LD A,C        ;
 $AE6C AND %11111000 ; Keep only bits 3-7.
 $AE6E OR B          ;
 $AE6F LD (IX+$00),A ;
 $AE72 RET           ; Return.
*$AE73 LD A,(IX+$00) ;
 $AE76 AND %11110111 ; Keep only bits 0-2, 4-7.
 $AE78 JR $AE59      ; Jump to #R$AE59.

; Handler: Orchid Timer
;
; Used by the routines at #R$A61B and #R$AEEF.
@label=HandlerOrchidTimer
c$AE7A LD A,($5C78)    ; #HTML(#REGa=<a
                       ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $AE7D AND %00000001   ; Keep only bit 0.
 $AE7F RET NZ          ; Return every other FRAME.
 $AE80 LD A,($96B0)    ; #REGa=#R$96B0.
 $AE83 AND A           ; {Return if #R$96B0 is zero.
 $AE84 RET Z           ; }
 $AE85 DEC A           ; Decrease #REGa by one.
 $AE86 LD ($96B0),A    ; Write #REGa back to #R$96B0.
 $AE89 RET NZ          ; Return if #REGa is not zero.
 $AE8A LD (IX+$05),$47 ; Set #REGix+#N$05 (entity colour) to #N$47 (white).
 $AE8E RET             ; Return.

; Handler: Yellow Orchid
;
; Used by the routine at #R$AEEF.
;
; .
;
; Fetch Sabremans current sprite frame.
@label=HandlerYellowOrchid
c$AE8F LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
; This will leave either #N$00 or #N$04
 $AE92 AND %00000100 ; Keep only bit 2.
; Add on #N$43.
 $AE94 OR %01000011  ; Set bits 0-1, 6.
; The resulting sprite frame will be either #R$D2B0(#SPRITENAME$43) or
; #R$D32A(#SPRITENAME($47)).
 $AE96 LD (IX+$00),A ; Write the result back to #REGix+#N$00 (sprite
                     ; reference).
 $AE99 LD A,$60      ; {Write #N$60 to #R$96B0.
 $AE9B LD ($96B0),A  ; }
 $AE9E JP $A61E      ; Jump to #R$A61E.

; Flash Score Label
;
; Used by the routine at #R$AECF.
;
; .
;
; Controller for handling whether to action 1UP or 2UP score label.
@label=ScoreLabelFlash
c$AEA1 LD A,(HL)     ;
 $AEA2 AND %00001111 ; Keep only bits 0-3.
 $AEA4 CALL Z,$BF2A  ;
 $AEA7 LD A,($969E)  ; {If #R$969E is not zero, jump to #R$AECA.
 $AEAA AND A         ;
 $AEAB JR NZ,$AECA   ; }
; Flash 1UP score label.
 $AEAD LD HL,$0010   ; #REGhl=#N($00,$02,$03),#N($10,$02,$03) (position of the
                     ; 1UP score label).
; Set flash state for the 3-attributes of the score label.
@label=FlashText
*$AEB0 CALL $B8DD    ; Call #R$B8DD.
 $AEB3 LD B,$03      ; #REGb=#N$03 (counter for the three letters in a score
                     ; label).
@label=FlashText_Loop
*$AEB5 LD A,(HL)     ; Fetch the attribute byte.
 $AEB6 OR %10000000  ; Ensure bit 7 is set (the flash bit).
 $AEB8 LD (HL),A     ; Write the attribute byte back.
 $AEB9 INC HL        ; Increase the attribute pointer by one.
 $AEBA DJNZ $AEB5    ; Decrease counter by one and loop back to #R$AEB5 until
                     ; counter is zero.
 $AEBC RET           ; Return.
; Unset flash state for the 3-attributes of the score label.
@label=UnsetFlashText
*$AEBD CALL $B8DD    ; Call #R$B8DD.
 $AEC0 LD B,$03      ; #REGb=#N$03 (counter for the three letters in a score
                     ; label).
@label=UnsetFlashText_Loop
*$AEC2 LD A,(HL)     ; Fetch the attribute byte.
 $AEC3 AND %01111111 ; Keep only bits 0-6 (i.e. everything except the flash
                     ; bit).
 $AEC5 LD (HL),A     ; Write the attribute byte back.
 $AEC6 INC HL        ; Increase the attribute pointer by one.
 $AEC7 DJNZ $AEC2    ; Decrease counter by one and loop back to #R$AEC2 until
                     ; counter is zero.
 $AEC9 RET           ; Return.
; Flash 2UP score label.
@label=FlashScoreLabel2UP
*$AECA LD HL,$00D8   ; #REGhl=#N($00,$02,$03),#N($D8,$02,$03) (position of the
                     ; 2UP score label).
 $AECD JR $AEB0      ; Jump to #R$AEB0.
; View the equivalent code in;
; #LIST
; { #COOKIE$7020 }
; LIST#

; Game Play Entry
@label=GamePlayEntry
c$AECF LD HL,$96B5   ; {If #R$96B5 is zero, jump to #R$AEEF.
 $AED2 LD A,(HL)     ;
 $AED3 AND A         ;
 $AED4 JR Z,$AEEF    ; }
 $AED6 DEC (HL)      ; Decrement #R$96B5 by one.
 $AED7 JR NZ,$AEA1   ; Jump to #R$AEA1 if the delay timer is still active.
 $AED9 LD A,($969E)  ; {If #R$969E says that 2UP is the active player, jump
 $AEDC AND A         ; to#R$AEEA.
 $AEDD JR NZ,$AEEA   ; }
; Handle turning off flash for 1UP score label.
 $AEDF LD HL,$0010   ; #REGhl=#N($00,$02,$03),#N($10,$02,$03) (position of the
                     ; 1UP score label).
@label=Game1UP_UnsetFlash
*$AEE2 CALL $AEBD    ; Call #R$AEBD.
 $AEE5 CALL $B919    ; Call #R$B919.
 $AEE8 JR $AEEF      ; Jump #R$AEEF.
; Handle turning off flash for 2UP score label.
@label=Game2UP_UnsetFlash
*$AEEA LD HL,$00D8   ; #REGde=#N($00,$02,$03),#N($D8,$02,$03) (position of the
                     ; 2UP score label).
 $AEED JR $AEE2      ; Jump #R$AEE2.
; View the equivalent code in;
; #LIST
; { #COOKIE$7048 }
; LIST#

; Game Play Start
;
; Used by the routine at #R$AECF.
@label=GamePlay_Start
c$AEEF CALL $BB0B      ; Call #R$BB0B.
 $AEF2 CALL $A18C      ; Call #R$A18C.
; Is Sabreman yellow?
 $AEF5 LD A,(IX+$05)   ; #REGa=#REGix+#N$05 (entity colour).
 $AEF8 CP $46          ; {If the colour is #N$46, jump to #R$AE8F.
 $AEFA JR Z,$AE8F      ; }
 $AEFC CALL $AE7A      ; Call #R$AE7A.
 $AEFF LD A,$10        ; {Write #N$10 to #R$96AD.
 $AF01 LD ($96AD),A    ; }
 $AF04 LD A,(IX+$02)   ;
 $AF07 AND A           ;
 $AF08 JP NZ,$A985     ;
 $AF0B LD DE,$0000     ; #REGde=#N($0000,$04,$04).
 $AF0E CALL $B0A3      ; Call #R$B0A3.
; Is Sabreman magenta?
 $AF11 LD A,(IX+$05)   ; #REGa=#REGix+#N$05 (entity colour).
 $AF14 CP $43          ; {If the colour is not #N$43, jump to #R$AF1C.
 $AF16 JR NZ,$AF1C     ; }
; Handles reversing the controls as a result of the magenta orchid.
 $AF18 LD A,C          ; #REGa=#REGc.
 $AF19 XOR %00001111   ;
 $AF1B LD C,A          ; #REGc=#REGa.
; This entry point is used by the routine at #R$AE34.
@label=GamePlay_Controls
*$AF1C LD A,C          ; #REGa=#REGc.
 $AF1D LD ($96AC),A    ; Write #REGa to #R$96AC.
 $AF20 LD A,E          ; #REGa=#REGe.
 $AF21 LD B,$07        ; #REGb=#N$07.
 $AF23 BIT 1,C         ;
 $AF25 JR Z,$AF28      ;
 $AF27 ADD A,B         ;
*$AF28 BIT 0,C         ;
 $AF2A JR Z,$AF2D      ;
 $AF2C SUB B           ;
*$AF2D LD E,A          ;
 $AF2E LD A,D          ;
 $AF2F BIT 3,C         ;
 $AF31 JR Z,$AF34      ;
 $AF33 ADD A,B         ;
*$AF34 BIT 2,C         ;
 $AF36 JR Z,$AF39      ;
 $AF38 SUB B           ;
*$AF39 LD D,A          ;
 $AF3A CALL $AFAC      ; Call #R$AFAC.
 $AF3D CALL $AFE8      ; Call #R$AFE8.
 $AF40 LD BC,$160E     ; #REGbc=#N$160E.
 $AF43 CALL $B81C      ; Call #R$B81C.
 $AF46 CALL $B053      ; Call #R$B053.
 $AF49 CALL $AAED      ; Call #R$AAED.
 $AF4C LD (IX+$03),E   ;
 $AF4F LD (IX+$04),D   ;
 $AF52 CALL NZ,$BF4B   ;
; Is Sabreman white?
 $AF55 LD A,(IX+$05)   ; #REGa=#REGix+#N$05 (entity colour).
 $AF58 CP $47          ; {If the colour is not #N$47, jump to #R$AF66.
 $AF5A JR NZ,$AF66     ; }
 $AF5C LD A,($96AC)    ;
 $AF5F BIT 4,A         ;
 $AF61 JR Z,$AF66      ;
 $AF63 CALL $ADBF      ; Call #R$ADBF.
*$AF66 LD A,(IX+$06)   ;
 $AF69 LD B,$01        ; #REGb=#N$01.
 $AF6B CALL $B047      ; Call #R$B047.
 $AF6E LD (IX+$06),A   ;
 $AF71 LD A,(IX+$07)   ;
 $AF74 CALL $B047      ; Call #R$B047.
 $AF77 LD (IX+$07),A   ;
; This entry point is used by the routine at #R$A61B.
*$AF7A CALL $B9A9      ; Call #R$B9A9.
 $AF7D LD A,($96B0)    ; #REGa=#R$96B0.
 $AF80 AND A           ; {If #REGa is zero, jump to #R$BB24.
 $AF81 JP Z,$BB24      ; }
 $AF84 CP $2F          ; Is #REGa #N$2F?
 $AF86 JP NC,$BB24     ;
 $AF89 AND %00001111   ; Keep only bits 0-3.
 $AF8B CP $08          ;
 $AF8D JR NC,$AFA4     ;
 $AF8F AND %00000111   ; Keep only bits 0-2.
 $AF91 CALL Z,$BEC6    ;
 $AF94 LD A,(IX+$05)   ;
 $AF97 PUSH AF         ;
 $AF98 LD (IX+$05),$47 ; Set #REGix+#N$05 (entity colour) to #N$47 (white).
 $AF9C CALL $BB24      ; Call #R$BB24.
 $AF9F POP AF          ;
 $AFA0 LD (IX+$05),A   ;
 $AFA3 RET             ; Return.
*$AFA4 AND %00000111   ; Keep only bits 0-2.
 $AFA6 CALL Z,$BEC6    ;
 $AFA9 JP $BB24        ; Jump to #R$BB24.
*$AFAC LD A,E          ;
 $AFAD ADD A,(IX+$06)  ;
 $AFB0 CALL $AFC1      ; Call #R$AFC1.
 $AFB3 LD (IX+$06),A   ;
 $AFB6 LD A,D          ;
 $AFB7 ADD A,(IX+$07)  ;
 $AFBA CALL $AFC1      ; Call #R$AFC1.
 $AFBD LD (IX+$07),A   ;
 $AFC0 RET             ; Return.

; Routine at AFC1
;
; Used by the routine at #R$AEEF.
c$AFC1 PUSH AF       ;
 $AFC2 LD A,(IX+$05) ;
 $AFC5 CP $42        ;
 $AFC7 JR Z,$AFE0    ;
 $AFC9 CP $45        ;
 $AFCB JR Z,$AFE4    ;
 $AFCD LD B,$30      ;
; This entry point is used by the routines at #R$AFE0 and #R$AFE4.
*$AFCF POP AF        ;
; This entry point is used by the routine at #R$A4D7.
*$AFD0 JP M,$AFD7    ;
 $AFD3 CP B          ;
 $AFD4 RET C         ;
 $AFD5 LD A,B        ;
 $AFD6 RET           ;
*$AFD7 NEG           ;
 $AFD9 CP B          ;
 $AFDA JR C,$AFDD    ;
 $AFDC LD A,B        ;
*$AFDD NEG           ;
 $AFDF RET           ;

; Routine at AFE0
;
; Used by the routine at #R$AFC1.
c$AFE0 LD B,$20      ; #REGb=#N$20.
 $AFE2 JR $AFCF      ; Jump to #R$AFCF.

; Routine at AFE4
;
; Used by the routine at #R$AFC1.
c$AFE4 LD B,$40      ; #REGb=#N$40.
 $AFE6 JR $AFCF      ; Jump to #R$AFCF.

; Routine at AFE8
;
; Used by the routines at #R$9E72, #R$A858, #R$AAED, #R$AD07, #R$ADD0 and
; #R$AEEF.
c$AFE8 LD A,(IX+$01)  ; {Write #REGix+#N$01 to #R$96AB.
 $AFEB LD ($96AB),A   ; }
 $AFEE LD D,(IX+$04)  ; #REGd=#REGix+#N$04.
 $AFF1 LD A,(IX+$06)  ; #REGa=#REGix+#N$06.
 $AFF4 CALL $B031     ; Call #R$B031.
 $AFF7 AND A          ;
 $AFF8 JP M,$B01A     ;
 $AFFB ADD A,(IX+$03) ;
 $AFFE LD E,A         ;
 $AFFF LD A,($96AD)   ;
 $B002 ADD A,E        ;
 $B003 JP C,$B19F     ;
; This entry point is used by the routine at #R$B01A.
*$B006 LD A,(IX+$07)  ; #REGa=#REGix+#N$07.
 $B009 CALL $B031     ; Call #R$B031.
 $B00C AND A          ;
 $B00D JP M,$B027     ;
 $B010 ADD A,(IX+$04) ;
 $B013 LD D,A         ; Store the result in #REGd.
 $B014 CP $C0         ;
 $B016 JP NC,$B12F    ;
 $B019 RET            ; Return.

; Routine at B01A
;
; Used by the routine at #R$AFE8.
c$B01A NEG           ;
 $B01C LD E,A        ;
 $B01D LD A,(IX+$03) ;
 $B020 SUB E         ;
 $B021 LD E,A        ;
 $B022 JP C,$B187    ;
 $B025 JR $B006      ; Jump to #R$B006.

; Routine at B027
;
; Used by the routine at #R$AFE8.
c$B027 ADD A,(IX+$04) ;
 $B02A LD D,A         ;
 $B02B CP $28         ;
 $B02D JP C,$B1AB     ;
 $B030 RET            ; Return.

; Routine at B031
;
; Used by the routines at #R$A44B and #R$AFE8.
c$B031 AND A         ;
 $B032 JP P,$B040    ;
 $B035 NEG           ;
 $B037 RRCA          ;
 $B038 RRCA          ;
 $B039 RRCA          ;
 $B03A RRCA          ;
 $B03B AND %00001111 ; Keep only bits 0-3.
 $B03D NEG           ;
 $B03F RET           ; Return.
*$B040 RRCA          ;
 $B041 RRCA          ;
 $B042 RRCA          ;
 $B043 RRCA          ;
 $B044 AND %00001111 ; Keep only bits 0-3.
 $B046 RET           ; Return.

; Routine at B047
;
; Used by the routine at #R$AEEF.
c$B047 AND A         ;
 $B048 JP P,$B04F    ;
 $B04B ADD A,B       ;
 $B04C RET NC        ;
 $B04D XOR A         ;
 $B04E RET           ; Return.
*$B04F SUB B         ;
 $B050 RET NC        ;
 $B051 XOR A         ;
 $B052 RET           ; Return.

; Routine at B053
;
; Used by the routine at #R$AEEF.
c$B053 CALL $B078    ; Call #R$B078.
 $B056 LD A,D        ;
 $B057 CP (IX+$04)   ;
 $B05A JR Z,$B066    ;
 $B05C LD A,(IX+$00) ;
 $B05F JR C,$B099    ;
 $B061 OR %00001100  ; Set bits 2-3.
; This entry point is used by the routine at #R$B099.
*$B063 LD (IX+$00),A ;
*$B066 LD A,E        ;
 $B067 CP (IX+$03)   ;
 $B06A RET Z         ;
 $B06B LD A,(IX+$00) ;
 $B06E JR C,$B09F    ;
 $B070 AND %11110011 ; Keep only bits 0-1, 4-7.
 $B072 OR %00000100  ; Set bit 2.
; This entry point is used by the routine at #R$B09F.
*$B074 LD (IX+$00),A ;
 $B077 RET           ; Return.

; Routine at B078
;
; Used by the routine at #R$B053.
c$B078 LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $B07B AND %00000001 ; Keep only bit 0.
 $B07D RET NZ        ;
 $B07E LD A,D        ;
 $B07F XOR (IX+$04)  ;
 $B082 LD C,A        ;
 $B083 LD A,E        ;
 $B084 XOR (IX+$03)  ;
 $B087 OR C          ;
 $B088 RET Z         ;
 $B089 LD A,(IX+$00) ;
 $B08C LD C,A        ;
 $B08D INC A         ;
 $B08E AND %00000011 ; Keep only bits 0-1.
 $B090 LD B,A        ;
 $B091 LD A,C        ;
 $B092 AND %11111100 ; Keep only bits 2-7.
 $B094 OR B          ;
 $B095 LD (IX+$00),A ;
 $B098 RET           ; Return.

; Routine at B099
;
; Used by the routine at #R$B053.
c$B099 AND %11110011 ; Keep only bits 0-1, 4-7.
 $B09B OR %00001000  ; Set bit 3.
 $B09D JR $B063      ; Jump to #R$B063.

; Routine at B09F
;
; Used by the routine at #R$B053.
c$B09F AND %11110011 ; Keep only bits 0-1, 4-7.
 $B0A1 JR $B074      ; Jump to #R$B074.

; Handler: Controls
;
; Used by the routines at #R$ADD0, #R$AEEF and #R$B6D7.
;
; O:C Controls
;
; #TABLE(default,centre,centre)
; { =h Bit | =h Action }
; { 0 | Left }
; { 1 | Right }
; { 2 | Down }
; { 3 | Up }
; { 4 | Fire }
; TABLE#
@label=HandlerControls
c$B0A3 LD A,($9692)  ; #REGa=#R$9692.
 $B0A6 RRCA          ; Shift off the keyboard option.
 $B0A7 AND %00000011 ; Keep only bits 0-1 (Kempston and Cursor joystick
                     ; options).
 $B0A9 JR Z,$B0FA    ; If there are no joystick options, then keyboard was
                     ; selected - so jump to #R$B0FA.
 $B0AB DEC A         ; {If bit 0 was on then Kempston joystick was selected -
 $B0AC JR Z,$B0D9    ; so jump to #R$B0D9.}
 $B0AE DEC A         ; {If bit 1 was on then Cursor joystick was selected - so
 $B0AF JR Z,$B103    ; jump to #R$B103.}
; Else, handle Interface II joystick - it's the only option left.
; .
; Continue on to #R$B0B1.

; Controls: Interface II Joystick
;
; .
;
; O:C Joystick controls
;
; Initialise the controls as "none" in #REGc.
@label=ReadInterfaceIIJoystick
c$B0B1 LD C,$00      ; #REGc=#N$00.
 $B0B3 LD A,$EF      ; {Read from the keyboard;
 $B0B5 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B0B7 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
; Check joystick "FIRE".
@label=ReadInterfaceIIJoystick_Fire
 $B0B9 BIT 0,A       ; Has key "0" been pressed?
 $B0BB JR NZ,$B0BF   ; If not jump to #R$B0BF.
 $B0BD SET 4,C       ; Set bit 4 of #REGc.
; Check joystick "UP".
@label=ReadInterfaceIIJoystick_Up
*$B0BF BIT 1,A       ; Has key "9" been pressed?
 $B0C1 JR NZ,$B0C5   ; If not jump to #R$B0C5.
 $B0C3 SET 2,C       ; Set bit 2 of #REGc.
; Check joystick "DOWN".
@label=ReadInterfaceIIJoystick_Down
*$B0C5 BIT 2,A       ; Has key "8" been pressed?
 $B0C7 JR NZ,$B0CB   ; If not jump to #R$B0CB.
 $B0C9 SET 3,C       ; Set bit 3 of #REGc.
; Check joystick "RIGHT".
@label=ReadInterfaceIIJoystick_Right
*$B0CB BIT 3,A       ; Has key "7" been pressed?
 $B0CD JR NZ,$B0D1   ; If not jump to #R$B0C5.
 $B0CF SET 1,C       ; Set bit 1 of #REGc.
; Check joystick "LEFT".
@label=ReadInterfaceIIJoystick_Left
*$B0D1 BIT 4,A       ; Has key "6" been pressed?
 $B0D3 JR NZ,$B0D7   ; If not jump to #R$B0D7.
 $B0D5 SET 0,C       ; Set bit 0 of #REGc.
@label=HandlerInterfaceIIJoystick
*$B0D7 LD A,C        ; #REGa=controls.
 $B0D8 RET           ; Return.

; Controls: Kempston Joystick
;
; Used by the routine at #R$B0A3.
;
; O:C Joystick controls
@label=ReadKempstonJoystick
c$B0D9 IN A,($1F)    ; #REGa=controls.
; Initialise the controls as "none" in #REGc.
 $B0DB LD C,$00      ; #REGc=#N$00.
; Check joystick "RIGHT".
@label=ReadKempstonJoystick_Right
 $B0DD BIT 0,A       ; If bit 0 is set/ "RIGHT" is NOT being pressed then jump
                     ; to #R$B0E3.
 $B0DF JR Z,$B0E3    ; If not jump to #R$B0E3.
 $B0E1 SET 1,C       ; Set bit 1 of #REGc.
; Check joystick "LEFT".
@label=ReadKempstonJoystick_Left
*$B0E3 BIT 1,A       ; If bit 1 is set/ "LEFT" is NOT being pressed then jump
                     ; to #R$B0E9.
 $B0E5 JR Z,$B0E9    ; If not jump to #R$B0E9.
 $B0E7 SET 0,C       ; Set bit 0 of #REGc.
; Check joystick "DOWN".
@label=ReadKempstonJoystick_Down
*$B0E9 BIT 2,A       ; If bit 2 is set/ "DOWN" is NOT being pressed then jump
                     ; to #R$B0EF.
 $B0EB JR Z,$B0EF    ; If not jump to #R$B0EF.
 $B0ED SET 3,C       ; Set bit 3 of #REGc.
; Check joystick "UP".
@label=ReadKempstonJoystick_Up
*$B0EF BIT 3,A       ; If bit 3 is set/ "UP" is NOT being pressed then jump to
                     ; #R$B0F5.
 $B0F1 JR Z,$B0F5    ; If not jump to #R$B0F5.
 $B0F3 SET 2,C       ; Set bit 2 of #REGc.
; Check joystick "FIRE".
@label=ReadKempstonJoystick_Fire
*$B0F5 AND %00010000 ; Keep only bit 4.
 $B0F7 OR C          ; {Merge the kept bit into #REGc.
 $B0F8 LD C,A        ; }
 $B0F9 RET           ; Return.

; Controls: Keyboard
;
; Used by the routine at #R$B0A3.
;
; O:C Keyboard controls
@label=ReadKeyboard
c$B0FA LD A,$FB      ; {Read from the keyboard;
 $B0FC OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B0FE IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FB | Q | W | E | R | T }
                     ; TABLE#}
 $B100 CPL           ; Flip the bits.
 $B101 LD C,A        ; #REGc=#REGa.
 $B102 RET           ; Return.

; Controls: Cursor Joystick
;
; Used by the routine at #R$B0A3.
;
; O:A Joystick controls
; O:C Joystick controls
;
; Initialise the controls as "none" in #REGc.
@label=ReadCursorJoystick
c$B103 LD C,$00      ; #REGc=#N$00.
; The cusor keys are covered by different ports.
@label=HandleCursorJoystick_Port_F7
 $B105 LD A,$F7      ; {Read from the keyboard;
 $B107 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B109 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
; Check joystick "LEFT".
@label=ReadCursorJoystick_Left
 $B10B BIT 4,A       ; Has key "5" been pressed?
 $B10D JR NZ,$B111   ; If not jump to #R$B111.
 $B10F SET 0,C       ; Set bit 0 of #REGc.
; Handle the other port.
@label=HandleCursorJoystick_Port_EF
*$B111 LD A,$EF      ; {Read from the keyboard;
 $B113 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B115 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
; Check joystick "DOWN".
@label=ReadCursorJoystick_Down
 $B117 BIT 4,A       ; Has key "6" been pressed?
 $B119 JR NZ,$B11D   ; If not jump to #R$B11D.
 $B11B SET 3,C       ; Set bit 3 of #REGc.
; Check joystick "UP".
@label=ReadCursorJoystick_Up
*$B11D BIT 3,A       ; Has key "7" been pressed?
 $B11F JR NZ,$B123   ; If not jump to #R$B123.
 $B121 SET 2,C       ; Set bit 2 of #REGc.
; Check joystick "RIGHT".
@label=ReadCursorJoystick_Right
*$B123 BIT 2,A       ; Has key "8" been pressed?
 $B125 JR NZ,$B129   ; If not jump to #R$B129.
 $B127 SET 1,C       ; Set bit 1 of #REGc.
; Check joystick "FIRE".
@label=ReadCursorJoystick_Fire
*$B129 BIT 0,A       ; Has key "0" been pressed?
 $B12B RET NZ        ; If not then return.
 $B12C SET 4,C       ; Set bit 4 of #REGc.
 $B12E RET           ; Return.

; Routine at B12F
;
; Used by the routine at #R$AFE8.
c$B12F LD D,$27      ; #REGd=#N$27.
 $B131 LD A,(IX+$01) ;
 $B134 ADD A,$10     ;
 $B136 LD (IX+$01),A ;
 $B139 LD L,A        ; {Create an offset.
 $B13A LD H,$00      ; }
 $B13C LD BC,$6066   ; {#REGbc=#R$6066 + offset.
 $B13F ADD HL,BC     ; }
 $B140 LD L,(HL)     ;
 $B141 LD H,$00      ;
 $B143 LD BC,$6036   ; {#REGbc=#R$6036 + offset.
 $B146 ADD HL,BC     ; }
 $B147 LD E,(HL)     ;
; This entry point is used by the routines at #R$B187 and #R$B1AB.
*$B148 LD A,(IX+$00) ;
 $B14B SUB $10       ;
 $B14D CP $20        ;
 $B14F RET NC        ;
 $B150 PUSH DE       ; Stash #REGde on the stack.
 $B151 CALL $BB7C    ; Call #R$BB7C.
 $B154 CALL $BB5C    ; Call #R$BB5C.
 $B157 CALL $BBDD    ; Call #R$BBDD.
 $B15A CALL $BB0B    ; Call #R$BB0B.
 $B15D CALL $B919    ; Call #R$B919.
 $B160 CALL $9D23    ; Call #R$9D23.
 $B163 POP DE        ; Restore #REGde from the stack.
 $B164 LD A,$80      ; {Write #N$80 to #R$96B4.
 $B166 LD ($96B4),A  ; }
 $B169 RET           ; Return.

; Routine at B16A
c$B16A LD A,($96AB)  ;
 $B16D LD B,A        ;
 $B16E LD A,($9703)  ;
 $B171 CP B          ;
 $B172 PUSH DE       ;
 $B173 CALL Z,$B8F5  ;
 $B176 POP DE        ;
 $B177 LD A,($9703)  ;
 $B17A CP (IX+$01)   ;
 $B17D RET NZ        ;
 $B17E PUSH DE       ;
 $B17F CALL $B919    ;
 $B182 CALL $BB0B    ;
 $B185 POP DE        ;
 $B186 RET           ;

; Routine at B187
;
; Used by the routine at #R$B01A.
c$B187 LD A,($96AD)  ; #REGa=#R$96AD.
 $B18A NEG           ;
 $B18C DEC A         ;
 $B18D LD E,A        ;
 $B18E LD A,(IX+$01) ;
 $B191 LD C,A        ;
 $B192 DEC A         ;
; This entry point is used by the routine at #R$B19F.
*$B193 AND %00001111 ; Keep only bits 0-3.
 $B195 LD B,A        ;
 $B196 LD A,C        ;
 $B197 AND %11110000 ; Keep only bits 4-7.
 $B199 OR B          ;
 $B19A LD (IX+$01),A ;
 $B19D JR $B148      ; Jump to #R$B148.

; Routine at B19F
;
; Used by the routine at #R$AFE8.
c$B19F LD E,$00      ; #REGe=#N$00.
 $B1A1 LD A,(IX+$01) ;
 $B1A4 LD C,A        ;
 $B1A5 INC A         ;
 $B1A6 LD (IX+$01),A ;
 $B1A9 JR $B193      ; Jump to #R$B193.

; Routine at B1AB
;
; Used by the routine at #R$B027.
c$B1AB LD D,$BF      ; #REGd=#N$BF.
 $B1AD LD A,(IX+$01) ;
 $B1B0 SUB $10       ;
 $B1B2 LD (IX+$01),A ;
 $B1B5 JR $B148      ; Jump to #R$B148.

; Routine at B1B7
;
; Used by the routine at #R$B1D4.
c$B1B7 LD HL,$9702   ; #REGhl=#R$9702.
 $B1BA LD A,$10      ; {Write #N$10 to #R$96B1.
 $B1BC LD ($96B1),A  ; }
 $B1BF LD A,$80      ; {Write #N$80 to #R$96B4.
 $B1C1 LD ($96B4),A  ; }
 $B1C4 LD A,$80      ; {Write #N$80 to #R$96B5.
 $B1C6 LD ($96B5),A  ; }
 $B1C9 XOR A         ; {Write #N$00 to #R$96B0.
 $B1CA LD ($96B0),A  ; }
 $B1CD LD HL,$96BD   ; #REGhl=#R$96BD.
 $B1D0 DEC (HL)      ; Decrease the lives value held at the memory location in
                     ; #REGhl.
 $B1D1 JP $B7CD      ; Jump to #R$B7CD.

; Routine at B1D4
;
; Used by the routine at #R$9960.
;
; .
;
; Initialise player 2.
c$B1D4 CALL $B21E    ; Call #R$B21E.
 $B1D7 CALL $B235    ; Call #R$B235.
; Initialise player 1.
 $B1DA CALL $B21E    ; Call #R$B21E.
; Always start on player 1.
 $B1DD XOR A         ; {Write #N$00 to #R$969E.
 $B1DE LD ($969E),A  ; }
 $B1E1 CALL $BB7C    ; Call #R$BB7C.
 $B1E4 CALL $BB5C    ; Call #R$BB5C.
 $B1E7 LD A,($9692)  ; #REGa=#R$9692.
 $B1EA AND %00000001 ; Keep only bit 0.
 $B1EC JR NZ,$B1F1   ; Jump to #R$B1F1 if this is a two player game.
 $B1EE LD ($96E0),A  ; Write #REGa to #R$96E0.
; This entry point is used by the routine at #R$B205.
*$B1F1 CALL $B1B7    ; Call #R$B1B7.
 $B1F4 LD IX,$9702   ; #REGix=#R$9702.
 $B1F8 CALL $9D23    ; Call #R$9D23.
 $B1FB CALL $A763    ; Call #R$A763.
 $B1FE CALL $A33B    ; Call #R$A33B.
 $B201 CALL $BBDD    ; Call #R$BBDD.
 $B204 RET           ; Return.

; Routine at B205
;
; Used by the routine at #R$AA27.
c$B205 CALL $B235      ; Call #R$B235.
 $B208 CALL $BB7C      ; Call #R$BB7C.
 $B20B CALL $BB5C      ; Call #R$BB5C.
 $B20E LD A,(IX+$00)   ;
 $B211 AND %00000111   ; Keep only bits 0-2.
 $B213 OR %00010000    ; Set bit 4.
 $B215 LD (IX+$00),A   ;
 $B218 LD (IX+$05),$47 ;
 $B21C JR $B1F1        ; Jump to #R$B1F1.

; Routine at B21E
;
; Used by the routine at #R$B1D4.
;
; .
;
; Set starting lives.
c$B21E LD A,$05      ; {Write #N$05 to #R$96BD.
 $B220 LD ($96BD),A  ; }
 $B223 LD A,$03      ; {Write #N$03 to #R$96BE.
 $B225 LD ($96BE),A  ; }
 $B228 XOR A         ; {Write #N$00 to #R$96BC.
 $B229 LD ($96BC),A  ; }
 $B22C CALL $AC6B    ; Call #R$AC6B.
 $B22F CALL $A255    ; Call #R$A255.
 $B232 JP $A2BD      ; Jump to #R$A2BD.

; 1UP/ 2UP Swapper
;
; Used by the routines at #R$B1D4 and #R$B205.
;
; .
;
; This routine "swaps" the data between #REGde and #REGhl.
@label=ChangePlayer
c$B235 LD A,($969E)  ; #REGa=#R$969E.
 $B238 CPL           ; Flip the bits.
 $B239 LD ($969E),A  ; Write this back to #R$969E.
; These are all the player states.
 $B23C LD HL,$96BC   ; #REGhl=#R$96BC
 $B23F LD DE,$96DF   ; #REGde=#R$96DF.
 $B242 LD BC,$0023   ; #REGbc=#N$0023 (counter).
 $B245 CALL $B25D    ; Call #R$B25D.
; This is the current "map".
 $B248 LD HL,$DDEC   ; #REGhl=#R$DDEC.
 $B24B LD DE,$DFEC   ; #REGde=#R$DFEC.
 $B24E LD BC,$0200   ; #REGbc=#N$0200 (counter).
 $B251 CALL $B25D    ; Call #R$B25D.
; And this is the active sprites.
 $B254 LD HL,$9702   ; #REGhl=#R$9702.
 $B257 LD DE,$982E   ; #REGde=#R$982E.
 $B25A LD BC,$012C   ; #REGbc=#N$012C (counter).
; This looks complicated but it's just grabbing the data from #REGde, grabbing
; the data from #REGhl, and writing the others data to each one.
@label=ChangePlayer_Loop
*$B25D LD A,(DE)     ; Fetch a byte from #REGde and store it in #REGa.
 $B25E EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B25F LD A,(HL)     ; {Copy a byte from #REGhl and write it to #REGde.
 $B260 LD (DE),A     ; }
 $B261 EX AF,AF'     ; Switch back to the normal #REGaf register.
 $B262 LD (HL),A     ; Write the byte held in #REGa (orginally from #REGde)
                     ; into #REGhl.
 $B263 INC DE        ; Increment #REGde by one.
 $B264 INC HL        ; Increment #REGhl by one.
 $B265 DEC BC        ; Decrease #REGc by one.
 $B266 LD A,B        ; {Loop back to #R$B25D until the counter in #REGbc is
 $B267 OR C          ; zero.
 $B268 JR NZ,$B25D   ; }
 $B26A RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$613B }
; { #TRANZAM$0000 }
; LIST#

; Initialise Hall Of Fame Counter
;
; Used by the routine at #R$B272.
@label=InitialiseCounterHallOfFame
c$B26B LD HL,$0300   ; {Write #N$0300 to #R$96B8.
 $B26E LD ($96B8),HL ; }
 $B271 RET           ; Return.

; Handler: Hall Of Fame
;
; Used by the routine at #R$B3D5.
@label=HandlerHallOfFame
c$B272 JR NZ,$B26B   ;
 $B274 LD HL,($96B8) ; {Decrease #R$96B8 by one.
 $B277 DEC HL        ;
 $B278 LD ($96B8),HL ; }
 $B27B LD A,H        ; {Return unless #R$96B8 is zero.
 $B27C OR L          ;
 $B27D RET NZ        ; }
; This entry point is used by the routine at #R$AA6A.
*$B27E CALL $B29F    ; Call #R$B29F.
 $B281 LD B,$0C      ; #REGb=#N$0C.
 $B283 LD HL,$0000   ; #REGhl=#N$0000.
*$B286 XOR A         ;
 $B287 OUT ($FD),A   ;
 $B289 IN A,($FE)    ;
 $B28B CPL           ; Flip the bits.
 $B28C AND %00011111 ; Keep only bits 0-4.
 $B28E JR NZ,$B297   ;
 $B290 DEC HL        ;
 $B291 LD A,H        ;
 $B292 OR L          ;
 $B293 JR NZ,$B286   ;
 $B295 DJNZ $B286    ;
*$B297 CALL $B2D8    ; Call #R$B2D8.
 $B29A CALL $B473    ; Call #R$B473.
 $B29D JR $B26B      ; Jump to #R$B26B.

; Hall Of Fame
;
; Used by the routine at #R$B272.
@label=HallOfFame
c$B29F CALL $B2D8    ; Call #R$B2D8.
 $B2A2 LD DE,$B32E   ; #REGde=#R$B32E.
 $B2A5 EXX           ; Switch to the shadow registers.
 $B2A6 LD HL,$B336   ; #REGhl'=#R$B336.
 $B2A9 LD DE,$B346   ; #REGde'=#R$B346.
; There are eight lines of text.
 $B2AC LD B,$08      ; #REGb'=#N$08.
 $B2AE CALL $B47F    ; Call #R$B47F.
 $B2B1 LD BC,$0306   ; #REGbc=#N$0306.
 $B2B4 LD DE,$B304   ; #REGde=#R$B304.
 $B2B7 LD HL,$4868   ; #REGhl=#N$4868.
*$B2BA PUSH BC       ;
 $B2BB PUSH HL       ;
 $B2BC CALL $B8AD    ; Call #R$B8AD.
 $B2BF CALL $B5E4    ; Call #R$B5E4.
 $B2C2 LD B,$03      ; #REGb=#N$03.
 $B2C4 INC L         ;
 $B2C5 INC L         ;
 $B2C6 INC L         ;
*$B2C7 LD A,(DE)     ;
 $B2C8 INC DE        ;
 $B2C9 CALL $B589    ; Call #R$B589.
 $B2CC DJNZ $B2C7    ;
 $B2CE POP HL        ;
 $B2CF LD A,H        ;
 $B2D0 ADD A,$10     ;
 $B2D2 LD H,A        ;
 $B2D3 POP BC        ;
 $B2D4 DEC C         ;
 $B2D5 JR NZ,$B2BA   ;
 $B2D7 RET           ; Return.
; This entry point is used by the routines at #R$B272 and #R$B5FC.
@label=HallOfFame_Clear
*$B2D8 LD HL,$58A4   ; #REGhl=#N$58A4.
 $B2DB LD BC,$1810   ; #REGbc=#N$1810.
 $B2DE LD DE,$0020   ; #REGde=#N$0020.
*$B2E1 PUSH BC       ;
 $B2E2 PUSH HL       ;
*$B2E3 LD (HL),$00   ;
 $B2E5 INC L         ;
 $B2E6 DJNZ $B2E3    ;
 $B2E8 POP HL        ;
 $B2E9 ADD HL,DE     ;
 $B2EA POP BC        ;
 $B2EB DEC C         ;
 $B2EC JR NZ,$B2E1   ;
 $B2EE LD HL,$40A4   ; #REGhl=#N$40A4.
 $B2F1 LD BC,$1880   ; #REGbc=#N$1880.
*$B2F4 PUSH BC       ;
 $B2F5 PUSH HL       ;
*$B2F6 LD (HL),$00   ;
 $B2F8 INC L         ;
 $B2F9 DJNZ $B2F6    ;
 $B2FB POP HL        ;
 $B2FC CALL $B8CC    ;
 $B2FF POP BC        ;
 $B300 DEC C         ;
 $B301 JR NZ,$B2F4   ;
 $B303 RET           ; Return.

; High Scores
;
; Each high score slot uses 3-bytes for the score with the players initials.
; .
; Most other Ultimate games only hold the high score.
;
; .
;
; Top score.
@label=Top_HighScore_1
g$B304 DEFB $10      ; Byte #1.
@label=Top_HighScore_2
 $B305 DEFB $22      ; Byte #2.
@label=Top_HighScore_3
 $B306 DEFB $75      ; Byte #3.
@label=Top_HighScore_Initials
 $B307 DEFM "ULT"    ; "#STR(#PC,$04,$03)".
; 2nd place.
@label=Pos_2_HighScore_1
 $B30A DEFB $05      ; Byte #1.
@label=Pos_2_HighScore_2
 $B30B DEFB $51      ; Byte #2.
@label=Pos_2_HighScore_3
 $B30C DEFB $50      ; Byte #3.
@label=Pos_2_HighScore_Initials
 $B30D DEFM "ACG"    ; "#STR(#PC,$04,$03)".
; 3rd place.
@label=Pos_3_HighScore_1
 $B310 DEFB $03      ; Byte #1.
@label=Pos_3_HighScore_2
 $B311 DEFB $78      ; Byte #2.
@label=Pos_3_HighScore_3
 $B312 DEFB $95      ; Byte #3.
@label=Pos_3_HighScore_Initials
 $B313 DEFM "CTJ"    ; "#STR(#PC,$04,$03)".
; 4th place.
@label=Pos_4_HighScore_1
 $B316 DEFB $02      ; Byte #1.
@label=Pos_4_HighScore_2
 $B317 DEFB $43      ; Byte #2.
@label=Pos_4_HighScore_3
 $B318 DEFB $20      ; Byte #3.
@label=Pos_4_HighScore_Initials
 $B319 DEFM "TDJ"    ; "#STR(#PC,$04,$03)".
; 5th place.
@label=Pos_5_HighScore_1
 $B31C DEFB $01      ; Byte #1.
@label=Pos_5_HighScore_2
 $B31D DEFB $27      ; Byte #2.
@label=Pos_5_HighScore_3
 $B31E DEFB $75      ; Byte #3.
@label=Pos_5_HighScore_Initials
 $B31F DEFM "JSL"    ; "#STR(#PC,$04,$03)".
; 6th place.
@label=Pos_6_HighScore_1
 $B322 DEFB $00      ; Byte #1.
@label=Pos_6_HighScore_2
 $B323 DEFB $82      ; Byte #2.
@label=Pos_6_HighScore_3
 $B324 DEFB $50      ; Byte #3.
@label=Pos_6_HighScore_Initials
 $B325 DEFM "CLW"    ; "#STR(#PC,$04,$03)".
; New high score entry buffer.
@label=New_HighScore_1
 $B328 DEFB $00      ; Byte #1.
@label=New_HighScore_2
 $B329 DEFB $00      ; Byte #2.
@label=New_HighScore_3
 $B32A DEFB $00      ; Byte #3.
@label=New_HighScore_Initials
 $B32B DEFM "   "    ; "#STR(#PC,$04,$03)".
; View the equivalent code in;
; #LIST
; { #JETPAC$5CF0 }
; { #LUNARJETMAN$5E06 }
; { #PSSST$5E00 }
; { #TRANZAM$5E49 }
; LIST#

; Hall Of Fame Attribute Table
@label=HallOfFame_Attributes
b$B32E DEFB $47      ; {#TABLE(default,centre)
 $B32F DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $B330 DEFB $47      ; { #N$01 | ULTIMATE HALL OF FAME }
 $B331 DEFB $46      ; { #N$02 | 1ST }
 $B332 DEFB $46      ; { #N$03 | 2ND }
 $B333 DEFB $45      ; { #N$04 | 3RD }
 $B334 DEFB $45      ; { #N$05 | 4TH }
 $B335 DEFB $47      ; { #N$06 | 5TH }
                     ; { #N$07 | 6TH }
                     ; { #N$08 | © 1984 A.C.G. }
                     ; TABLE#}

; Hall Of Fame Position Table
@label=HallOfFame_Position
b$B336 DEFB $28,$30  ; {#TABLE(default,centre,centre,centre)
 $B338 DEFB $38,$48  ; { =h X Position | =h Y Position | =h Menu Item }
 $B33A DEFB $38,$58  ; { #N(#EVAL(#PEEK(#PC+$00) / $08)) | #N(#EVAL(#PEEK(#PC+$01)) / $08) | ULTIMATE HALL OF FAME }
 $B33C DEFB $38,$68  ; { #N(#EVAL(#PEEK(#PC+$02) / $08)) | #N(#EVAL(#PEEK(#PC+$03)) / $08) | 1ST }
 $B33E DEFB $38,$78  ; { #N(#EVAL(#PEEK(#PC+$04) / $08)) | #N(#EVAL(#PEEK(#PC+$05)) / $08) | 2ND }
 $B340 DEFB $38,$88  ; { #N(#EVAL(#PEEK(#PC+$06) / $08)) | #N(#EVAL(#PEEK(#PC+$07)) / $08) | 3RD }
 $B342 DEFB $38,$98  ; { #N(#EVAL(#PEEK(#PC+$08) / $08)) | #N(#EVAL(#PEEK(#PC+$09)) / $08) | 4TH }
 $B344 DEFB $48,$B0  ; { #N(#EVAL(#PEEK(#PC+$0A) / $08)) | #N(#EVAL(#PEEK(#PC+$0B)) / $08) | 5TH }
                     ; { #N(#EVAL(#PEEK(#PC+$0C) / $08)) | #N(#EVAL(#PEEK(#PC+$0D)) / $08) | 6TH }
                     ; { #N(#EVAL(#PEEK(#PC+$0E) / $08)) | #N(#EVAL(#PEEK(#PC+$0F)) / $08) | © 1984 A.C.G }
                     ; TABLE#}

; Hall Of Fame Screen Text
@label=HallOfFame_Text
t$B346 DEFM "ULTIMATE HALL OF FAM","E"+$80 ; "#STR(#PC)".
 $B35B DEFM "1ST              "," "+$80    ; "#STR(#PC,$04)".
 $B36D DEFM "2ND              "," "+$80    ; "#STR(#PC,$04)".
 $B37F DEFM "3RD              "," "+$80    ; "#STR(#PC,$04)".
 $B391 DEFM "4TH              "," "+$80    ; "#STR(#PC,$04)".
 $B3A3 DEFM "5TH              "," "+$80    ; "#STR(#PC,$04)".
 $B3B5 DEFM "6TH              "," "+$80    ; "#STR(#PC,$04)".
 $B3C7 DEFM $7F," 1984  A.C.G","."+$80     ; "#STR(#PC)".

; Handler: Game Menu
;
; Used by the routine at #R$9960.
@label=HandlerGameMenu
c$B3D5 LD A,$FF      ; {Write #N$FF to #R$96B7.
 $B3D7 LD ($96B7),A  ; }
 $B3DA CALL $BB7C    ; Call #R$BB7C.
 $B3DD CALL $BB5C    ; Call #R$BB5C.
 $B3E0 LD HL,$61C6   ; #REGhl=#R$61C6.
 $B3E3 CALL $BBF7    ; Call #R$BBF7.
 $B3E6 CALL $B473    ; Call #R$B473.
 $B3E9 CALL $B43E    ; Call #R$B43E.
 $B3EC LD DE,$BC67   ; #REGhl=#R$BC67.
 $B3EF CALL $BD51    ; Call #R$BD51.
*$B3F2 CALL $B473    ; Call #R$B473.
 $B3F5 LD A,$F7      ; {Read from the keyboard;
 $B3F7 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B3F9 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $B3FB CPL           ; Flip the bits.
 $B3FC LD E,A        ; Store the result in #REGe.
 $B3FD LD A,($9692)  ; #REGa=#R$9692.
; Handle 1UP game selection.
@label=GameSelect_Check1UP
 $B400 BIT 0,E       ; Has key "1" been pressed? ("1 PLAYER GAME").
 $B402 JR Z,$B406    ; If not jump to #R$B406.
 $B404 RES 0,A       ; Reset bit 0.
; Handle 2UP game selection.
@label=GameSelect_Check2UP
*$B406 BIT 1,E       ; Has key "2" been pressed? ("2 PLAYER GAME").
 $B408 JR Z,$B40C    ; If not jump to #R$B40C.
 $B40A SET 0,A       ; Set bit 0.
; Handle Keyboard selection.
@label=GameSelect_CheckKeyboard
*$B40C BIT 2,E       ; Has key "3" been pressed? ("KEYBOARD").
 $B40E JR Z,$B412    ; If not jump to #R$B412.
 $B410 AND %11111001 ; Keep only bits 0, 3-7.
; Handle Kempston Joystick selection.
@label=GameSelect_CheckKempston
*$B412 BIT 3,E       ; Has key "4" been pressed? ("KEMPSTON JOYSTICK").
 $B414 JR Z,$B41A    ; If not jump to #R$B41A.
 $B416 AND %11111001 ; Keep only bits 0, 3-7.
 $B418 OR %00000010  ; Set control method = #N$02.
; Handle Cursor Joystick selection.
@label=GameSelect_CheckCursor
*$B41A BIT 4,E       ; Has key "3" been pressed? ("CURSOR JOYSTICK").
 $B41C JR Z,$B422    ; If not jump to #R$B422.
 $B41E AND %11111001 ; Keep only bits 0, 3-7.
 $B420 OR %00000100  ; Set control method = #N$04.
; This entry point is used by the routine at #R$BD51.
*$B422 LD C,A        ; Temporarily store #REGa (#R$9692) in #REGc.
 $B423 LD A,$EF      ; {Read from the keyboard;
 $B425 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $B427 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
 $B429 CPL           ; Flip the bits.
 $B42A LD E,A        ; Store the result in #REGe.
 $B42B LD A,C        ; Restore the previous game options value to #REGa.
; Handle Interface II Joystick selection.
@label=GameSelect_CheckInterface2
 $B42C BIT 4,E       ; Has key "6" been pressed? ("INTERFACE II").
 $B42E JR Z,$B432    ; If not jump to #R$B432.
 $B430 OR %00000110  ; Set control method = #N$06.
*$B432 LD ($9692),A  ; Write #REGa to #R$9692.
; Handle starting a new game.
@label=GameSelect_Start
 $B435 BIT 0,E       ; Has key "0" been pressed? ("START GAME").
 $B437 RET NZ        ; If so, return.
 $B438 CALL $B43E    ; Call #R$B43E.
 $B43B JP $B3F2      ; Jump to #R$B3F2.
@label=HallOfFameCheck
*$B43E LD HL,$96B7   ; #REGhl=#R$96B7.
 $B441 LD A,($9692)  ; #REGa=#R$9692.
 $B444 CP (HL)       ;
 $B445 LD ($96B7),A  ; Write #REGa to #R$96B7.
 $B448 CALL $B272    ; Call #R$B272.
; Handle flashing each selection.
 $B44B LD HL,$B498   ; #REGhl=#R$B498.
 $B44E LD A,($9692)  ; #REGa=#R$9692.
 $B451 LD C,A        ; Temporarily store #REGa (#R$9692) in #REGc.
; There are two player options to choose from (1UP or 2UP game).
 $B452 LD B,$02      ; #REGb=#N$02.
 $B454 AND %00000001 ; Keep only bit 0 (the player options).
 $B456 CALL $B463    ; Call #R$B463.
 $B459 LD A,C        ; Restore the previous game options value to #REGa.
 $B45A RRCA          ; Shift off the 1UP/ 2UP player options.
 $B45B AND %00000011 ; Keep only bits 0-1 (the control options).
; There are four control methods to choose from.
 $B45D LD B,$04      ; #REGb=#N$04 (counter).
 $B45F CALL $B463    ; Call #R$B463.
 $B462 RET           ; Return.
; Selection flashing routine.
@label=HandlerMenuAttributeFlash
*$B463 AND A         ; {Jump to #R$B46D if #REGa is zero.
 $B464 JR NZ,$B46D   ; }
@label=MenuAttributeSet
*$B466 SET 7,(HL)    ; Set the FLASH attribute for the current selection.
 $B468 JR $B46F      ; Jump to #R$B46F, we're done here.
@label=HandlerMenuAttributeFlash_Loop
*$B46A DEC A         ; Decrease #REGa by one.
 $B46B JR Z,$B466    ; Jump to #R$B466 if #REGa is zero.
@label=MenuAttributeUnset
*$B46D RES 7,(HL)    ; Unset the FLASH attribute for the current selection.
@label=MenuAttributeNext
*$B46F INC HL        ; Move onto the next selection attribute.
 $B470 DJNZ $B46A    ; Decrease counter by one and loop back to #R$B46A until
                     ; counter is zero.
 $B472 RET           ; Return.

; Game Selection Menu
;
; Used by the routines at #R$B272 and #R$B3D5.
@label=GameMenu
c$B473 LD DE,$B498   ; #REGde=#R$B498.
 $B476 EXX           ; Switch to the shadow registers.
 $B477 LD HL,$B4A0   ; #REGhl'=#R$B4A0.
 $B47A LD DE,$B4B0   ; #REGde'=#R$B4B0.
; There are eight lines of text.
 $B47D LD B,$08      ; #REGb'=#N$08 (counter).
; This entry point is used by the routines at #R$B29F and #R$B5FC.
@label=GameMenu_Loop
*$B47F EXX           ; Switch back to the normal registers.
 $B480 LD A,(DE)     ; {Copy a byte from #REGde to #R$96A8.
 $B481 LD ($96A8),A  ; }
 $B484 INC DE        ; Increment #REGde by one.
 $B485 EXX           ; Switch to the shadow registers.
 $B486 PUSH BC       ; Stash #REGbc' on the stack.
 $B487 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $B488 INC HL        ; {Increment #REGhl' (position data pointer) by two.
 $B489 INC HL        ; }
 $B48A PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $B48B DEC HL        ; Decrease #REGhl' (position data pointer) by one.
 $B48C LD H,(HL)     ; #REGa=#REGhl' (grab the position data).
 $B48D LD L,A        ; #REGl'=#REGa.
 $B48E CALL $B52D    ; Call #R$B52D.
 $B491 EXX           ; Switch back to the normal registers.
 $B492 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $B493 POP BC        ; }
 $B494 INC DE        ; Increase #REGde by one.
 $B495 DJNZ $B47F    ; Decrease counter by one and loop back to #R$B47F until
                     ; counter is zero.
 $B497 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #COOKIE$6332 }
; { #JETPAC$6260 }
; { #LUNARJETMAN$80D1 }
; { #PSSST$6250 }
; LIST#

; Game Select Attribute Table
@label=GameSelection_Attributes
b$B498 DEFB $C6      ; {#TABLE(default,centre)
 $B499 DEFB $46      ; { =h Byte(n) | =h Menu Item }
 $B49A DEFB $C5      ; { #N$01 | 1 1 PLAYER GAME }
 $B49B DEFB $45      ; { #N$02 | 2 2 PLAYER GAME }
 $B49C DEFB $45      ; { #N$03 | 3 KEYBOARD }
 $B49D DEFB $45      ; { #N$04 | 4 KEMPSTON JOYSTICK }
 $B49E DEFB $47      ; { #N$05 | 5 CURSOR JOYSTICK }
 $B49F DEFB $47      ; { #N$06 | 6 INTERFACE II }
                     ; { #N$07 | 0 START GAME }
                     ; { #N$08 | © 1984 A.C.G. }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #JETPAC$628D }
; { #LUNARJETMAN$810E }
; { #PSSST$627C }
; { #TRANZAM$5FA7 }
; LIST#

; Game Select Position Table
@label=GameSelection_Position
b$B4A0 DEFB $30,$30  ; {#TABLE(default,centre,centre,centre)
 $B4A2 DEFB $30,$40  ; { =h X Position | =h Y Position | =h Menu Item }
 $B4A4 DEFB $30,$50  ; { #N(#EVAL(#PEEK(#PC+$00) / $08)) | #N(#EVAL(#PEEK(#PC+$01)) / $08) | 1 1 PLAYER GAME }
 $B4A6 DEFB $30,$60  ; { #N(#EVAL(#PEEK(#PC+$02) / $08)) | #N(#EVAL(#PEEK(#PC+$03)) / $08) | 2 2 PLAYER GAME }
 $B4A8 DEFB $30,$70  ; { #N(#EVAL(#PEEK(#PC+$04) / $08)) | #N(#EVAL(#PEEK(#PC+$05)) / $08) | 3 KEYBOARD }
 $B4AA DEFB $30,$80  ; { #N(#EVAL(#PEEK(#PC+$06) / $08)) | #N(#EVAL(#PEEK(#PC+$07)) / $08) | 4 KEMPSTON JOYSTICK }
 $B4AC DEFB $30,$98  ; { #N(#EVAL(#PEEK(#PC+$08) / $08)) | #N(#EVAL(#PEEK(#PC+$09)) / $08) | 5 CURSOR JOYSTICK }
 $B4AE DEFB $48,$B0  ; { #N(#EVAL(#PEEK(#PC+$0A) / $08)) | #N(#EVAL(#PEEK(#PC+$0B)) / $08) | 6 INTERFACE II }
                     ; { #N(#EVAL(#PEEK(#PC+$0C) / $08)) | #N(#EVAL(#PEEK(#PC+$0D)) / $08) | 0 START GAME }
                     ; { #N(#EVAL(#PEEK(#PC+$0E) / $08)) | #N(#EVAL(#PEEK(#PC+$0F)) / $08) | © 1984 A.C.G }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #JETPAC$6293 }
; { #LUNARJETMAN$8115 }
; { #PSSST$6282 }
; { #TRANZAM$5FAC }
; LIST#

; Game Selection Screen Text
@label=GameSelection_Text
t$B4B0 DEFM "1  1 PLAYER GAM","E"+$80     ; "#STR(#PC)".
 $B4C0 DEFM "2  2 PLAYER GAM","E"+$80     ; "#STR(#PC)".
 $B4D0 DEFM "3  KEYBOAR","D"+$80          ; "#STR(#PC)".
 $B4DB DEFM "4  KEMPSTON JOYSTIC","K"+$80 ; "#STR(#PC)".
 $B4EF DEFM "5  CURSOR   JOYSTIC","K"+$80 ; "#STR(#PC)".
 $B503 DEFM "6  INTERFACE I","I"+$80      ; "#STR(#PC)".
 $B512 DEFM "0  START GAM","E"+$80        ; "#STR(#PC)".
 $B51F DEFM $7F," 1984  A.C.G","."+$80    ; "#STR(#PC)".
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #COOKIE$636C }
; { #JETPAC$6299 }
; { #LUNARJETMAN$811C }
; { #PSSST$6288 }
; LIST#

; Write Menu Line
;
; Used by the routine at #R$B473.
@label=MenuWriteText
c$B52D PUSH HL       ; Stash #REGhl containing the co-ordinate on the stack.
 $B52E CALL $B8AD    ; Call #R$B8AD.
 $B531 LD A,($96A8)  ; #REGa=the menu attribute byte from #R$96A8.
 $B534 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B535 EXX           ; Switch to the shadow registers.
 $B536 POP HL        ; Restore #REGhl from the stack.
 $B537 CALL $B8DD    ; Call #R$B8DD.
 $B53A JP $B549      ; Jump to #R$B549.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D8A }
; { #COOKIE$63E0 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$62E7 }
; LIST#

; Print Colour String
;
; Used by the routines at #R$A01B, #R$AA6A and #R$B563.
;
; DE Pointer to string data
@label=PrintStringColour
c$B53D PUSH HL       ; Stash #REGhl on the stack.
 $B53E CALL $B8AD    ; Call #R$B8AD.
 $B541 LD A,(DE)     ; Fetch the attribute byte.
 $B542 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B543 INC DE        ; Increment #REGde by one to point to the text of the
                     ; string.
 $B544 EXX           ; Switch to the shadow registers.
 $B545 POP HL        ; Restore #REGhl from the stack.
 $B546 CALL $B8DD    ; Call #R$B8DD.
; This entry point is used by the routine at #R$B52D.
@label=PrintString_Loop
*$B549 EXX           ; Switch back to the normal registers.
 $B54A LD A,(DE)     ; Fetch the character to print.
 $B54B BIT 7,A       ; {If bit 7 is set (which signifies the end of the
 $B54D JR NZ,$B55A   ; string), jump to #R$B55A.}
 $B54F CALL $B589    ; Call #R$B589.
 $B552 INC DE        ; Increment #REGde by one.
 $B553 EXX           ; Switch to the shadow registers.
 $B554 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B555 LD (HL),A     ; Copy the attribute byte to the screen.
 $B556 INC L         ; Increment #REGl by one.
 $B557 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B558 JR $B549      ; Jump to #R$B549.
; Because the last character contains the terminator, it needs to be handled
; separately.
@label=PrintString_LastCharacter
*$B55A AND %01111111 ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
 $B55C CALL $B589    ; Call #R$B589.
 $B55F EXX           ; Switch to the shadow registers.
 $B560 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B561 LD (HL),A     ; Copy the attribute byte to the screen.
 $B562 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1F3 }
; { #COOKIE$7488 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$8A11 }
; { #PSSST$73ED }
; LIST#

; Print Banner
;
; Used by the routine at #R$9960.
;
; .
;
; Prints "1UP".
@label=PrintBanner
c$B563 LD HL,$0010       ; #REGhl=#N($0010, $04, $04).
 $B566 LD DE,$B57E       ; #REGde=#R$B57E.
 $B569 CALL $B53D        ; Call #R$B53D.
; Prints "HI".
 $B56C LD HL,$0078       ; #REGhl=#N($0078, $04, $04).
 $B56F LD DE,$B586       ; #REGde=#R$B586.
 $B572 CALL $B53D        ; Call #R$B53D.
; Prints "2UP".
 $B575 LD HL,$00D8       ; #REGhl=#N($00D8, $04, $04).
 $B578 LD DE,$B582       ; #REGde=#R$B582.
 $B57B JP $B53D          ; Jump to #R$B53D.
; Banner text data.
@label=1UP_Text
 $B57E DEFM $45          ; {"1UP" (#N(#PEEK(#PC)) is the attribute).
 $B57F DEFM "1U","P"+$80 ; }
@label=2UP_Text
 $B582 DEFM $45          ; {"2UP" (#N(#PEEK(#PC)) is the attribute).
 $B583 DEFM "2U","P"+$80 ; }
@label=HI_Text
 $B586 DEFM $57          ; {"HI" (#N(#PEEK(#PC)) is the attribute).
 $B587 DEFM "H","I"+$80  ; }
; View the equivalent code in;
; #LIST
; { #COOKIE$74AE }
; { #LUNARJETMAN$8A37 }
; { #PSSST$7413 }
; LIST#

; Print Character
;
; Used by the routines at #R$B29F, #R$B53D, #R$B5CC, #R$B6D7 and #R$B7CD.
;
; A ASCII value to print
; HL Screen address
@label=PrintScreen
c$B589 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $B58A PUSH DE       ;
 $B58B PUSH HL       ; }
 $B58C LD L,A        ; {Create an offset in #REGhl.
 $B58D LD H,$00      ; }
 $B58F ADD HL,HL     ; {Calculate offset for ASCII character (#REGhl=#REGhl *
 $B590 ADD HL,HL     ; 8).
 $B591 ADD HL,HL     ; }
 $B592 LD DE,($5C36) ; #HTML(#REGde=<a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $B596 ADD HL,DE     ; {#REGde=#REGhl + #N$3C00. For examples of usage;
 $B597 EX DE,HL      ; #TABLE(default,centre,centre,centre,centre,centre)
                     ; { =h Letter | =h ASCII Value | =h * 8 (offset) | =h CHARS + offset }
                     ; #FOREACH($55,$4C,$54,$49,$4D,$41,$54,$45)(value,
                     ; { #LET(result=$3C00 + value * $08) "#CHR(value)" | #N(value) | #N(value * 8) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, $02, $03, $01, $01)()">#N({result})) }
                     ; )
                     ; TABLE#}
; Print the character to the screen.
 $B598 POP HL        ; Restore #REGhl, containing the screen buffer location,
                     ; from the stack.
; This entry point is used by the routine at #R$B7CD.
*$B599 LD B,$08      ; #REGb=#N$08 (#N$08 rows of pixels).
@label=PrintScreen_Loop
*$B59B LD A,(DE)     ; {Copy a byte from the font data to the screen buffer.
 $B59C LD (HL),A     ; }
 $B59D INC DE        ; Increment the font data by one.
 $B59E INC H         ; Move onto the next pixel line.
 $B59F DJNZ $B59B    ; Decrease counter by one and loop back to #R$B59B until
                     ; counter is zero.
 $B5A1 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $B5A2 POP BC        ; }
; Reset #REGhl and move to the next column, ready to print the next character.
 $B5A3 LD A,H        ; {#REGh=#REGh - #N$08 (reset the display line).
 $B5A4 SUB $08       ;
 $B5A6 LD H,A        ; }
 $B5A7 INC L         ; Increment screen column by one.
 $B5A8 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1D3 }
; { #COOKIE$7468 }
; { #JETPAC$714C }
; { #LUNARJETMAN$89EF }
; { #PSSST$73CD }
; LIST#

; Add Points To Score
;
; Used by the routines at #R$A18C, #R$A323 and #R$A4B3.
;
; BC Points to add to score
;
; Check the active player.
@label=AddPointsToScore
c$B5A9 LD A,($969E)  ; {If #R$969E is not zero, jump to #R$B5B4.
 $B5AC AND A         ;
 $B5AD JR NZ,$B5B4   ; }
; Set the score address for 1UP.
 $B5AF LD HL,$969A   ; #REGhl=#R$969A.
 $B5B2 JR $B5B7      ; Jump to #R$B5B7.
; Set the score address for 2UP.
@label=AddPointsToScore_2UP
*$B5B4 LD HL,$969D   ; #REGhl=#R$969D.
; Process adding the points to the appropriate score.
@label=AddPointsToScore_Start
*$B5B7 LD A,(HL)     ; #REGa=score byte #3.
 $B5B8 ADD A,C       ; {Add #REGc to score byte #3 with BCD conversion.
 $B5B9 DAA           ; }
 $B5BA LD (HL),A     ; Update score byte #3.
 $B5BB DEC HL        ; Move onto the next score byte.
 $B5BC LD A,(HL)     ; #REGa=score byte #2.
 $B5BD ADC A,B       ; {Add (with carry) #REGb to score byte #2 with BCD
 $B5BE DAA           ; conversion.}
 $B5BF LD (HL),A     ; Update score byte #2.
 $B5C0 DEC HL        ; Move onto the next score byte.
 $B5C1 LD A,(HL)     ; #REGa=score byte #1.
 $B5C2 ADC A,$00     ; {Add #N$00 (i.e. just the carry flag) to score byte #1
 $B5C4 DAA           ; with BCD conversion.}
 $B5C5 LD (HL),A     ; Update score byte #1.
; Check the active player.
 $B5C6 LD A,($969E)  ; {If #R$969E is not zero, jump to #R$B5D4.
 $B5C9 AND A         ;
 $B5CA JR NZ,$B5D4   ; }
; View the equivalent code in;
; #LIST
; { #COOKIE$7415 }
; { #JETPAC$70F9 }
; { #PSSST$737A }
; { #TRANZAM$6046 }
; LIST#

; Print Scores
;
; Used by the routine at #R$9960.
;
; .
;
; Sets up the 1UP score.
@label=Score_1UP
c$B5CC LD HL,$4021   ; #REGhl=#N$4021 (screen buffer address).
 $B5CF LD DE,$9698   ; #REGde=#R$9698.
 $B5D2 JR $B5E2      ; Jump to #R$B5E2.
; Sets up the 2UP score.
@label=Score_2UP
*$B5D4 LD HL,$4039   ; #REGhl=#N$4039 (screen buffer address).
 $B5D7 LD DE,$969B   ; #REGde=#R$969B.
 $B5DA JR $B5E2      ; Jump to #R$B5E2.
; Sets up the HI score.
@label=Score_HI
*$B5DC LD HL,$402D   ; #REGhl=#N$402D (screen buffer address).
 $B5DF LD DE,$B304   ; #REGde=#R$B304.
; Prints the score.
@label=PrintScore
*$B5E2 LD B,$03      ; #REGb=#N$03.
; This entry point is used by the routines at #R$9CC6 and #R$B29F.
@label=PrintScore_Loop
*$B5E4 LD A,(DE)     ; #REGa=#REGde.
 $B5E5 RRCA          ; {#REGa=#REGa / #N$10.
 $B5E6 RRCA          ;
 $B5E7 RRCA          ;
 $B5E8 RRCA          ; }
 $B5E9 AND %00001111 ; Keep only bits 0-3.
 $B5EB ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $B5ED CALL $B589    ; Call #R$B589.
; This entry point is used by the routine at #R$9CC6.
*$B5F0 LD A,(DE)     ; #REGa=#REGde.
 $B5F1 AND %00001111 ; Keep only bits 0-3.
 $B5F3 ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $B5F5 CALL $B589    ; Call #R$B589.
 $B5F8 INC DE        ; Increment #REGde by one.
 $B5F9 DJNZ $B5E4    ; Decrease counter by one and loop back to #R$B5E4 until
                     ; counter is zero.
 $B5FB RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$7438 }
; { #JETPAC$711C }
; { #LUNARJETMAN$89BF }
; { #PSSST$739D }
; LIST#

; Handler: New High Score
;
; Used by the routine at #R$AA6A.
@label=NewHighScore
c$B5FC LD HL,$9698   ; #REGhl=#R$9698.
 $B5FF LD DE,$969B   ; #REGde=#R$969B.
 $B602 CALL $B6B2    ; Call #R$B6B2.
 $B605 LD A,$00      ; {Write #N$00 to #R$96BA.
 $B607 LD ($96BA),A  ; }
 $B60A JR Z,$B610    ; {If there's either any carry or the zero flag is set
 $B60C JR C,$B610    ; then jump to #R$B610.}
 $B60E CPL           ; Flip the bits.
 $B60F EX DE,HL      ; Switch the registers containing the 1UP and 2UP score.
@label=NewHighScore_Process
*$B610 LD ($969E),A  ; Write #REGa to #R$969E.
 $B613 CALL $B61E    ; Call #R$B61E.
 $B616 EX DE,HL      ; Switch back the registers containing the 1UP and 2UP
                     ; score.
 $B617 LD A,($969E)  ; #REGa=#R$969E.
 $B61A CPL           ; Flip the bits.
 $B61B LD ($969E),A  ; Write #REGa to #R$969E.
*$B61E PUSH DE       ; {Stash #REGde and #REGhl on the stack.
 $B61F PUSH HL       ; }
; We hold six high scores.
 $B620 LD B,$06      ; #REGb=#N$06.
 $B622 LD DE,$B322   ; #REGde=#R$B322.
*$B625 CALL $B6B2    ; Call #R$B6B2.
 $B628 JR NC,$B62F   ;
 $B62A CALL $B6AB    ; Call #R$B6AB.
 $B62D DJNZ $B625    ;
*$B62F LD A,B        ;
 $B630 CP $06        ;
 $B632 JR Z,$B6A8    ;
 $B634 LD HL,$B322   ; #REGhl=#R$B322.
 $B637 LD DE,$B328   ; #REGde=#R$B328.
 $B63A LD A,B        ; #REGa=#REGb.
 $B63B NEG           ;
 $B63D ADD A,$06     ; #REGa=#REGa+#N$06.
 $B63F LD ($96BB),A  ; Store the result at #R$96BB.
*$B642 LD BC,$0006   ; #REGbc=#N($0006,$04,$04).
 $B645 PUSH HL       ; Stash #REGhl on the stack.
 $B646 LDIR          ;
 $B648 POP DE        ; Restore #REGde from the stack.
 $B649 LD L,E        ; {#REGhl=#REGde.
 $B64A LD H,D        ; }
 $B64B CALL $B6AB    ; Call #R$B6AB.
 $B64E EX DE,HL      ;
 $B64F DEC A         ; Decrease #REGa by one.
 $B650 JR NZ,$B642   ;
 $B652 POP HL        ;
 $B653 PUSH HL       ;
 $B654 LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $B657 LDIR          ;
 $B659 PUSH DE       ;
 $B65A CALL $B5DC    ; Call #R$B5DC.
 $B65D LD A,($96BA)  ; {If #R$96BA is not zero, jump to #R$B66D.
 $B660 AND A         ;
 $B661 JR NZ,$B66D   ; }
 $B663 INC A         ; Increment #REGa by one.
 $B664 LD ($96BA),A  ; Write #REGa to #R$96BA.
 $B667 LD HL,$61C6   ; #REGhl=#R$61C6.
 $B66A CALL $BBF7    ; Call #R$BBF7.
*$B66D CALL $B2D8    ; Call #R$B2D8.
; Updates the text for the appropriate player number.
 $B670 LD A,($969E)  ; #REGa=#R$969E.
 $B673 AND A         ; Is this 1UP or 2UP?
 $B674 LD A,$B1      ; #REGa=#N$B1 (ASCII "1"+#N$80).
 $B676 JR Z,$B679    ; Jump to #R$B679 if the current player is 1UP.
 $B678 INC A         ; Else, #REGa=#N$B2 (ASCII "2"+#N$80).
; Overwrite the copy: #PUSHS
; #TABLE(default,centre,centre)
; { =h Byte | =h Copy }
; { #N$B1 | #POKES$B783,$B1 "#STR($B77C)" }
; { #N$B2 | #POKES$B783,$B2 "#STR($B77C)" }
; TABLE#
; #POPS
@label=NewHighScore_Update_Player
*$B679 LD ($B783),A  ; Write #REGa to #R$B77C(#N$B783).
; Work out which of the #R$B6C5 to use.
 $B67C LD A,($96BB)  ; {#REGb=#R$96BB.
 $B67F LD B,A        ; }
 $B680 LD A,$FD      ; #REGa=#N$FD (as #N$FD+#N$03=#N$00 - so the offset is
                     ; then pointing at the #R$B6C5(base address)).
@label=NewHighScore_Suffix_Loop
*$B682 ADD A,$03     ; #REGa=#REGa+#N$03.
 $B684 DJNZ $B682    ; Decrease the position counter by one and loop back to
                     ; #R$B682 until the counter is zero.
; Fetch the appropriate position suffix.
 $B686 LD C,A        ; {Create an offset in #REGbc.
 $B687 LD B,$00      ; }
 $B689 LD HL,$B6C5   ; {#REGhl=#R$B6C5 + offset.
 $B68C ADD HL,BC     ; }
 $B68D LD DE,$B79C   ; #REGde=#R$B795(#N$B79C).
 $B690 LD BC,$0003   ; #REGbc=#N$0003 (counter).
; Overwrite the copy: #PUSHS
; #TABLE(default,centre,centre)
; { =h Byte | =h Copy }
; { #N$00 | #FOR($00,$02)(n,#POKES($B79C+n,#PEEK($B6C5+n))) "#STR($B795)" }
; { #N$01 | #FOR($00,$02)(n,#POKES($B79C+n,#PEEK($B6C8+n))) "#STR($B795)" }
; { #N$02 | #FOR($00,$02)(n,#POKES($B79C+n,#PEEK($B6CB+n))) "#STR($B795)" }
; { #N$03 | #FOR($00,$02)(n,#POKES($B79C+n,#PEEK($B6CE+n))) "#STR($B795)" }
; { #N$04 | #FOR($00,$02)(n,#POKES($B79C+n,#PEEK($B6D1+n))) "#STR($B795)" }
; TABLE#
; #POPS
 $B693 LDIR          ; Copy #N$0003 bytes of data from #REGhl to
                     ; #R$B795(#N$B79C).
; Print the messaging to the screen.
 $B695 LD DE,$B755   ; #REGde=#R$B755.
 $B698 EXX           ; Switch to the shadow registers.
 $B699 LD HL,$B75D   ; #REGhl'=#R$B75D.
 $B69C LD DE,$B76D   ; #REGde'=#R$B76D.
; There are eight lines of text.
 $B69F LD B,$08      ; #REGb=#N$08.
 $B6A1 CALL $B47F    ; Call #R$B47F.
 $B6A4 POP DE        ; Restore #REGde from the stack.
 $B6A5 CALL $B6D7    ; Call #R$B6D7.
*$B6A8 POP HL        ; {Restore #REGhl and #REGde from the stack.
 $B6A9 POP DE        ; }
 $B6AA RET           ; Return.
; Moves the High Score pointer to the next entry (we move from 6th to 1st).
@label=NewHighScore_Next
*$B6AB DEC DE        ; {Decrease #REGde by six.
 $B6AC DEC DE        ;
 $B6AD DEC DE        ;
 $B6AE DEC DE        ;
 $B6AF DEC DE        ;
 $B6B0 DEC DE        ; }
 $B6B1 RET           ; Return.
; Compares the scores pointed to by #REGde and #REGhl.
@label=NewHighScore_Compare
*$B6B2 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $B6B3 PUSH DE       ;
 $B6B4 PUSH HL       ; }
; Scores are held in three bytes.
 $B6B5 LD B,$03      ; #REGb=#N$03 (counter).
@label=NewHighScore_Compare_Loop
*$B6B7 LD A,(DE)     ; #REGa=the score digit held at #REGde.
 $B6B8 CP (HL)       ; Compare this against the score digit held at #REGhl.
 $B6B9 JR C,$B6C1    ; If there's any carry over then jump to #R$B6C1 to
                     ; return.
 $B6BB JR NZ,$B6C1   ; If the result is non-zero then jump to #R$B6C1 to
                     ; return.
 $B6BD INC HL        ; {Increment both #REGhl and #REGde by one.
 $B6BE INC DE        ; }
 $B6BF DJNZ $B6B7    ; Decrease the score digit counter by one and loop back to
                     ; #R$B6B7 until the counter is zero.
@label=NewHighScore_Compare_Return
*$B6C1 POP HL        ; {Restore #REGhl, #REGde and #REGbc from the stack.
 $B6C2 POP DE        ;
 $B6C3 POP BC        ; }
 $B6C4 RET           ; Return.

; High Score Suffixes
@label=HighScore_Suffixes
t$B6C5 DEFM "6TH"    ; "#STR(#PC,$04,$03)".
 $B6C8 DEFM "5TH"    ; "#STR(#PC,$04,$03)".
 $B6CB DEFM "4TH"    ; "#STR(#PC,$04,$03)".
 $B6CE DEFM "3RD"    ; "#STR(#PC,$04,$03)".
 $B6D1 DEFM "2ND"    ; "#STR(#PC,$04,$03)".
 $B6D4 DEFM "   "    ; "#STR(#PC,$04,$03)".

; Routine at B6D7
;
; Used by the routine at #R$B5FC.
c$B6D7 LD B,$03      ; #REGb=#N$03.
 $B6D9 LD HL,$506D   ; #REGhl=#N$506D.
*$B6DC LD A,$20      ; #REGa=#N$20.
*$B6DE PUSH AF       ;
 $B6DF CALL $B0A3    ; Call #R$B0A3.
 $B6E2 POP AF        ;
 $B6E3 BIT 4,C       ;
 $B6E5 JR NZ,$B71B   ;
 $B6E7 BIT 0,C       ;
 $B6E9 JR NZ,$B6F1   ;
 $B6EB BIT 1,C       ;
 $B6ED JR NZ,$B709   ;
 $B6EF JR $B6DE      ;
*$B6F1 CALL $B743    ;
 $B6F4 DEC A         ;
 $B6F5 CP $40        ;
 $B6F7 JR NZ,$B6FB   ;
 $B6F9 LD A,$20      ;
*$B6FB CP $1F        ;
 $B6FD JR NZ,$B701   ;
 $B6FF LD A,$5A      ;
*$B701 PUSH AF       ;
 $B702 CALL $B589    ;
 $B705 POP AF        ;
 $B706 DEC L         ;
 $B707 JR $B6DE      ;
*$B709 CALL $B743    ;
 $B70C INC A         ;
 $B70D CP $5B        ;
 $B70F JR NZ,$B713   ;
 $B711 LD A,$20      ;
*$B713 CP $21        ;
 $B715 JR NZ,$B701   ;
 $B717 LD A,$41      ;
 $B719 JR $B701      ;
*$B71B PUSH AF       ; Stash #REGaf on the stack.
 $B71C CALL $B0A3    ; Call #R$B0A3.
 $B71F POP AF        ; Restore #REGaf from the stack.
 $B720 BIT 4,C       ;
 $B722 JR NZ,$B71B   ;
 $B724 LD (DE),A     ;
 $B725 INC DE        ;
 $B726 PUSH AF       ;
 $B727 PUSH BC       ;
 $B728 CALL $B589    ; Call #R$B589.
 $B72B INC L         ;
 $B72C CALL $BF2A    ; Call #R$BF2A.
 $B72F LD BC,$0000   ;
*$B732 DEC BC        ;
 $B733 LD A,B        ;
 $B734 OR C          ;
 $B735 JR NZ,$B732   ;
 $B737 POP BC        ;
 $B738 POP AF        ;
 $B739 DJNZ $B6DC    ;
; Introduce a pause by counting down from 10000.
 $B73B LD B,$01      ; #REGb=#N$01.
 $B73D LD HL,$0000   ; #REGhl=#N$0000.
 $B740 JP $A1FF      ; Jump to #R$A1FF.

; New High Score Return
;
; Used by the routine at #R$B6D7.
;
; .
;
; Introduce a pause by counting down from 8000.
@label=NewHighScore_Return
c$B743 PUSH AF       ; {Stash #REGaf, #REGbc and #REGhl on the stack.
 $B744 PUSH BC       ;
 $B745 PUSH HL       ; }
; Introduce a pause by counting down from 8000.
 $B746 LD B,$01      ; #REGb=#N$01.
 $B748 LD HL,$8000   ; #REGhl=#N$8000.
 $B74B CALL $A1FF    ; Call #R$A1FF.
 $B74E CALL $BF25    ; Call #R$BF25.
 $B751 POP HL        ; {Restore #REGhl, #REGbc and #REGaf from the stack.
 $B752 POP BC        ;
 $B753 POP AF        ; }
 $B754 RET           ; Return.

; New High Score Attribute Table
@label=NewHighScore_Attributes
b$B755 DEFB $45      ; {#TABLE(default,centre)
 $B756 DEFB $45      ; { =h Byte(n) | =h Menu Item }
 $B757 DEFB $45      ; { #N$01 | CONGRATULATIONS }
 $B758 DEFB $45      ; { #N$02 | PLAYER }
 $B759 DEFB $45      ; { #N$03 | YOU HAVE ACHIEVED }
 $B75A DEFB $43      ; { #N$04 | TODAYS HIGHEST }
 $B75B DEFB $43      ; { #N$05 | SCORE }
 $B75C DEFB $47      ; { #N$06 | PLEASE REGISTER }
                     ; { #N$07 | YOUR INITIALS }
                     ; { #N$08 | - - - }
                     ; TABLE#}

; New High Score Position Table
@label=NewHighScore_Position
b$B75D DEFB $40,$28  ; {#TABLE(default,centre,centre,centre)
 $B75F DEFB $60,$38  ; { =h X Position | =h Y Position | =h Menu Item }
 $B761 DEFB $38,$48  ; { #N(#EVAL(#PEEK(#PC+$00) / $08)) | #N(#EVAL(#PEEK(#PC+$01)) / $08) | CONGRATULATIONS }
 $B763 DEFB $38,$58  ; { #N(#EVAL(#PEEK(#PC+$02) / $08)) | #N(#EVAL(#PEEK(#PC+$03)) / $08) | PLAYER }
 $B765 DEFB $68,$68  ; { #N(#EVAL(#PEEK(#PC+$04) / $08)) | #N(#EVAL(#PEEK(#PC+$05)) / $08) | YOU HAVE ACHIEVED }
 $B767 DEFB $40,$78  ; { #N(#EVAL(#PEEK(#PC+$06) / $08)) | #N(#EVAL(#PEEK(#PC+$07)) / $08) | TODAYS HIGHEST }
 $B769 DEFB $48,$88  ; { #N(#EVAL(#PEEK(#PC+$08) / $08)) | #N(#EVAL(#PEEK(#PC+$09)) / $08) | SCORE }
 $B76B DEFB $68,$98  ; { #N(#EVAL(#PEEK(#PC+$0A) / $08)) | #N(#EVAL(#PEEK(#PC+$0B)) / $08) | PLEASE REGISTER }
                     ; { #N(#EVAL(#PEEK(#PC+$0C) / $08)) | #N(#EVAL(#PEEK(#PC+$0D)) / $08) | YOUR INITIALS }
                     ; { #N(#EVAL(#PEEK(#PC+$0E) / $08)) | #N(#EVAL(#PEEK(#PC+$0F)) / $08) | - - - }
                     ; TABLE#}

; New High Score Screen Text
@label=NewHighScore_Text
t$B76D DEFM "CONGRATULATION","S"+$80    ; "#STR(#PC)".
; This is altered by the code at #R$B679.
 $B77C DEFM "PLAYER "," "+$80           ; "#STR(#PC)".
 $B784 DEFM "YOU HAVE ACHIEVE","D"+$80  ; "#STR(#PC)".
; This is altered by the code at #R$B68D.
 $B795 DEFM "TODAYS     HIGHES","T"+$80 ; "#STR(#PC)".
 $B7A7 DEFM "SCOR","E"+$80              ; "#STR(#PC)".
 $B7AC DEFM "PLEASE REGISTE","R"+$80    ; "#STR(#PC)".
 $B7BB DEFM "YOUR INITIAL","S"+$80      ; "#STR(#PC)".
 $B7C8 DEFM "- - ","-"+$80              ; "#STR(#PC)".

; Display Lives
;
; Used by the routines at #R$9F6A, #R$A2F8, #R$AA27 and #R$B1B7.
;
; .
;
; Controller for 1UP lives.
@label=DisplayPlayerLives
c$B7CD LD HL,$4008   ; #REGhl=#N$4008 (screen buffer address) for 1UP lives.
 $B7D0 CALL $B7FE    ; #REGa=1UP lives remaining (by calling #R$B7FE).
 $B7D3 AND A         ; {If 1UP lives are zero, jump to #R$B7EF.
 $B7D4 JR Z,$B7EF    ; }
 $B7D6 CALL $B7E2    ; Else, there are lives to display so call #R$B7E2.
; Controller for 2UP lives.
@label=Controller2UPLives
*$B7D9 LD HL,$4016   ; #REGhl=#N$4016 (screen buffer address) for 2UP lives.
 $B7DC CALL $B80C    ; #REGa=2UP lives remaining (by calling #R$B80C).
 $B7DF AND A         ; {If 2UP lives are zero, jump to #R$B7F4.
 $B7E0 JR Z,$B7F4    ; }
; Handles displaying the lives count and UDG character.
@label=HandlerDisplayLives
*$B7E2 ADD A,$30     ; Add #N$30 to convert to an ASCII character (starting at
                     ; "0" character).
 $B7E4 CALL $B589    ; Call #R$B589.
 $B7E7 LD DE,$B814   ; #REGde=#R$B814.
 $B7EA PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $B7EB PUSH DE       ; }
 $B7EC JP $B599      ; Jump to #R$B599.
; 1UP has no lives.
@label=Handler1UPNoLives
*$B7EF CALL $B7F4    ; Call #R$B7F4.
 $B7F2 JR $B7D9      ; Jump to #R$B7D9.
; 2UP has no lives.
@label=Handler2UPNoLives
*$B7F4 LD A,$20      ; #REGa=ASCII " " (SPACE).
 $B7F6 CALL $B589    ; Call #R$B589.
 $B7F9 LD A,$20      ; #REGa=ASCII " " (SPACE).
 $B7FB JP $B589      ; Jump to #R$B589.
; Controller for the currently active player.
@label=ControllerActiveLives
*$B7FE LD A,($969E)  ; {If #R$969E is not zero then jump to #R$B808.
 $B801 AND A         ;
 $B802 JR NZ,$B808   ; }
; Return currently active players lives left.
@label=ActivePlayerLives
*$B804 LD A,($96BD)  ; #REGa=#R$96BD.
 $B807 RET           ; Return.
; Return inactive players lives left.
@label=InactivePlayerLives
*$B808 LD A,($96E0)  ; #REGa=#R$96E0.
 $B80B RET           ; Return.
; Controller for the inactive player.
@label=ControllerInactiveLives
*$B80C LD A,($969E)  ; {If #R$969E is zero then jump to #R$B808.
 $B80F AND A         ;
 $B810 JR Z,$B808    ; }
 $B812 JR $B804      ; Jump to #R$B804.
; View the equivalent code in;
; #LIST
; { #ATICATAC$0000 }
; { #COOKIE$7378 }
; { #JETPAC$70A4 }
; { #LUNARJETMAN$894F }
; { #PSSST$7325 }
; { #TRANZAM$0000 }
; LIST#

; The UDG for the lives icon
@label=UDG_Life
b$B814 DEFB %00011000 ; {#UDGTABLE(default,centre) { #UDG#(#PC),attr=$07 }
 $B815 DEFB %00100100 ; UDGTABLE#
 $B816 DEFB %00111100 ;
 $B817 DEFB %01111110 ;
 $B818 DEFB %01011010 ;
 $B819 DEFB %00111100 ;
 $B81A DEFB %00111100 ;
 $B81B DEFB %01100110 ; }

; Routine at B81C
;
; Used by the routines at #R$9B0D, #R$9D91, #R$9E72, #R$A4D7, #R$A54F, #R$A858,
; #R$A9BE, #R$AAED, #R$AD07, #R$ADD0 and #R$AEEF.
c$B81C PUSH IX       ; {Stash #REGix and #REGbc on the stack.
 $B81E PUSH BC       ; }
 $B81F LD L,(IX+$03) ;
 $B822 LD H,(IX+$04) ;
 $B825 LD ($96AE),HL ;
 $B828 LD L,(IX+$01) ;
 $B82B LD H,$00      ;
 $B82D LD BC,$6066   ; {#REGhl=#R$6066.
 $B830 ADD HL,BC     ; }
 $B831 LD L,(HL)     ;
 $B832 LD H,$00      ;
 $B834 ADD HL,HL     ;
 $B835 LD BC,$6166   ; {#REGhl=#R$6166.
 $B838 ADD HL,BC     ; }
 $B839 LD A,(HL)     ;
 $B83A INC HL        ;
 $B83B LD H,(HL)     ;
 $B83C LD L,A        ;
 $B83D PUSH HL       ;
 $B83E POP IX        ;
 $B840 POP BC        ;
 $B841 PUSH IX       ;
 $B843 CALL $B873    ; Call #R$B873.
 $B846 POP IX        ;
 $B848 JR NC,$B870   ;
 $B84A PUSH DE       ;
 $B84B LD A,($96AF)  ;
 $B84E LD D,A        ;
 $B84F PUSH IX       ;
 $B851 CALL $B873    ; Call #R$B873.
 $B854 POP IX        ; {Restore #REGix and #REGde from the stack.
 $B856 POP DE        ; }
 $B857 JR NC,$B85D   ;
 $B859 LD A,($96AE)  ; {#REGe=#R$96AE.
 $B85C LD E,A        ; }
*$B85D PUSH DE       ; Stash #REGde on the stack.
 $B85E LD A,($96AE)  ; {#REGe=#R$96AE.
 $B861 LD E,A        ; }
 $B862 PUSH IX       ;
 $B864 CALL $B873    ; Call #R$B873.
 $B867 POP IX        ; {Restore #REGix and #REGde from the stack.
 $B869 POP DE        ; }
 $B86A JR NC,$B870   ;
 $B86C LD A,($96AF)  ; {#REGd=#R$96AF.
 $B86F LD D,A        ; }
*$B870 POP IX        ; Restore #REGix from the stack.
 $B872 RET           ; Return.

; Routine at B873
;
; Used by the routine at #R$B81C.
c$B873 LD L,(IX+$00) ;
 $B876 LD H,(IX+$01) ;
 $B879 LD A,H        ;
 $B87A OR L          ;
 $B87B RET Z         ;
 $B87C LD A,(HL)     ;
 $B87D INC HL        ;
 $B87E LD H,(HL)     ;
 $B87F LD L,A        ;
 $B880 LD A,H        ;
 $B881 RLCA          ;
 $B882 RLCA          ;
 $B883 RLCA          ;
 $B884 AND %11111000 ; Keep only bits 3-7.
 $B886 LD H,A        ;
 $B887 LD A,E        ;
 $B888 SUB (IX+$02)  ;
 $B88B JP P,$B8A7    ;
 $B88E CPL           ;
 $B88F CP C          ;
*$B890 JR NC,$B89D   ;
 $B892 LD A,D        ;
 $B893 SUB L         ;
 $B894 SUB (IX+$03)  ;
 $B897 JP P,$B8AA    ;
 $B89A CPL           ;
 $B89B CP L          ;
*$B89C RET C         ;
*$B89D INC IX        ;
 $B89F INC IX        ;
 $B8A1 INC IX        ;
 $B8A3 INC IX        ;
 $B8A5 JR $B873      ;
*$B8A7 CP H          ;
 $B8A8 JR $B890      ;
*$B8AA CP B          ;
 $B8AB JR $B89C      ;

; Calculate Screen Address
;
; Used by the routines at #R$B29F, #R$B52D, #R$B53D, #R$B939, #R$B969 and
; #R$BBF7.
@label=ScreenAddress
c$B8AD LD A,L        ; #REGa=#REGl.
 $B8AE RRCA          ; {#REGa=#REGa / #N$08.
 $B8AF RRCA          ;
 $B8B0 RRCA          ; }
 $B8B1 AND %00011111 ; Keep only bits 0-4.
 $B8B3 LD L,A        ; #REGl=#REGa.
 $B8B4 LD A,H        ; #REGa=#REGh.
 $B8B5 RLCA          ; {#REGa=#REGa * #N$04.
 $B8B6 RLCA          ; }
 $B8B7 AND %11100000 ; Keep only bits 5-7.
 $B8B9 OR L          ;
 $B8BA LD L,A        ; #REGl=#REGa.
 $B8BB LD A,H        ; #REGa=#REGh.
 $B8BC AND %00000111 ; Keep only bits 0-2.
 $B8BE EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B8BF LD A,H        ; #REGa=#REGh.
 $B8C0 RRCA          ; {#REGa=#REGa / #N$08.
 $B8C1 RRCA          ;
 $B8C2 RRCA          ; }
 $B8C3 AND %00011000 ; Keep only bits 3-4.
 $B8C5 OR %01000000  ; Set bit 6.
 $B8C7 LD H,A        ; #REGh=#REGa.
 $B8C8 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $B8C9 OR H          ;
 $B8CA LD H,A        ; #REGh=#REGa.
 $B8CB RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BA2 }
; { #COOKIE$76E3 }
; { #JETPAC$7308 }
; { #LUNARJETMAN$851E }
; { #PSSST$759A }
; LIST#

; Screen Address One Pixel Below
;
; Used by the routines at #R$B29F and #R$BBF7.
;
;   HL Current position
; O:HL Address for new position
;
; Calculates the new address for writing a sprite pixel, in a downward
; direction, taking into consideration the screen memory layout.
@label=ScreenPos1PixelBelow
c$B8CC INC H         ; Increment #REGh to move down one pixel on screen.
 $B8CD LD A,H        ; Stash #REGh in #REGa temporarily.
 $B8CE AND %00000111 ; Keep only bits 0-2.
 $B8D0 RET NZ        ; If a character line has not been crossed then return.
 $B8D1 LD A,L        ; {#REGl=#REGl+#N$20.
 $B8D2 ADD A,$20     ;
 $B8D4 LD L,A        ; }
 $B8D5 AND %11100000 ; Keep only bits 5-7.
 $B8D7 RET Z         ; If a new section of the screen has not been crossed then
                     ; return.
 $B8D8 LD A,H        ; {#REGh=#REGh-#N$08.
 $B8D9 SUB $08       ;
 $B8DB LD H,A        ; }
 $B8DC RET           ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$A680, #R$AEA1, #R$B52D, #R$B53D, #R$BB24 and
; #R$BBF7.
;
;   HL Pixel address co-ordinates
; O:HL Attribute buffer address
;
; Converts a given pixel address to the associated attribute buffer address.
@label=AttributeAddress
c$B8DD PUSH BC       ; Stash #REGbc on the stack.
 $B8DE LD A,L        ; Horizontal co-ordinate.
 $B8DF RRCA          ; {Divide by #N$08.
 $B8E0 RRCA          ;
 $B8E1 RRCA          ; }
 $B8E2 AND %00011111 ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                     ; horizontal screen values).
 $B8E4 LD L,A        ; Store this back in #REGl.
 $B8E5 LD A,H        ; Vertical co-ordinate.
 $B8E6 RLCA          ; {Multiply by #N$04.
 $B8E7 RLCA          ; }
 $B8E8 LD C,A        ; Store this in #REGc temporarily.
 $B8E9 AND %11100000 ; Keep only bits 5-7.
 $B8EB OR L          ; Set the bits from #REGl.
 $B8EC LD L,A        ; #REGl=#REGa.
 $B8ED LD A,C        ; Fetch the stored value from #REGc.
 $B8EE AND %00000011 ; Keep only bits 0-1.
 $B8F0 OR %01011000  ; Set MSB of the attribute buffer #N$58. This ensures our
                     ; value is >= #R$5800.
 $B8F2 LD H,A        ; Store this back in #REGh.
 $B8F3 POP BC        ; Restore #REGbc from the stack.
 $B8F4 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BD2 }
; { #COOKIE$7534 }
; { #JETPAC$720E }
; { #LUNARJETMAN$8506 }
; { #PSSST$748F }
; LIST#

; Remove Entity
;
; Used by the routines at #R$AD07 and #R$B16A.
@label=RemoveEntity
c$B8F5 CALL $B939    ; Call #R$B939.
 $B8F8 EXX           ; Switch to the shadow registers.
 $B8F9 XOR A         ; {Set #REGa and #REGc to #N$00.
 $B8FA LD C,A        ; }
 $B8FB LD ($96A4),A  ; Write #N$00 to #R$96A4.
 $B8FE EXX           ; Switch back to the normal registers.
 $B8FF JP $B9DA      ; Jump to #R$B9DA.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9F56 }
; LIST#

; Routine at B902
;
; Used by the routine at #R$9960.
c$B902 LD L,$00      ; #REGl=#N$00.
*$B904 LD D,$00      ; #REGd=#N$00.
 $B906 LD E,L        ;
 $B907 LD H,$FF      ; #REGh=#N$FF.
 $B909 LD B,$08      ; #REGb=#N$08.
*$B90B LD (HL),E     ;
 $B90C DEC H         ;
 $B90D LD (HL),D     ;
 $B90E DEC H         ;
 $B90F SLA E         ;
 $B911 RL D          ;
 $B913 DJNZ $B90B    ;
 $B915 INC L         ;
 $B916 JR NZ,$B904   ;
 $B918 RET           ; Return.

; Draw Entity
;
; Used by the routines at #R$9A68, #R$A18C, #R$A234, #R$A323, #R$A43B, #R$AD57,
; #R$AECF, #R$B12F, #R$B16A and #R$BBBB.
@label=DrawEntity
c$B919 CALL $B969    ; Call #R$B969.
 $B91C EXX           ; Switch to the shadow registers.
 $B91D XOR A         ; {Write #N$00 to #R$96A3.
 $B91E LD ($96A3),A  ; }
 $B921 LD C,A        ; #REGc=#N$00.
 $B922 JP $B9DA      ; Jump to #R$B9DA.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9F4A }
; LIST#

; Get Sprite "A"
;
; Used by the routine at #R$B939.
;
; O:DE The sprite address
@label=GetSpriteA
c$B925 LD A,($969F)  ; #REGa=#R$969F.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9E86 }
; LIST#
; .
; Continue on to #R$B928.

; Get Sprite Address
;
; Used by the routine at #R$B934.
;
;   A The Sprite ID
; O:DE The sprite address
@label=GetSpriteAddress
c$B928 LD L,A        ; {Create an offset in #REGhl.
 $B929 LD H,$00      ; }
 $B92B ADD HL,HL     ; #REGhl=#REGhl * 2.
 $B92C LD BC,$BF84   ; {#REGhl=#R$BF84 + offset.
 $B92F ADD HL,BC     ; }
 $B930 LD E,(HL)     ; {#REGde=the sprite address.
 $B931 INC HL        ;
 $B932 LD D,(HL)     ; }
 $B933 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9E89 }
; LIST#

; Get Entity Sprite
;
; Used by the routine at #R$B969.
@label=GetEntitySprite
c$B934 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $B937 JR $B928      ; Jump to #R$B928.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9E96 }
; LIST#

; Prepare Draw 2/ 3 Byte Sprite
;
; Used by the routines at #R$B8F5 and #R$B9A9.
@label=PrepDraw23
c$B939 CALL $B925    ; Call #R$B925.
 $B93C LD HL,($96A0) ; #REGhl=#R$96A0 (saved X position).
 $B93F LD A,L        ;
 $B940 DEC A         ;
 $B941 RLCA          ;
 $B942 AND %00001110 ; Keep only bits 1-3.
 $B944 OR %11110000  ; Set bits 4-7.
 $B946 LD B,A        ; Store the result in #REGb.
 $B947 LD A,(DE)     ;
 $B948 INC DE        ;
 $B949 NEG           ;
 $B94B AND %00000111 ; Keep only bits 0-2.
 $B94D ADD A,A       ;
 $B94E ADD A,A       ;
 $B94F LD C,A        ;
 $B950 ADD A,A       ;
 $B951 ADD A,C       ;
 $B952 LD C,A        ;
 $B953 LD A,L        ;
 $B954 AND %00000111 ; Keep only bits 0-2.
 $B956 LD A,C        ;
 $B957 JR NZ,$B95B   ;
 $B959 ADD A,$06     ;
*$B95B LD ($BA13),A  ;
 $B95E LD A,(DE)     ;
 $B95F INC DE        ;
 $B960 LD ($96A3),A  ; Write #REGa to #R$96A3.
 $B963 CALL $B8AD    ; Call #R$B8AD.
 $B966 LD C,$00      ; #REGc=#N$00.
 $B968 RET           ; Return.

; Prepare Draw 2 Byte Sprite
;
; Used by the routines at #R$B919 and #R$B9A9.
@label=PrepDraw2
c$B969 CALL $B934    ; Call #R$B934.
 $B96C LD L,(IX+$03) ;
 $B96F LD H,(IX+$04) ;
 $B972 LD A,L        ;
 $B973 DEC A         ;
 $B974 RLCA          ;
 $B975 AND %00001110 ; Keep only bits 1-3.
 $B977 OR %11110000  ; Set bits 4-7.
 $B979 LD B,A        ;
 $B97A LD A,L        ;
 $B97B AND %00000111 ; Keep only bits 0-2.
 $B97D LD A,(DE)     ;
 $B97E JR Z,$B981    ;
 $B980 INC A         ;
*$B981 LD ($96A6),A  ;
 $B984 LD A,(DE)     ;
 $B985 INC DE        ;
 $B986 NEG           ;
 $B988 AND %00000111 ; Keep only bits 0-2.
 $B98A ADD A,A       ;
 $B98B ADD A,A       ;
 $B98C LD C,A        ;
 $B98D ADD A,A       ;
 $B98E ADD A,C       ;
 $B98F LD C,A        ;
 $B990 LD A,L        ;
 $B991 AND %00000111 ; Keep only bits 0-2.
 $B993 LD A,C        ;
 $B994 JR NZ,$B998   ;
 $B996 ADD A,$06     ;
*$B998 LD ($BA92),A  ;
 $B99B LD A,(DE)     ;
 $B99C INC DE        ;
 $B99D LD ($96A4),A  ;
 $B9A0 LD ($96A5),A  ;
 $B9A3 CALL $B8AD    ; Call #R$B8AD.
 $B9A6 LD C,$00      ; #REGc=#N$00.
 $B9A8 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9F80 }
; LIST#
; .
; View the equivalent code in;
; #LIST
; { #ATICATAC$9E96 }
; LIST#

; Display Entity
;
; Used by the routines at #R$A680, #R$AD57 and #R$AEEF.
@label=DisplayEntity
c$B9A9 CALL $B969    ; Call #R$B969.
 $B9AC EXX           ; Switch to the shadow registers.
 $B9AD CALL $B939    ; Call #R$B939.
 $B9B0 LD A,($96A1)  ; #REGa=#R$96A1.
 $B9B3 SUB (IX+$04)  ;
 $B9B6 JP Z,$B9F4    ;
 $B9B9 JP M,$B9CB    ;
 $B9BC LD C,A        ;
 $B9BD LD A,($96A3)  ; #REGa=#R$96A3.
 $B9C0 CP C          ;
 $B9C1 JP C,$B9F4    ;
 $B9C4 SUB C         ;
 $B9C5 LD ($96A3),A  ;
 $B9C8 JP $B9DA      ; Jump to #R$B9DA.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9FCA }
; LIST#

; Routine at B9CB
;
; Used by the routine at #R$B9A9.
c$B9CB EXX           ; Switch back to the normal registers.
 $B9CC NEG           ;
 $B9CE LD C,A        ;
 $B9CF LD A,($96A4)  ; #REGa=#R$96A4.
 $B9D2 CP C          ;
 $B9D3 JP C,$B9F3    ;
 $B9D6 SUB C         ;
 $B9D7 JP $BA07      ; Jump to #R$BA07.

; Routine at B9DA
;
; Used by the routines at #R$B8F5, #R$B919 and #R$B9A9.
c$B9DA LD A,C        ;
 $B9DB AND A         ;
 $B9DC JR Z,$B9EE    ;
 $B9DE DEC C         ;
 $B9DF CALL $BA0D    ; Call #R$BA0D.
 $B9E2 EXX           ;
 $B9E3 LD A,C        ;
 $B9E4 AND A         ;
 $B9E5 JR Z,$B9EB    ;
*$B9E7 DEC C         ;
 $B9E8 CALL $BA8C    ; Call #R$BA8C.
*$B9EB EXX           ;
 $B9EC JR $B9DA      ; Jump to #R$B9DA.
*$B9EE EXX           ;
 $B9EF LD A,C        ;
 $B9F0 AND A         ;
 $B9F1 JR NZ,$B9E7   ;
; This entry point is used by the routine at #R$B9CB.
*$B9F3 EXX           ;
; This entry point is used by the routine at #R$B9A9.
*$B9F4 LD A,($96A3)  ;
 $B9F7 LD C,A        ;
 $B9F8 LD A,($96A4)  ;
 $B9FB OR C          ;
 $B9FC RET Z         ;
 $B9FD XOR A         ;
 $B9FE LD ($96A3),A  ;
 $BA01 EXX           ;
 $BA02 LD A,($96A4)  ;
 $BA05 LD C,A        ;
 $BA06 XOR A         ;
; This entry point is used by the routine at #R$B9CB.
*$BA07 LD ($96A4),A  ;
 $BA0A EXX           ;
 $BA0B JR $B9DA      ; Jump to #R$B9DA.
*$BA0D LD A,C        ;
 $BA0E EX AF,AF'     ;
 $BA0F LD A,(DE)     ;
 $BA10 LD C,A        ;
 $BA11 PUSH HL       ;
*$BA12 JR $BA12      ; Jump to #R$BA12.
;  View the equivalent code in;
; #LIST
; { #ATICATAC$9E9B }
; LIST#

; Routine at BA14
c$BA14 LD A,(DE)     ;
 $BA15 LD C,A        ;
 $BA16 LD A,(BC)     ;
 $BA17 XOR (HL)      ;
 $BA18 LD (HL),A     ;
 $BA19 INC L         ;
 $BA1A INC B         ;
 $BA1B LD A,(BC)     ;
 $BA1C XOR (HL)      ;
 $BA1D LD (HL),A     ;
 $BA1E DEC B         ;
 $BA1F INC DE        ;
 $BA20 LD A,(DE)     ;
 $BA21 LD C,A        ;
 $BA22 LD A,(BC)     ;
 $BA23 XOR (HL)      ;
 $BA24 LD (HL),A     ;
 $BA25 INC L         ;
 $BA26 INC B         ;
 $BA27 LD A,(BC)     ;
 $BA28 XOR (HL)      ;
 $BA29 LD (HL),A     ;
 $BA2A DEC B         ;
 $BA2B INC DE        ;
 $BA2C LD A,(DE)     ;
 $BA2D LD C,A        ;
 $BA2E LD A,(BC)     ;
 $BA2F XOR (HL)      ;
 $BA30 LD (HL),A     ;
 $BA31 INC L         ;
 $BA32 INC B         ;
 $BA33 LD A,(BC)     ;
 $BA34 XOR (HL)      ;
 $BA35 LD (HL),A     ;
 $BA36 DEC B         ;
 $BA37 INC DE        ;
 $BA38 LD A,(DE)     ;
 $BA39 LD C,A        ;
 $BA3A LD A,(BC)     ;
 $BA3B XOR (HL)      ;
 $BA3C LD (HL),A     ;
 $BA3D INC L         ;
 $BA3E INC B         ;
 $BA3F LD A,(BC)     ;
 $BA40 XOR (HL)      ;
 $BA41 LD (HL),A     ;
 $BA42 DEC B         ;
 $BA43 INC DE        ;
 $BA44 LD A,(DE)     ;
 $BA45 LD C,A        ;
 $BA46 LD A,(BC)     ;
 $BA47 XOR (HL)      ;
 $BA48 LD (HL),A     ;
 $BA49 INC L         ;
 $BA4A INC B         ;
 $BA4B LD A,(BC)     ;
 $BA4C XOR (HL)      ;
 $BA4D LD (HL),A     ;
 $BA4E DEC B         ;
 $BA4F INC DE        ;
 $BA50 LD A,(DE)     ;
 $BA51 LD C,A        ;
 $BA52 LD A,(BC)     ;
 $BA53 XOR (HL)      ;
 $BA54 LD (HL),A     ;
 $BA55 INC L         ;
 $BA56 INC B         ;
 $BA57 LD A,(BC)     ;
 $BA58 XOR (HL)      ;
 $BA59 LD (HL),A     ;
 $BA5A DEC B         ;
 $BA5B INC DE        ;
 $BA5C LD A,(DE)     ;
 $BA5D LD C,A        ;
 $BA5E LD A,(BC)     ;
 $BA5F XOR (HL)      ;
 $BA60 LD (HL),A     ;
 $BA61 INC L         ;
 $BA62 INC B         ;
 $BA63 LD A,(BC)     ;
 $BA64 XOR (HL)      ;
 $BA65 LD (HL),A     ;
 $BA66 DEC B         ;
 $BA67 INC DE        ;
 $BA68 LD A,(DE)     ;
 $BA69 LD C,A        ;
 $BA6A LD A,(BC)     ;
 $BA6B XOR (HL)      ;
 $BA6C LD (HL),A     ;
 $BA6D INC L         ;
 $BA6E LD A,L        ;
 $BA6F AND $1F       ;
 $BA71 JR Z,$BA78    ;
 $BA73 INC B         ;
 $BA74 LD A,(BC)     ;
 $BA75 XOR (HL)      ;
 $BA76 LD (HL),A     ;
 $BA77 DEC B         ;
*$BA78 INC DE        ;
 $BA79 EX AF,AF'     ;
 $BA7A LD C,A        ;
 $BA7B POP HL        ;
 $BA7C DEC H         ;
 $BA7D LD A,H        ;
 $BA7E CPL           ;
 $BA7F AND $07       ;
 $BA81 RET NZ        ;
 $BA82 LD A,L        ;
 $BA83 SUB $20       ;
 $BA85 LD L,A        ;
 $BA86 RET C         ;
 $BA87 LD A,H        ;
 $BA88 ADD A,$08     ;
 $BA8A LD H,A        ;
 $BA8B RET           ;
; This entry point is used by the routine at #R$B9DA.
*$BA8C LD A,C        ;
 $BA8D EX AF,AF'     ;
 $BA8E LD A,(DE)     ;
 $BA8F LD C,A        ;
 $BA90 PUSH HL       ;
*$BA91 JR $BA91      ;
 $BA93 LD A,(DE)     ;
 $BA94 LD C,A        ;
 $BA95 LD A,(BC)     ;
 $BA96 XOR (HL)      ;
 $BA97 LD (HL),A     ;
 $BA98 INC L         ;
 $BA99 INC B         ;
 $BA9A LD A,(BC)     ;
 $BA9B XOR (HL)      ;
 $BA9C LD (HL),A     ;
 $BA9D DEC B         ;
 $BA9E INC DE        ;
 $BA9F LD A,(DE)     ;
 $BAA0 LD C,A        ;
 $BAA1 LD A,(BC)     ;
 $BAA2 XOR (HL)      ;
 $BAA3 LD (HL),A     ;
 $BAA4 INC L         ;
 $BAA5 INC B         ;
 $BAA6 LD A,(BC)     ;
 $BAA7 XOR (HL)      ;
 $BAA8 LD (HL),A     ;
 $BAA9 DEC B         ;
 $BAAA INC DE        ;
 $BAAB LD A,(DE)     ;
 $BAAC LD C,A        ;
 $BAAD LD A,(BC)     ;
 $BAAE XOR (HL)      ;
 $BAAF LD (HL),A     ;
 $BAB0 INC L         ;
 $BAB1 INC B         ;
 $BAB2 LD A,(BC)     ;
 $BAB3 XOR (HL)      ;
 $BAB4 LD (HL),A     ;
 $BAB5 DEC B         ;
 $BAB6 INC DE        ;
 $BAB7 LD A,(DE)     ;
 $BAB8 LD C,A        ;
 $BAB9 LD A,(BC)     ;
 $BABA XOR (HL)      ;
 $BABB LD (HL),A     ;
 $BABC INC L         ;
 $BABD INC B         ;
 $BABE LD A,(BC)     ;
 $BABF XOR (HL)      ;
 $BAC0 LD (HL),A     ;
 $BAC1 DEC B         ;
 $BAC2 INC DE        ;
 $BAC3 LD A,(DE)     ;
 $BAC4 LD C,A        ;
 $BAC5 LD A,(BC)     ;
 $BAC6 XOR (HL)      ;
 $BAC7 LD (HL),A     ;
 $BAC8 INC L         ;
 $BAC9 INC B         ;
 $BACA LD A,(BC)     ;
 $BACB XOR (HL)      ;
 $BACC LD (HL),A     ;
 $BACD DEC B         ;
 $BACE INC DE        ;
 $BACF LD A,(DE)     ;
 $BAD0 LD C,A        ;
 $BAD1 LD A,(BC)     ;
 $BAD2 XOR (HL)      ;
 $BAD3 LD (HL),A     ;
 $BAD4 INC L         ;
 $BAD5 INC B         ;
 $BAD6 LD A,(BC)     ;
 $BAD7 XOR (HL)      ;
 $BAD8 LD (HL),A     ;
 $BAD9 DEC B         ;
 $BADA INC DE        ;
 $BADB LD A,(DE)     ;
 $BADC LD C,A        ;
 $BADD LD A,(BC)     ;
 $BADE XOR (HL)      ;
 $BADF LD (HL),A     ;
 $BAE0 INC L         ;
 $BAE1 INC B         ;
 $BAE2 LD A,(BC)     ;
 $BAE3 XOR (HL)      ;
 $BAE4 LD (HL),A     ;
 $BAE5 DEC B         ;
 $BAE6 INC DE        ;
 $BAE7 LD A,(DE)     ;
 $BAE8 LD C,A        ;
 $BAE9 LD A,(BC)     ;
 $BAEA XOR (HL)      ;
 $BAEB LD (HL),A     ;
 $BAEC INC L         ;
 $BAED LD A,L        ;
 $BAEE AND $1F       ;
 $BAF0 JR Z,$BAF7    ;
 $BAF2 INC B         ;
 $BAF3 LD A,(BC)     ;
 $BAF4 XOR (HL)      ;
 $BAF5 LD (HL),A     ;
 $BAF6 DEC B         ;
*$BAF7 INC DE        ;
 $BAF8 EX AF,AF'     ;
 $BAF9 LD C,A        ;
 $BAFA POP HL        ;
 $BAFB DEC H         ;
 $BAFC LD A,H        ;
 $BAFD CPL           ;
 $BAFE AND $07       ;
 $BB00 RET NZ        ;
 $BB01 LD A,L        ;
 $BB02 SUB $20       ;
 $BB04 LD L,A        ;
 $BB05 RET C         ;
 $BB06 LD A,H        ;
 $BB07 ADD A,$08     ;
 $BB09 LD H,A        ;
 $BB0A RET           ;

; Store Entity
;
; Used by the routines at #R$9D91, #R$9E72, #R$A3C5, #R$A3E0, #R$A42A, #R$A4D7,
; #R$A54F, #R$A61B, #R$A680, #R$A858, #R$A8F5, #R$A964, #R$A9BE, #R$AA0D,
; #R$AAED, #R$AD07, #R$ADD0, #R$AEEF, #R$B12F and #R$B16A.
;
; IX Actor Entity
;
; This is @todo.
@label=StoreEntity
c$BB0B LD A,(IX+$03) ; {Copy actor X position to active actor X position at
 $BB0E LD ($96A0),A  ; #R$96A0.}
 $BB11 LD A,(IX+$04) ; {Copy actor Y position to active actor Y position at
 $BB14 LD ($96A1),A  ; #R$96A1.}
 $BB17 LD A,(IX+$00) ; {Copy actor movement to active actor movement at
 $BB1A LD ($969F),A  ; #R$969F.}
 $BB1D LD A,(IX+$01) ; {Copy actor movement to active actor movement at
 $BB20 LD ($96A2),A  ; #R$96A2.}
 $BB23 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9FFB }
; { #COOKIE$0000 }
; { #JETPAC$7327 }
; { #LUNARJETMAN$0000 }
; { #PSSST$75B9 }
; { #TRANZAM$71ED }
; LIST#

; Routine at BB24
;
; Used by the routines at #R$A31A, #R$AD57 and #R$AEEF.
c$BB24 LD L,(IX+$03) ;
 $BB27 LD H,(IX+$04) ;
 $BB2A LD D,(IX+$05) ;
 $BB2D LD A,($96A6)  ;
 $BB30 LD B,A        ;
 $BB31 LD A,H        ;
 $BB32 CPL           ;
 $BB33 AND %00000111 ; Keep only bits 0-2.
 $BB35 LD C,A        ;
 $BB36 LD A,($96A5)  ;
 $BB39 ADD A,C       ;
 $BB3A ADD A,$08     ;
 $BB3C RRCA          ;
 $BB3D RRCA          ;
 $BB3E RRCA          ;
 $BB3F AND %00011111 ; Keep only bits 0-4.
 $BB41 LD C,A        ;
 $BB42 CALL $B8DD    ; Call #R$B8DD.
; Continue on to #R$BB45.

; Routine at BB45
;
; Used by the routine at #R$A680.
@label=AttrDrawUnchanged
c$BB45 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $BB46 PUSH HL       ; }
*$BB47 LD A,(HL)     ;
 $BB48 AND %00111000 ; Keep only bits 3-5.
 $BB4A JR NZ,$BB4D   ;
 $BB4C LD (HL),D     ;
*$BB4D INC L         ;
 $BB4E DJNZ $BB47    ;
 $BB50 POP HL        ; Restore #REGhl from the stack.
 $BB51 LD BC,$0020   ; #REGbc=#N($0020,$04,$04).
 $BB54 AND A         ;
 $BB55 SBC HL,BC     ;
 $BB57 POP BC        ; Restore #REGbc from the stack.
 $BB58 DEC C         ; Decrease #REGc by one.
 $BB59 JR NZ,$BB45   ; Jump to #R$BB45 unless #REGc is zero.
 $BB5B RET           ; Return.

; Clear Play Area
;
; Used by the routines at #R$9F6A, #R$A207, #R$A234, #R$AA6A, #R$B12F, #R$B1D4,
; #R$B205 and #R$B3D5.
;
; .
;
; This routine clears the top third of the screen, but only from below the
; banner. This is left untouched.
@label=ClearPlayArea
c$BB5C LD HL,$4040   ; #REGhl=#N$4040(screen buffer).
; Here #REGd contains the value to be written (#N$00) and #REGe holds the number of rows of pixels to act on
;       (the full height of a character block).
 $BB5F LD DE,$0008   ; #REGde=#N($0008,$04,$04).
; #REGb holds the number of columns (i.e. #N$20 == full width of the screen), and #REGc is a
;       counter for how many rows to clear (i.e. the top third would usually be #N$08 rows, but the banner takes up
;       two - hence this initialises to #N$06).
 $BB62 LD BC,$2006   ; #REGbc=#N$2006.
@label=ClearPlayArea_ClearLine
*$BB65 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $BB66 PUSH HL       ; }
@label=ClearPlayArea_ClearLine_Start
*$BB67 PUSH BC       ; Stash #REGbc on the stack.
@label=ClearPlayArea_ClearLine_Loop
*$BB68 LD (HL),D     ; Write #N$00 (#REGd) to the screen (#REGhl).
 $BB69 INC L         ; Move "right" onto the next column.
 $BB6A DJNZ $BB68    ; Decrease the width counter by one and loop back to
                     ; #R$BB68 until counter is zero.
; Resets the width counter ready for the next loop.
 $BB6C POP BC        ; Restore #REGbc from the stack.
 $BB6D DEC C         ; Decrease the number of rows counter by one.
 $BB6E JR NZ,$BB67   ; Jump back to #R$BB67 unless #REGc is zero.
; Resets the screen buffer to where the clearing started for this loop, then
; moves down one character block.
 $BB70 POP HL        ; Restore #REGhl from the stack.
 $BB71 INC H         ; Increments #REGh by one.
 $BB72 POP BC        ; Restore #REGbc from the stack.
 $BB73 DEC E         ; Decrease the pixel row counter by one.
 $BB74 JR NZ,$BB65   ; Jump back to #R$BB65 unless #REGe is zero.
; Clears the other two thirds of the screen, so now the screen only contains
; the banner.
 $BB76 LD HL,$4800   ; #REGhl=#N$4800(screen buffer).
 $BB79 JP $BB84      ; Jump to #R$BB84.

; Clear Play Area Attribute Buffer
;
; Used by the routines at #R$9F6A, #R$A207, #R$A234, #R$AA6A, #R$B12F, #R$B1D4,
; #R$B205 and #R$B3D5.
@label=ClearPlayArea_Attributes
c$BB7C LD HL,$5840   ; #REGhl=#N$5840(attribute buffer).
 $BB7F JR $BB92      ; Jump to #R$BB92.

; Reset Screen Buffer
;
; Used by the routine at #R$9960.
@label=ResetScreen
c$BB81 LD HL,$4000   ; #REGhl=#R$4000(screen buffer).
; This entry point is used by the routine at #R$BB5C.
*$BB84 LD B,$58      ; #REGb=#N$58 (i.e. finish once we reach the start of
                     ; #R$5800(attribute buffer)).
 $BB86 LD C,$00      ; #REGc=#N$00 (value to write).
; View the equivalent code in;
; #LIST
; { #ATICATAC$80B4 }
; { #COOKIE$74D4 }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84AD }
; { #PSSST$7439 }
; LIST#
; .
; Continue on to #R$BB88 to blank the screen buffer.

; Reset Routine
;
; Used by the routine at #R$BB8F.
;
; HL Target address
; B Single byte representing the MSB of the end address (will always end on LSB
; . #N$00)
; C Value to write
@label=ResetCopier
c$BB88 LD (HL),C     ; Write #REGc to the target address.
 $BB89 INC HL        ; Increment the target address by one.
 $BB8A LD A,H        ; {Are we finished yet? Check the MSB of the target vs.
 $BB8B CP B          ; #REGb.}
 $BB8C JR NZ,$BB88   ; Keep looping back to #R$BB88 until there is no
                     ; carry-over.
 $BB8E RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80BB }
; { #COOKIE$74DB }
; { #JETPAC$71B8 }
; { #LUNARJETMAN$84B4 }
; { #PSSST$7440 }
; LIST#

; Reset Attribute Buffer
;
; Used by the routine at #R$9960.
@label=ResetAttributes
c$BB8F LD HL,$5800   ; #REGhl=#R$5800(attribute buffer).
; This entry point is used by the routine at #R$BB7C.
*$BB92 LD B,$5B      ; #REGb=#N$5B (i.e. finish once we reach the end of the
                     ; #R$5800(attribute buffer)).
 $BB94 LD C,$40      ; #REGc=#N$00 (value to write).
 $BB96 JR $BB88      ; Jump to #R$BB88.
 $BB98 ADD A,L       ;
 $BB99 LD L,A        ;
 $BB9A LD A,H        ;
 $BB9B ADC A,$00     ;
 $BB9D LD H,A        ;
 $BB9E RET           ;
; View the equivalent code in;
; #LIST
; { #ATICATAC$80C2 }
; { #JETPAC$71C6 }
; { #LUNARJETMAN$84BB }
; { #PSSST$7447 }
; { #TRANZAM$7200 }
; LIST#

; Clear Buffers
;
; Used by the routine at #R$9960.
;
; .
;
; Writes #N$00 to every address from #R$9692 to #R$995A.
@label=ClearBuffers
c$BB9F LD HL,$9692   ; #REGhl=#R$9692 (starting address).
 $BBA2 LD BC,$02C8   ; #REGbc=#N$02C8 (counter).
; This entry point is used by the routine at #R$9960.
@label=ClearBuffers_Loop
*$BBA5 LD (HL),$00   ; Writes #N$00 to the address held by #REGhl.
 $BBA7 INC HL        ; Increment #REGhl by one.
 $BBA8 DEC BC        ; Decrease the counter held in #REGbc by one.
 $BBA9 LD A,B        ; {Keep looping back to #R$BBA5 until the counter in
 $BBAA OR C          ; #REGbc is zero.
 $BBAB JR NZ,$BBA5   ; }
 $BBAD RET           ; Return.

; Routine at BBAE
;
; Used by the routine at #R$BBDD.
c$BBAE CALL $A79F    ; Call #R$A79F.
 $BBB1 CALL $A763    ; Call #R$A763.
 $BBB4 CALL $A33B    ; Call #R$A33B.
 $BBB7 CALL $BBBB    ; Call #R$BBBB.
 $BBBA RET           ; Return.

; Routine at BBBB
;
; Used by the routine at #R$BBAE.
c$BBBB PUSH IX       ; Stash #REGix on the stack.
 $BBBD LD IX,$970E   ; #REGix=#R$970E.
*$BBC1 LD A,($9703)  ; #REGa=#R$9703.
 $BBC4 CP (IX+$01)   ;
 $BBC7 CALL Z,$B919  ;
 $BBCA LD DE,$000C   ; #REGde=#N($000C,$04,$04).
 $BBCD ADD IX,DE     ;
 $BBCF PUSH IX       ; {#REGhl=#REGix.
 $BBD1 POP HL        ; }
 $BBD2 LD DE,$982E   ; #REGde=#R$982E.
 $BBD5 AND A         ;
 $BBD6 SBC HL,DE     ;
 $BBD8 JR C,$BBC1    ;
 $BBDA POP IX        ; Restore #REGix from the stack.
 $BBDC RET           ; Return.

; Routine at BBDD
;
; Used by the routines at #R$A234, #R$B12F and #R$B1D4.
c$BBDD LD L,(IX+$01) ; #REGl=#REGix+#N$01 (current location).
 $BBE0 LD H,$00      ; #REGh=#N$00.
 $BBE2 LD BC,$6066   ; #REGbc=#R$6066.
 $BBE5 ADD HL,BC     ;
 $BBE6 LD L,(HL)     ;
 $BBE7 LD H,$00      ; #REGh=#N$00.
 $BBE9 ADD HL,HL     ;
 $BBEA LD BC,$6166   ; #REGbc=#R$6166.
 $BBED ADD HL,BC     ;
 $BBEE LD A,(HL)     ;
 $BBEF INC HL        ;
 $BBF0 LD H,(HL)     ;
 $BBF1 LD L,A        ;
 $BBF2 CALL $BBF7    ; Call #R$BBF7.
 $BBF5 JR $BBAE      ; Jump to #R$BBAE.

; Draw Room
;
; Used by the routines at #R$9F6A, #R$B3D5, #R$B5FC and #R$BBDD.
;
; HL The Room Data memory address (e.g. #R$61C6, #R$6200)
;
; The room data is held as: #TABLE(default,centre)
; { =h Byte | =h Type }
; { #N$01 | =r2 Room Graphic Data Address }
; { #N$02 }
; { #N$03 | X Position }
; { #N$04 | Y Position }
; TABLE#
; And is terminated when #N($0000, $04, $04) is reached.
; .
; Fetch the room data graphic address.
@label=DrawRoom
c$BBF7 LD E,(HL)     ; {#REGde=room data graphic address.
 $BBF8 INC HL        ;
 $BBF9 LD D,(HL)     ; }
 $BBFA LD A,E        ; {Return if the terminator is found.
 $BBFB OR D          ;
 $BBFC RET Z         ; }
; Fetch the X/ Y position data.
 $BBFD INC HL        ; Increment #REGhl by one.
 $BBFE LD C,(HL)     ; {#REGbc=X/ Y position data.
 $BBFF INC HL        ;
 $BC00 LD B,(HL)     ; }
 $BC01 INC HL        ; Increment #REGhl by one, ready for the next loop.
 $BC02 PUSH HL       ; Stash #REGhl (room graphic data pointer) on the stack.
 $BC03 LD H,B        ; {#REGhl=#REGbc.
 $BC04 LD L,C        ; }
 $BC05 CALL $BC0B    ; Call #R$BC0B.
 $BC08 POP HL        ; Restore #REGhl from the stack (room graphic data
                     ; pointer).
 $BC09 JR $BBF7      ; Jump back to #R$BBF7.
; At the point of processing; #REGhl contains X/ Y position data, #REGde
; contains the room data graphic address (and #REGbc is throwaway).
@label=DrawRoom_Process
*$BC0B PUSH HL       ; Stash #REGhl (X/ Y position) on the stack.
 $BC0C CALL $B8AD    ; Call #R$B8AD.
 $BC0F LD A,(DE)     ; {#REGc=room graphic width byte.
 $BC10 LD C,A        ; }
 $BC11 INC DE        ; Increment #REGde by one.
 $BC12 LD A,(DE)     ; {#REGb=room graphic height byte.
 $BC13 LD B,A        ; }
 $BC14 INC DE        ; Increment #REGde by one.
@label=DrawRoom_Row_Loop
*$BC15 PUSH BC       ; Stash #REGbc on the stack.
@label=DrawRoom_Write_Row
*$BC16 LD A,(DE)     ; #REGa=fetch a byte of graphics data.
 $BC17 CPL           ; Invert the bits.
 $BC18 LD (HL),A     ; Write the graphic data to #REGhl (screen buffer).
 $BC19 INC L         ; Move onto the next screen location.
 $BC1A INC DE        ; Increment #REGde by one.
 $BC1B DJNZ $BC16    ; Decrease the width counter by one and loop back to
                     ; #R$BC16 until counter is zero.
 $BC1D POP BC        ; Restore #REGbc from the stack.
 $BC1E LD A,L        ; {#REGl=#REGl-#REGb.
 $BC1F SUB B         ;
 $BC20 LD L,A        ; }
 $BC21 CALL $B8CC    ; Call #R$B8CC.
 $BC24 DEC C         ; {Decrease the height counter by one and loop back to
 $BC25 JR NZ,$BC15   ; #R$BC15 until counter is zero.}
 $BC27 POP HL        ; Restore #REGhl from the stack.
 $BC28 CALL $B8DD    ; Call #R$B8DD.
 $BC2B LD A,(DE)     ;
 $BC2C INC DE        ;
 $BC2D LD C,A        ;
 $BC2E LD A,(DE)     ;
 $BC2F INC DE        ;
 $BC30 LD B,A        ;
 $BC31 LD A,($96B2)  ; {If #R$96B2 is not zero, jump to #R$BC49.
 $BC34 AND A         ;
 $BC35 JR NZ,$BC49   ; }
*$BC37 PUSH BC       ;
 $BC38 PUSH HL       ;
*$BC39 LD A,(DE)     ;
 $BC3A INC DE        ;
 $BC3B LD (HL),A     ;
 $BC3C INC L         ;
 $BC3D DJNZ $BC39    ;
 $BC3F POP HL        ;
 $BC40 LD BC,$0020   ; #REGbc=#N($0020,$04,$04).
 $BC43 ADD HL,BC     ;
 $BC44 POP BC        ;
 $BC45 DEC C         ;
 $BC46 JR NZ,$BC37   ;
 $BC48 RET           ; Return.
*$BC49 PUSH BC       ; Stash #REGbc on the stack.
 $BC4A XOR A         ; {Write #N$00 to #R$96B2.
 $BC4B LD ($96B2),A  ; }
*$BC4E ADD A,C       ;
 $BC4F DJNZ $BC4E    ;
 $BC51 LD C,A        ;
 $BC52 LD B,$00      ;
 $BC54 EX DE,HL      ;
 $BC55 ADD HL,BC     ;
 $BC56 EX DE,HL      ;
 $BC57 POP BC        ;
 $BC58 JR $BC37      ;
 $BC5A LD HL,$0000   ; #REGhl=#N($0000, $04, $04).
 $BC5D LD B,$08      ; #REGb=#N$08.
*$BC5F ADD HL,HL     ;
 $BC60 RLCA          ;
 $BC61 JR NC,$BC64   ;
 $BC63 ADD HL,DE     ;
*$BC64 DJNZ $BC5F    ;
 $BC66 RET           ; Return.

; Music Data
@label=MusicData_GameComplete
b$BC67 DEFB $19,$1D,$20,$25,$29,$20,$25,$29
 $BC6F DEFB $19,$1D,$20,$25,$29,$25,$20,$1D
@label=MusicData_GameComplete_Loop
 $BC77 DEFB $1B,$1E,$22,$27,$2A,$22,$27,$2A
 $BC7F DEFB $1B,$1E,$22,$27,$2A,$27,$22,$1E
 $BC87 DEFB $18,$1B,$20,$24,$27,$20,$24,$27
 $BC8F DEFB $18,$1B,$20,$24,$27,$24,$20,$1B
 $BC97 DEFB $19,$1D,$20,$25,$29,$20,$25,$29
 $BC9F DEFB $19,$1D,$20,$25,$29,$25,$20,$1D
 $BCA7 DEFB $19,$1D,$22,$29,$2E,$22,$29,$2E
 $BCAF DEFB $19,$1D,$22,$29,$2E,$29,$22,$1D
 $BCB7 DEFB $19,$1B,$1F,$22,$27,$1F,$22,$27
 $BCBF DEFB $19,$1B,$1F,$22,$27,$22,$1F,$1B
 $BCC7 DEFB $1B,$20,$24,$27,$2C,$24,$27,$2C
 $BCCF DEFB $1B,$20,$24,$27,$2C,$27,$24,$20
 $BCD7 DEFB $18,$19,$1D,$20,$25,$1D,$20,$25
 $BCDF DEFB $18,$19,$1D,$20,$25,$20,$1D,$19
 $BCE7 DEFB $16,$19,$1D,$20,$25,$1D,$20,$25
 $BCEF DEFB $16,$19,$1D,$20,$25,$20,$1D,$19
 $BCF7 DEFB $13,$16,$1B,$1F,$25,$1B,$1F,$25
 $BCFF DEFB $13,$16,$1B,$1F,$25,$1F,$1B,$16
 $BD07 DEFB $14,$18,$1B,$20,$24,$1B,$20,$24
 $BD0F DEFB $14,$18,$1B,$20,$24,$20,$1B,$18
 $BD17 DEFB $19,$1D,$20,$25,$29,$20,$25,$29
 $BD1F DEFB $19,$1D,$20,$25,$29,$25,$20,$1D
 $BD27 DEFB $FF
@label=MusicData_GameOver
 $BD28 DEFB $18,$21,$1D,$17,$20,$1D,$16,$1F
 $BD30 DEFB $1C,$1D,$FF
@label=MusicData_Poem
 $BD33 DEFB $67,$69,$6A,$6C,$6A,$69,$67,$65
 $BD3B DEFB $27,$29,$27,$29,$27,$29,$27,$29
 $BD43 DEFB $A7,$FF
@label=MusicData_GameInitialisation
 $BD45 DEFB $59,$14,$17,$59,$14,$17,$19,$1C
 $BD4D DEFB $14,$1C,$99,$FF

; Play Music (break on keypress)
;
; Used by the routine at #R$B3D5.
@label=PlayAudio_WaitKey
c$BD51 DI            ; Disable interrupts.
@label=PlayAudio_WaitKey_Loop
*$BD52 XOR A         ;
 $BD53 OUT ($FD),A   ;
 $BD55 IN A,($FE)    ;
 $BD57 CPL           ; Flip the bits.
 $BD58 AND %00011111 ; Keep only bits 0-4.
 $BD5A JR Z,$BD64    ; If no keys were pressed, jump to #R$BD64.
 $BD5C LD A,($9692)  ; #REGa=#R$9692.
 $BD5F INC SP        ; {Increments the stack pointer by two.
 $BD60 INC SP        ; }
 $BD61 JP $B422      ; Jump to #R$B422.
; This is identical to #R$BD6E except it also handles exiting on a keypress.
@label=PlayAudio_WaitKey_Process
*$BD64 LD A,(DE)     ; Fetch the next byte of music data.
 $BD65 CP $FF        ; {If this is #N$FF (the terminator) then jump to #R$BD79.
 $BD67 JR Z,$BD79    ; }
 $BD69 CALL $BD7B    ; Call #R$BD7B.
 $BD6C JR $BD52      ; Jump to #R$BD52.

; Play Audio
;
; Used by the routines at #R$9960, #R$9F6A, #R$A234 and #R$AA6A.
;
; DE Music data terminated by #N$FF
@label=PlayAudio
c$BD6E DI            ; Disable interrupts.
@label=PlayAudio_Loop
*$BD6F LD A,(DE)     ; Fetch the next byte of music data.
 $BD70 CP $FF        ; {If this is #N$FF (the terminator) then jump to #R$BD79.
 $BD72 JR Z,$BD79    ; }
 $BD74 CALL $BD7B    ; Call #R$BD7B.
 $BD77 JR $BD6F      ; Jump to #R$BD6F.

; Play Audio: Enable Interrupts And Return
;
; Used by the routines at #R$BD51 and #R$BD6E.
@label=PlayAudio_Return
c$BD79 EI            ; Enable interrupts.
 $BD7A RET           ; Return.

; Play Audio: Process Music Data
;
; Used by the routines at #R$BD51 and #R$BD6E.
;
; A Music data byte
; DE Music data terminated by #N$FF
@label=PlayAudio_Process
c$BD7B AND %00111111  ; Keep only bits 0-5.
 $BD7D JR Z,$BDBC     ; If we're left with zero, jump to #R$BDBC.
 $BD7F LD L,A         ; {Creates an offset using #REGh=#N$00 and #REGl=#REGa.
 $BD80 LD H,$00       ; }
 $BD82 ADD HL,HL      ; {#REGhl=#R$BDD2 + (offset * #N$04).
 $BD83 ADD HL,HL      ;
 $BD84 LD BC,$BDD2    ;
 $BD87 ADD HL,BC      ; }
 $BD88 LD B,(HL)      ; {#REGbc=the address held at #REGhl.
 $BD89 INC HL         ;
 $BD8A LD C,(HL)      ;
 $BD8B INC HL         ; }
 $BD8C LD A,(HL)      ; {#REGa=.
 $BD8D INC HL         ;
 $BD8E LD H,(HL)      ;
 $BD8F LD L,A         ; }
 $BD90 LD A,(DE)      ; #REGa=.
 $BD91 RLCA           ;
 $BD92 RLCA           ;
 $BD93 AND %00000011  ; Keep only bits 0-1.
 $BD95 INC A          ;
 $BD96 PUSH DE        ; Stash #REGde on the stack.
 $BD97 LD E,L         ;
 $BD98 LD D,H         ;
*$BD99 DEC A          ;
 $BD9A JR Z,$BD9F     ;
 $BD9C ADD HL,DE      ;
 $BD9D JR $BD99       ;
*$BD9F POP DE         ;
*$BDA0 PUSH BC        ;
 $BDA1 XOR A          ; {Set the border to black.
 $BDA2 OUT ($FE),A    ; }
*$BDA4 DJNZ $BDA4     ;
 $BDA6 DEC C          ;
 $BDA7 JR NZ,$BDA4    ;
 $BDA9 POP BC         ;
 $BDAA PUSH BC        ;
 $BDAB LD A,%00010000 ; {Flip speaker on (set bit 4).
 $BDAD OUT ($FE),A    ; }
*$BDAF DJNZ $BDAF     ; Decrease counter by one and loop back to #R$BDAF until
                      ; counter is zero.
 $BDB1 DEC C          ;
 $BDB2 JR NZ,$BDAF    ;
 $BDB4 POP BC         ;
 $BDB5 DEC HL         ;
 $BDB6 LD A,H         ;
 $BDB7 OR L           ;
 $BDB8 JR NZ,$BDA0    ;
 $BDBA INC DE         ;
 $BDBB RET            ; Return.
*$BDBC LD A,(DE)      ;
 $BDBD INC DE         ;
 $BDBE RLCA           ;
 $BDBF RLCA           ;
 $BDC0 AND %00000011  ; Keep only bits 0-1.
 $BDC2 INC A          ;
 $BDC3 LD L,A         ;
 $BDC4 LD BC,$430B    ; #REGbc=#N$430B.
*$BDC7 PUSH BC        ;
*$BDC8 DEC BC         ;
 $BDC9 LD A,B         ;
 $BDCA OR C           ;
 $BDCB JR NZ,$BDC8    ;
 $BDCD POP BC         ;
 $BDCE DEC L          ;
 $BDCF JR NZ,$BDC7    ;
 $BDD1 RET            ; Return.

; Music Data
@label=MusicData
b$BDD2 DEFB $00,$00,$00,$00,$F4,$0A,$08,$00
 $BDDA DEFB $65,$0A,$09,$00,$DE,$09,$09,$00
 $BDE2 DEFB $5E,$09,$0A,$00,$E7,$08,$0A,$00
 $BDEA DEFB $75,$08,$0B,$00,$0A,$08,$0C,$00
 $BDF2 DEFB $A5,$07,$0C,$00,$45,$07,$0D,$00
 $BDFA DEFB $EB,$06,$0E,$00,$96,$06,$0F,$00
 $BE02 DEFB $46,$06,$0F,$00,$FA,$05,$10,$00
 $BE0A DEFB $B3,$05,$11,$00,$6F,$05,$12,$00
 $BE12 DEFB $2F,$05,$13,$00,$F3,$04,$15,$00
 $BE1A DEFB $F3,$04,$16,$00,$85,$04,$17,$00
 $BE22 DEFB $52,$04,$19,$00,$23,$04,$1A,$00
 $BE2A DEFB $F6,$03,$1C,$00,$CB,$03,$1D,$00
 $BE32 DEFB $A3,$03,$1F,$00,$7D,$03,$21,$00
 $BE3A DEFB $59,$03,$23,$00,$38,$03,$25,$00
 $BE42 DEFB $18,$03,$27,$00,$FA,$02,$29,$00
 $BE4A DEFB $DD,$02,$2C,$00,$C2,$02,$2E,$00
 $BE52 DEFB $A9,$02,$31,$00,$91,$02,$34,$00
 $BE5A DEFB $7B,$02,$37,$00,$66,$02,$3A,$00
 $BE62 DEFB $51,$02,$3E,$00,$3F,$02,$41,$00
 $BE6A DEFB $2D,$02,$45,$00,$1C,$02,$49,$00
 $BE72 DEFB $0C,$02,$4E,$00,$FD,$01,$52,$00
 $BE7A DEFB $EF,$01,$57,$00,$E2,$01,$5D,$00
 $BE82 DEFB $D5,$01,$62,$00,$C9,$01,$68,$00
 $BE8A DEFB $BD,$01,$6E,$00,$B3,$01,$75,$00
 $BE92 DEFB $A9,$01,$7B,$00,$9F,$01,$83,$00
 $BE9A DEFB $96,$01,$8B,$00,$8E,$01,$93,$00
 $BEA2 DEFB $86,$01,$9C,$00,$7E,$01,$A5,$00
 $BEAA DEFB $77,$01,$AF,$00,$71,$01,$B9,$00
 $BEB2 DEFB $6A,$01,$C4,$00,$64,$01,$D0,$00
 $BEBA DEFB $5F,$01,$DC,$00,$59,$01,$E9,$00
 $BEC2 DEFB $54,$01,$F7,$00,$01,$08,$A0,$C3
 $BECA DEFB $6D,$BF

; Routine at BECC
;
; Used by the routine at #R$9D91.
c$BECC LD BC,$BEDE   ; #REGbc=#R$BEDE.
 $BECF LD A,($9693)  ; #REGa=#R$9693.
 $BED2 AND %00001111 ; Keep only bits 0-3.
 $BED4 LD L,A        ;
 $BED5 LD H,$00      ;
 $BED7 ADD HL,BC     ;
 $BED8 LD B,(HL)     ;
 $BED9 LD C,$10      ;
 $BEDB JP $BF6D      ; Jump to #R$BF6D.

; Data block at BEDE
b$BEDE DEFB $20,$30,$40,$50,$60,$70,$80,$90
 $BEE6 DEFB $40,$60,$40,$60,$40,$60,$40,$60

; Routine at BEEE
;
; Used by the routine at #R$A4A1.
c$BEEE LD A,($9695)  ; {#REGl=#R$9695.
 $BEF1 LD L,A        ; }
 $BEF2 LD A,($9693)  ; #REGa=#R$9693.
 $BEF5 AND %00011111 ; Keep only bits 0-4.
 $BEF7 LD H,A        ; Store the result in #REGh.
 $BEF8 LD E,$10      ; #REGe=#N$10.
*$BEFA LD A,(HL)     ;
 $BEFB INC HL        ;
 $BEFC AND %01111111 ; Keep only bits 0-6.
 $BEFE LD B,A        ; Store the result in #REGb.
 $BEFF LD C,$02      ; #REGc=#N$02.
 $BF01 CALL $BF6D    ; Call #R$BF6D.
 $BF04 DEC E         ; Decrease #REGe by one.
 $BF05 JR NZ,$BEFA   ;
 $BF07 RET           ; Return.

; Routine at BF08
;
; Used by the routine at #R$A3C5.
c$BF08 LD A,(IX+$00) ; #REGa=#REGix+#N$00 (sprite reference).
 $BF0B CPL           ; Flip the bits.
 $BF0C RRCA          ;
 $BF0D RRCA          ;
 $BF0E RRCA          ;
 $BF0F AND %11100000 ; Keep only bits 5-7.
 $BF11 LD B,A        ; Store the result in #REGb.
 $BF12 LD C,$06      ; #REGc=#N$06.
 $BF14 JP $BF6D      ; Jump to #R$BF6D.

; Routine at BF17
;
; Used by the routines at #R$9E72, #R$AAED and #R$AD69.
c$BF17 LD C,$30      ; #REGc=#N$30.
*$BF19 LD A,C        ;
 $BF1A OR %00011000  ; Set bits 3-4.
 $BF1C DAA           ;
 $BF1D LD B,A        ;
 $BF1E CALL $BF74    ; Call #R$BF74.
 $BF21 DEC C         ;
 $BF22 JR NZ,$BF19   ;
 $BF24 RET           ; Return.

; Routine at BF25
;
; Used by the routines at #R$A323 and #R$B743.
c$BF25 LD BC,$4030   ; #REGbc=#N($40,$02,$03),#N($30,$02,$03).
 $BF28 JR $BF6D      ; Jump to #R$BF6D.

; Routine at BF2A
;
; Used by the routines at #R$A737, #R$AEA1 and #R$B6D7.
c$BF2A LD BC,$8010   ; #REGbc=#N($80,$02,$03),#N($10,$02,$03).
 $BF2D JR $BF6D      ; Jump to #R$BF6D.

; Routine at BF2F
;
; Used by the routine at #R$AA00.
c$BF2F LD C,$30      ; #REGc=#N$30.
*$BF31 LD A,C        ;
 $BF32 XOR $55       ;
 $BF34 ADD A,C       ;
 $BF35 LD B,A        ;
 $BF36 CALL $BF74    ; Call #R$BF74.
 $BF39 DEC C         ;
 $BF3A JR NZ,$BF31   ;
 $BF3C RET           ; Return.

; Routine at BF3D
;
; Used by the routine at #R$AAED.
c$BF3D ADD A,(IX+$03) ;
 $BF40 ADD A,(IX+$04) ;
 $BF43 RLCA           ;
 $BF44 RLCA           ;
 $BF45 LD B,A         ;
 $BF46 LD C,$08       ; #REGc=#N$08.
 $BF48 JP $BF6D       ; Jump to #R$BF6D.

; Routine at BF4B
;
; Used by the routines at #R$ADD0 and #R$AEEF.
c$BF4B CALL $BF54    ; Call #R$BF54.
 $BF4E LD A,(IX+$05) ;
 $BF51 CP $45        ;
 $BF53 RET NZ        ;
*$BF54 LD HL,$96B3   ; #REGhl=#R$96B3.
 $BF57 INC (HL)      ;
 $BF58 LD A,(HL)     ;
 $BF59 BIT 3,A       ;
 $BF5B JR Z,$BF65    ;
 $BF5D AND %00000111 ; Keep only bits 0-2.
 $BF5F RET NZ        ;
 $BF60 LD BC,$4004   ; #REGbc=#N$4004.
 $BF63 JR $BF6D      ; Jump to #R$BF6D.
*$BF65 AND %00000111 ; Keep only bits 0-2.
 $BF67 RET NZ        ;
 $BF68 LD BC,$6004   ; #REGbc=#N$6004.
 $BF6B JR $BF6D      ; Jump to #R$BF6D.

; Play Wave Sequence
;
; Used by the routines at #R$A9BE, #R$BECC, #R$BEEE, #R$BF08, #R$BF25, #R$BF2A,
; #R$BF3D and #R$BF4B.
;
; B Duration of wave
; C Number of times to repeat
@label=PlayWaveSequence
c$BF6D CALL $BF74    ; Call #R$BF74.
 $BF70 DEC C         ; Decrease the note counter by one.
 $BF71 JR NZ,$BF6D   ; Keep looping back to #R$BF6D until the note counter is
                     ; zero.
 $BF73 RET           ; Return.

; Play Square Wave Sound
;
; Used by the routines at #R$BF17, #R$BF2F and #R$BF6D.
;
; B Duration of wave
;
; Flip speaker on (set bit 4).
@label=PlaySquareWave
c$BF74 LD A,%00010000 ; {#REGa=#N$10 (speaker on = bit 4).
 $BF76 OUT ($FE),A    ; }
 $BF78 LD A,B         ; #REGa=#REGb.
@label=PlaySquareWave_Loop
*$BF79 DJNZ $BF79     ; Decrease duration by one and loop back to #R$BF79 until
                      ; counter is zero.
 $BF7B LD B,A         ; #REGb=#REGa.
; Flip speaker off (unset bit 4).
 $BF7C XOR A          ; {Speaker off.
 $BF7D OUT ($FE),A    ; }
 $BF7F LD A,B         ; #REGa=#REGb.
@label=Silence_Loop
*$BF80 DJNZ $BF80     ; Decrease duration by one and loop back to #R$BF80 until
                      ; counter is zero.
 $BF82 LD B,A         ; #REGb=#REGa.
 $BF83 RET            ; Return.
; View the equivalent code in;
; #LIST
; { #PSSST$64AA }
; LIST#

; Sprites Table
@label=SpritesTable
w$BF84 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF86 DEFW $D822    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF88 DEFW $D84E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF8A DEFW $D889    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF8C DEFW $D8D0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF8E DEFW $D917    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF90 DEFW $D95E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF92 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF94 DEFW $D747    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF96 DEFW $D78E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF98 DEFW $D7D8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF9A DEFW $D78E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF9C DEFW $D747    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BF9E DEFW $D706    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFA0 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFA2 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFA4 DEFW $C514    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFA6 DEFW $C540    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFA8 DEFW $C56E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFAA DEFW $C540    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFAC DEFW $C720    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFAE DEFW $C74C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFB0 DEFW $C77A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFB2 DEFW $C74C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFB4 DEFW $C40C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFB6 DEFW $C438    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFB8 DEFW $C464    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFBA DEFW $C438    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFBC DEFW $C490    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFBE DEFW $C4BC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFC0 DEFW $C4E8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFC2 DEFW $C4BC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFC4 DEFW $C59A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFC6 DEFW $C5DB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFC8 DEFW $C61C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFCA DEFW $C65D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFCC DEFW $C69E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFCE DEFW $C65D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFD0 DEFW $C6DF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFD2 DEFW $C5DB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFD4 DEFW $C7A6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFD6 DEFW $C7E7    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFD8 DEFW $C828    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFDA DEFW $C869    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFDC DEFW $C8AA    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFDE DEFW $C869    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFE0 DEFW $C8EB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFE2 DEFW $C7E7    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFE4 DEFW $C97A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFE6 DEFW $C92C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFE8 DEFW $CA16    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFEA DEFW $C9C8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFEC DEFW $E8FC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFEE DEFW $E92A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFF0 DEFW $E958    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFF2 DEFW $E988    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFF4 DEFW $CBDE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFF6 DEFW $CC0E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFF8 DEFW $CC3E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFFA DEFW $CC0E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFFC DEFW $CC6E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $BFFE DEFW $CC9E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C000 DEFW $CCCE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C002 DEFW $CC9E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C004 DEFW $D282    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C006 DEFW $D2B0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C008 DEFW $D2D6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C00A DEFW $D2B0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C00C DEFW $D2FC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C00E DEFW $D32A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C010 DEFW $D350    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C012 DEFW $D32A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C014 DEFW $D376    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C016 DEFW $D37E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C018 DEFW $D386    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C01A DEFW $D392    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C01C DEFW $D3A0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C01E DEFW $D3B2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C020 DEFW $D3CA    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C022 DEFW $D3E6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C024 DEFW $CF06    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C026 DEFW $CF64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C028 DEFW $CFC2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C02A DEFW $CF64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C02C DEFW $D020    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C02E DEFW $D07E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C030 DEFW $D0DC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C032 DEFW $D07E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C034 DEFW $D13A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C036 DEFW $D1BE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C038 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C03A DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C03C DEFW $D17C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C03E DEFW $D220    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C040 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C042 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C044 DEFW $CCFE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C046 DEFW $CD3F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C048 DEFW $CD83    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C04A DEFW $CDC4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C04C DEFW $CE08    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C04E DEFW $CE49    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C050 DEFW $CE87    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C052 DEFW $CEC8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C054 DEFW $C38C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C056 DEFW $C3B0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C058 DEFW $C3CC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C05A DEFW $C3F0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C05C DEFW $D418    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C05E DEFW $D440    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C060 DEFW $D468    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C062 DEFW $D490    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C064 DEFW $D4B8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C066 DEFW $D4E4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C068 DEFW $D50E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C06A DEFW $D53A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C06C DEFW $D564    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C06E DEFW $D58D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C070 DEFW $D5B9    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C072 DEFW $D5E5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C074 DEFW $D60E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C076 DEFW $D637    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C078 DEFW $D65A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C07A DEFW $D67D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C07C DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C07E DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C080 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C082 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C084 DEFW $D999    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C086 DEFW $D9BB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C088 DEFW $D9DD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C08A DEFW $D9FF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C08C DEFW $DA21    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C08E DEFW $DA43    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C090 DEFW $DA65    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C092 DEFW $DA87    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C094 DEFW $D999    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C096 DEFW $D9BB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C098 DEFW $D9DD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C09A DEFW $D9FF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C09C DEFW $DA21    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C09E DEFW $DA21    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0A0 DEFW $DA65    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0A2 DEFW $DA87    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0A4 DEFW $E7D6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0A6 DEFW $E7B4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0A8 DEFW $E792    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0AA DEFW $E770    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0AC DEFW $E7F8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0AE DEFW $E87A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0B0 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0B2 DEFW $C10C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0B4 DEFW $E9B8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0B6 DEFW $E9D5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0B8 DEFW $E9F2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0BA DEFW $EA0F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0BC DEFW $EA2C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0BE DEFW $EA64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0C0 DEFW $EAA8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0C2 DEFW $EAE0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0C4 DEFW $CAAE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0C6 DEFW $CAF8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0C8 DEFW $CB46    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0CA DEFW $CB90    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0CC DEFW $CA64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0CE DEFW $CA64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0D0 DEFW $CA64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0D2 DEFW $CA64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0D4 DEFW $DB4C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0D6 DEFW $DC22    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0D8 DEFW $DB92    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0DA DEFW $DBDC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0DC DEFW $DB0B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0DE DEFW $DB0B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0E0 DEFW $DB0B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0E2 DEFW $DB0B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0E4 DEFW $EBA4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0E6 DEFW $EBCA    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0E8 DEFW $EBEA    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0EA DEFW $EC10    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0EC DEFW $EB24    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0EE DEFW $EB46    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0F0 DEFW $EB64    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0F2 DEFW $EB86    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0F4 DEFW $C270    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0F6 DEFW $C2B1    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0F8 DEFW $C2F2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0FA DEFW $C333    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0FC DEFW $C1E8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C0FE DEFW $C206    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C100 DEFW $C22C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C102 DEFW $C24A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C104 DEFW $C10E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C106 DEFW $C146    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C108 DEFW $C17B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
 $C10A DEFW $C1B3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $BF84) / $02)) #SPRITENAME((#PC - $BF84)
                     ; / $02).
; View the equivalent code in;
; #LIST
; { #COOKIE$7702 }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Sprite: None
b$C10C DEFB $00      ; Width = #N(#PEEK(#PC)) bytes.
 $C10D DEFB $00      ; Height = #N(#PEEK(#PC)) pixels.

; Sprite: Earwig
;
; .
;
; .
;
; Frame 1.
b$C10E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C10F DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $C110 DEFB $02,$10,$00 ; {#GRAPHIC$C0(C0)
 $C113 DEFB $03,$60,$00 ;
 $C116 DEFB $05,$80,$00 ;
 $C119 DEFB $05,$3C,$00 ;
 $C11C DEFB $02,$C0,$00 ;
 $C11F DEFB $01,$80,$00 ;
 $C122 DEFB $33,$8F,$8E ;
 $C125 DEFB $DB,$BF,$D9 ;
 $C128 DEFB $7F,$FF,$B0 ;
 $C12B DEFB $7D,$E7,$B0 ;
 $C12E DEFB $DA,$B8,$D9 ;
 $C131 DEFB $33,$8F,$8E ;
 $C134 DEFB $01,$80,$00 ;
 $C137 DEFB $02,$40,$00 ;
 $C13A DEFB $05,$3E,$00 ;
 $C13D DEFB $05,$80,$00 ;
 $C140 DEFB $04,$60,$00 ;
 $C143 DEFB $02,$10,$00 ; }
; Frame 2.
 $C146 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C147 DEFB $11         ; Height = #N(#PEEK(#PC)) pixels.
 $C148 DEFB $00,$00,$00 ; {#GRAPHIC$C1(C1)
 $C14B DEFB $00,$04,$00 ;
 $C14E DEFB $00,$38,$00 ;
 $C151 DEFB $3C,$40,$00 ;
 $C154 DEFB $02,$8F,$00 ;
 $C157 DEFB $01,$F0,$00 ;
 $C15A DEFB $33,$8F,$8E ;
 $C15D DEFB $5B,$BF,$D9 ;
 $C160 DEFB $7F,$FF,$B0 ;
 $C163 DEFB $7D,$E7,$B0 ;
 $C166 DEFB $5A,$B8,$D9 ;
 $C169 DEFB $33,$8F,$8E ;
 $C16C DEFB $01,$E0,$00 ;
 $C16F DEFB $02,$9F,$00 ;
 $C172 DEFB $3C,$40,$00 ;
 $C175 DEFB $00,$38,$00 ;
 $C178 DEFB $00,$04,$00 ; }
; Frame 3.
 $C17B DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C17C DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $C17D DEFB $00,$08,$40 ; {#GRAPHIC$C2(C2)
 $C180 DEFB $00,$06,$20 ;
 $C183 DEFB $00,$01,$A0 ;
 $C186 DEFB $00,$3C,$A0 ;
 $C189 DEFB $00,$03,$40 ;
 $C18C DEFB $00,$01,$80 ;
 $C18F DEFB $71,$F1,$CC ;
 $C192 DEFB $9B,$FB,$DB ;
 $C195 DEFB $0D,$FF,$FE ;
 $C198 DEFB $0D,$E7,$BE ;
 $C19B DEFB $9B,$1D,$5B ;
 $C19E DEFB $71,$F1,$CC ;
 $C1A1 DEFB $00,$01,$80 ;
 $C1A4 DEFB $00,$02,$40 ;
 $C1A7 DEFB $00,$7C,$A0 ;
 $C1AA DEFB $00,$01,$A0 ;
 $C1AD DEFB $00,$06,$20 ;
 $C1B0 DEFB $00,$08,$40 ; }
; Frame 4.
 $C1B3 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C1B4 DEFB $11         ; Height = #N(#PEEK(#PC)) pixels.
 $C1B5 DEFB $00,$00,$00 ; {#GRAPHIC$C1(C3)
 $C1B8 DEFB $00,$20,$00 ;
 $C1BB DEFB $00,$1C,$00 ;
 $C1BE DEFB $00,$02,$3C ;
 $C1C1 DEFB $00,$F1,$40 ;
 $C1C4 DEFB $00,$0F,$80 ;
 $C1C7 DEFB $71,$F1,$CC ;
 $C1CA DEFB $9B,$FD,$DA ;
 $C1CD DEFB $0D,$FF,$FE ;
 $C1D0 DEFB $0D,$E7,$BE ;
 $C1D3 DEFB $9B,$1D,$5A ;
 $C1D6 DEFB $71,$F1,$CC ;
 $C1D9 DEFB $00,$07,$80 ;
 $C1DC DEFB $00,$F9,$20 ;
 $C1DF DEFB $00,$02,$3C ;
 $C1E2 DEFB $00,$1C,$00 ;
 $C1E5 DEFB $00,$20,$00 ; }

; Sprite: Flea
;
; .
;
; .
;
; Left Frame 1.
b$C1E8 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C1E9 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $C1EA DEFB $00,$00  ; {#GRAPHIC$BC(BC)
 $C1EC DEFB $1D,$C0  ;
 $C1EE DEFB $06,$9F  ;
 $C1F0 DEFB $0B,$3F  ;
 $C1F2 DEFB $0A,$1E  ;
 $C1F4 DEFB $14,$EE  ;
 $C1F6 DEFB $17,$9C  ;
 $C1F8 DEFB $30,$78  ;
 $C1FA DEFB $BE,$F0  ;
 $C1FC DEFB $DD,$E0  ;
 $C1FE DEFB $F3,$E0  ;
 $C200 DEFB $4F,$80  ;
 $C202 DEFB $4E,$00  ;
 $C204 DEFB $38,$00  ; }
; Left Frame 2.
 $C206 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C207 DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $C208 DEFB $00,$00  ; {#GRAPHIC$BD(BD)
 $C20A DEFB $00,$00  ;
 $C20C DEFB $00,$20  ;
 $C20E DEFB $02,$20  ;
 $C210 DEFB $02,$40  ;
 $C212 DEFB $04,$80  ;
 $C214 DEFB $09,$9F  ;
 $C216 DEFB $13,$3F  ;
 $C218 DEFB $16,$7E  ;
 $C21A DEFB $33,$DE  ;
 $C21C DEFB $31,$3C  ;
 $C21E DEFB $3F,$78  ;
 $C220 DEFB $DC,$F0  ;
 $C222 DEFB $E3,$E0  ;
 $C224 DEFB $FF,$E0  ;
 $C226 DEFB $4F,$80  ;
 $C228 DEFB $4E,$00  ;
 $C22A DEFB $38,$00  ; }
; Right Frame 1.
 $C22C DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C22D DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $C22E DEFB $00,$00  ; {#GRAPHIC$BE(BE)
 $C230 DEFB $03,$B8  ;
 $C232 DEFB $F9,$60  ;
 $C234 DEFB $FC,$B0  ;
 $C236 DEFB $78,$50  ;
 $C238 DEFB $77,$28  ;
 $C23A DEFB $39,$E8  ;
 $C23C DEFB $1E,$0C  ;
 $C23E DEFB $0F,$7D  ;
 $C240 DEFB $07,$BB  ;
 $C242 DEFB $07,$CF  ;
 $C244 DEFB $01,$F2  ;
 $C246 DEFB $00,$72  ;
 $C248 DEFB $00,$1C  ; }
; Right Frame 2.
 $C24A DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C24B DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $C24C DEFB $00,$00  ; {#GRAPHIC$BF(BF)
 $C24E DEFB $00,$00  ;
 $C250 DEFB $04,$00  ;
 $C252 DEFB $04,$40  ;
 $C254 DEFB $02,$40  ;
 $C256 DEFB $01,$20  ;
 $C258 DEFB $F9,$90  ;
 $C25A DEFB $FC,$C8  ;
 $C25C DEFB $7E,$68  ;
 $C25E DEFB $7B,$CC  ;
 $C260 DEFB $3C,$8C  ;
 $C262 DEFB $1E,$FC  ;
 $C264 DEFB $0F,$3B  ;
 $C266 DEFB $07,$C7  ;
 $C268 DEFB $07,$FF  ;
 $C26A DEFB $01,$F2  ;
 $C26C DEFB $00,$72  ;
 $C26E DEFB $00,$1C  ; }

; Sprite: Skunk
;
; .
;
; .
;
; Left Frame 1.
b$C270 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C271 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C272 DEFB $00,$00,$00 ; {#GRAPHIC$B8(B8)
 $C275 DEFB $01,$7C,$00 ;
 $C278 DEFB $01,$0E,$70 ;
 $C27B DEFB $03,$1E,$88 ;
 $C27E DEFB $03,$B9,$E4 ;
 $C281 DEFB $7F,$77,$32 ;
 $C284 DEFB $67,$7E,$F2 ;
 $C287 DEFB $37,$BD,$72 ;
 $C28A DEFB $0F,$FA,$32 ;
 $C28D DEFB $05,$84,$32 ;
 $C290 DEFB $00,$F8,$32 ;
 $C293 DEFB $00,$00,$64 ;
 $C296 DEFB $00,$00,$64 ;
 $C299 DEFB $00,$00,$C8 ;
 $C29C DEFB $00,$00,$90 ;
 $C29F DEFB $00,$01,$A0 ;
 $C2A2 DEFB $00,$01,$20 ;
 $C2A5 DEFB $00,$01,$40 ;
 $C2A8 DEFB $00,$01,$A4 ;
 $C2AB DEFB $00,$00,$D8 ;
 $C2AE DEFB $00,$00,$70 ; }
; Left Frame 2.
 $C2B1 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C2B2 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C2B3 DEFB $00,$00,$00 ; {#GRAPHIC$B9(B9)
 $C2B6 DEFB $03,$1E,$00 ;
 $C2B9 DEFB $06,$06,$70 ;
 $C2BC DEFB $03,$1E,$88 ;
 $C2BF DEFB $07,$BD,$E4 ;
 $C2C2 DEFB $7F,$BB,$32 ;
 $C2C5 DEFB $67,$BE,$F2 ;
 $C2C8 DEFB $37,$DD,$72 ;
 $C2CB DEFB $0F,$FA,$32 ;
 $C2CE DEFB $05,$84,$32 ;
 $C2D1 DEFB $00,$F8,$32 ;
 $C2D4 DEFB $00,$00,$64 ;
 $C2D7 DEFB $00,$00,$64 ;
 $C2DA DEFB $00,$00,$C8 ;
 $C2DD DEFB $00,$00,$90 ;
 $C2E0 DEFB $00,$01,$A0 ;
 $C2E3 DEFB $00,$01,$20 ;
 $C2E6 DEFB $00,$01,$40 ;
 $C2E9 DEFB $00,$01,$A4 ;
 $C2EC DEFB $00,$00,$D8 ;
 $C2EF DEFB $00,$00,$70 ; }
; Right Frame 1.
 $C2F2 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C2F3 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C2F4 DEFB $00,$00,$00 ; {#GRAPHIC$BA(BA)
 $C2F7 DEFB $00,$3E,$80 ;
 $C2FA DEFB $0E,$70,$80 ;
 $C2FD DEFB $11,$78,$C0 ;
 $C300 DEFB $27,$9D,$C0 ;
 $C303 DEFB $4C,$EE,$FE ;
 $C306 DEFB $4F,$7E,$E6 ;
 $C309 DEFB $4E,$BD,$EC ;
 $C30C DEFB $4C,$5F,$F0 ;
 $C30F DEFB $4C,$21,$A0 ;
 $C312 DEFB $4C,$1F,$00 ;
 $C315 DEFB $26,$00,$00 ;
 $C318 DEFB $26,$00,$00 ;
 $C31B DEFB $13,$00,$00 ;
 $C31E DEFB $09,$00,$00 ;
 $C321 DEFB $05,$80,$00 ;
 $C324 DEFB $04,$80,$00 ;
 $C327 DEFB $02,$80,$00 ;
 $C32A DEFB $25,$80,$00 ;
 $C32D DEFB $1B,$00,$00 ;
 $C330 DEFB $0E,$00,$00 ; }
; Right Frame 2.
 $C333 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C334 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C335 DEFB $00,$00,$00 ; {#GRAPHIC$BB(BB)
 $C338 DEFB $00,$78,$30 ;
 $C33B DEFB $07,$60,$60 ;
 $C33E DEFB $11,$78,$C0 ;
 $C341 DEFB $27,$BD,$E0 ;
 $C344 DEFB $4C,$DD,$FE ;
 $C347 DEFB $4F,$7D,$E6 ;
 $C34A DEFB $4E,$BB,$EC ;
 $C34D DEFB $4C,$5F,$F0 ;
 $C350 DEFB $4C,$21,$A0 ;
 $C353 DEFB $4C,$1F,$00 ;
 $C356 DEFB $26,$00,$00 ;
 $C359 DEFB $26,$00,$00 ;
 $C35C DEFB $13,$00,$00 ;
 $C35F DEFB $09,$00,$00 ;
 $C362 DEFB $05,$80,$00 ;
 $C365 DEFB $04,$80,$00 ;
 $C368 DEFB $02,$80,$00 ;
 $C36B DEFB $25,$80,$00 ;
 $C36E DEFB $1B,$00,$00 ;
 $C371 DEFB $0E,$00,$00 ; }

; Attributes?
b$C374 DEFB $7C,$E6,$80,$58,$88,$E5,$50,$58
 $C37C DEFB $94,$E4,$80,$38,$A0,$E3,$50,$38
 $C384 DEFB $00,$00

; Special Room (Game Completed)
;
; This is the room data showing on the Game Completed screen. See #R$9F6A.
; .
; #UDGTABLE
; { #ROOM(#PC)(room-complete) }
; UDGTABLE#
@label=Room_Special_Complete
w$C386 DEFW $E1EC    ; Background graphic #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100).
 $C388 DEFB $40,$58  ; X/ Y position = #N(#EVAL(#PEEK(#PC) / $08)) /
                     ; #N(#EVAL(#PEEK(#PC + $01) / $08)).
 $C38A DEFW $0000    ; Terminator.

; Sprite: Bat
;
; .
;
; .
;
; Frame 1.
b$C38C DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C38D DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $C38E DEFB $00,$00  ; {#GRAPHIC$68(68)
 $C390 DEFB $80,$00  ;
 $C392 DEFB $C0,$10  ;
 $C394 DEFB $F0,$30  ;
 $C396 DEFB $F0,$62  ;
 $C398 DEFB $68,$E6  ;
 $C39A DEFB $6E,$FC  ;
 $C39C DEFB $2D,$F8  ;
 $C39E DEFB $37,$F0  ;
 $C3A0 DEFB $1F,$80  ;
 $C3A2 DEFB $2F,$70  ;
 $C3A4 DEFB $77,$F0  ;
 $C3A6 DEFB $1D,$3E  ;
 $C3A8 DEFB $31,$C0  ;
 $C3AA DEFB $00,$FC  ;
 $C3AC DEFB $00,$7E  ;
 $C3AE DEFB $00,$1F  ; }
; Frame 2.
 $C3B0 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C3B1 DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $C3B2 DEFB $01,$80  ; {#GRAPHIC$69(69)
 $C3B4 DEFB $07,$00  ;
 $C3B6 DEFB $0F,$10  ;
 $C3B8 DEFB $0E,$30  ;
 $C3BA DEFB $1E,$62  ;
 $C3BC DEFB $1D,$E6  ;
 $C3BE DEFB $1B,$FC  ;
 $C3C0 DEFB $0F,$F8  ;
 $C3C2 DEFB $1F,$E0  ;
 $C3C4 DEFB $2F,$9F  ;
 $C3C6 DEFB $77,$FE  ;
 $C3C8 DEFB $1D,$FC  ;
 $C3CA DEFB $00,$70  ; }
; Frame 1.
 $C3CC DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C3CD DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $C3CE DEFB $00,$00  ; {#GRAPHIC$6A(6A)
 $C3D0 DEFB $00,$01  ;
 $C3D2 DEFB $08,$03  ;
 $C3D4 DEFB $0C,$0F  ;
 $C3D6 DEFB $46,$0F  ;
 $C3D8 DEFB $67,$16  ;
 $C3DA DEFB $3F,$76  ;
 $C3DC DEFB $1F,$B4  ;
 $C3DE DEFB $0F,$EC  ;
 $C3E0 DEFB $01,$F8  ;
 $C3E2 DEFB $0E,$F4  ;
 $C3E4 DEFB $0F,$EE  ;
 $C3E6 DEFB $7C,$B8  ;
 $C3E8 DEFB $03,$8C  ;
 $C3EA DEFB $3F,$00  ;
 $C3EC DEFB $7E,$00  ;
 $C3EE DEFB $F8,$00  ; }
; Frame 2.
 $C3F0 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $C3F1 DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $C3F2 DEFB $01,$80  ; {#GRAPHIC$6B(6B)
 $C3F4 DEFB $00,$E0  ;
 $C3F6 DEFB $08,$F0  ;
 $C3F8 DEFB $0C,$70  ;
 $C3FA DEFB $46,$78  ;
 $C3FC DEFB $67,$B8  ;
 $C3FE DEFB $3F,$D8  ;
 $C400 DEFB $1F,$F0  ;
 $C402 DEFB $07,$F8  ;
 $C404 DEFB $F9,$F4  ;
 $C406 DEFB $7F,$EE  ;
 $C408 DEFB $3F,$B8  ;
 $C40A DEFB $0E,$0C  ; }

; Sprite: Sabreman
;
; .
;
; .
;
; Up Frame 1.
b$C40C DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C40D DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C40E DEFB $0F,$00     ; {#GRAPHIC$18(18*)
 $C410 DEFB $07,$70     ;
 $C412 DEFB $00,$78     ;
 $C414 DEFB $06,$18     ;
 $C416 DEFB $0F,$E0     ;
 $C418 DEFB $0F,$C0     ;
 $C41A DEFB $00,$30     ;
 $C41C DEFB $0F,$B8     ;
 $C41E DEFB $17,$DC     ;
 $C420 DEFB $37,$EC     ;
 $C422 DEFB $3F,$FC     ;
 $C424 DEFB $18,$18     ;
 $C426 DEFB $07,$E0     ;
 $C428 DEFB $1F,$F8     ;
 $C42A DEFB $38,$1C     ;
 $C42C DEFB $67,$E6     ;
 $C42E DEFB $5B,$DA     ;
 $C430 DEFB $1B,$D8     ;
 $C432 DEFB $0D,$B0     ;
 $C434 DEFB $06,$60     ;
 $C436 DEFB $03,$C0     ; }
; Up Frame 2.
 $C438 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C439 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C43A DEFB $0E,$70     ; {#GRAPHIC$19(19*)
 $C43C DEFB $06,$60     ;
 $C43E DEFB $00,$00     ;
 $C440 DEFB $0E,$70     ;
 $C442 DEFB $07,$E0     ;
 $C444 DEFB $07,$E0     ;
 $C446 DEFB $20,$04     ;
 $C448 DEFB $27,$E4     ;
 $C44A DEFB $37,$EC     ;
 $C44C DEFB $37,$EC     ;
 $C44E DEFB $3F,$FC     ;
 $C450 DEFB $18,$18     ;
 $C452 DEFB $07,$E0     ;
 $C454 DEFB $1F,$F8     ;
 $C456 DEFB $38,$1C     ;
 $C458 DEFB $67,$E6     ;
 $C45A DEFB $5B,$BA     ;
 $C45C DEFB $1B,$D8     ;
 $C45E DEFB $0D,$B0     ;
 $C460 DEFB $06,$60     ;
 $C462 DEFB $03,$C0     ; }
; Up Frame 3.
 $C464 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C465 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C466 DEFB $00,$F0     ; {#GRAPHIC$1A(1A*)
 $C468 DEFB $0E,$E0     ;
 $C46A DEFB $1E,$00     ;
 $C46C DEFB $18,$60     ;
 $C46E DEFB $07,$F0     ;
 $C470 DEFB $03,$F0     ;
 $C472 DEFB $0C,$00     ;
 $C474 DEFB $1D,$F0     ;
 $C476 DEFB $3B,$E8     ;
 $C478 DEFB $37,$EC     ;
 $C47A DEFB $3F,$FC     ;
 $C47C DEFB $18,$18     ;
 $C47E DEFB $07,$E0     ;
 $C480 DEFB $1F,$F8     ;
 $C482 DEFB $38,$1C     ;
 $C484 DEFB $67,$E6     ;
 $C486 DEFB $5B,$DA     ;
 $C488 DEFB $1B,$D8     ;
 $C48A DEFB $0D,$B0     ;
 $C48C DEFB $06,$60     ;
 $C48E DEFB $03,$C0     ; }
; Down Frame 1.
 $C490 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C491 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C492 DEFB $0F,$00     ; {#GRAPHIC$1C(1C*)
 $C494 DEFB $07,$38     ;
 $C496 DEFB $00,$3E     ;
 $C498 DEFB $1E,$4E     ;
 $C49A DEFB $0B,$F0     ;
 $C49C DEFB $05,$F0     ;
 $C49E DEFB $0E,$08     ;
 $C4A0 DEFB $1D,$F4     ;
 $C4A2 DEFB $3B,$F4     ;
 $C4A4 DEFB $3B,$FC     ;
 $C4A6 DEFB $18,$18     ;
 $C4A8 DEFB $07,$E0     ;
 $C4AA DEFB $0F,$F0     ;
 $C4AC DEFB $15,$A8     ;
 $C4AE DEFB $16,$68     ;
 $C4B0 DEFB $60,$06     ;
 $C4B2 DEFB $3F,$FC     ;
 $C4B4 DEFB $1B,$D8     ;
 $C4B6 DEFB $1B,$D8     ;
 $C4B8 DEFB $0D,$B0     ;
 $C4BA DEFB $03,$C0     ; }
; Down Frame 2.
 $C4BC DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C4BD DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C4BE DEFB $1E,$78     ; {#GRAPHIC$1D(1D*)
 $C4C0 DEFB $0E,$70     ;
 $C4C2 DEFB $00,$00     ;
 $C4C4 DEFB $0E,$70     ;
 $C4C6 DEFB $07,$E0     ;
 $C4C8 DEFB $27,$E4     ;
 $C4CA DEFB $30,$0C     ;
 $C4CC DEFB $37,$EC     ;
 $C4CE DEFB $3F,$FC     ;
 $C4D0 DEFB $3F,$FC     ;
 $C4D2 DEFB $18,$18     ;
 $C4D4 DEFB $07,$E0     ;
 $C4D6 DEFB $0F,$F0     ;
 $C4D8 DEFB $15,$A8     ;
 $C4DA DEFB $16,$68     ;
 $C4DC DEFB $60,$06     ;
 $C4DE DEFB $3F,$FC     ;
 $C4E0 DEFB $1B,$D8     ;
 $C4E2 DEFB $1B,$D8     ;
 $C4E4 DEFB $0D,$B0     ;
 $C4E6 DEFB $03,$C0     ; }
; Down Frame 3.
 $C4E8 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C4E9 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C4EA DEFB $00,$F0     ; {#GRAPHIC$1E(1E*)
 $C4EC DEFB $1C,$E0     ;
 $C4EE DEFB $7C,$00     ;
 $C4F0 DEFB $72,$78     ;
 $C4F2 DEFB $0F,$D0     ;
 $C4F4 DEFB $0F,$A0     ;
 $C4F6 DEFB $10,$70     ;
 $C4F8 DEFB $2F,$B8     ;
 $C4FA DEFB $2F,$DC     ;
 $C4FC DEFB $3F,$DC     ;
 $C4FE DEFB $18,$18     ;
 $C500 DEFB $07,$E0     ;
 $C502 DEFB $0F,$F0     ;
 $C504 DEFB $15,$A8     ;
 $C506 DEFB $16,$68     ;
 $C508 DEFB $60,$06     ;
 $C50A DEFB $3F,$FC     ;
 $C50C DEFB $1B,$D8     ;
 $C50E DEFB $1B,$D8     ;
 $C510 DEFB $0D,$B0     ;
 $C512 DEFB $03,$C0     ; }
; Left Frame 1.
 $C514 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C515 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C516 DEFB $0E,$70     ; {#GRAPHIC$10(10*)
 $C518 DEFB $1E,$38     ;
 $C51A DEFB $10,$08     ;
 $C51C DEFB $07,$70     ;
 $C51E DEFB $02,$E4     ;
 $C520 DEFB $07,$F4     ;
 $C522 DEFB $01,$04     ;
 $C524 DEFB $00,$74     ;
 $C526 DEFB $06,$34     ;
 $C528 DEFB $07,$24     ;
 $C52A DEFB $02,$2E     ;
 $C52C DEFB $00,$04     ;
 $C52E DEFB $07,$E0     ;
 $C530 DEFB $1F,$CC     ;
 $C532 DEFB $1B,$38     ;
 $C534 DEFB $04,$C8     ;
 $C536 DEFB $03,$28     ;
 $C538 DEFB $0C,$E8     ;
 $C53A DEFB $3A,$E8     ;
 $C53C DEFB $07,$30     ;
 $C53E DEFB $03,$E0     ; }
; Left Frame 2.
 $C540 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C541 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $C542 DEFB $07,$80     ; {#GRAPHIC$11(11*)
 $C544 DEFB $03,$80     ;
 $C546 DEFB $01,$80     ;
 $C548 DEFB $00,$00     ;
 $C54A DEFB $03,$C0     ;
 $C54C DEFB $03,$E4     ;
 $C54E DEFB $06,$74     ;
 $C550 DEFB $00,$44     ;
 $C552 DEFB $07,$34     ;
 $C554 DEFB $07,$34     ;
 $C556 DEFB $06,$34     ;
 $C558 DEFB $02,$6E     ;
 $C55A DEFB $00,$04     ;
 $C55C DEFB $07,$E0     ;
 $C55E DEFB $1F,$CC     ;
 $C560 DEFB $1B,$38     ;
 $C562 DEFB $04,$C8     ;
 $C564 DEFB $03,$28     ;
 $C566 DEFB $0C,$E8     ;
 $C568 DEFB $3A,$E8     ;
 $C56A DEFB $07,$30     ;
 $C56C DEFB $03,$E0     ; }
; Left Frame 3.
 $C56E DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C56F DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C570 DEFB $0E,$70     ; {#GRAPHIC$12(12*)
 $C572 DEFB $1E,$38     ;
 $C574 DEFB $10,$08     ;
 $C576 DEFB $07,$70     ;
 $C578 DEFB $03,$A4     ;
 $C57A DEFB $07,$F4     ;
 $C57C DEFB $00,$24     ;
 $C57E DEFB $0F,$34     ;
 $C580 DEFB $0F,$84     ;
 $C582 DEFB $07,$14     ;
 $C584 DEFB $02,$2E     ;
 $C586 DEFB $00,$04     ;
 $C588 DEFB $07,$E0     ;
 $C58A DEFB $1F,$CC     ;
 $C58C DEFB $1B,$38     ;
 $C58E DEFB $04,$C8     ;
 $C590 DEFB $03,$28     ;
 $C592 DEFB $0C,$E8     ;
 $C594 DEFB $3A,$E8     ;
 $C596 DEFB $07,$30     ;
 $C598 DEFB $03,$E0     ; }
; Left Fighting Frame 1.
 $C59A DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C59B DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C59C DEFB $80,$78,$78 ; {#GRAPHIC$20(20*)
 $C59F DEFB $40,$18,$E0 ;
 $C5A2 DEFB $20,$30,$40 ;
 $C5A5 DEFB $10,$0D,$80 ;
 $C5A8 DEFB $0E,$3F,$C0 ;
 $C5AB DEFB $0C,$1F,$80 ;
 $C5AE DEFB $0B,$00,$08 ;
 $C5B1 DEFB $03,$9F,$98 ;
 $C5B4 DEFB $01,$DF,$B8 ;
 $C5B7 DEFB $00,$BF,$D0 ;
 $C5BA DEFB $00,$7F,$E0 ;
 $C5BD DEFB $00,$00,$00 ;
 $C5C0 DEFB $00,$0F,$C0 ;
 $C5C3 DEFB $00,$3F,$98 ;
 $C5C6 DEFB $00,$36,$70 ;
 $C5C9 DEFB $00,$09,$90 ;
 $C5CC DEFB $00,$06,$50 ;
 $C5CF DEFB $00,$19,$D0 ;
 $C5D2 DEFB $00,$75,$D0 ;
 $C5D5 DEFB $00,$0E,$60 ;
 $C5D8 DEFB $00,$07,$C0 ; }
; Left Fighting Frame 2.
 $C5DB DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C5DC DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C5DD DEFB $00,$0F,$07 ; {#GRAPHIC$21(21*)
 $C5E0 DEFB $00,$03,$0E ;
 $C5E3 DEFB $00,$06,$04 ;
 $C5E6 DEFB $00,$09,$B0 ;
 $C5E9 DEFB $00,$07,$F8 ;
 $C5EC DEFB $00,$03,$F0 ;
 $C5EF DEFB $00,$00,$01 ;
 $C5F2 DEFB $00,$00,$FB ;
 $C5F5 DEFB $00,$01,$FB ;
 $C5F8 DEFB $01,$3B,$FD ;
 $C5FB DEFB $FF,$77,$FE ;
 $C5FE DEFB $01,$00,$00 ;
 $C601 DEFB $00,$01,$F8 ;
 $C604 DEFB $00,$07,$F3 ;
 $C607 DEFB $00,$06,$CE ;
 $C60A DEFB $00,$01,$32 ;
 $C60D DEFB $00,$00,$CA ;
 $C610 DEFB $00,$03,$3A ;
 $C613 DEFB $00,$0E,$DA ;
 $C616 DEFB $00,$01,$CC ;
 $C619 DEFB $00,$00,$F8 ; }
; Left Fighting Frame 3.
 $C61C DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C61D DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C61E DEFB $00,$5E,$78 ; {#GRAPHIC$22(22*)
 $C621 DEFB $00,$46,$60 ;
 $C624 DEFB $00,$4C,$10 ;
 $C627 DEFB $00,$83,$60 ;
 $C62A DEFB $00,$8F,$F0 ;
 $C62D DEFB $00,$87,$E0 ;
 $C630 DEFB $03,$00,$00 ;
 $C633 DEFB $00,$87,$E0 ;
 $C636 DEFB $03,$07,$EC ;
 $C639 DEFB $01,$EF,$F6 ;
 $C63C DEFB $00,$5F,$FB ;
 $C63F DEFB $00,$00,$01 ;
 $C642 DEFB $00,$07,$E0 ;
 $C645 DEFB $00,$1F,$CC ;
 $C648 DEFB $00,$1B,$38 ;
 $C64B DEFB $00,$04,$C8 ;
 $C64E DEFB $00,$03,$28 ;
 $C651 DEFB $00,$0C,$E8 ;
 $C654 DEFB $00,$3A,$E8 ;
 $C657 DEFB $00,$07,$30 ;
 $C65A DEFB $00,$03,$E0 ; }
; Left Fighting Frame 4.
 $C65D DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C65E DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C65F DEFB $00,$78,$F0 ; {#GRAPHIC$23(23*)
 $C662 DEFB $00,$1C,$60 ;
 $C665 DEFB $00,$0C,$30 ;
 $C668 DEFB $F0,$83,$60 ;
 $C66B DEFB $0F,$8F,$F0 ;
 $C66E DEFB $01,$47,$E0 ;
 $C671 DEFB $01,$60,$00 ;
 $C674 DEFB $00,$67,$E4 ;
 $C677 DEFB $00,$37,$EC ;
 $C67A DEFB $00,$2F,$F6 ;
 $C67D DEFB $00,$1F,$FA ;
 $C680 DEFB $00,$00,$00 ;
 $C683 DEFB $00,$07,$E0 ;
 $C686 DEFB $00,$1F,$CC ;
 $C689 DEFB $00,$1B,$38 ;
 $C68C DEFB $00,$04,$C8 ;
 $C68F DEFB $00,$03,$28 ;
 $C692 DEFB $00,$0C,$E8 ;
 $C695 DEFB $00,$3A,$E8 ;
 $C698 DEFB $00,$07,$30 ;
 $C69B DEFB $00,$03,$E0 ; }
; Left Fighting Frame 5.
 $C69E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C69F DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C6A0 DEFB $01,$E0,$78 ; {#GRAPHIC$24(24*)
 $C6A3 DEFB $00,$70,$E0 ;
 $C6A6 DEFB $00,$30,$40 ;
 $C6A9 DEFB $00,$0D,$80 ;
 $C6AC DEFB $00,$3F,$C0 ;
 $C6AF DEFB $00,$1F,$80 ;
 $C6B2 DEFB $00,$00,$20 ;
 $C6B5 DEFB $00,$1F,$B0 ;
 $C6B8 DEFB $01,$DF,$98 ;
 $C6BB DEFB $01,$BF,$D8 ;
 $C6BE DEFB $03,$7F,$E0 ;
 $C6C1 DEFB $0A,$00,$00 ;
 $C6C4 DEFB $04,$1F,$80 ;
 $C6C7 DEFB $0A,$7F,$30 ;
 $C6CA DEFB $10,$6C,$E0 ;
 $C6CD DEFB $20,$13,$20 ;
 $C6D0 DEFB $40,$0C,$A0 ;
 $C6D3 DEFB $80,$33,$A0 ;
 $C6D6 DEFB $00,$EB,$A0 ;
 $C6D9 DEFB $00,$1C,$C0 ;
 $C6DC DEFB $00,$0F,$80 ; }
; Left Fighting Frame 6.
 $C6DF DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C6E0 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C6E1 DEFB $00,$3C,$0F ; {#GRAPHIC$26(26*)
 $C6E4 DEFB $00,$0E,$1C ;
 $C6E7 DEFB $00,$06,$08 ;
 $C6EA DEFB $00,$01,$B0 ;
 $C6ED DEFB $00,$07,$F8 ;
 $C6F0 DEFB $00,$03,$F0 ;
 $C6F3 DEFB $00,$00,$03 ;
 $C6F6 DEFB $00,$07,$E3 ;
 $C6F9 DEFB $00,$77,$EE ;
 $C6FC DEFB $00,$EF,$F4 ;
 $C6FF DEFB $01,$DF,$F8 ;
 $C702 DEFB $01,$80,$00 ;
 $C705 DEFB $00,$03,$F0 ;
 $C708 DEFB $03,$8F,$E6 ;
 $C70B DEFB $01,$0D,$9C ;
 $C70E DEFB $01,$02,$64 ;
 $C711 DEFB $01,$01,$94 ;
 $C714 DEFB $01,$06,$74 ;
 $C717 DEFB $01,$1D,$74 ;
 $C71A DEFB $01,$03,$98 ;
 $C71D DEFB $01,$01,$F0 ; }
; Right Frame 1.
 $C720 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C721 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C722 DEFB $0E,$70     ; {#GRAPHIC$14(14*)
 $C724 DEFB $1C,$78     ;
 $C726 DEFB $10,$08     ;
 $C728 DEFB $0E,$E0     ;
 $C72A DEFB $27,$40     ;
 $C72C DEFB $2F,$E0     ;
 $C72E DEFB $20,$80     ;
 $C730 DEFB $2E,$00     ;
 $C732 DEFB $2C,$60     ;
 $C734 DEFB $24,$E0     ;
 $C736 DEFB $74,$40     ;
 $C738 DEFB $20,$00     ;
 $C73A DEFB $07,$E0     ;
 $C73C DEFB $33,$F8     ;
 $C73E DEFB $1C,$D8     ;
 $C740 DEFB $13,$20     ;
 $C742 DEFB $14,$C0     ;
 $C744 DEFB $17,$30     ;
 $C746 DEFB $17,$5C     ;
 $C748 DEFB $0C,$E0     ;
 $C74A DEFB $07,$C0     ; }
; Right Frame 2.
 $C74C DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C74D DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $C74E DEFB $01,$E0     ; {#GRAPHIC$15(15*)
 $C750 DEFB $01,$C0     ;
 $C752 DEFB $01,$80     ;
 $C754 DEFB $00,$00     ;
 $C756 DEFB $03,$C0     ;
 $C758 DEFB $27,$C0     ;
 $C75A DEFB $2E,$60     ;
 $C75C DEFB $22,$00     ;
 $C75E DEFB $2C,$E0     ;
 $C760 DEFB $2C,$E0     ;
 $C762 DEFB $2C,$60     ;
 $C764 DEFB $76,$40     ;
 $C766 DEFB $20,$00     ;
 $C768 DEFB $07,$E0     ;
 $C76A DEFB $33,$F8     ;
 $C76C DEFB $1C,$D8     ;
 $C76E DEFB $13,$20     ;
 $C770 DEFB $14,$20     ;
 $C772 DEFB $17,$30     ;
 $C774 DEFB $17,$5C     ;
 $C776 DEFB $0C,$E0     ; }
 $C778 DEFB $07,$C0
; Right Frame 3.
 $C77A DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $C77B DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C77C DEFB $0E,$70     ; {#GRAPHIC$16(16*)
 $C77E DEFB $1C,$78     ;
 $C780 DEFB $10,$08     ;
 $C782 DEFB $0E,$E0     ;
 $C784 DEFB $25,$C0     ;
 $C786 DEFB $2F,$E0     ;
 $C788 DEFB $24,$00     ;
 $C78A DEFB $2C,$F0     ;
 $C78C DEFB $21,$F0     ;
 $C78E DEFB $21,$E0     ;
 $C790 DEFB $74,$40     ;
 $C792 DEFB $20,$00     ;
 $C794 DEFB $07,$E0     ;
 $C796 DEFB $33,$F8     ;
 $C798 DEFB $1C,$D8     ;
 $C79A DEFB $13,$20     ;
 $C79C DEFB $14,$C0     ;
 $C79E DEFB $17,$30     ;
 $C7A0 DEFB $17,$5C     ;
 $C7A2 DEFB $0C,$E0     ;
 $C7A4 DEFB $07,$C0     ; }
; Right Fighting Frame 1.
 $C7A6 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C7A7 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C7A8 DEFB $1E,$1E,$01 ; {#GRAPHIC$28(28*)
 $C7AB DEFB $07,$18,$02 ;
 $C7AE DEFB $02,$0C,$04 ;
 $C7B1 DEFB $01,$B0,$08 ;
 $C7B4 DEFB $03,$FC,$70 ;
 $C7B7 DEFB $01,$F8,$30 ;
 $C7BA DEFB $01,$00,$D0 ;
 $C7BD DEFB $19,$F9,$C0 ;
 $C7C0 DEFB $1D,$FB,$80 ;
 $C7C3 DEFB $0B,$FD,$00 ;
 $C7C6 DEFB $07,$FE,$00 ;
 $C7C9 DEFB $00,$00,$00 ;
 $C7CC DEFB $03,$F0,$00 ;
 $C7CF DEFB $19,$FC,$00 ;
 $C7D2 DEFB $0E,$6C,$00 ;
 $C7D5 DEFB $09,$90,$00 ;
 $C7D8 DEFB $0A,$60,$00 ;
 $C7DB DEFB $0B,$98,$00 ;
 $C7DE DEFB $0B,$AE,$00 ;
 $C7E1 DEFB $06,$70,$00 ;
 $C7E4 DEFB $03,$E0,$00 ; }
; Right Fighting Frame 2.
 $C7E7 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C7E8 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C7E9 DEFB $F0,$3C,$00 ; {#GRAPHIC$29(29*)
 $C7EC DEFB $38,$70,$00 ;
 $C7EF DEFB $10,$60,$00 ;
 $C7F2 DEFB $0D,$80,$00 ;
 $C7F5 DEFB $1F,$E0,$00 ;
 $C7F8 DEFB $0F,$C0,$00 ;
 $C7FB DEFB $C0,$00,$00 ;
 $C7FE DEFB $C7,$E0,$00 ;
 $C801 DEFB $77,$EE,$00 ;
 $C804 DEFB $2F,$F7,$00 ;
 $C807 DEFB $1F,$FD,$80 ;
 $C80A DEFB $00,$01,$80 ;
 $C80D DEFB $FF,$C0,$00 ;
 $C810 DEFB $67,$F1,$C0 ;
 $C813 DEFB $39,$B0,$80 ;
 $C816 DEFB $26,$40,$80 ;
 $C819 DEFB $29,$80,$80 ;
 $C81C DEFB $2E,$60,$80 ;
 $C81F DEFB $2E,$B8,$80 ;
 $C822 DEFB $19,$C0,$80 ;
 $C825 DEFB $0F,$80,$80 ; }
; Right Fighting Frame 3.
 $C828 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C829 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C82A DEFB $1E,$3A,$00 ; {#GRAPHIC$2A(2A*)
 $C82D DEFB $06,$62,$00 ;
 $C830 DEFB $08,$32,$00 ;
 $C833 DEFB $06,$C1,$00 ;
 $C836 DEFB $0F,$F1,$00 ;
 $C839 DEFB $07,$E1,$00 ;
 $C83C DEFB $00,$00,$C0 ;
 $C83F DEFB $07,$E1,$00 ;
 $C842 DEFB $37,$E0,$C0 ;
 $C845 DEFB $6F,$F7,$80 ;
 $C848 DEFB $DF,$FA,$00 ;
 $C84B DEFB $80,$00,$00 ;
 $C84E DEFB $07,$E0,$00 ;
 $C851 DEFB $33,$F8,$00 ;
 $C854 DEFB $1C,$D8,$00 ;
 $C857 DEFB $13,$20,$00 ;
 $C85A DEFB $14,$C0,$00 ;
 $C85D DEFB $17,$30,$00 ;
 $C860 DEFB $17,$5C,$00 ;
 $C863 DEFB $0C,$E0,$00 ;
 $C866 DEFB $07,$C0,$00 ; }
; Right Fighting Frame 4.
 $C869 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C86A DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C86B DEFB $0F,$1E,$00 ; {#GRAPHIC$2B(2B*)
 $C86E DEFB $06,$38,$00 ;
 $C871 DEFB $0C,$30,$00 ;
 $C874 DEFB $06,$C1,$0F ;
 $C877 DEFB $0F,$F1,$F0 ;
 $C87A DEFB $07,$E2,$80 ;
 $C87D DEFB $00,$06,$80 ;
 $C880 DEFB $27,$E6,$00 ;
 $C883 DEFB $37,$EC,$00 ;
 $C886 DEFB $6F,$F4,$00 ;
 $C889 DEFB $5F,$F8,$00 ;
 $C88C DEFB $00,$00,$00 ;
 $C88F DEFB $07,$E0,$00 ;
 $C892 DEFB $33,$F8,$00 ;
 $C895 DEFB $1C,$D8,$00 ;
 $C898 DEFB $13,$20,$00 ;
 $C89B DEFB $14,$C0,$00 ;
 $C89E DEFB $17,$30,$00 ;
 $C8A1 DEFB $17,$AC,$00 ;
 $C8A4 DEFB $0C,$E0,$00 ;
 $C8A7 DEFB $07,$C0,$00 ; }
; Right Fighting Frame 5.
 $C8AA DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C8AB DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C8AC DEFB $1E,$07,$80 ; {#GRAPHIC$2C(2C*)
 $C8AF DEFB $07,$0E,$00 ;
 $C8B2 DEFB $02,$0C,$00 ;
 $C8B5 DEFB $01,$B0,$00 ;
 $C8B8 DEFB $03,$FC,$00 ;
 $C8BB DEFB $01,$F8,$00 ;
 $C8BE DEFB $04,$00,$00 ;
 $C8C1 DEFB $0D,$F8,$00 ;
 $C8C4 DEFB $19,$FB,$80 ;
 $C8C7 DEFB $1B,$FD,$80 ;
 $C8CA DEFB $07,$FE,$C0 ;
 $C8CD DEFB $00,$00,$50 ;
 $C8D0 DEFB $01,$F8,$20 ;
 $C8D3 DEFB $0D,$FE,$50 ;
 $C8D6 DEFB $07,$36,$08 ;
 $C8D9 DEFB $04,$C8,$04 ;
 $C8DC DEFB $05,$30,$02 ;
 $C8DF DEFB $05,$CC,$01 ;
 $C8E2 DEFB $05,$D7,$00 ;
 $C8E5 DEFB $03,$38,$00 ;
 $C8E8 DEFB $01,$F0,$00 ; }
; Right Fighting Frame 6.
 $C8EB DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $C8EC DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $C8ED DEFB $E0,$F0,$00 ; {#GRAPHIC$2D(2D*)
 $C8F0 DEFB $70,$C0,$00 ;
 $C8F3 DEFB $20,$60,$00 ;
 $C8F6 DEFB $1F,$E0,$00 ;
 $C8F9 DEFB $1F,$E0,$00 ;
 $C8FC DEFB $0F,$C0,$00 ;
 $C8FF DEFB $80,$00,$00 ;
 $C902 DEFB $DF,$00,$00 ;
 $C905 DEFB $DF,$80,$00 ;
 $C908 DEFB $BF,$DC,$80 ;
 $C90B DEFB $7F,$EE,$FF ;
 $C90E DEFB $00,$00,$80 ;
 $C911 DEFB $1F,$80,$00 ;
 $C914 DEFB $CF,$E0,$00 ;
 $C917 DEFB $73,$60,$00 ;
 $C91A DEFB $4C,$80,$00 ;
 $C91D DEFB $53,$00,$00 ;
 $C920 DEFB $53,$C0,$00 ;
 $C923 DEFB $5D,$70,$00 ;
 $C926 DEFB $33,$80,$00 ;
 $C929 DEFB $1F,$00,$00 ; }
; #UDGTABLE(default,centre)
; { =h Down | =h Up | =h Left (fighting) | =h Right (fighting) }{
;   #UDGARRAY*1C,25;1D;1E;1D(sabreman-down) |
;   #UDGARRAY*18,25;19;1A;19(sabreman-up) |
;   #UDGARRAY*20,25;21;22;23;24;23;26;21(sabreman-left-fighting) |
;   #UDGARRAY*28,25;29;2A;2B;2C;2B;2D;29(sabreman-right-fighting)
; }
; UDGTABLE#

; Sprite: Rhino
;
; .
;
; .
;
; Left Frame 1.
b$C92C DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $C92D DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $C92E DEFB $00,$80,$00,$0C ; {#GRAPHIC$31(31*)
 $C932 DEFB $01,$C0,$00,$0E ;
 $C936 DEFB $03,$E0,$00,$1F ;
 $C93A DEFB $03,$F0,$00,$3F ;
 $C93E DEFB $00,$FD,$F8,$7E ;
 $C942 DEFB $00,$7E,$FE,$FC ;
 $C946 DEFB $00,$3E,$FE,$FA ;
 $C94A DEFB $00,$1F,$7D,$FE ;
 $C94E DEFB $00,$0F,$FD,$FF ;
 $C952 DEFB $1F,$DF,$FE,$FF ;
 $C956 DEFB $07,$FF,$FF,$FF ;
 $C95A DEFB $3B,$FF,$FF,$FF ;
 $C95E DEFB $3F,$FF,$FF,$FE ;
 $C962 DEFB $0E,$7F,$FF,$FE ;
 $C966 DEFB $1E,$7F,$FF,$FC ;
 $C96A DEFB $7D,$F8,$3F,$F8 ;
 $C96E DEFB $60,$70,$03,$E0 ;
 $C972 DEFB $C0,$30,$00,$00 ;
 $C976 DEFB $80,$00,$00,$00 ; }
; Left Frame 2.
 $C97A DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $C97B DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $C97C DEFB $00,$03,$01,$80 ; {#GRAPHIC$30(30*)
 $C980 DEFB $00,$03,$83,$C0 ;
 $C984 DEFB $00,$07,$E7,$C0 ;
 $C988 DEFB $00,$0F,$C3,$E0 ;
 $C98C DEFB $00,$1F,$BD,$F0 ;
 $C990 DEFB $00,$1F,$7E,$F8 ;
 $C994 DEFB $00,$1F,$7F,$7C ;
 $C998 DEFB $00,$1F,$7F,$7C ;
 $C99C DEFB $1F,$DF,$7F,$7E ;
 $C9A0 DEFB $07,$FF,$FF,$FE ;
 $C9A4 DEFB $3B,$FF,$FF,$FE ;
 $C9A8 DEFB $3F,$FF,$FF,$FE ;
 $C9AC DEFB $0E,$7F,$FF,$FE ;
 $C9B0 DEFB $1E,$7F,$FF,$FE ;
 $C9B4 DEFB $7D,$FF,$FF,$FC ;
 $C9B8 DEFB $60,$77,$FF,$F8 ;
 $C9BC DEFB $C0,$33,$FF,$F0 ;
 $C9C0 DEFB $80,$00,$FF,$C0 ;
 $C9C4 DEFB $00,$00,$3F,$00 ; }
; Right Frame 1.
 $C9C8 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $C9C9 DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $C9CA DEFB $30,$00,$01,$00 ; {#GRAPHIC$33(33*)
 $C9CE DEFB $70,$00,$03,$80 ;
 $C9D2 DEFB $F8,$00,$07,$C0 ;
 $C9D6 DEFB $FC,$00,$0F,$C0 ;
 $C9DA DEFB $7E,$1F,$BF,$00 ;
 $C9DE DEFB $3F,$7F,$7E,$00 ;
 $C9E2 DEFB $5F,$7F,$7C,$00 ;
 $C9E6 DEFB $7F,$BE,$F8,$00 ;
 $C9EA DEFB $FF,$BF,$F0,$00 ;
 $C9EE DEFB $FF,$7F,$FB,$F8 ;
 $C9F2 DEFB $FF,$FF,$FF,$E0 ;
 $C9F6 DEFB $FF,$FF,$FF,$DC ;
 $C9FA DEFB $7F,$FF,$FF,$FC ;
 $C9FE DEFB $7F,$FF,$FE,$70 ;
 $CA02 DEFB $3F,$FF,$FE,$78 ;
 $CA06 DEFB $1F,$FC,$1F,$BE ;
 $CA0A DEFB $07,$C0,$0E,$06 ;
 $CA0E DEFB $00,$00,$0C,$03 ;
 $CA12 DEFB $00,$00,$00,$01 ; }
; Right Frame 2.
 $CA16 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CA17 DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $CA18 DEFB $01,$80,$C0,$00 ; {#GRAPHIC$32(32*)
 $CA1C DEFB $03,$C1,$C0,$00 ;
 $CA20 DEFB $03,$E7,$E0,$00 ;
 $CA24 DEFB $07,$C3,$F0,$00 ;
 $CA28 DEFB $0F,$BD,$F8,$00 ;
 $CA2C DEFB $1F,$7E,$F8,$00 ;
 $CA30 DEFB $3E,$FE,$F8,$00 ;
 $CA34 DEFB $3E,$FE,$F8,$00 ;
 $CA38 DEFB $7E,$FE,$FB,$F8 ;
 $CA3C DEFB $7F,$FF,$FF,$E0 ;
 $CA40 DEFB $7F,$FF,$FF,$DC ;
 $CA44 DEFB $7F,$FF,$FF,$FC ;
 $CA48 DEFB $7F,$FF,$FE,$70 ;
 $CA4C DEFB $7F,$FF,$FE,$78 ;
 $CA50 DEFB $3F,$FF,$FF,$BE ;
 $CA54 DEFB $1F,$FF,$EE,$06 ;
 $CA58 DEFB $0F,$FF,$CC,$03 ;
 $CA5C DEFB $03,$FF,$00,$01 ;
 $CA60 DEFB $00,$FC,$00,$00 ; }
; #UDGTABLE(default,centre)
; { =h Left | =h Right }{
;   #UDGARRAY*31,25;30(rhino-left) |
;   #UDGARRAY*33,25;32(rhino-right)
; }
; UDGTABLE#

; Sprite: Hippo Sleeping
b$CA64 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CA65 DEFB $18         ; Height = #N(#PEEK(#PC)) pixels.
 $CA66 DEFB $00,$03,$80 ; {#GRAPHIC$A4(A4)
 $CA69 DEFB $00,$03,$EC ;
 $CA6C DEFB $00,$3D,$DE ;
 $CA6F DEFB $0F,$0E,$2F ;
 $CA72 DEFB $9F,$73,$B1 ;
 $CA75 DEFB $BF,$7F,$DE ;
 $CA78 DEFB $FE,$EF,$CC ;
 $CA7B DEFB $FE,$BF,$F0 ;
 $CA7E DEFB $FE,$FF,$3C ;
 $CA81 DEFB $FF,$79,$7E ;
 $CA84 DEFB $FF,$9B,$FD ;
 $CA87 DEFB $FF,$EF,$DB ;
 $CA8A DEFB $FF,$B6,$E7 ;
 $CA8D DEFB $FF,$B6,$FF ;
 $CA90 DEFB $FF,$B9,$FF ;
 $CA93 DEFB $FF,$7F,$FF ;
 $CA96 DEFB $7F,$7F,$FF ;
 $CA99 DEFB $7E,$FF,$FF ;
 $CA9C DEFB $7F,$FF,$FE ;
 $CA9F DEFB $3F,$FF,$FE ;
 $CAA2 DEFB $1F,$FF,$FC ;
 $CAA5 DEFB $0F,$FF,$F8 ;
 $CAA8 DEFB $07,$FF,$E0 ;
 $CAAB DEFB $01,$FF,$00 ; }

; Sprite: Hippo
;
; .
;
; .
;
; Left Frame 1.
b$CAAE DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CAAF DEFB $12             ; Height = #N(#PEEK(#PC)) pixels.
 $CAB0 DEFB $02,$00,$00,$1C ; {#GRAPHIC$A0(A0)
 $CAB4 DEFB $07,$00,$00,$3C ;
 $CAB8 DEFB $0F,$80,$00,$7E ;
 $CABC DEFB $1F,$C0,$00,$FF ;
 $CAC0 DEFB $0F,$F3,$E1,$FC ;
 $CAC4 DEFB $07,$FB,$FB,$F8 ;
 $CAC8 DEFB $03,$FB,$FB,$F4 ;
 $CACC DEFB $01,$FD,$F7,$EC ;
 $CAD0 DEFB $00,$FF,$F7,$FE ;
 $CAD4 DEFB $7F,$7F,$FB,$FF ;
 $CAD8 DEFB $1F,$FF,$FF,$FE ;
 $CADC DEFB $EF,$FF,$FF,$FE ;
 $CAE0 DEFB $FF,$FF,$FF,$FC ;
 $CAE4 DEFB $D9,$FF,$FF,$FC ;
 $CAE8 DEFB $79,$FF,$FF,$F8 ;
 $CAEC DEFB $07,$F0,$FF,$F0 ;
 $CAF0 DEFB $01,$E0,$0F,$C0 ;
 $CAF4 DEFB $00,$E0,$00,$00 ; }
; Left Frame 2.
 $CAF8 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CAF9 DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $CAFA DEFB $00,$1C,$07,$00 ; {#GRAPHIC$A1(A1)
 $CAFE DEFB $00,$3E,$0F,$80 ;
 $CB02 DEFB $00,$7F,$9F,$80 ;
 $CB06 DEFB $00,$FF,$1F,$C0 ;
 $CB0A DEFB $00,$FE,$0F,$E0 ;
 $CB0E DEFB $00,$FC,$F7,$F0 ;
 $CB12 DEFB $00,$FD,$F7,$F8 ;
 $CB16 DEFB $00,$FD,$F9,$F8 ;
 $CB1A DEFB $7F,$7D,$FE,$FC ;
 $CB1E DEFB $1F,$FF,$FF,$FD ;
 $CB22 DEFB $EF,$FF,$FF,$FD ;
 $CB26 DEFB $FF,$FF,$FF,$FE ;
 $CB2A DEFB $D9,$FF,$FF,$FC ;
 $CB2E DEFB $79,$FF,$FF,$FC ;
 $CB32 DEFB $07,$FF,$FF,$F8 ;
 $CB36 DEFB $01,$F7,$FF,$F0 ;
 $CB3A DEFB $00,$E7,$FF,$E0 ;
 $CB3E DEFB $00,$03,$FF,$80 ;
 $CB42 DEFB $00,$00,$FE,$00 ; }
; Right Frame 1.
 $CB46 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CB47 DEFB $12             ; Height = #N(#PEEK(#PC)) pixels.
 $CB48 DEFB $38,$00,$00,$40 ; {#GRAPHIC$A2(A2)
 $CB4C DEFB $3C,$00,$00,$E0 ;
 $CB50 DEFB $7E,$00,$01,$F0 ;
 $CB54 DEFB $FF,$00,$03,$F0 ;
 $CB58 DEFB $3F,$87,$CF,$F0 ;
 $CB5C DEFB $1F,$DF,$DF,$E0 ;
 $CB60 DEFB $2F,$DF,$DF,$C0 ;
 $CB64 DEFB $37,$EF,$BF,$80 ;
 $CB68 DEFB $7F,$EF,$FF,$00 ;
 $CB6C DEFB $FF,$DF,$FE,$FE ;
 $CB70 DEFB $7F,$FF,$FF,$F8 ;
 $CB74 DEFB $7F,$FF,$FF,$F7 ;
 $CB78 DEFB $3F,$FF,$FF,$FF ;
 $CB7C DEFB $3F,$FF,$FF,$9B ;
 $CB80 DEFB $1F,$FF,$FF,$9E ;
 $CB84 DEFB $0F,$FF,$0F,$E0 ;
 $CB88 DEFB $03,$F0,$07,$80 ;
 $CB8C DEFB $00,$00,$07,$00 ; }
; Right Frame 2.
 $CB90 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CB91 DEFB $13             ; Height = #N(#PEEK(#PC)) pixels.
 $CB92 DEFB $00,$E0,$38,$00 ; {#GRAPHIC$A3(A3)
 $CB96 DEFB $01,$F0,$7C,$00 ;
 $CB9A DEFB $01,$F9,$FE,$00 ;
 $CB9E DEFB $03,$F8,$FF,$00 ;
 $CBA2 DEFB $07,$F0,$7F,$00 ;
 $CBA6 DEFB $0F,$EF,$3F,$00 ;
 $CBAA DEFB $1F,$EF,$BF,$00 ;
 $CBAE DEFB $1F,$9F,$BF,$00 ;
 $CBB2 DEFB $3F,$7F,$BE,$FE ;
 $CBB6 DEFB $BF,$FF,$FF,$F8 ;
 $CBBA DEFB $BF,$FF,$FF,$F7 ;
 $CBBE DEFB $7F,$FF,$FF,$FF ;
 $CBC2 DEFB $3F,$FF,$FF,$9B ;
 $CBC6 DEFB $3F,$FF,$FF,$9E ;
 $CBCA DEFB $1F,$FF,$FF,$E0 ;
 $CBCE DEFB $0F,$FF,$EF,$80 ;
 $CBD2 DEFB $07,$FF,$E7,$00 ;
 $CBD6 DEFB $01,$FF,$C0,$00 ;
 $CBDA DEFB $00,$7F,$00,$00 ; }

; Sprite: Tribesman
;
; .
;
; .
;
; Left Frame 1.
b$CBDE DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CBDF DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CBE0 DEFB $07,$80  ; {#GRAPHIC$38(38)
 $CBE2 DEFB $03,$08  ;
 $CBE4 DEFB $06,$08  ;
 $CBE6 DEFB $0D,$F0  ;
 $CBE8 DEFB $0D,$B0  ;
 $CBEA DEFB $05,$80  ;
 $CBEC DEFB $81,$C8  ;
 $CBEE DEFB $C3,$DC  ;
 $CBF0 DEFB $87,$BE  ;
 $CBF2 DEFB $57,$BE  ;
 $CBF4 DEFB $57,$A2  ;
 $CBF6 DEFB $5F,$63  ;
 $CBF8 DEFB $37,$6B  ;
 $CBFA DEFB $27,$7F  ;
 $CBFC DEFB $20,$00  ;
 $CBFE DEFB $13,$60  ;
 $CC00 DEFB $10,$20  ;
 $CC02 DEFB $12,$A0  ;
 $CC04 DEFB $08,$7C  ;
 $CC06 DEFB $0B,$E0  ;
 $CC08 DEFB $08,$B0  ;
 $CC0A DEFB $04,$88  ;
 $CC0C DEFB $04,$80  ; }
; Left Frame 2.
 $CC0E DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CC0F DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CC10 DEFB $05,$C0  ; {#GRAPHIC$39(39)
 $CC12 DEFB $00,$40  ;
 $CC14 DEFB $02,$C0  ;
 $CC16 DEFB $05,$80  ;
 $CC18 DEFB $05,$80  ;
 $CC1A DEFB $06,$C8  ;
 $CC1C DEFB $82,$9C  ;
 $CC1E DEFB $C3,$BE  ;
 $CC20 DEFB $87,$A2  ;
 $CC22 DEFB $57,$63  ;
 $CC24 DEFB $5F,$6B  ;
 $CC26 DEFB $57,$6B  ;
 $CC28 DEFB $37,$7F  ;
 $CC2A DEFB $27,$00  ;
 $CC2C DEFB $20,$60  ;
 $CC2E DEFB $13,$60  ;
 $CC30 DEFB $10,$20  ;
 $CC32 DEFB $12,$A0  ;
 $CC34 DEFB $08,$7C  ;
 $CC36 DEFB $0B,$E0  ;
 $CC38 DEFB $08,$B0  ;
 $CC3A DEFB $04,$88  ;
 $CC3C DEFB $04,$80  ; }
; Left Frame 3.
 $CC3E DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CC3F DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CC40 DEFB $07,$80  ; {#GRAPHIC$3A(3A)
 $CC42 DEFB $03,$10  ;
 $CC44 DEFB $06,$10  ;
 $CC46 DEFB $0D,$F0  ;
 $CC48 DEFB $0C,$B0  ;
 $CC4A DEFB $87,$00  ;
 $CC4C DEFB $C3,$88  ;
 $CC4E DEFB $83,$D4  ;
 $CC50 DEFB $47,$BE  ;
 $CC52 DEFB $57,$A2  ;
 $CC54 DEFB $5F,$63  ;
 $CC56 DEFB $37,$6B  ;
 $CC58 DEFB $27,$6B  ;
 $CC5A DEFB $27,$7F  ;
 $CC5C DEFB $10,$00  ;
 $CC5E DEFB $13,$60  ;
 $CC60 DEFB $10,$20  ;
 $CC62 DEFB $0A,$A0  ;
 $CC64 DEFB $08,$7C  ;
 $CC66 DEFB $08,$E0  ;
 $CC68 DEFB $04,$B0  ;
 $CC6A DEFB $04,$88  ;
 $CC6C DEFB $00,$80  ; }
; Left Frame 4.
 $CC6E DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CC6F DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CC70 DEFB $01,$E0  ; {#GRAPHIC$3B(3B)
 $CC72 DEFB $10,$C0  ;
 $CC74 DEFB $10,$60  ;
 $CC76 DEFB $0F,$B0  ;
 $CC78 DEFB $0D,$B0  ;
 $CC7A DEFB $01,$A0  ;
 $CC7C DEFB $13,$81  ;
 $CC7E DEFB $3B,$C3  ;
 $CC80 DEFB $7D,$E1  ;
 $CC82 DEFB $45,$EA  ;
 $CC84 DEFB $C6,$FA  ;
 $CC86 DEFB $D6,$EA  ;
 $CC88 DEFB $D6,$EC  ;
 $CC8A DEFB $FE,$E4  ;
 $CC8C DEFB $00,$04  ;
 $CC8E DEFB $06,$C8  ;
 $CC90 DEFB $04,$08  ;
 $CC92 DEFB $05,$48  ;
 $CC94 DEFB $3E,$10  ;
 $CC96 DEFB $07,$D0  ;
 $CC98 DEFB $0D,$10  ;
 $CC9A DEFB $11,$20  ;
 $CC9C DEFB $01,$20  ; }
; Right Frame 1.
 $CC9E DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CC9F DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CCA0 DEFB $03,$A0  ; {#GRAPHIC$3C(3C)
 $CCA2 DEFB $02,$00  ;
 $CCA4 DEFB $03,$40  ;
 $CCA6 DEFB $01,$A0  ;
 $CCA8 DEFB $01,$A0  ;
 $CCAA DEFB $13,$60  ;
 $CCAC DEFB $39,$14  ;
 $CCAE DEFB $7D,$C3  ;
 $CCB0 DEFB $45,$E1  ;
 $CCB2 DEFB $C6,$EA  ;
 $CCB4 DEFB $D6,$FA  ;
 $CCB6 DEFB $D6,$EA  ;
 $CCB8 DEFB $FE,$EC  ;
 $CCBA DEFB $00,$E4  ;
 $CCBC DEFB $06,$04  ;
 $CCBE DEFB $06,$C8  ;
 $CCC0 DEFB $04,$08  ;
 $CCC2 DEFB $05,$48  ;
 $CCC4 DEFB $3E,$10  ;
 $CCC6 DEFB $07,$D0  ;
 $CCC8 DEFB $0D,$10  ;
 $CCCA DEFB $11,$20  ;
 $CCCC DEFB $01,$20  ; }
; Right Frame 2.
 $CCCE DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $CCCF DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $CCD0 DEFB $01,$E0  ; {#GRAPHIC$3D(3D)
 $CCD2 DEFB $08,$C0  ;
 $CCD4 DEFB $08,$60  ;
 $CCD6 DEFB $0F,$B0  ;
 $CCD8 DEFB $0D,$30  ;
 $CCDA DEFB $00,$E1  ;
 $CCDC DEFB $11,$C3  ;
 $CCDE DEFB $1B,$C1  ;
 $CCE0 DEFB $7D,$E2  ;
 $CCE2 DEFB $45,$EA  ;
 $CCE4 DEFB $C6,$FA  ;
 $CCE6 DEFB $DC,$EC  ;
 $CCE8 DEFB $DC,$E4  ;
 $CCEA DEFB $FE,$E4  ;
 $CCEC DEFB $00,$08  ;
 $CCEE DEFB $06,$C8  ;
 $CCF0 DEFB $04,$08  ;
 $CCF2 DEFB $05,$50  ;
 $CCF4 DEFB $3E,$10  ;
 $CCF6 DEFB $07,$10  ;
 $CCF8 DEFB $0D,$20  ;
 $CCFA DEFB $11,$20  ;
 $CCFC DEFB $01,$00  ; }

; Sprite: Spider
;
; .
;
; .
;
; Left Frame 1.
b$CCFE DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CCFF DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $CD00 DEFB $00,$30,$00 ; {#GRAPHIC$60(60)
 $CD03 DEFB $00,$30,$C0 ;
 $CD06 DEFB $00,$30,$C0 ;
 $CD09 DEFB $00,$38,$C0 ;
 $CD0C DEFB $00,$18,$C0 ;
 $CD0F DEFB $00,$18,$C3 ;
 $CD12 DEFB $3F,$1C,$C3 ;
 $CD15 DEFB $79,$9C,$C7 ;
 $CD18 DEFB $79,$D9,$C6 ;
 $CD1B DEFB $67,$F7,$8E ;
 $CD1E DEFB $67,$FE,$1C ;
 $CD21 DEFB $3F,$88,$FC ;
 $CD24 DEFB $0E,$6F,$F0 ;
 $CD27 DEFB $F1,$EF,$00 ;
 $CD2A DEFB $7F,$80,$F8 ;
 $CD2D DEFB $00,$5F,$FC ;
 $CD30 DEFB $18,$D3,$FC ;
 $CD33 DEFB $0D,$99,$FC ;
 $CD36 DEFB $07,$6C,$7C ;
 $CD39 DEFB $02,$66,$18 ;
 $CD3C DEFB $00,$63,$F0 ; }
; Left Frame 2.
 $CD3F DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CD40 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $CD41 DEFB $00,$03,$00 ; {#GRAPHIC$61(61)
 $CD44 DEFB $00,$03,$00 ;
 $CD47 DEFB $00,$03,$00 ;
 $CD4A DEFB $00,$03,$30 ;
 $CD4D DEFB $00,$03,$34 ;
 $CD50 DEFB $00,$03,$34 ;
 $CD53 DEFB $3F,$18,$64 ;
 $CD56 DEFB $79,$98,$6C ;
 $CD59 DEFB $79,$D8,$EC ;
 $CD5C DEFB $67,$D7,$DC ;
 $CD5F DEFB $67,$DF,$38 ;
 $CD62 DEFB $3F,$88,$E0 ;
 $CD65 DEFB $4E,$6F,$80 ;
 $CD68 DEFB $61,$EE,$00 ;
 $CD6B DEFB $27,$00,$F8 ;
 $CD6E DEFB $3E,$5F,$FC ;
 $CD71 DEFB $1C,$D3,$FC ;
 $CD74 DEFB $07,$19,$FC ;
 $CD77 DEFB $00,$6C,$7C ;
 $CD7A DEFB $00,$66,$18 ;
 $CD7D DEFB $00,$63,$F0 ;
 $CD80 DEFB $00,$60,$00 ; }
; Right Frame 1.
 $CD83 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CD84 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $CD85 DEFB $00,$0C,$00 ; {#GRAPHIC$62(62)
 $CD88 DEFB $03,$0C,$00 ;
 $CD8B DEFB $03,$0C,$00 ;
 $CD8E DEFB $03,$1C,$00 ;
 $CD91 DEFB $03,$18,$00 ;
 $CD94 DEFB $C3,$18,$00 ;
 $CD97 DEFB $C3,$38,$FC ;
 $CD9A DEFB $E3,$38,$9E ;
 $CD9D DEFB $63,$9B,$9E ;
 $CDA0 DEFB $71,$EF,$E6 ;
 $CDA3 DEFB $38,$7F,$E6 ;
 $CDA6 DEFB $3F,$11,$FC ;
 $CDA9 DEFB $0F,$F6,$70 ;
 $CDAC DEFB $00,$F7,$8F ;
 $CDAF DEFB $1F,$01,$FE ;
 $CDB2 DEFB $3F,$FA,$00 ;
 $CDB5 DEFB $3F,$CB,$18 ;
 $CDB8 DEFB $3F,$99,$B0 ;
 $CDBB DEFB $3E,$36,$E0 ;
 $CDBE DEFB $18,$66,$40 ;
 $CDC1 DEFB $0F,$36,$00 ; }
; Right Frame 2.
 $CDC4 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CDC5 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $CDC6 DEFB $00,$30,$00 ; {#GRAPHIC$63(63)
 $CDC9 DEFB $00,$30,$00 ;
 $CDCC DEFB $00,$30,$00 ;
 $CDCF DEFB $0C,$30,$00 ;
 $CDD2 DEFB $2C,$30,$00 ;
 $CDD5 DEFB $2C,$30,$00 ;
 $CDD8 DEFB $26,$18,$FC ;
 $CDDB DEFB $36,$19,$9E ;
 $CDDE DEFB $37,$1B,$9E ;
 $CDE1 DEFB $2B,$EB,$E6 ;
 $CDE4 DEFB $1C,$FB,$E6 ;
 $CDE7 DEFB $07,$11,$EC ;
 $CDEA DEFB $01,$F6,$72 ;
 $CDED DEFB $00,$77,$86 ;
 $CDF0 DEFB $1F,$00,$E4 ;
 $CDF3 DEFB $3A,$FA,$7C ;
 $CDF6 DEFB $3F,$CB,$38 ;
 $CDF9 DEFB $3F,$98,$E0 ;
 $CDFC DEFB $3E,$36,$00 ;
 $CDFF DEFB $18,$66,$00 ;
 $CE02 DEFB $0F,$C6,$00 ;
 $CE05 DEFB $00,$06,$00 ; }

; Sprite: Scorpion
;
; .
;
; .
;
; Left Frame 1.
b$CE08 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CE09 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $CE0A DEFB $00,$08,$00 ; {#GRAPHIC$64(64)
 $CE0D DEFB $00,$08,$00 ;
 $CE10 DEFB $06,$04,$20 ;
 $CE13 DEFB $13,$84,$24 ;
 $CE16 DEFB $1E,$C4,$28 ;
 $CE19 DEFB $0B,$E9,$C8 ;
 $CE1C DEFB $27,$DE,$F0 ;
 $CE1F DEFB $13,$BF,$80 ;
 $CE22 DEFB $0C,$FF,$E0 ;
 $CE25 DEFB $43,$FF,$B8 ;
 $CE28 DEFB $21,$3F,$70 ;
 $CE2B DEFB $1F,$2E,$EC ;
 $CE2E DEFB $00,$E0,$3C ;
 $CE31 DEFB $00,$00,$1C ;
 $CE34 DEFB $00,$00,$1C ;
 $CE37 DEFB $00,$00,$00 ;
 $CE3A DEFB $00,$03,$9C ;
 $CE3D DEFB $00,$00,$CC ;
 $CE40 DEFB $00,$01,$E8 ;
 $CE43 DEFB $00,$01,$F0 ;
 $CE46 DEFB $00,$00,$E0 ; }
; Left Frame 2.
 $CE49 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CE4A DEFB $14         ; Height = #N(#PEEK(#PC)) pixels.
 $CE4B DEFB $00,$02,$00 ; {#GRAPHIC$65(65)
 $CE4E DEFB $00,$02,$40 ;
 $CE51 DEFB $06,$02,$40 ;
 $CE54 DEFB $13,$82,$48 ;
 $CE57 DEFB $1E,$C2,$48 ;
 $CE5A DEFB $0B,$ED,$90 ;
 $CE5D DEFB $47,$DA,$E0 ;
 $CE60 DEFB $23,$BF,$80 ;
 $CE63 DEFB $1C,$FF,$E0 ;
 $CE66 DEFB $23,$7F,$B8 ;
 $CE69 DEFB $1F,$BF,$70 ;
 $CE6C DEFB $04,$2E,$EC ;
 $CE6F DEFB $03,$C0,$3C ;
 $CE72 DEFB $00,$00,$1C ;
 $CE75 DEFB $00,$00,$00 ;
 $CE78 DEFB $00,$03,$9C ;
 $CE7B DEFB $00,$00,$BC ;
 $CE7E DEFB $00,$01,$EC ;
 $CE81 DEFB $00,$01,$F0 ;
 $CE84 DEFB $00,$00,$E0 ; }
; Right Frame 1.
 $CE87 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CE88 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $CE89 DEFB $00,$10,$00 ; {#GRAPHIC$66(66)
 $CE8C DEFB $00,$10,$00 ;
 $CE8F DEFB $04,$20,$60 ;
 $CE92 DEFB $24,$21,$C8 ;
 $CE95 DEFB $14,$23,$78 ;
 $CE98 DEFB $13,$97,$D0 ;
 $CE9B DEFB $0F,$7B,$E4 ;
 $CE9E DEFB $01,$FD,$C8 ;
 $CEA1 DEFB $07,$FF,$30 ;
 $CEA4 DEFB $1D,$FF,$C2 ;
 $CEA7 DEFB $0E,$FC,$84 ;
 $CEAA DEFB $37,$74,$F8 ;
 $CEAD DEFB $3C,$07,$00 ;
 $CEB0 DEFB $38,$00,$00 ;
 $CEB3 DEFB $38,$00,$00 ;
 $CEB6 DEFB $00,$00,$00 ;
 $CEB9 DEFB $39,$C0,$00 ;
 $CEBC DEFB $33,$00,$00 ;
 $CEBF DEFB $17,$80,$00 ;
 $CEC2 DEFB $0F,$80,$00 ;
 $CEC5 DEFB $07,$00,$00 ; }
; Right Frame 2.
 $CEC8 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $CEC9 DEFB $14         ; Height = #N(#PEEK(#PC)) pixels.
 $CECA DEFB $00,$40,$00 ; {#GRAPHIC$67(67)
 $CECD DEFB $02,$40,$00 ;
 $CED0 DEFB $02,$40,$60 ;
 $CED3 DEFB $12,$41,$C8 ;
 $CED6 DEFB $12,$43,$78 ;
 $CED9 DEFB $09,$B7,$D0 ;
 $CEDC DEFB $07,$5B,$E2 ;
 $CEDF DEFB $01,$FD,$C4 ;
 $CEE2 DEFB $07,$FF,$38 ;
 $CEE5 DEFB $1D,$FE,$C4 ;
 $CEE8 DEFB $0E,$FD,$F8 ;
 $CEEB DEFB $37,$74,$20 ;
 $CEEE DEFB $3C,$03,$C0 ;
 $CEF1 DEFB $38,$00,$00 ;
 $CEF4 DEFB $00,$00,$00 ;
 $CEF7 DEFB $39,$C0,$00 ;
 $CEFA DEFB $3B,$00,$00 ;
 $CEFD DEFB $17,$80,$00 ;
 $CF00 DEFB $0F,$80,$00 ;
 $CF03 DEFB $07,$00,$00 ; }

; Sprite: Wulf
;
; .
;
; .
;
; Left Frame 1.
b$CF06 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CF07 DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $CF08 DEFB $0C,$03,$60,$C0 ; {#GRAPHIC$50(50)
 $CF0C DEFB $0C,$03,$70,$C0 ;
 $CF10 DEFB $06,$01,$98,$61 ;
 $CF14 DEFB $02,$07,$1C,$61 ;
 $CF18 DEFB $03,$0E,$0E,$65 ;
 $CF1C DEFB $03,$CC,$07,$75 ;
 $CF20 DEFB $01,$DC,$0F,$77 ;
 $CF24 DEFB $00,$BC,$1E,$C7 ;
 $CF28 DEFB $00,$7A,$3E,$1E ;
 $CF2C DEFB $00,$7B,$DF,$BE ;
 $CF30 DEFB $02,$FB,$DF,$FC ;
 $CF34 DEFB $03,$8F,$5F,$F8 ;
 $CF38 DEFB $37,$71,$A7,$78 ;
 $CF3C DEFB $5B,$FF,$A9,$B0 ;
 $CF40 DEFB $7D,$BB,$DF,$E0 ;
 $CF44 DEFB $7F,$97,$FF,$C0 ;
 $CF48 DEFB $27,$6A,$3F,$00 ;
 $CF4C DEFB $07,$7A,$00,$00 ;
 $CF50 DEFB $1F,$A8,$00,$00 ;
 $CF54 DEFB $0F,$20,$00,$00 ;
 $CF58 DEFB $03,$00,$00,$00 ;
 $CF5C DEFB $03,$00,$00,$00 ;
 $CF60 DEFB $01,$00,$00,$00 ; }
; Left Frame 2.
 $CF64 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CF65 DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $CF66 DEFB $00,$60,$0C,$00 ; {#GRAPHIC$51(51)
 $CF6A DEFB $00,$60,$0E,$00 ;
 $CF6E DEFB $00,$30,$03,$01 ;
 $CF72 DEFB $00,$30,$01,$81 ;
 $CF76 DEFB $00,$30,$00,$C5 ;
 $CF7A DEFB $00,$70,$00,$E5 ;
 $CF7E DEFB $00,$70,$03,$C7 ;
 $CF82 DEFB $00,$78,$07,$97 ;
 $CF86 DEFB $00,$78,$0F,$9E ;
 $CF8A DEFB $00,$32,$6F,$3C ;
 $CF8E DEFB $02,$BB,$EF,$FC ;
 $CF92 DEFB $03,$FB,$B7,$F8 ;
 $CF96 DEFB $37,$8F,$77,$F8 ;
 $CF9A DEFB $5B,$71,$A7,$70 ;
 $CF9E DEFB $ED,$FF,$A9,$A0 ;
 $CFA2 DEFB $7F,$FB,$DF,$C0 ;
 $CFA6 DEFB $27,$57,$FF,$80 ;
 $CFAA DEFB $07,$6A,$3F,$00 ;
 $CFAE DEFB $1F,$FA,$00,$00 ;
 $CFB2 DEFB $0F,$A8,$00,$00 ;
 $CFB6 DEFB $03,$20,$00,$00 ;
 $CFBA DEFB $03,$00,$00,$00 ;
 $CFBE DEFB $01,$00,$00,$00 ; }
; Left Frame 3.
 $CFC2 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $CFC3 DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $CFC4 DEFB $0C,$03,$60,$C0 ; {#GRAPHIC$52(52)
 $CFC8 DEFB $0C,$03,$70,$C0 ;
 $CFCC DEFB $06,$01,$98,$61 ;
 $CFD0 DEFB $02,$07,$1C,$61 ;
 $CFD4 DEFB $03,$0E,$0E,$65 ;
 $CFD8 DEFB $03,$CC,$05,$F5 ;
 $CFDC DEFB $01,$E4,$0B,$F7 ;
 $CFE0 DEFB $00,$F8,$07,$87 ;
 $CFE4 DEFB $00,$3A,$6F,$9E ;
 $CFE8 DEFB $00,$BB,$EF,$BC ;
 $CFEC DEFB $02,$FB,$BF,$FC ;
 $CFF0 DEFB $03,$8F,$7F,$F8 ;
 $CFF4 DEFB $37,$71,$A7,$78 ;
 $CFF8 DEFB $5B,$FF,$A9,$B0 ;
 $CFFC DEFB $ED,$BB,$DF,$E0 ;
 $D000 DEFB $7F,$97,$FF,$C0 ;
 $D004 DEFB $27,$6A,$3F,$00 ;
 $D008 DEFB $07,$7A,$00,$00 ;
 $D00C DEFB $1F,$A8,$00,$00 ;
 $D010 DEFB $0F,$20,$00,$00 ;
 $D014 DEFB $03,$00,$00,$00 ;
 $D018 DEFB $03,$00,$00,$00 ;
 $D01C DEFB $01,$00,$00,$00 ; }
; Right Frame 1.
 $D020 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D021 DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $D022 DEFB $03,$06,$C0,$30 ; {#GRAPHIC$54(54)
 $D026 DEFB $03,$0E,$C0,$30 ;
 $D02A DEFB $86,$19,$80,$60 ;
 $D02E DEFB $86,$38,$E0,$40 ;
 $D032 DEFB $A6,$70,$70,$C0 ;
 $D036 DEFB $AE,$E0,$33,$C0 ;
 $D03A DEFB $EE,$F0,$3B,$80 ;
 $D03E DEFB $E3,$78,$3D,$00 ;
 $D042 DEFB $78,$7C,$5E,$00 ;
 $D046 DEFB $3D,$FD,$DE,$00 ;
 $D04A DEFB $3F,$FD,$DF,$40 ;
 $D04E DEFB $1F,$FA,$F1,$C0 ;
 $D052 DEFB $1E,$E5,$8E,$EC ;
 $D056 DEFB $0B,$95,$FF,$DA ;
 $D05A DEFB $07,$FB,$DD,$B7 ;
 $D05E DEFB $03,$FF,$E9,$FE ;
 $D062 DEFB $00,$FC,$56,$E4 ;
 $D066 DEFB $00,$00,$5E,$E0 ;
 $D06A DEFB $00,$00,$15,$F8 ;
 $D06E DEFB $00,$00,$04,$F0 ;
 $D072 DEFB $00,$00,$00,$C0 ;
 $D076 DEFB $00,$00,$00,$C0 ;
 $D07A DEFB $00,$00,$00,$80 ; }
; Right Frame 2.
 $D07E DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D07F DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $D080 DEFB $00,$30,$06,$00 ; {#GRAPHIC$55(55)
 $D084 DEFB $00,$07,$06,$00 ;
 $D088 DEFB $80,$C0,$0C,$00 ;
 $D08C DEFB $81,$80,$0C,$00 ;
 $D090 DEFB $A3,$00,$0C,$00 ;
 $D094 DEFB $A7,$00,$0E,$00 ;
 $D098 DEFB $E3,$C0,$0E,$00 ;
 $D09C DEFB $E9,$E0,$1E,$00 ;
 $D0A0 DEFB $79,$F0,$1E,$00 ;
 $D0A4 DEFB $3C,$F6,$5C,$00 ;
 $D0A8 DEFB $3F,$F7,$DD,$40 ;
 $D0AC DEFB $1F,$ED,$DF,$C0 ;
 $D0B0 DEFB $1F,$EE,$F1,$CE ;
 $D0B4 DEFB $0E,$E5,$8E,$DA ;
 $D0B8 DEFB $05,$95,$FF,$B7 ;
 $D0BC DEFB $03,$F9,$DF,$FE ;
 $D0C0 DEFB $01,$FF,$EA,$E4 ;
 $D0C4 DEFB $00,$FC,$56,$E0 ;
 $D0C8 DEFB $00,$00,$5F,$F8 ;
 $D0CC DEFB $00,$00,$15,$F0 ;
 $D0D0 DEFB $00,$00,$04,$C0 ;
 $D0D4 DEFB $00,$00,$00,$C0 ;
 $D0D8 DEFB $00,$00,$00,$80 ; }
; Right Frame 3.
 $D0DC DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D0DD DEFB $17             ; Height = #N(#PEEK(#PC)) pixels.
 $D0DE DEFB $03,$06,$C0,$30 ; {#GRAPHIC$56(56)
 $D0E2 DEFB $03,$0E,$C0,$30 ;
 $D0E6 DEFB $86,$19,$80,$60 ;
 $D0EA DEFB $86,$38,$E0,$40 ;
 $D0EE DEFB $A6,$70,$70,$C0 ;
 $D0F2 DEFB $AF,$A0,$33,$C0 ;
 $D0F6 DEFB $EF,$D0,$27,$80 ;
 $D0FA DEFB $E1,$E0,$1F,$00 ;
 $D0FE DEFB $79,$F6,$5C,$00 ;
 $D102 DEFB $3D,$F7,$DD,$00 ;
 $D106 DEFB $3F,$FD,$DF,$40 ;
 $D10A DEFB $1F,$FE,$F1,$C0 ;
 $D10E DEFB $1E,$E5,$8E,$EC ;
 $D112 DEFB $0D,$95,$FF,$DA ;
 $D116 DEFB $07,$FB,$DD,$B7 ;
 $D11A DEFB $03,$FF,$E9,$FE ;
 $D11E DEFB $00,$FC,$56,$E4 ;
 $D122 DEFB $00,$00,$5E,$E0 ;
 $D126 DEFB $00,$00,$15,$F8 ;
 $D12A DEFB $00,$00,$04,$F0 ;
 $D12E DEFB $00,$00,$00,$C0 ;
 $D132 DEFB $00,$00,$00,$C0 ;
 $D136 DEFB $00,$00,$00,$80 ; }
; Pounce Left Frame 1.
 $D13A DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D13B DEFB $10             ; Height = #N(#PEEK(#PC)) pixels.
 $D13C DEFB $07,$E0,$7E,$05 ; {#GRAPHIC$58(58)
 $D140 DEFB $03,$FB,$0F,$85 ;
 $D144 DEFB $00,$3D,$C1,$EB ;
 $D148 DEFB $7F,$CD,$E1,$E6 ;
 $D14C DEFB $8F,$F6,$E3,$C6 ;
 $D150 DEFB $F9,$FE,$F7,$8D ;
 $D154 DEFB $F9,$FF,$77,$ED ;
 $D158 DEFB $0F,$E7,$B7,$F6 ;
 $D15C DEFB $01,$F9,$B3,$F2 ;
 $D160 DEFB $01,$66,$7B,$F6 ;
 $D164 DEFB $00,$B7,$FD,$FF ;
 $D168 DEFB $00,$95,$7E,$7F ;
 $D16C DEFB $00,$01,$BF,$FF ;
 $D170 DEFB $00,$00,$0F,$FE ;
 $D174 DEFB $00,$00,$03,$FC ;
 $D178 DEFB $00,$00,$00,$F0 ; }
; Pounce Right Frame 1.
 $D17C DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D17D DEFB $10             ; Height = #N(#PEEK(#PC)) pixels.
 $D17E DEFB $A0,$7E,$07,$E0 ; {#GRAPHIC$5C(5C)
 $D182 DEFB $A1,$F0,$DF,$C0 ;
 $D186 DEFB $D7,$83,$BC,$00 ;
 $D18A DEFB $67,$87,$B3,$FE ;
 $D18E DEFB $63,$C7,$6F,$F1 ;
 $D192 DEFB $B1,$EF,$7F,$9F ;
 $D196 DEFB $B7,$EE,$FF,$9F ;
 $D19A DEFB $6F,$ED,$E7,$F0 ;
 $D19E DEFB $4F,$DD,$9F,$80 ;
 $D1A2 DEFB $6F,$DE,$66,$80 ;
 $D1A6 DEFB $FF,$BF,$ED,$00 ;
 $D1AA DEFB $FE,$7F,$A9,$00 ;
 $D1AE DEFB $FF,$FD,$80,$00 ;
 $D1B2 DEFB $7F,$F0,$00,$00 ;
 $D1B6 DEFB $3F,$C0,$00,$00 ;
 $D1BA DEFB $0F,$00,$00,$00 ; }
; Pounce Left Frame 2.
 $D1BE DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D1BF DEFB $18             ; Height = #N(#PEEK(#PC)) pixels.
 $D1C0 DEFB $00,$00,$00,$C3 ; {#GRAPHIC$59(59)
 $D1C4 DEFB $00,$00,$01,$87 ;
 $D1C8 DEFB $00,$00,$01,$8E ;
 $D1CC DEFB $00,$00,$01,$9D ;
 $D1D0 DEFB $00,$00,$01,$19 ;
 $D1D4 DEFB $00,$00,$09,$F7 ;
 $D1D8 DEFB $00,$00,$17,$F2 ;
 $D1DC DEFB $00,$00,$1F,$3B ;
 $D1E0 DEFB $C0,$00,$1F,$AE ;
 $D1E4 DEFB $C0,$00,$EF,$FA ;
 $D1E8 DEFB $70,$01,$EF,$FC ;
 $D1EC DEFB $0E,$06,$FF,$F0 ;
 $D1F0 DEFB $76,$3E,$FF,$C0 ;
 $D1F4 DEFB $79,$FE,$FF,$00 ;
 $D1F8 DEFB $1F,$E6,$F6,$00 ;
 $D1FC DEFB $0E,$17,$4E,$00 ;
 $D200 DEFB $00,$F7,$FC,$00 ;
 $D204 DEFB $01,$FE,$98,$00 ;
 $D208 DEFB $07,$FD,$D0,$00 ;
 $D20C DEFB $7F,$FB,$78,$00 ;
 $D210 DEFB $8F,$F4,$C0,$00 ;
 $D214 DEFB $F9,$DF,$A0,$00 ;
 $D218 DEFB $F9,$E1,$00,$00 ;
 $D21C DEFB $07,$B8,$00,$00 ; }
; Pounce Right Frame 2.
 $D220 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $D221 DEFB $18             ; Height = #N(#PEEK(#PC)) pixels.
 $D222 DEFB $C3,$00,$00,$00 ; {#GRAPHIC$5D(5D)
 $D226 DEFB $E1,$80,$00,$00 ;
 $D22A DEFB $71,$80,$00,$00 ;
 $D22E DEFB $B9,$80,$00,$00 ;
 $D232 DEFB $98,$80,$00,$00 ;
 $D236 DEFB $EF,$90,$00,$00 ;
 $D23A DEFB $4F,$E8,$00,$00 ;
 $D23E DEFB $D3,$F4,$00,$00 ;
 $D242 DEFB $75,$F4,$00,$03 ;
 $D246 DEFB $5F,$F7,$00,$03 ;
 $D24A DEFB $3F,$F7,$80,$0E ;
 $D24E DEFB $0F,$FF,$60,$70 ;
 $D252 DEFB $03,$FF,$7C,$6E ;
 $D256 DEFB $00,$FF,$7F,$9E ;
 $D25A DEFB $00,$6F,$67,$F8 ;
 $D25E DEFB $00,$72,$E8,$70 ;
 $D262 DEFB $00,$3F,$EF,$00 ;
 $D266 DEFB $00,$19,$7F,$80 ;
 $D26A DEFB $00,$0B,$BF,$E0 ;
 $D26E DEFB $00,$1E,$DF,$FE ;
 $D272 DEFB $00,$03,$2F,$F1 ;
 $D276 DEFB $00,$05,$FB,$9F ;
 $D27A DEFB $00,$00,$87,$9F ;
 $D27E DEFB $00,$00,$1D,$E0 ; }

; Sabreman: Attacked
;
; .
;
; .
;
; Flying Left.
b$D282 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D283 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $D284 DEFB $00,$00     ; {#GRAPHIC$40(40)
 $D286 DEFB $00,$00     ;
 $D288 DEFB $30,$00     ;
 $D28A DEFB $3C,$00     ;
 $D28C DEFB $79,$C8     ;
 $D28E DEFB $63,$E8     ;
 $D290 DEFB $01,$D4     ;
 $D292 DEFB $01,$34     ;
 $D294 DEFB $01,$FA     ;
 $D296 DEFB $0E,$3A     ;
 $D298 DEFB $0F,$DF     ;
 $D29A DEFB $13,$EA     ;
 $D29C DEFB $1C,$60     ;
 $D29E DEFB $00,$F6     ;
 $D2A0 DEFB $03,$EE     ;
 $D2A2 DEFB $03,$DA     ;
 $D2A4 DEFB $0F,$B8     ;
 $D2A6 DEFB $0D,$6B     ;
 $D2A8 DEFB $02,$DD     ;
 $D2AA DEFB $01,$9E     ;
 $D2AC DEFB $03,$E2     ;
 $D2AE DEFB $06,$7C     ; }
; Sitting Left.
 $D2B0 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D2B1 DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $D2B2 DEFB $EF,$C0     ; {#GRAPHIC$41(41)
 $D2B4 DEFB $EF,$E4     ;
 $D2B6 DEFB $CE,$74     ;
 $D2B8 DEFB $86,$44     ;
 $D2BA DEFB $07,$34     ;
 $D2BC DEFB $07,$34     ;
 $D2BE DEFB $06,$34     ;
 $D2C0 DEFB $02,$6E     ;
 $D2C2 DEFB $00,$04     ;
 $D2C4 DEFB $07,$E0     ;
 $D2C6 DEFB $1F,$CC     ;
 $D2C8 DEFB $1B,$38     ;
 $D2CA DEFB $04,$C8     ;
 $D2CC DEFB $03,$28     ;
 $D2CE DEFB $0C,$E8     ;
 $D2D0 DEFB $3A,$E8     ;
 $D2D2 DEFB $07,$30     ;
 $D2D4 DEFB $03,$E0     ; }
; Dead Left.
 $D2D6 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D2D7 DEFB $0C         ; Height = #N(#PEEK(#PC)) pixels.
 $D2D8 DEFB $60,$01,$00 ; {#GRAPHIC$42(42)
 $D2DB DEFB $79,$71,$F8 ;
 $D2DE DEFB $03,$78,$84 ;
 $D2E1 DEFB $C7,$8A,$BE ;
 $D2E4 DEFB $06,$03,$5A ;
 $D2E7 DEFB $06,$63,$5A ;
 $D2EA DEFB $07,$7B,$A6 ;
 $D2ED DEFB $01,$73,$AE ;
 $D2F0 DEFB $00,$03,$54 ;
 $D2F3 DEFB $00,$01,$98 ;
 $D2F6 DEFB $00,$01,$88 ;
 $D2F9 DEFB $00,$00,$08 ; }
; Flying Right.
 $D2FC DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D2FD DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $D2FE DEFB $00,$00     ; {#GRAPHIC$44(44)
 $D300 DEFB $00,$00     ;
 $D302 DEFB $00,$0C     ;
 $D304 DEFB $00,$3C     ;
 $D306 DEFB $13,$9E     ;
 $D308 DEFB $17,$C6     ;
 $D30A DEFB $2B,$80     ;
 $D30C DEFB $2C,$80     ;
 $D30E DEFB $5F,$80     ;
 $D310 DEFB $5C,$70     ;
 $D312 DEFB $FB,$F0     ;
 $D314 DEFB $57,$C8     ;
 $D316 DEFB $06,$38     ;
 $D318 DEFB $6F,$00     ;
 $D31A DEFB $77,$C0     ;
 $D31C DEFB $5B,$C0     ;
 $D31E DEFB $ED,$F0     ;
 $D320 DEFB $D6,$B0     ;
 $D322 DEFB $BB,$40     ;
 $D324 DEFB $79,$80     ;
 $D326 DEFB $47,$C0     ;
 $D328 DEFB $3E,$60     ; }
; Sitting Right.
 $D32A DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D32B DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $D32C DEFB $03,$F7     ; {#GRAPHIC$45(45)
 $D32E DEFB $27,$F7     ;
 $D330 DEFB $2E,$73     ;
 $D332 DEFB $22,$61     ;
 $D334 DEFB $2C,$E0     ;
 $D336 DEFB $2C,$E0     ;
 $D338 DEFB $2C,$60     ;
 $D33A DEFB $76,$40     ;
 $D33C DEFB $20,$00     ;
 $D33E DEFB $07,$E0     ;
 $D340 DEFB $33,$F8     ;
 $D342 DEFB $1C,$D8     ;
 $D344 DEFB $13,$20     ;
 $D346 DEFB $14,$C0     ;
 $D348 DEFB $17,$30     ;
 $D34A DEFB $17,$5C     ;
 $D34C DEFB $0C,$E0     ;
 $D34E DEFB $07,$C0     ; }
; Dead Right.
 $D350 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D351 DEFB $0C         ; Height = #N(#PEEK(#PC)) pixels.
 $D352 DEFB $00,$80,$06 ; {#GRAPHIC$46(46)
 $D355 DEFB $1F,$8E,$9E ;
 $D358 DEFB $21,$1E,$CF ;
 $D35B DEFB $7D,$51,$E3 ;
 $D35E DEFB $5A,$C0,$60 ;
 $D361 DEFB $5A,$C6,$60 ;
 $D364 DEFB $65,$DE,$E0 ;
 $D367 DEFB $75,$CE,$80 ;
 $D36A DEFB $2A,$C0,$00 ;
 $D36D DEFB $19,$80,$00 ;
 $D370 DEFB $11,$80,$00 ;
 $D373 DEFB $10,$00,$00 ; }

; Sprite: Orchid
;
; .
;
; .
;
; Frame 1.
b$D376 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D377 DEFB $03         ; Height = #N(#PEEK(#PC)) pixels.
 $D378 DEFB $01,$80     ; {#GRAPHIC$48(48)
 $D37A DEFB $01,$E0     ;
 $D37C DEFB $02,$80     ; }
; Frame 2.
 $D37E DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D37F DEFB $03         ; Height = #N(#PEEK(#PC)) pixels.
 $D380 DEFB $01,$80     ; {#GRAPHIC$49(49)
 $D382 DEFB $01,$C0     ;
 $D384 DEFB $06,$B0     ; }
; Frame 3.
 $D386 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D387 DEFB $05         ; Height = #N(#PEEK(#PC)) pixels.
 $D388 DEFB $01,$80     ; {#GRAPHIC$4A(4A)
 $D38A DEFB $01,$C0     ;
 $D38C DEFB $02,$E0     ;
 $D38E DEFB $0C,$B8     ;
 $D390 DEFB $00,$80     ; }
; Frame 4.
 $D392 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D393 DEFB $06         ; Height = #N(#PEEK(#PC)) pixels.
 $D394 DEFB $01,$80     ; {#GRAPHIC$4B(4B)
 $D396 DEFB $07,$C0     ;
 $D398 DEFB $0D,$70     ;
 $D39A DEFB $1D,$B8     ;
 $D39C DEFB $19,$9C     ;
 $D39E DEFB $01,$00     ; }
; Frame 5.
 $D3A0 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D3A1 DEFB $08         ; Height = #N(#PEEK(#PC)) pixels.
 $D3A2 DEFB $01,$E0     ; {#GRAPHIC$4C(4C)
 $D3A4 DEFB $03,$E0     ;
 $D3A6 DEFB $0F,$A0     ;
 $D3A8 DEFB $1D,$B8     ;
 $D3AA DEFB $39,$9C     ;
 $D3AC DEFB $03,$80     ;
 $D3AE DEFB $03,$00     ;
 $D3B0 DEFB $01,$80     ; }
; Frame 6.
 $D3B2 DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D3B3 DEFB $0B         ; Height = #N(#PEEK(#PC)) pixels.
 $D3B4 DEFB $01,$A0     ; {#GRAPHIC$4D(4D)
 $D3B6 DEFB $05,$A0     ;
 $D3B8 DEFB $0D,$B0     ;
 $D3BA DEFB $3D,$B8     ;
 $D3BC DEFB $7B,$BC     ;
 $D3BE DEFB $73,$1E     ;
 $D3C0 DEFB $03,$06     ;
 $D3C2 DEFB $03,$00     ;
 $D3C4 DEFB $03,$C0     ;
 $D3C6 DEFB $01,$E0     ;
 $D3C8 DEFB $00,$E0     ; }
; Frame 7.
 $D3CA DEFB $02         ; Width = #N(#PEEK(#PC)) bytes.
 $D3CB DEFB $0D         ; Height = #N(#PEEK(#PC)) pixels.
 $D3CC DEFB $0D,$A0     ; {#GRAPHIC$4E(4E)
 $D3CE DEFB $1D,$B0     ;
 $D3D0 DEFB $3D,$B8     ;
 $D3D2 DEFB $7D,$BC     ;
 $D3D4 DEFB $7B,$BE     ;
 $D3D6 DEFB $F7,$1E     ;
 $D3D8 DEFB $E6,$0F     ;
 $D3DA DEFB $06,$03     ;
 $D3DC DEFB $07,$00     ;
 $D3DE DEFB $02,$E0     ;
 $D3E0 DEFB $01,$F8     ;
 $D3E2 DEFB $01,$F8     ;
 $D3E4 DEFB $00,$F0     ; }
; Frame 8.
 $D3E6 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D3E7 DEFB $10         ; Height = #N(#PEEK(#PC)) pixels.
 $D3E8 DEFB $01,$A0,$00 ; {#GRAPHIC$4F(4F)
 $D3EB DEFB $0D,$B0,$00 ;
 $D3EE DEFB $3D,$BC,$00 ;
 $D3F1 DEFB $7D,$BE,$00 ;
 $D3F4 DEFB $FB,$BF,$00 ;
 $D3F7 DEFB $F7,$1F,$00 ;
 $D3FA DEFB $EE,$07,$78 ;
 $D3FD DEFB $0C,$00,$C4 ;
 $D400 DEFB $0E,$61,$9A ;
 $D403 DEFB $07,$C7,$A1 ;
 $D406 DEFB $03,$3F,$8F ;
 $D409 DEFB $1F,$FF,$91 ;
 $D40C DEFB $0F,$FF,$CF ;
 $D40F DEFB $07,$9F,$E1 ;
 $D412 DEFB $07,$60,$F8 ;
 $D415 DEFB $03,$70,$1C ; }

; Sprite: Parrot
;
; .
;
; .
;
; Left Frame 1.
b$D418 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D419 DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $D41A DEFB $1F,$90  ; {#GRAPHIC$6C(6C)
 $D41C DEFB $EF,$B8  ;
 $D41E DEFB $70,$3C  ;
 $D420 DEFB $07,$F0  ;
 $D422 DEFB $0E,$7C  ;
 $D424 DEFB $0C,$3B  ;
 $D426 DEFB $0C,$70  ;
 $D428 DEFB $0E,$38  ;
 $D42A DEFB $07,$2E  ;
 $D42C DEFB $F7,$F1  ;
 $D42E DEFB $F7,$78  ;
 $D430 DEFB $F4,$AC  ;
 $D432 DEFB $74,$A2  ;
 $D434 DEFB $37,$70  ;
 $D436 DEFB $04,$F0  ;
 $D438 DEFB $07,$B0  ;
 $D43A DEFB $05,$98  ;
 $D43C DEFB $04,$88  ;
 $D43E DEFB $00,$80  ; }
; Left Frame 2.
 $D440 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D441 DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $D442 DEFB $0D,$90  ; {#GRAPHIC$6D(6D)
 $D444 DEFB $3D,$B8  ;
 $D446 DEFB $F0,$3C  ;
 $D448 DEFB $47,$F0  ;
 $D44A DEFB $0F,$3C  ;
 $D44C DEFB $0E,$1B  ;
 $D44E DEFB $0F,$30  ;
 $D450 DEFB $0F,$38  ;
 $D452 DEFB $07,$2E  ;
 $D454 DEFB $F7,$F1  ;
 $D456 DEFB $F7,$78  ;
 $D458 DEFB $F4,$AC  ;
 $D45A DEFB $74,$A2  ;
 $D45C DEFB $37,$70  ;
 $D45E DEFB $04,$F0  ;
 $D460 DEFB $07,$B0  ;
 $D462 DEFB $05,$98  ;
 $D464 DEFB $04,$80  ;
 $D466 DEFB $00,$80  ; }
; Right Frame 1.
 $D468 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D469 DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $D46A DEFB $09,$F8  ; {#GRAPHIC$6E(6E)
 $D46C DEFB $1D,$F7  ;
 $D46E DEFB $3C,$0E  ;
 $D470 DEFB $0F,$E0  ;
 $D472 DEFB $3E,$70  ;
 $D474 DEFB $DC,$30  ;
 $D476 DEFB $0E,$30  ;
 $D478 DEFB $1C,$70  ;
 $D47A DEFB $74,$E0  ;
 $D47C DEFB $8F,$EF  ;
 $D47E DEFB $1E,$EF  ;
 $D480 DEFB $35,$2F  ;
 $D482 DEFB $45,$2E  ;
 $D484 DEFB $0E,$FC  ;
 $D486 DEFB $0F,$20  ;
 $D488 DEFB $0D,$E0  ;
 $D48A DEFB $19,$A0  ;
 $D48C DEFB $11,$20  ;
 $D48E DEFB $01,$00  ; }
; Right Frame 2.
 $D490 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D491 DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $D492 DEFB $09,$B0  ; {#GRAPHIC$6F(6F)
 $D494 DEFB $1D,$BC  ;
 $D496 DEFB $3C,$0F  ;
 $D498 DEFB $0F,$E2  ;
 $D49A DEFB $3C,$F0  ;
 $D49C DEFB $D8,$70  ;
 $D49E DEFB $0C,$70  ;
 $D4A0 DEFB $1C,$70  ;
 $D4A2 DEFB $74,$E0  ;
 $D4A4 DEFB $8F,$EF  ;
 $D4A6 DEFB $1E,$EF  ;
 $D4A8 DEFB $35,$2F  ;
 $D4AA DEFB $45,$2E  ;
 $D4AC DEFB $0E,$EC  ;
 $D4AE DEFB $0F,$20  ;
 $D4B0 DEFB $0D,$E0  ;
 $D4B2 DEFB $19,$A0  ;
 $D4B4 DEFB $11,$20  ;
 $D4B6 DEFB $01,$00  ; }

; Sprite: Monkey
;
; .
;
; .
;
; Left Frame 1.
b$D4B8 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D4B9 DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $D4BA DEFB $01,$E0  ; {#GRAPHIC$70(70)
 $D4BC DEFB $03,$C0  ;
 $D4BE DEFB $03,$C0  ;
 $D4C0 DEFB $03,$68  ;
 $D4C2 DEFB $0F,$5C  ;
 $D4C4 DEFB $7D,$BE  ;
 $D4C6 DEFB $FD,$BF  ;
 $D4C8 DEFB $E1,$B7  ;
 $D4CA DEFB $7D,$8E  ;
 $D4CC DEFB $3B,$BE  ;
 $D4CE DEFB $03,$BC  ;
 $D4D0 DEFB $07,$B8  ;
 $D4D2 DEFB $0F,$70  ;
 $D4D4 DEFB $0E,$E0  ;
 $D4D6 DEFB $7F,$C0  ;
 $D4D8 DEFB $1F,$80  ;
 $D4DA DEFB $FF,$00  ;
 $D4DC DEFB $47,$00  ;
 $D4DE DEFB $27,$00  ;
 $D4E0 DEFB $1E,$00  ;
 $D4E2 DEFB $0C,$00  ; }
; Left Frame 2.
 $D4E4 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D4E5 DEFB $14      ; Height = #N(#PEEK(#PC)) pixels.
 $D4E6 DEFB $7B,$00  ; {#GRAPHIC$71(71)
 $D4E8 DEFB $F3,$E0  ;
 $D4EA DEFB $C0,$E0  ;
 $D4EC DEFB $70,$DC  ;
 $D4EE DEFB $3B,$BE  ;
 $D4F0 DEFB $1D,$F7  ;
 $D4F2 DEFB $2E,$F7  ;
 $D4F4 DEFB $F7,$4E  ;
 $D4F6 DEFB $3B,$BE  ;
 $D4F8 DEFB $FB,$BC  ;
 $D4FA DEFB $6B,$B8  ;
 $D4FC DEFB $0B,$70  ;
 $D4FE DEFB $0E,$E0  ;
 $D500 DEFB $7F,$C0  ;
 $D502 DEFB $1F,$80  ;
 $D504 DEFB $FF,$00  ;
 $D506 DEFB $67,$00  ;
 $D508 DEFB $27,$00  ;
 $D50A DEFB $1E,$00  ;
 $D50C DEFB $0C,$00  ; }
; Right Frame 1.
 $D50E DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D50F DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $D510 DEFB $07,$80  ; {#GRAPHIC$72(72)
 $D512 DEFB $03,$C0  ;
 $D514 DEFB $04,$C0  ;
 $D516 DEFB $16,$C0  ;
 $D518 DEFB $3A,$F0  ;
 $D51A DEFB $7D,$DE  ;
 $D51C DEFB $FD,$BF  ;
 $D51E DEFB $ED,$87  ;
 $D520 DEFB $71,$BE  ;
 $D522 DEFB $7D,$DC  ;
 $D524 DEFB $3D,$C0  ;
 $D526 DEFB $1D,$E0  ;
 $D528 DEFB $0E,$F0  ;
 $D52A DEFB $07,$70  ;
 $D52C DEFB $03,$FE  ;
 $D52E DEFB $01,$F8  ;
 $D530 DEFB $00,$FF  ;
 $D532 DEFB $00,$E2  ;
 $D534 DEFB $00,$E4  ;
 $D536 DEFB $00,$78  ;
 $D538 DEFB $00,$00  ; }
; Right Frame 2.
 $D53A DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D53B DEFB $14      ; Height = #N(#PEEK(#PC)) pixels.
 $D53C DEFB $00,$DE  ; {#GRAPHIC$73(73)
 $D53E DEFB $07,$CF  ;
 $D540 DEFB $07,$03  ;
 $D542 DEFB $3B,$0E  ;
 $D544 DEFB $7D,$DC  ;
 $D546 DEFB $FE,$B8  ;
 $D548 DEFB $EF,$74  ;
 $D54A DEFB $72,$EF  ;
 $D54C DEFB $7D,$DF  ;
 $D54E DEFB $3D,$DF  ;
 $D550 DEFB $1D,$D6  ;
 $D552 DEFB $0E,$D0  ;
 $D554 DEFB $07,$70  ;
 $D556 DEFB $03,$FE  ;
 $D558 DEFB $01,$F8  ;
 $D55A DEFB $00,$FF  ;
 $D55C DEFB $00,$E6  ;
 $D55E DEFB $00,$E4  ;
 $D560 DEFB $00,$F8  ;
 $D562 DEFB $00,$30  ; }

; Sprite: Lizard
;
; .
;
; .
;
; Left Frame 1.
b$D564 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D565 DEFB $0D         ; Height = #N(#PEEK(#PC)) pixels.
 $D566 DEFB $01,$C0,$78 ; {#GRAPHIC$74(74)
 $D569 DEFB $01,$E0,$F0 ;
 $D56C DEFB $01,$E0,$F0 ;
 $D56F DEFB $00,$FF,$E0 ;
 $D572 DEFB $7F,$7F,$FF ;
 $D575 DEFB $0F,$FF,$FF ;
 $D578 DEFB $F7,$FF,$FC ;
 $D57B DEFB $7F,$FF,$F8 ;
 $D57E DEFB $CF,$FF,$D8 ;
 $D581 DEFB $4F,$FE,$C8 ;
 $D584 DEFB $3F,$EE,$40 ;
 $D587 DEFB $00,$64,$00 ;
 $D58A DEFB $00,$20,$00 ; }
; Left Frame 2.
 $D58D DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D58E DEFB $0E         ; Height = #N(#PEEK(#PC)) pixels.
 $D58F DEFB $00,$00,$00 ; {#GRAPHIC$75(75)
 $D592 DEFB $00,$31,$80 ;
 $D595 DEFB $00,$3B,$80 ;
 $D598 DEFB $00,$7B,$C0 ;
 $D59B DEFB $7E,$71,$C3 ;
 $D59E DEFB $7F,$7F,$EF ;
 $D5A1 DEFB $FF,$FF,$FE ;
 $D5A4 DEFB $4F,$FF,$FE ;
 $D5A7 DEFB $CF,$FF,$FC ;
 $D5AA DEFB $7F,$FF,$F8 ;
 $D5AD DEFB $3F,$FF,$D8 ;
 $D5B0 DEFB $00,$7E,$C8 ;
 $D5B3 DEFB $00,$6E,$40 ;
 $D5B6 DEFB $00,$24,$00 ; }
; Right Frame 1.
 $D5B9 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D5BA DEFB $0E         ; Height = #N(#PEEK(#PC)) pixels.
 $D5BB DEFB $00,$00,$00 ; {#GRAPHIC$76(76)
 $D5BE DEFB $01,$1C,$00 ;
 $D5C1 DEFB $01,$DC,$00 ;
 $D5C4 DEFB $03,$DE,$00 ;
 $D5C7 DEFB $C3,$8E,$7E ;
 $D5CA DEFB $F7,$FE,$FE ;
 $D5CD DEFB $7F,$FF,$FF ;
 $D5D0 DEFB $7F,$FF,$F2 ;
 $D5D3 DEFB $3F,$FF,$F3 ;
 $D5D6 DEFB $1F,$FF,$F3 ;
 $D5D9 DEFB $1B,$FF,$FC ;
 $D5DC DEFB $13,$7E,$00 ;
 $D5DF DEFB $02,$76,$00 ;
 $D5E2 DEFB $00,$24,$00 ; }
; Right Frame 2.
 $D5E5 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D5E6 DEFB $0D         ; Height = #N(#PEEK(#PC)) pixels.
 $D5E7 DEFB $1E,$03,$80 ; {#GRAPHIC$77(77)
 $D5EA DEFB $0F,$07,$80 ;
 $D5ED DEFB $0F,$07,$80 ;
 $D5F0 DEFB $07,$FF,$00 ;
 $D5F3 DEFB $FF,$FE,$FE ;
 $D5F6 DEFB $FF,$FF,$F0 ;
 $D5F9 DEFB $3F,$FF,$EF ;
 $D5FC DEFB $1F,$FF,$FE ;
 $D5FF DEFB $1B,$FF,$F3 ;
 $D602 DEFB $13,$7F,$F2 ;
 $D605 DEFB $02,$77,$FC ;
 $D608 DEFB $00,$26,$00 ;
 $D60B DEFB $00,$04,$00 ; }

; Sprite: Snake
;
; .
;
; .
;
; Left Frame 1.
b$D60E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D60F DEFB $0D         ; Height = #N(#PEEK(#PC)) pixels.
 $D610 DEFB $00,$78,$0F ; {#GRAPHIC$78(78)
 $D613 DEFB $01,$FF,$3E ;
 $D616 DEFB $03,$FF,$FC ;
 $D619 DEFB $03,$C7,$F0 ;
 $D61C DEFB $03,$80,$00 ;
 $D61F DEFB $03,$80,$00 ;
 $D622 DEFB $01,$C0,$00 ;
 $D625 DEFB $01,$E0,$00 ;
 $D628 DEFB $00,$E0,$00 ;
 $D62B DEFB $00,$70,$00 ;
 $D62E DEFB $03,$F0,$00 ;
 $D631 DEFB $07,$70,$00 ;
 $D634 DEFB $01,$E0,$00 ; }
; Left Frame 2.
 $D637 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D638 DEFB $0B         ; Height = #N(#PEEK(#PC)) pixels.
 $D639 DEFB $00,$F8,$07 ; {#GRAPHIC$79(79)
 $D63C DEFB $03,$FF,$3E ;
 $D63F DEFB $07,$FF,$FC ;
 $D642 DEFB $07,$C7,$F0 ;
 $D645 DEFB $0F,$00,$00 ;
 $D648 DEFB $1E,$00,$00 ;
 $D64B DEFB $DC,$00,$00 ;
 $D64E DEFB $FE,$00,$00 ;
 $D651 DEFB $6E,$00,$00 ;
 $D654 DEFB $3E,$00,$00 ;
 $D657 DEFB $1C,$00,$00 ; }
; Right Frame 1.
 $D65A DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D65B DEFB $0B         ; Height = #N(#PEEK(#PC)) pixels.
 $D65C DEFB $F0,$1F,$00 ; {#GRAPHIC$7A(7A)
 $D65F DEFB $7C,$FF,$C0 ;
 $D662 DEFB $3F,$FF,$E0 ;
 $D665 DEFB $0F,$E3,$F0 ;
 $D668 DEFB $00,$00,$F0 ;
 $D66B DEFB $00,$00,$78 ;
 $D66E DEFB $00,$00,$3B ;
 $D671 DEFB $00,$00,$7F ;
 $D674 DEFB $00,$00,$76 ;
 $D677 DEFB $00,$00,$7C ;
 $D67A DEFB $00,$00,$38 ; }
; Right Frame 2.
 $D67D DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D67E DEFB $0D         ; Height = #N(#PEEK(#PC)) pixels.
 $D67F DEFB $F0,$1E,$00 ; {#GRAPHIC$7B(7B)
 $D682 DEFB $7C,$FF,$80 ;
 $D685 DEFB $3F,$FF,$C0 ;
 $D688 DEFB $0F,$E3,$C0 ;
 $D68B DEFB $00,$01,$C0 ;
 $D68E DEFB $00,$01,$C0 ;
 $D691 DEFB $00,$03,$80 ;
 $D694 DEFB $00,$07,$80 ;
 $D697 DEFB $00,$07,$00 ;
 $D69A DEFB $00,$0E,$00 ;
 $D69D DEFB $00,$0F,$C0 ;
 $D6A0 DEFB $00,$0E,$E0 ;
 $D6A3 DEFB $00,$07,$80 ; }

; Table: Orchid Positions
@label=TableOrchidPositions
b$D6A6 DEFB $38,$3F
 $D6A8 DEFB $00,$00
 $D6AA DEFB $50,$77
 $D6AC DEFB $30,$7F
 $D6AE DEFB $50,$7F
 $D6B0 DEFB $A8,$7F
 $D6B2 DEFB $D8,$7F
 $D6B4 DEFB $30,$47
 $D6B6 DEFB $78,$5F
 $D6B8 DEFB $58,$3F
 $D6BA DEFB $78,$7F
 $D6BC DEFB $B0,$7F
 $D6BE DEFB $80,$7F
 $D6C0 DEFB $68,$7F
 $D6C2 DEFB $38,$3F
 $D6C4 DEFB $80,$7F
 $D6C6 DEFB $C0,$7F
 $D6C8 DEFB $C0,$7F
 $D6CA DEFB $78,$5F
 $D6CC DEFB $78,$5F
 $D6CE DEFB $C8,$3F
 $D6D0 DEFB $20,$3F
 $D6D2 DEFB $48,$3F
 $D6D4 DEFB $D8,$7F
 $D6D6 DEFB $B0,$7F
 $D6D8 DEFB $78,$3F
 $D6DA DEFB $20,$7F
 $D6DC DEFB $80,$7F
 $D6DE DEFB $48,$3F
 $D6E0 DEFB $C0,$7F
 $D6E2 DEFB $20,$7F
 $D6E4 DEFB $B8,$3F
 $D6E6 DEFB $C8,$7F
 $D6E8 DEFB $60,$7F
 $D6EA DEFB $70,$7F
 $D6EC DEFB $10,$7F
 $D6EE DEFB $90,$3F
 $D6F0 DEFB $D8,$7F
 $D6F2 DEFB $58,$4F
 $D6F4 DEFB $98,$7F
 $D6F6 DEFB $40,$7F
 $D6F8 DEFB $A0,$7F
 $D6FA DEFB $C0,$7F
 $D6FC DEFB $C8,$7F
 $D6FE DEFB $48,$3F
 $D700 DEFB $50,$7F
 $D702 DEFB $78,$3F
 $D704 DEFB $40,$3F

; Sprite: Explosion
;
; .
;
; .
;
; Frame 1.
b$D706 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D707 DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $D708 DEFB $00,$00,$00 ; {#GRAPHIC$0D(0D)
 $D70B DEFB $00,$00,$00 ;
 $D70E DEFB $00,$00,$00 ;
 $D711 DEFB $00,$00,$00 ;
 $D714 DEFB $00,$00,$00 ;
 $D717 DEFB $00,$00,$00 ;
 $D71A DEFB $00,$1F,$00 ;
 $D71D DEFB $00,$3F,$80 ;
 $D720 DEFB $03,$BF,$C0 ;
 $D723 DEFB $07,$F3,$C0 ;
 $D726 DEFB $07,$ED,$80 ;
 $D729 DEFB $07,$EE,$E0 ;
 $D72C DEFB $03,$DD,$F0 ;
 $D72F DEFB $01,$BF,$F8 ;
 $D732 DEFB $03,$CF,$F8 ;
 $D735 DEFB $07,$F7,$F8 ;
 $D738 DEFB $07,$D6,$D0 ;
 $D73B DEFB $07,$F1,$E0 ;
 $D73E DEFB $03,$BB,$F0 ;
 $D741 DEFB $00,$77,$E0 ;
 $D744 DEFB $00,$03,$C0 ; }
; Frame 2.
 $D747 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D748 DEFB $17         ; Height = #N(#PEEK(#PC)) pixels.
 $D749 DEFB $00,$00,$00 ; {#GRAPHIC$08(08)
 $D74C DEFB $00,$00,$00 ;
 $D74F DEFB $00,$F8,$00 ;
 $D752 DEFB $03,$FC,$F0 ;
 $D755 DEFB $03,$FD,$F8 ;
 $D758 DEFB $03,$FF,$F8 ;
 $D75B DEFB $01,$FF,$FC ;
 $D75E DEFB $1F,$EB,$FC ;
 $D761 DEFB $3F,$F7,$FC ;
 $D764 DEFB $7F,$77,$FC ;
 $D767 DEFB $7F,$82,$FC ;
 $D76A DEFB $3F,$C1,$F8 ;
 $D76D DEFB $3F,$E2,$F0 ;
 $D770 DEFB $1F,$87,$E0 ;
 $D773 DEFB $0F,$67,$F8 ;
 $D776 DEFB $1F,$EF,$FC ;
 $D779 DEFB $3F,$F7,$FC ;
 $D77C DEFB $3F,$FF,$FC ;
 $D77F DEFB $1F,$FF,$FC ;
 $D782 DEFB $0D,$F7,$F8 ;
 $D785 DEFB $03,$FC,$F0 ;
 $D788 DEFB $01,$E0,$C0 ;
 $D78B DEFB $00,$C0,$00 ; }
; Frame 3.
 $D78E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D78F DEFB $18         ; Height = #N(#PEEK(#PC)) pixels.
 $D790 DEFB $00,$00,$00 ; {#GRAPHIC$09(09)
 $D793 DEFB $07,$E3,$C0 ;
 $D796 DEFB $0F,$F7,$F0 ;
 $D799 DEFB $1F,$FF,$F8 ;
 $D79C DEFB $1F,$FF,$FC ;
 $D79F DEFB $0F,$FF,$FC ;
 $D7A2 DEFB $07,$DF,$FC ;
 $D7A5 DEFB $3F,$FF,$F8 ;
 $D7A8 DEFB $7F,$C1,$F6 ;
 $D7AB DEFB $FF,$80,$FF ;
 $D7AE DEFB $FC,$00,$3F ;
 $D7B1 DEFB $FE,$00,$3F ;
 $D7B4 DEFB $7F,$00,$FF ;
 $D7B7 DEFB $3F,$00,$FF ;
 $D7BA DEFB $1F,$00,$7E ;
 $D7BD DEFB $3F,$00,$3E ;
 $D7C0 DEFB $7E,$00,$E4 ;
 $D7C3 DEFB $FC,$73,$FC ;
 $D7C6 DEFB $FF,$FF,$FC ;
 $D7C9 DEFB $7F,$FF,$FE ;
 $D7CC DEFB $7F,$FF,$FE ;
 $D7CF DEFB $3F,$F9,$FC ;
 $D7D2 DEFB $1D,$F0,$F8 ;
 $D7D5 DEFB $00,$E0,$00 ; }
; Frame 4.
 $D7D8 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D7D9 DEFB $18         ; Height = #N(#PEEK(#PC)) pixels.
 $D7DA DEFB $03,$8F,$00 ; {#GRAPHIC$0A(0A)
 $D7DD DEFB $07,$DF,$80 ;
 $D7E0 DEFB $0F,$FF,$70 ;
 $D7E3 DEFB $0F,$FF,$F8 ;
 $D7E6 DEFB $37,$FF,$FC ;
 $D7E9 DEFB $7F,$DF,$FC ;
 $D7EC DEFB $FF,$8D,$FC ;
 $D7EF DEFB $F8,$00,$D8 ;
 $D7F2 DEFB $FC,$00,$3E ;
 $D7F5 DEFB $7C,$00,$7F ;
 $D7F8 DEFB $1C,$00,$7F ;
 $D7FB DEFB $78,$00,$7F ;
 $D7FE DEFB $F0,$00,$1F ;
 $D801 DEFB $F8,$00,$7F ;
 $D804 DEFB $FC,$00,$7E ;
 $D807 DEFB $5C,$00,$70 ;
 $D80A DEFB $3C,$00,$38 ;
 $D80D DEFB $78,$00,$FC ;
 $D810 DEFB $7E,$01,$FC ;
 $D813 DEFB $3F,$1D,$FC ;
 $D816 DEFB $1B,$7E,$F8 ;
 $D819 DEFB $07,$FF,$E0 ;
 $D81C DEFB $07,$F7,$F0 ;
 $D81F DEFB $03,$E7,$F0 ; }

; Sprite: Appearing
;
; .
;
; .
;
; Frame 1.
b$D822 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D823 DEFB $0E         ; Height = #N(#PEEK(#PC)) pixels.
 $D824 DEFB $00,$30,$00 ; {#GRAPHIC$01(01)
 $D827 DEFB $04,$30,$70 ;
 $D82A DEFB $07,$33,$F0 ;
 $D82D DEFB $07,$CF,$C0 ;
 $D830 DEFB $01,$F3,$00 ;
 $D833 DEFB $0E,$7C,$00 ;
 $D836 DEFB $03,$9F,$00 ;
 $D839 DEFB $00,$07,$DE ;
 $D83C DEFB $3F,$F9,$EE ;
 $D83F DEFB $3F,$F6,$70 ;
 $D842 DEFB $00,$07,$20 ;
 $D845 DEFB $07,$3E,$00 ;
 $D848 DEFB $02,$36,$00 ;
 $D84B DEFB $00,$30,$00 ; }
; Frame 2.
 $D84E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D84F DEFB $13         ; Height = #N(#PEEK(#PC)) pixels.
 $D850 DEFB $00,$60,$00 ; {#GRAPHIC$02(02)
 $D853 DEFB $00,$60,$00 ;
 $D856 DEFB $00,$60,$00 ;
 $D859 DEFB $10,$60,$00 ;
 $D85C DEFB $38,$70,$18 ;
 $D85F DEFB $3C,$30,$7C ;
 $D862 DEFB $1E,$31,$F8 ;
 $D865 DEFB $0F,$3F,$E0 ;
 $D868 DEFB $07,$37,$80 ;
 $D86B DEFB $7B,$BA,$60 ;
 $D86E DEFB $71,$D8,$60 ;
 $D871 DEFB $0E,$E8,$60 ;
 $D874 DEFB $0F,$70,$C0 ;
 $D877 DEFB $06,$7C,$C0 ;
 $D87A DEFB $00,$78,$C0 ;
 $D87D DEFB $00,$60,$C0 ;
 $D880 DEFB $00,$61,$C0 ;
 $D883 DEFB $00,$61,$80 ;
 $D886 DEFB $00,$60,$00 ; }
; Frame 3.
 $D889 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D88A DEFB $17         ; Height = #N(#PEEK(#PC)) pixels.
 $D88B DEFB $01,$80,$00 ; {#GRAPHIC$03(03)
 $D88E DEFB $01,$80,$00 ;
 $D891 DEFB $01,$80,$0C ;
 $D894 DEFB $01,$C0,$1E ;
 $D897 DEFB $00,$C0,$3C ;
 $D89A DEFB $60,$C0,$78 ;
 $D89D DEFB $70,$E0,$F0 ;
 $D8A0 DEFB $60,$61,$E0 ;
 $D8A3 DEFB $B8,$63,$C0 ;
 $D8A6 DEFB $D8,$63,$80 ;
 $D8A9 DEFB $1D,$0F,$40 ;
 $D8AC DEFB $0D,$DE,$C0 ;
 $D8AF DEFB $0E,$BC,$C0 ;
 $D8B2 DEFB $06,$B0,$C0 ;
 $D8B5 DEFB $07,$0E,$C0 ;
 $D8B8 DEFB $03,$04,$C0 ;
 $D8BB DEFB $03,$B0,$C0 ;
 $D8BE DEFB $01,$30,$C0 ;
 $D8C1 DEFB $00,$30,$C0 ;
 $D8C4 DEFB $00,$30,$C0 ;
 $D8C7 DEFB $00,$30,$00 ;
 $D8CA DEFB $00,$30,$00 ;
 $D8CD DEFB $00,$30,$00 ; }
; Frame 4.
 $D8D0 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D8D1 DEFB $17         ; Height = #N(#PEEK(#PC)) pixels.
 $D8D2 DEFB $00,$08,$01 ; {#GRAPHIC$04(04)
 $D8D5 DEFB $00,$18,$07 ;
 $D8D8 DEFB $00,$1C,$07 ;
 $D8DB DEFB $00,$0C,$0E ;
 $D8DE DEFB $10,$0E,$1C ;
 $D8E1 DEFB $38,$06,$1C ;
 $D8E4 DEFB $1C,$04,$38 ;
 $D8E7 DEFB $6E,$00,$70 ;
 $D8EA DEFB $77,$00,$70 ;
 $D8ED DEFB $33,$84,$E0 ;
 $D8F0 DEFB $31,$CD,$C0 ;
 $D8F3 DEFB $30,$ED,$C0 ;
 $D8F6 DEFB $38,$77,$80 ;
 $D8F9 DEFB $18,$3B,$60 ;
 $D8FC DEFB $18,$1D,$70 ;
 $D8FF DEFB $18,$0E,$38 ;
 $D902 DEFB $1C,$04,$1C ;
 $D905 DEFB $0C,$18,$0E ;
 $D908 DEFB $0C,$18,$04 ;
 $D90B DEFB $0C,$18,$00 ;
 $D90E DEFB $00,$18,$00 ;
 $D911 DEFB $00,$18,$00 ;
 $D914 DEFB $00,$18,$00 ; }
; Frame 5.
 $D917 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D918 DEFB $17         ; Height = #N(#PEEK(#PC)) pixels.
 $D919 DEFB $00,$3C,$00 ; {#GRAPHIC$05(05)
 $D91C DEFB $00,$3F,$00 ;
 $D91F DEFB $00,$0F,$80 ;
 $D922 DEFB $00,$03,$18 ;
 $D925 DEFB $19,$80,$18 ;
 $D928 DEFB $19,$80,$18 ;
 $D92B DEFB $19,$80,$18 ;
 $D92E DEFB $19,$80,$18 ;
 $D931 DEFB $31,$80,$18 ;
 $D934 DEFB $31,$80,$18 ;
 $D937 DEFB $31,$80,$18 ;
 $D93A DEFB $61,$80,$18 ;
 $D93D DEFB $61,$8F,$18 ;
 $D940 DEFB $61,$8F,$D8 ;
 $D943 DEFB $C1,$81,$DB ;
 $D946 DEFB $C1,$8C,$1B ;
 $D949 DEFB $C1,$8C,$18 ;
 $D94C DEFB $C1,$8C,$00 ;
 $D94F DEFB $00,$06,$00 ;
 $D952 DEFB $00,$06,$00 ;
 $D955 DEFB $00,$06,$00 ;
 $D958 DEFB $00,$03,$00 ;
 $D95B DEFB $00,$03,$00 ; }
; Frame 6.
 $D95E DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $D95F DEFB $13         ; Height = #N(#PEEK(#PC)) pixels.
 $D960 DEFB $00,$F0,$80 ; {#GRAPHIC$06(06)
 $D963 DEFB $00,$FF,$00 ;
 $D966 DEFB $04,$0F,$F0 ;
 $D969 DEFB $07,$00,$F0 ;
 $D96C DEFB $0E,$20,$00 ;
 $D96F DEFB $0E,$70,$38 ;
 $D972 DEFB $1C,$E0,$3B ;
 $D975 DEFB $1D,$C0,$3D ;
 $D978 DEFB $3B,$80,$2E ;
 $D97B DEFB $3B,$60,$2E ;
 $D97E DEFB $76,$60,$77 ;
 $D981 DEFB $74,$30,$E3 ;
 $D984 DEFB $E8,$31,$C3 ;
 $D987 DEFB $E0,$1B,$81 ;
 $D98A DEFB $C0,$1B,$00 ;
 $D98D DEFB $00,$0C,$00 ;
 $D990 DEFB $00,$0C,$00 ;
 $D993 DEFB $00,$06,$00 ;
 $D996 DEFB $00,$06,$00 ; }

; Sprite: Crate
b$D999 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D99A DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D99B DEFB $00,$C0  ; {#GRAPHIC$80(80)
 $D99D DEFB $00,$E0  ;
 $D99F DEFB $0D,$D0  ;
 $D9A1 DEFB $0F,$A8  ;
 $D9A3 DEFB $DD,$A8  ;
 $D9A5 DEFB $FD,$3A  ;
 $D9A7 DEFB $5C,$DD  ;
 $D9A9 DEFB $DA,$EE  ;
 $D9AB DEFB $C7,$77  ;
 $D9AD DEFB $9F,$BB  ;
 $D9AF DEFB $EF,$DD  ;
 $D9B1 DEFB $77,$EF  ;
 $D9B3 DEFB $3B,$FC  ;
 $D9B5 DEFB $1D,$F0  ;
 $D9B7 DEFB $0E,$C0  ;
 $D9B9 DEFB $07,$00  ; }

; Sprite: Ring
b$D9BB DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D9BC DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D9BD DEFB $07,$C0  ; {#GRAPHIC$81(ring)
 $D9BF DEFB $1F,$F0  ;
 $D9C1 DEFB $3C,$78  ;
 $D9C3 DEFB $30,$1C  ;
 $D9C5 DEFB $60,$0E  ;
 $D9C7 DEFB $60,$06  ;
 $D9C9 DEFB $60,$07  ;
 $D9CB DEFB $00,$03  ;
 $D9CD DEFB $70,$03  ;
 $D9CF DEFB $FE,$03  ;
 $D9D1 DEFB $9E,$07  ;
 $D9D3 DEFB $67,$06  ;
 $D9D5 DEFB $77,$0E  ;
 $D9D7 DEFB $3B,$7C  ;
 $D9D9 DEFB $1B,$78  ;
 $D9DB DEFB $06,$00  ; }

; Sprite: Fruit
b$D9DD DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $D9DE DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D9DF DEFB $07,$B0  ; {#GRAPHIC$82(82)
 $D9E1 DEFB $1F,$BC  ;
 $D9E3 DEFB $3F,$EE  ;
 $D9E5 DEFB $7F,$F6  ;
 $D9E7 DEFB $7F,$FE  ;
 $D9E9 DEFB $FF,$F7  ;
 $D9EB DEFB $FF,$F7  ;
 $D9ED DEFB $FF,$F7  ;
 $D9EF DEFB $FF,$EF  ;
 $D9F1 DEFB $7F,$EE  ;
 $D9F3 DEFB $7F,$D6  ;
 $D9F5 DEFB $3F,$B8  ;
 $D9F7 DEFB $1E,$7C  ;
 $D9F9 DEFB $07,$B2  ;
 $D9FB DEFB $00,$D2  ;
 $D9FD DEFB $00,$0C  ; }

; Sprite: Cap
b$D9FF DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DA00 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DA01 DEFB $63,$00  ; {#GRAPHIC$83(83)
 $DA03 DEFB $63,$30  ;
 $DA05 DEFB $40,$30  ;
 $DA07 DEFB $1F,$10  ;
 $DA09 DEFB $3F,$C3  ;
 $DA0B DEFB $61,$E3  ;
 $DA0D DEFB $5E,$72  ;
 $DA0F DEFB $3B,$BA  ;
 $DA11 DEFB $3B,$DC  ;
 $DA13 DEFB $36,$E6  ;
 $DA15 DEFB $35,$D6  ;
 $DA17 DEFB $13,$36  ;
 $DA19 DEFB $10,$76  ;
 $DA1B DEFB $2F,$EC  ;
 $DA1D DEFB $13,$98  ;
 $DA1F DEFB $00,$00  ; }

; Sprite: Shield
b$DA21 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DA22 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DA23 DEFB $17,$F8  ; {#GRAPHIC$84(84)
 $DA25 DEFB $20,$18  ;
 $DA27 DEFB $58,$22  ;
 $DA29 DEFB $F0,$21  ;
 $DA2B DEFB $37,$C3  ;
 $DA2D DEFB $CA,$ED  ;
 $DA2F DEFB $F5,$B1  ;
 $DA31 DEFB $F7,$51  ;
 $DA33 DEFB $F7,$91  ;
 $DA35 DEFB $F7,$F1  ;
 $DA37 DEFB $6B,$DD  ;
 $DA39 DEFB $3C,$2B  ;
 $DA3B DEFB $FB,$D5  ;
 $DA3D DEFB $7B,$DA  ;
 $DA3F DEFB $37,$EC  ;
 $DA41 DEFB $17,$E8  ; }

; Sprite: Life
b$DA43 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DA44 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DA45 DEFB $09,$F0  ; {#GRAPHIC$85(85)
 $DA47 DEFB $0E,$F0  ;
 $DA49 DEFB $02,$C0  ;
 $DA4B DEFB $02,$C0  ;
 $DA4D DEFB $02,$C0  ;
 $DA4F DEFB $1A,$D8  ;
 $DA51 DEFB $1E,$D8  ;
 $DA53 DEFB $1D,$F8  ;
 $DA55 DEFB $1B,$F8  ;
 $DA57 DEFB $19,$F8  ;
 $DA59 DEFB $1C,$F8  ;
 $DA5B DEFB $0E,$F0  ;
 $DA5D DEFB $02,$C0  ;
 $DA5F DEFB $02,$C0  ;
 $DA61 DEFB $02,$40  ;
 $DA63 DEFB $01,$80  ; }

; Sprite: Money Bag
b$DA65 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DA66 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DA67 DEFB $E1,$FF  ; {#GRAPHIC$86(86)
 $DA69 DEFB $FF,$7E  ;
 $DA6B DEFB $6C,$3C  ;
 $DA6D DEFB $6B,$5C  ;
 $DA6F DEFB $6F,$5C  ;
 $DA71 DEFB $6F,$5C  ;
 $DA73 DEFB $6E,$3C  ;
 $DA75 DEFB $6D,$7C  ;
 $DA77 DEFB $6D,$7C  ;
 $DA79 DEFB $3C,$1C  ;
 $DA7B DEFB $3B,$7C  ;
 $DA7D DEFB $1F,$F8  ;
 $DA7F DEFB $00,$01  ;
 $DA81 DEFB $03,$DE  ;
 $DA83 DEFB $06,$E0  ;
 $DA85 DEFB $04,$A0  ; }

; Sprite: Sword
b$DA87 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DA88 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DA89 DEFB $C0,$00  ; {#GRAPHIC$87(87)
 $DA8B DEFB $E0,$00  ;
 $DA8D DEFB $76,$00  ;
 $DA8F DEFB $2C,$00  ;
 $DA91 DEFB $1A,$00  ;
 $DA93 DEFB $37,$00  ;
 $DA95 DEFB $2F,$80  ;
 $DA97 DEFB $07,$80  ;
 $DA99 DEFB $03,$C0  ;
 $DA9B DEFB $00,$E0  ;
 $DA9D DEFB $00,$70  ;
 $DA9F DEFB $00,$38  ;
 $DAA1 DEFB $00,$18  ;
 $DAA3 DEFB $00,$04  ;
 $DAA5 DEFB $00,$02  ;
 $DAA7 DEFB $00,$01  ; }

; Sprite: Unused?
;
; .
;
; .
;
; Not in the sprite table.
b$DAA9 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DAAA DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DAAB DEFB $0F,$F0  ; {#NOCROP(#PC,$02,$10,$07)(unused-01)
 $DAAD DEFB $1B,$98  ;
 $DAAF DEFB $0D,$B0  ;
 $DAB1 DEFB $01,$80  ;
 $DAB3 DEFB $01,$80  ;
 $DAB5 DEFB $02,$C0  ;
 $DAB7 DEFB $06,$E0  ;
 $DAB9 DEFB $0D,$F0  ;
 $DABB DEFB $19,$F8  ;
 $DABD DEFB $33,$FC  ;
 $DABF DEFB $37,$FC  ;
 $DAC1 DEFB $78,$1E  ;
 $DAC3 DEFB $40,$06  ;
 $DAC5 DEFB $40,$02  ;
 $DAC7 DEFB $38,$1C  ;
 $DAC9 DEFB $07,$E0  ; }
; Not in the sprite table.
 $DACB DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DACC DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $DACD DEFB $0E,$18  ; {#NOCROP(#PC,$02,$10,$07)(unused-02)
 $DACF DEFB $1F,$14  ;
 $DAD1 DEFB $11,$12  ;
 $DAD3 DEFB $6E,$CA  ;
 $DAD5 DEFB $DB,$69  ;
 $DAD7 DEFB $D1,$65  ;
 $DAD9 DEFB $DB,$69  ;
 $DADB DEFB $6E,$69  ;
 $DADD DEFB $11,$1A  ;
 $DADF DEFB $1F,$12  ;
 $DAE1 DEFB $0E,$0A  ;
 $DAE3 DEFB $04,$6A  ;
 $DAE5 DEFB $07,$71  ;
 $DAE7 DEFB $08,$01  ;
 $DAE9 DEFB $08,$72  ;
 $DAEB DEFB $07,$8C  ; }
; Not in the sprite table.
 $DAED DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $DAEE DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $DAEF DEFB $FF,$C0  ; {#CROP(#PC,$02,$0E,$07)(unused-03)
 $DAF1 DEFB $FF,$70  ;
 $DAF3 DEFB $C3,$78  ;
 $DAF5 DEFB $DB,$7E  ;
 $DAF7 DEFB $DB,$3F  ;
 $DAF9 DEFB $FF,$67  ;
 $DAFB DEFB $81,$2B  ;
 $DAFD DEFB $FE,$CB  ;
 $DAFF DEFB $7D,$D3  ;
 $DB01 DEFB $43,$BF  ;
 $DB03 DEFB $1F,$77  ;
 $DB05 DEFB $04,$EE  ;
 $DB07 DEFB $03,$9C  ;
 $DB09 DEFB $00,$F8  ; }

; Sprite: Sleeping Warthog
b$DB0B DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $DB0C DEFB $15         ; Height = #N(#PEEK(#PC)) pixels.
 $DB0D DEFB $01,$90,$00 ; {#GRAPHIC$AC(AC)
 $DB10 DEFB $01,$63,$00 ;
 $DB13 DEFB $0F,$AF,$00 ;
 $DB16 DEFB $1F,$F7,$86 ;
 $DB19 DEFB $0E,$F3,$89 ;
 $DB1C DEFB $1F,$DB,$89 ;
 $DB1F DEFB $39,$CB,$F4 ;
 $DB22 DEFB $7F,$27,$F8 ;
 $DB25 DEFB $FF,$EF,$FC ;
 $DB28 DEFB $BF,$EF,$FC ;
 $DB2B DEFB $B0,$CF,$FE ;
 $DB2E DEFB $AF,$57,$FE ;
 $DB31 DEFB $9F,$57,$FE ;
 $DB34 DEFB $FF,$3B,$FE ;
 $DB37 DEFB $7F,$FC,$7E ;
 $DB3A DEFB $FF,$FF,$FC ;
 $DB3D DEFB $7F,$FF,$FC ;
 $DB40 DEFB $3F,$FF,$F8 ;
 $DB43 DEFB $1F,$FF,$F0 ;
 $DB46 DEFB $0F,$FF,$C0 ;
 $DB49 DEFB $01,$FE,$00 ; }

; Sprite: Warthog
;
; .
;
; .
;
; Left Frame 1.
b$DB4C DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $DB4D DEFB $11             ; Height = #N(#PEEK(#PC)) pixels.
 $DB4E DEFB $03,$60,$00,$CC ; {#GRAPHIC$A8(A8)
 $DB52 DEFB $03,$B0,$00,$6C ;
 $DB56 DEFB $01,$88,$00,$6C ;
 $DB5A DEFB $01,$E4,$00,$6E ;
 $DB5E DEFB $00,$F8,$00,$1E ;
 $DB62 DEFB $30,$7D,$80,$FC ;
 $DB66 DEFB $7E,$3D,$F3,$FC ;
 $DB6A DEFB $1F,$9D,$F7,$F8 ;
 $DB6E DEFB $7F,$DD,$F7,$F8 ;
 $DB72 DEFB $DF,$FF,$F7,$F8 ;
 $DB76 DEFB $98,$FF,$F7,$F8 ;
 $DB7A DEFB $09,$7F,$FB,$FF ;
 $DB7E DEFB $0B,$7F,$FD,$FD ;
 $DB82 DEFB $04,$FF,$FF,$F9 ;
 $DB86 DEFB $03,$FF,$FF,$FA ;
 $DB8A DEFB $07,$FF,$FF,$F0 ;
 $DB8E DEFB $0F,$8F,$87,$C0 ; }
; Right Frame 1.
 $DB92 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $DB93 DEFB $12             ; Height = #N(#PEEK(#PC)) pixels.
 $DB94 DEFB $00,$DD,$B0,$00 ; {#GRAPHIC$AA(AA)
 $DB98 DEFB $01,$B9,$B0,$00 ;
 $DB9C DEFB $03,$71,$D8,$00 ;
 $DBA0 DEFB $00,$E0,$E8,$00 ;
 $DBA4 DEFB $01,$60,$70,$0C ;
 $DBA8 DEFB $01,$71,$F0,$7E ;
 $DBAC DEFB $00,$F7,$B9,$F8 ;
 $DBB0 DEFB $03,$FB,$BB,$FE ;
 $DBB4 DEFB $07,$FB,$BB,$FB ;
 $DBB8 DEFB $0F,$FB,$BF,$39 ;
 $DBBC DEFB $3F,$FB,$FE,$90 ;
 $DBC0 DEFB $4F,$F7,$FE,$D0 ;
 $DBC4 DEFB $4F,$EF,$FF,$20 ;
 $DBC8 DEFB $2F,$FF,$FF,$C0 ;
 $DBCC DEFB $0F,$FF,$FF,$C0 ;
 $DBD0 DEFB $07,$FF,$FF,$E0 ;
 $DBD4 DEFB $03,$FF,$F1,$F0 ;
 $DBD8 DEFB $00,$FF,$80,$00 ; }
; Right Frame 2.
 $DBDC DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $DBDD DEFB $11             ; Height = #N(#PEEK(#PC)) pixels.
 $DBDE DEFB $33,$00,$06,$C0 ; {#GRAPHIC$AB(AB)
 $DBE2 DEFB $36,$00,$0D,$C0 ;
 $DBE6 DEFB $36,$00,$11,$80 ;
 $DBEA DEFB $76,$00,$27,$80 ;
 $DBEE DEFB $78,$00,$1F,$00 ;
 $DBF2 DEFB $3F,$01,$BE,$0C ;
 $DBF6 DEFB $3F,$CF,$BC,$7E ;
 $DBFA DEFB $1F,$EF,$B9,$F8 ;
 $DBFE DEFB $1F,$EF,$BB,$FE ;
 $DC02 DEFB $1F,$EF,$FF,$FB ;
 $DC06 DEFB $1F,$EF,$FF,$19 ;
 $DC0A DEFB $FF,$DF,$FE,$90 ;
 $DC0E DEFB $BF,$BF,$FE,$D0 ;
 $DC12 DEFB $9F,$FF,$FF,$20 ;
 $DC16 DEFB $5F,$FF,$FF,$C0 ;
 $DC1A DEFB $0F,$FF,$FF,$E0 ;
 $DC1E DEFB $03,$E1,$F1,$F0 ; }
; Left Frame 2.
 $DC22 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $DC23 DEFB $12             ; Height = #N(#PEEK(#PC)) pixels.
 $DC24 DEFB $00,$0D,$BB,$00 ; {#GRAPHIC$A9(A9)
 $DC28 DEFB $00,$0D,$9D,$80 ;
 $DC2C DEFB $00,$1B,$8E,$C0 ;
 $DC30 DEFB $00,$17,$07,$00 ;
 $DC34 DEFB $30,$0E,$60,$80 ;
 $DC38 DEFB $7E,$0F,$8E,$80 ;
 $DC3C DEFB $1F,$9D,$EF,$00 ;
 $DC40 DEFB $7F,$DD,$DF,$C0 ;
 $DC44 DEFB $DF,$DD,$DF,$E0 ;
 $DC48 DEFB $9C,$FC,$DF,$F0 ;
 $DC4C DEFB $09,$7F,$DF,$FC ;
 $DC50 DEFB $0B,$7F,$EF,$F2 ;
 $DC54 DEFB $04,$FF,$F7,$F2 ;
 $DC58 DEFB $03,$FF,$FF,$F4 ;
 $DC5C DEFB $03,$FF,$FF,$F0 ;
 $DC60 DEFB $07,$FF,$FF,$E0 ;
 $DC64 DEFB $0F,$8F,$FF,$C0 ;
 $DC68 DEFB $00,$01,$FE,$00 ; }

; Object Location Table
@label=ObjectLocation
b$DC6C DEFB $50,$3F  ; {X/ Y position.
 $DC6E DEFB $40,$7F  ;
 $DC70 DEFB $88,$7F  ;
 $DC72 DEFB $D0,$7F  ; }

; Data block at DC74
b$DC74 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC7C DEFB $B8,$3F,$B8,$7F,$20,$7F,$70,$87
 $DC84 DEFB $20,$3F,$50,$7F,$70,$3F,$B0,$7F
 $DC8C DEFB $50,$27,$78,$7F,$B8,$7F,$D8,$3F
 $DC94 DEFB $20,$5F,$58,$57,$78,$77,$D0,$67
 $DC9C DEFB $08,$7F,$58,$3F,$78,$7F,$B0,$3F
 $DCA4 DEFB $30,$7F,$48,$67,$A0,$3F,$C8,$5F
 $DCAC DEFB $20,$67,$68,$3F,$88,$7F,$C8,$57
 $DCB4 DEFB $28,$7F,$70,$7F,$98,$3F,$B0,$7F
 $DCBC DEFB $10,$6F,$48,$3F,$A8,$77,$C8,$77
 $DCC4 DEFB $38,$7F,$40,$3F,$58,$77,$B0,$3F
 $DCCC DEFB $28,$3F,$60,$7F,$B0,$7F,$B8,$3F
 $DCD4 DEFB $48,$7F,$60,$3F,$98,$7F,$C8,$3F
 $DCDC DEFB $70,$7F,$90,$3F,$C8,$3F,$C8,$7F
 $DCE4 DEFB $30,$4F,$58,$7F,$A0,$3F,$D8,$7F
 $DCEC DEFB $20,$3F,$30,$7F,$60,$47,$C8,$47
 $DCF4 DEFB $90,$87,$98,$3F,$D0,$3F,$E0,$7F
 $DCFC DEFB $40,$87,$50,$4F,$90,$3F,$D0,$57
 $DD04 DEFB $40,$47,$50,$7F,$A8,$3F,$A8,$7F
 $DD0C DEFB $18,$7F,$40,$3F,$80,$3F,$D0,$7F
 $DD14 DEFB $28,$7F,$58,$3F,$78,$7F,$D0,$7F
 $DD1C DEFB $20,$3F,$60,$67,$78,$5F,$A0,$3F
 $DD24 DEFB $20,$3F,$28,$7F,$78,$7F,$C8,$3F
 $DD2C DEFB $70,$7F,$90,$7F,$C0,$3F,$D0,$7F
 $DD34 DEFB $28,$5F,$38,$7F,$B0,$7F,$D0,$6F
 $DD3C DEFB $48,$7F,$58,$3F,$78,$7F,$D0,$3F
 $DD44 DEFB $80,$3F,$B0,$7F,$C8,$7F,$E0,$3F
 $DD4C DEFB $28,$7F,$80,$4F,$D8,$3F,$D0,$7F
 $DD54 DEFB $18,$3F,$20,$7F,$A0,$7F,$D8,$7F
 $DD5C DEFB $30,$3F,$60,$3F,$70,$7F,$70,$A7
 $DD64 DEFB $48,$3F,$28,$7F,$A0,$3F,$A0,$87
 $DD6C DEFB $20,$7F,$28,$3F,$70,$87,$A8,$87
 $DD74 DEFB $20,$87,$48,$3F,$78,$7F,$D0,$7F
 $DD7C DEFB $20,$3F,$28,$7F,$58,$7F,$70,$97
 $DD84 DEFB $70,$87,$B8,$3F,$B8,$77,$B8,$87
 $DD8C DEFB $20,$3F,$78,$3F,$78,$7F,$D0,$7F
 $DD94 DEFB $68,$57,$68,$7F,$68,$3F,$68,$97
 $DD9C DEFB $38,$7F,$70,$7F,$90,$3F,$C0,$7F
 $DDA4 DEFB $40,$5F,$68,$3F,$C8,$7F,$D0,$3F
 $DDAC DEFB $48,$3F,$88,$7F,$B8,$3F,$D8,$7F
 $DDB4 DEFB $38,$3F,$58,$7F,$88,$7F,$A8,$97
 $DDBC DEFB $40,$3F,$60,$7F,$A0,$7F,$C8,$3F
 $DDC4 DEFB $20,$77,$68,$3F,$A0,$7F,$D0,$3F
 $DDCC DEFB $28,$3F,$70,$77,$98,$77,$B0,$3F
 $DDD4 DEFB $28,$3F,$78,$7F,$C0,$7F,$D0,$4F
 $DDDC DEFB $48,$3F,$28,$7F,$A0,$3F,$A0,$87
 $DDE4 DEFB $48,$87,$C0,$3F,$D0,$4F,$D0,$87
 $DDEC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDFC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE04 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE0C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE14 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE1C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE24 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE2C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE34 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE3C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE44 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE4C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE54 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE5C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE64 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE6C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE74 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE7C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE84 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE8C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE94 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE9C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEAC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEBC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DECC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DED4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEDC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEEC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEFC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF04 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF0C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF14 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF1C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF24 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF2C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF34 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF3C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF44 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF4C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF54 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF5C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF64 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF6C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF74 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF7C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF84 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF8C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF94 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF9C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFA4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFAC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFBC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFCC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFD4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFDC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFEC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DFFC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E004 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E00C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E014 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E01C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E024 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E02C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E034 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E03C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E044 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E04C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E054 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E05C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E064 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E06C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E074 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E07C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E084 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E08C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E094 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E09C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0AC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0B4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0BC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0CC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0EC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0F4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E0FC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E104 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E10C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E114 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E11C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E124 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E12C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E134 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E13C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E144 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E14C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E154 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E15C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E164 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E16C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E174 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E17C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E184 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E18C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E194 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E19C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1A4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1AC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1B4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1BC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1C4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1CC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1D4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1DC DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E1E4 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Background Graphic Game Completed
;
; #BG(#PC)(background-complete)
;
; .
;
; Pixels.
b$E1EC DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $E1ED DEFB $10                             ; Width = #N(#PEEK(#PC)) bytes.
 $E1EE DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Pixel data.
 $E1F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $E1FE DEFB $01,$00,$00,$01,$E0,$00,$00,$10 ;
 $E206 DEFB $0C,$00,$00,$3C,$07,$80,$00,$80 ;
 $E20E DEFB $03,$00,$00,$00,$78,$00,$00,$78 ;
 $E216 DEFB $0E,$00,$00,$0F,$01,$E0,$00,$C0 ;
 $E21E DEFB $07,$00,$00,$00,$3E,$03,$01,$F8 ;
 $E226 DEFB $07,$00,$00,$03,$C0,$F8,$00,$E0 ;
 $E22E DEFB $07,$00,$00,$00,$1F,$00,$FF,$FC ;
 $E236 DEFB $03,$80,$00,$08,$E0,$7C,$00,$E0 ;
 $E23E DEFB $07,$00,$00,$00,$0F,$20,$3E,$1C ;
 $E246 DEFB $03,$C0,$00,$00,$E0,$3C,$80,$E0 ;
 $E24E DEFB $07,$00,$00,$00,$0F,$B0,$00,$0E ;
 $E256 DEFB $03,$E0,$00,$00,$F0,$3E,$C0,$E0 ;
 $E25E DEFB $07,$00,$00,$00,$1E,$78,$00,$0E ;
 $E266 DEFB $03,$F0,$00,$08,$C0,$79,$E0,$E0 ;
 $E26E DEFB $07,$0F,$7B,$78,$7E,$FC,$FE,$0E ;
 $E276 DEFB $23,$D9,$EF,$F1,$C1,$FB,$F0,$E0 ;
 $E27E DEFB $07,$07,$3B,$FD,$FD,$FF,$7F,$1E ;
 $E286 DEFB $E3,$C4,$EF,$FB,$87,$F7,$FC,$E0 ;
 $E28E DEFB $07,$06,$33,$FE,$FD,$E0,$FF,$1E ;
 $E296 DEFB $E7,$98,$CF,$FB,$8F,$F7,$80,$E0 ;
 $E29E DEFB $07,$06,$33,$9E,$DD,$C1,$C7,$3E ;
 $E2A6 DEFB $E7,$98,$C6,$3B,$8F,$77,$00,$E0 ;
 $E2AE DEFB $07,$0C,$33,$0E,$8D,$F1,$CE,$3D ;
 $E2B6 DEFB $EF,$30,$C6,$73,$9E,$47,$C0,$E0 ;
 $E2BE DEFB $07,$1C,$33,$0D,$0D,$F9,$DC,$7F ;
 $E2C6 DEFB $DE,$70,$C6,$E3,$9C,$37,$E0,$E0 ;
 $E2CE DEFB $07,$1E,$73,$1B,$1D,$C1,$F8,$7F ;
 $E2D6 DEFB $FC,$79,$C7,$C3,$80,$E7,$00,$E0 ;
 $E2DE DEFB $07,$1F,$F3,$1B,$FD,$E0,$FC,$FE ;
 $E2E6 DEFB $7C,$7F,$C7,$E3,$9D,$D7,$80,$E0 ;
 $E2EE DEFB $07,$0F,$FB,$3B,$FE,$FF,$5F,$7C ;
 $E2F6 DEFB $7C,$3F,$EE,$FB,$FF,$BB,$FC,$E0 ;
 $E2FE DEFB $07,$07,$BD,$BD,$EF,$7C,$CF,$BE ;
 $E306 DEFB $FE,$1E,$F6,$7D,$E3,$BD,$F0,$E0 ;
 $E30E DEFB $07,$00,$00,$00,$00,$01,$C3,$C0 ;
 $E316 DEFB $00,$00,$0E,$1E,$00,$00,$00,$E0 ;
 $E31E DEFB $07,$00,$00,$00,$00,$01,$81,$F0 ;
 $E326 DEFB $00,$00,$0C,$0F,$80,$00,$00,$E0 ;
 $E32E DEFB $07,$00,$00,$00,$00,$01,$00,$F8 ;
 $E336 DEFB $40,$00,$08,$07,$C2,$00,$00,$E0 ;
 $E33E DEFB $03,$00,$00,$00,$00,$01,$00,$3F ;
 $E346 DEFB $80,$00,$08,$01,$FC,$00,$00,$C0 ;
 $E34E DEFB $01,$00,$00,$00,$00,$00,$00,$00 ;
 $E356 DEFB $00,$00,$00,$00,$78,$00,$00,$80 ;
 $E35E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $E366 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; Attributes.
 $E36E DEFB $03                             ; Height = #N(#PEEK(#PC)) bytes.
 $E36F DEFB $10                             ; Width = #N(#PEEK(#PC)) bytes.
 $E370 DEFB $50,$7A,$7A,$7A,$7A,$7A,$7A,$7A ; {Attribute data.
 $E378 DEFB $7A,$7A,$7A,$7A,$7A,$7A,$7A,$50 ;
 $E380 DEFB $50,$7A,$7A,$7A,$7A,$7A,$7A,$7A ;
 $E388 DEFB $7A,$7A,$7A,$7A,$7A,$7A,$7A,$50 ;
 $E390 DEFB $50,$7A,$7A,$7A,$7A,$7A,$7A,$7A ;
 $E398 DEFB $7A,$7A,$7A,$7A,$7A,$7A,$7A,$50 ; }

; Graphic: Amulet Outline
;
; #UDGTABLE(default,centre,centre)
; { #BG($E3A0)(outline-01) | #BG($E494)(outline-02) }
; { #BG($E588)(outline-03) | #BG($E67C)(outline-04) }
; UDGTABLE#
;
; .
;
; Pixels.
b$E3A0 DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $E3A1 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E3A2 DEFB $00,$00,$00,$00,$00,$03         ; {Pixel data.
 $E3A8 DEFB $00,$00,$00,$00,$00,$0F         ;
 $E3AE DEFB $00,$00,$00,$00,$00,$0C         ;
 $E3B4 DEFB $00,$00,$00,$00,$00,$0C         ;
 $E3BA DEFB $00,$00,$00,$00,$00,$0C         ;
 $E3C0 DEFB $00,$1F,$FF,$F8,$00,$07         ;
 $E3C6 DEFB $00,$7F,$FF,$FE,$00,$0F         ;
 $E3CC DEFB $00,$7F,$FF,$FF,$F0,$7F         ;
 $E3D2 DEFB $00,$F8,$00,$7F,$FF,$FF         ;
 $E3D8 DEFB $00,$E0,$00,$07,$FF,$FE         ;
 $E3DE DEFB $00,$E0,$00,$00,$7F,$F0         ;
 $E3E4 DEFB $00,$E0,$00,$00,$00,$00         ;
 $E3EA DEFB $00,$E0,$00,$00,$00,$00         ;
 $E3F0 DEFB $00,$E0,$00,$00,$00,$00         ;
 $E3F6 DEFB $00,$E0,$00,$00,$00,$00         ;
 $E3FC DEFB $00,$E0,$00,$00,$00,$00         ;
 $E402 DEFB $00,$E0,$00,$00,$00,$01         ;
 $E408 DEFB $00,$E0,$01,$C0,$00,$07         ;
 $E40E DEFB $00,$E0,$0E,$3C,$00,$1F         ;
 $E414 DEFB $00,$E0,$19,$C7,$00,$FF         ;
 $E41A DEFB $00,$E0,$00,$78,$E7,$FF         ;
 $E420 DEFB $00,$E0,$00,$3E,$7F,$FF         ;
 $E426 DEFB $00,$E0,$00,$1F,$DF,$FF         ;
 $E42C DEFB $00,$E0,$00,$0F,$3F,$FF         ;
 $E432 DEFB $01,$E0,$00,$06,$FE,$47         ;
 $E438 DEFB $01,$E0,$00,$05,$F8,$7B         ;
 $E43E DEFB $01,$C0,$00,$0B,$84,$FB         ;
 $E444 DEFB $03,$C0,$00,$07,$7C,$FB         ;
 $E44A DEFB $03,$C0,$00,$0F,$9E,$77         ;
 $E450 DEFB $07,$80,$00,$FF,$E7,$0F         ;
 $E456 DEFB $1F,$81,$FF,$FF,$F8,$7F         ;
 $E45C DEFB $FF,$07,$FF,$FF,$FF,$FF         ; }
; Pixels.
 $E462 DEFB $04                             ; Height = #N(#PEEK(#PC)) pixels.
 $E463 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E464 DEFB $10,$10,$10,$10,$10,$10         ; {Pixel data.
 $E46A DEFB $10,$12,$12,$12,$12,$12         ;
 $E470 DEFB $10,$12,$12,$12,$12,$12         ;
 $E476 DEFB $10,$12,$12,$12,$12,$12         ; }
; Attributes.
 $E47C DEFB $68,$68,$68,$68,$68,$68,$68,$69 ; {Attribute data.
 $E484 DEFB $69,$69,$69,$69,$68,$69,$69,$69 ;
 $E48C DEFB $69,$69,$68,$69,$69,$69,$69,$68 ; }
; Pixels.
 $E494 DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $E495 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E496 DEFB $C0,$FF,$7F,$FF,$00,$00         ; {Pixel data.
 $E49C DEFB $E0,$FF,$FF,$FF,$C0,$00         ;
 $E4A2 DEFB $61,$FF,$FF,$FF,$F0,$00         ;
 $E4A8 DEFB $63,$FC,$00,$0E,$F8,$00         ;
 $E4AE DEFB $67,$E0,$00,$01,$FC,$00         ;
 $E4B4 DEFB $CF,$80,$00,$00,$FC,$00         ;
 $E4BA DEFB $DF,$80,$00,$00,$FE,$00         ;
 $E4C0 DEFB $FF,$00,$E0,$00,$FE,$00         ;
 $E4C6 DEFB $FF,$07,$C0,$01,$1F,$00         ;
 $E4CC DEFB $7F,$18,$80,$00,$0F,$00         ;
 $E4D2 DEFB $00,$76,$80,$00,$0F,$00         ;
 $E4D8 DEFB $01,$CD,$00,$00,$07,$00         ;
 $E4DE DEFB $03,$3D,$00,$00,$07,$00         ;
 $E4E4 DEFB $36,$FA,$00,$00,$07,$00         ;
 $E4EA DEFB $6D,$FA,$00,$00,$07,$00         ;
 $E4F0 DEFB $DB,$F6,$00,$00,$07,$00         ;
 $E4F6 DEFB $BE,$F4,$00,$00,$07,$00         ;
 $E4FC DEFB $AF,$EC,$00,$00,$07,$00         ;
 $E502 DEFB $FF,$0C,$00,$00,$07,$00         ;
 $E508 DEFB $FF,$FA,$00,$00,$07,$00         ;
 $E50E DEFB $FF,$67,$00,$00,$07,$00         ;
 $E514 DEFB $FF,$9F,$00,$00,$07,$00         ;
 $E51A DEFB $FF,$FF,$80,$00,$07,$00         ;
 $E520 DEFB $FF,$FF,$C0,$00,$07,$00         ;
 $E526 DEFB $FF,$FF,$E0,$00,$07,$00         ;
 $E52C DEFB $FE,$FF,$F0,$00,$07,$80         ;
 $E532 DEFB $FE,$FF,$FC,$00,$07,$80         ;
 $E538 DEFB $FE,$FC,$FF,$00,$07,$C0         ;
 $E53E DEFB $FD,$FE,$FF,$E0,$07,$E0         ;
 $E544 DEFB $FD,$CF,$FF,$F8,$03,$F0         ;
 $E54A DEFB $FD,$BF,$FF,$FE,$01,$F8         ;
 $E550 DEFB $FC,$00,$FF,$FF,$00,$7C         ; }
; Pixels.
 $E556 DEFB $04                             ; Height = #N(#PEEK(#PC)) pixels.
 $E557 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E558 DEFB $10,$12,$12,$12,$10,$10         ; {Pixel data.
 $E55E DEFB $12,$12,$12,$12,$12,$10         ;
 $E564 DEFB $12,$12,$12,$12,$12,$10         ;
 $E56A DEFB $12,$12,$12,$12,$12,$10         ; }
; Attributes.
 $E570 DEFB $68,$69,$69,$69,$68,$68,$69,$69 ; {Attribute data.
 $E578 DEFB $69,$69,$69,$68,$69,$69,$69,$69 ;
 $E580 DEFB $69,$68,$69,$69,$69,$69,$69,$68 ; }
; Pixels.
 $E588 DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $E589 DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E58A DEFB $FE,$0F,$FF,$FF,$FF,$FF         ; {Pixel data.
 $E590 DEFB $FE,$18,$0F,$EF,$7F,$F0         ;
 $E596 DEFB $E0,$20,$03,$FF,$FF,$C7         ;
 $E59C DEFB $E0,$00,$60,$BB,$FF,$1C         ;
 $E5A2 DEFB $E0,$4C,$E0,$FF,$BC,$D8         ;
 $E5A8 DEFB $E0,$4C,$C3,$D7,$F9,$91         ;
 $E5AE DEFB $E1,$E0,$07,$FF,$E0,$B1         ;
 $E5B4 DEFB $E1,$70,$1F,$7F,$90,$21         ;
 $E5BA DEFB $E1,$DC,$79,$FC,$60,$61         ;
 $E5C0 DEFB $E1,$FF,$FF,$83,$A7,$C5         ;
 $E5C6 DEFB $E0,$FF,$FC,$47,$05,$86         ;
 $E5CC DEFB $E0,$87,$F3,$C3,$05,$85         ;
 $E5D2 DEFB $E0,$B0,$CD,$C1,$3B,$05         ;
 $E5D8 DEFB $E0,$B0,$0C,$C0,$36,$03         ;
 $E5DE DEFB $E0,$A0,$06,$C0,$2C,$03         ;
 $E5E4 DEFB $E0,$A0,$03,$60,$2C,$03         ;
 $E5EA DEFB $E0,$60,$01,$60,$30,$07         ;
 $E5F0 DEFB $E0,$60,$00,$D1,$20,$0F         ;
 $E5F6 DEFB $E0,$30,$00,$31,$C0,$0F         ;
 $E5FC DEFB $E0,$00,$00,$09,$50,$1F         ;
 $E602 DEFB $E0,$00,$00,$40,$98,$1F         ;
 $E608 DEFB $F0,$00,$00,$61,$1C,$3F         ;
 $E60E DEFB $F0,$00,$00,$32,$4E,$3F         ;
 $E614 DEFB $F8,$80,$00,$3D,$67,$BE         ;
 $E61A DEFB $7F,$00,$00,$00,$03,$7E         ;
 $E620 DEFB $7F,$00,$00,$3F,$FC,$FC         ;
 $E626 DEFB $3F,$00,$00,$3F,$FF,$FC         ;
 $E62C DEFB $3F,$80,$00,$1F,$80,$F0         ;
 $E632 DEFB $1F,$E0,$00,$00,$00,$00         ;
 $E638 DEFB $0F,$FF,$FF,$FF,$FF,$FF         ;
 $E63E DEFB $03,$FF,$FF,$FF,$FF,$FF         ;
 $E644 DEFB $00,$FF,$FF,$FF,$FF,$FF         ; }
; Pixels.
 $E64A DEFB $04                             ; Height = #N(#PEEK(#PC)) pixels.
 $E64B DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E64C DEFB $12,$12,$12,$12,$12,$12         ; {Pixel data.
 $E652 DEFB $12,$12,$12,$12,$12,$12         ;
 $E658 DEFB $12,$12,$12,$12,$12,$12         ;
 $E65E DEFB $10,$12,$12,$12,$12,$12         ; }
; Attributes.
 $E664 DEFB $69,$69,$69,$69,$69,$69,$69,$69 ; {Attribute data.
 $E66C DEFB $69,$69,$69,$69,$69,$69,$69,$69 ;
 $E674 DEFB $69,$69,$68,$69,$69,$69,$69,$69 ; }
; Pixels.
 $E67C DEFB $20                             ; Height = #N(#PEEK(#PC)) pixels.
 $E67D DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E67E DEFB $FF,$FF,$03,$FF,$C0,$3F         ; {Pixel data.
 $E684 DEFB $3F,$FF,$FC,$3F,$E0,$1F         ;
 $E68A DEFB $C3,$FF,$FF,$FF,$F0,$0F         ;
 $E690 DEFB $00,$3F,$FF,$FF,$FC,$0F         ;
 $E696 DEFB $23,$CF,$FF,$FF,$FE,$0F         ;
 $E69C DEFB $3F,$EF,$FF,$E1,$FE,$0F         ;
 $E6A2 DEFB $AF,$F0,$7F,$E0,$1F,$07         ;
 $E6A8 DEFB $DF,$FF,$8F,$F0,$01,$07         ;
 $E6AE DEFB $BF,$FF,$F3,$F8,$00,$07         ;
 $E6B4 DEFB $7F,$DF,$FF,$FC,$00,$07         ;
 $E6BA DEFB $FF,$BF,$FF,$FC,$00,$07         ;
 $E6C0 DEFB $FF,$3F,$FD,$FE,$00,$07         ;
 $E6C6 DEFB $FE,$3F,$BC,$7E,$00,$07         ;
 $E6CC DEFB $FC,$3F,$18,$1F,$00,$07         ;
 $E6D2 DEFB $FC,$3E,$08,$03,$00,$07         ;
 $E6D8 DEFB $F8,$1C,$00,$00,$00,$07         ;
 $E6DE DEFB $F0,$18,$00,$00,$00,$07         ;
 $E6E4 DEFB $E0,$00,$00,$00,$00,$0F         ;
 $E6EA DEFB $E0,$00,$00,$00,$00,$0F         ;
 $E6F0 DEFB $C0,$00,$00,$00,$00,$0F         ;
 $E6F6 DEFB $80,$00,$00,$00,$00,$9F         ;
 $E6FC DEFB $80,$00,$00,$00,$00,$7F         ;
 $E702 DEFB $00,$00,$00,$00,$00,$7F         ;
 $E708 DEFB $01,$FF,$FF,$F0,$00,$FF         ;
 $E70E DEFB $01,$FF,$FF,$FF,$FF,$FE         ;
 $E714 DEFB $01,$FF,$FF,$FF,$FF,$FC         ;
 $E71A DEFB $03,$FC,$00,$FF,$FF,$F8         ;
 $E720 DEFB $03,$E0,$00,$07,$FF,$E0         ;
 $E726 DEFB $07,$C0,$00,$00,$00,$00         ;
 $E72C DEFB $FF,$80,$00,$00,$00,$00         ;
 $E732 DEFB $FF,$00,$00,$00,$00,$00         ;
 $E738 DEFB $FF,$00,$00,$00,$00,$00         ; }
; Pixels.
 $E73E DEFB $04                             ; Height = #N(#PEEK(#PC)) pixels.
 $E73F DEFB $06                             ; Width = #N(#PEEK(#PC)) bytes.
 $E740 DEFB $12,$12,$12,$12,$12,$12         ; {Pixel data.
 $E746 DEFB $12,$12,$12,$12,$12,$12         ;
 $E74C DEFB $12,$12,$12,$12,$12,$12         ;
 $E752 DEFB $12,$10,$10,$10,$10,$10         ; }
; Attributes.
 $E758 DEFB $69,$69,$69,$69,$69,$69,$69,$69 ; {Attribute data.
 $E760 DEFB $69,$69,$69,$69,$69,$69,$69,$69 ;
 $E768 DEFB $69,$69,$69,$68,$68,$68,$68,$68 ; }

; Graphic: Amulet
;
; #UDGTABLE(default,centre,centre)
; { #GRAPHIC$93(93) | #GRAPHIC$92(92) }
; { #GRAPHIC$91(91) | #GRAPHIC$90(90) }
; UDGTABLE#
;
; .
;
; Top Left.
b$E770 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E771 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E772 DEFB $67,$FF  ; {#GRAPHIC$93(93)
 $E774 DEFB $33,$F9  ;
 $E776 DEFB $31,$F9  ;
 $E778 DEFB $18,$1F  ;
 $E77A DEFB $18,$2F  ;
 $E77C DEFB $18,$37  ;
 $E77E DEFB $19,$78  ;
 $E780 DEFB $18,$E0  ;
 $E782 DEFB $18,$00  ;
 $E784 DEFB $0C,$0F  ;
 $E786 DEFB $0F,$FF  ;
 $E788 DEFB $03,$F1  ;
 $E78A DEFB $00,$01  ;
 $E78C DEFB $00,$02  ;
 $E78E DEFB $00,$02  ;
 $E790 DEFB $00,$01  ; }
; Top Right.
 $E792 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E793 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E794 DEFB $FF,$E3  ; {#GRAPHIC$92(92)
 $E796 DEFB $FF,$36  ;
 $E798 DEFB $FF,$8C  ;
 $E79A DEFB $FF,$0C  ;
 $E79C DEFB $F2,$0C  ;
 $E79E DEFB $FC,$0C  ;
 $E7A0 DEFB $FE,$0C  ;
 $E7A2 DEFB $FF,$CC  ;
 $E7A4 DEFB $3F,$8C  ;
 $E7A6 DEFB $00,$0C  ;
 $E7A8 DEFB $E0,$0C  ;
 $E7AA DEFB $F0,$1C  ;
 $E7AC DEFB $BF,$F8  ;
 $E7AE DEFB $5F,$E0  ;
 $E7B0 DEFB $40,$00  ;
 $E7B2 DEFB $80,$00  ; }
; Bottom Left.
 $E7B4 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E7B5 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E7B6 DEFB $00,$00  ; {#GRAPHIC$91(91)
 $E7B8 DEFB $00,$00  ;
 $E7BA DEFB $0F,$FF  ;
 $E7BC DEFB $3F,$FF  ;
 $E7BE DEFB $70,$00  ;
 $E7C0 DEFB $60,$18  ;
 $E7C2 DEFB $C0,$64  ;
 $E7C4 DEFB $C0,$E6  ;
 $E7C6 DEFB $C0,$B7  ;
 $E7C8 DEFB $C0,$3F  ;
 $E7CA DEFB $C8,$8F  ;
 $E7CC DEFB $C8,$87  ;
 $E7CE DEFB $CC,$CB  ;
 $E7D0 DEFB $DF,$F9  ;
 $E7D2 DEFB $D8,$3A  ;
 $E7D4 DEFB $3A,$BF  ; }
; Bottom Right.
 $E7D6 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E7D7 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E7D8 DEFB $00,$00  ; {#GRAPHIC$90(90)
 $E7DA DEFB $38,$00  ;
 $E7DC DEFB $FC,$0E  ;
 $E7DE DEFB $EF,$FF  ;
 $E7E0 DEFB $07,$F3  ;
 $E7E2 DEFB $00,$03  ;
 $E7E4 DEFB $00,$03  ;
 $E7E6 DEFB $12,$23  ;
 $E7E8 DEFB $9A,$63  ;
 $E7EA DEFB $DE,$E3  ;
 $E7EC DEFB $FE,$C3  ;
 $E7EE DEFB $FF,$CB  ;
 $E7F0 DEFB $FD,$FB  ;
 $E7F2 DEFB $F3,$F3  ;
 $E7F4 DEFB $4F,$F3  ;
 $E7F6 DEFB $BF,$E3  ; }

; Sprite: The Guardian
;
; .
;
; .
;
; Frame 1.
b$E7F8 DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $E7F9 DEFB $20             ; Height = #N(#PEEK(#PC)) pixels.
 $E7FA DEFB $07,$E2,$40,$00 ; {#GRAPHIC$94(94*)
 $E7FE DEFB $03,$E2,$47,$E0 ;
 $E802 DEFB $00,$04,$27,$C0 ;
 $E806 DEFB $00,$68,$10,$00 ;
 $E80A DEFB $00,$6B,$D6,$00 ;
 $E80E DEFB $00,$57,$EA,$00 ;
 $E812 DEFB $00,$57,$EA,$00 ;
 $E816 DEFB $00,$2F,$F4,$00 ;
 $E81A DEFB $00,$5F,$FA,$00 ;
 $E81E DEFB $00,$47,$E2,$00 ;
 $E822 DEFB $00,$80,$01,$00 ;
 $E826 DEFB $00,$87,$E1,$00 ;
 $E82A DEFB $01,$0F,$F0,$80 ;
 $E82E DEFB $0A,$DC,$FA,$50 ;
 $E832 DEFB $0A,$FB,$7F,$50 ;
 $E836 DEFB $05,$F5,$BF,$A0 ;
 $E83A DEFB $04,$69,$DE,$20 ;
 $E83E DEFB $08,$11,$E0,$10 ;
 $E842 DEFB $10,$16,$60,$08 ;
 $E846 DEFB $10,$2E,$30,$08 ;
 $E84A DEFB $60,$21,$F0,$06 ;
 $E84E DEFB $60,$41,$F8,$06 ;
 $E852 DEFB $40,$46,$78,$02 ;
 $E856 DEFB $E0,$46,$78,$07 ;
 $E85A DEFB $40,$82,$FC,$02 ;
 $E85E DEFB $40,$82,$FC,$02 ;
 $E862 DEFB $40,$81,$FC,$02 ;
 $E866 DEFB $00,$9D,$1C,$00 ;
 $E86A DEFB $00,$B9,$8C,$00 ;
 $E86E DEFB $00,$81,$FC,$00 ;
 $E872 DEFB $00,$E1,$FC,$00 ;
 $E876 DEFB $00,$1F,$E0,$00 ; }
; Frame 2.
 $E87A DEFB $04             ; Width = #N(#PEEK(#PC)) bytes.
 $E87B DEFB $20             ; Height = #N(#PEEK(#PC)) pixels.
 $E87C DEFB $00,$02,$47,$E0 ; {#GRAPHIC$95(95*)
 $E880 DEFB $07,$E2,$47,$C0 ;
 $E884 DEFB $03,$E4,$20,$00 ;
 $E888 DEFB $00,$08,$16,$00 ;
 $E88C DEFB $00,$6B,$D6,$00 ;
 $E890 DEFB $00,$57,$EA,$00 ;
 $E894 DEFB $00,$57,$EA,$00 ;
 $E898 DEFB $00,$2F,$F4,$00 ;
 $E89C DEFB $00,$5F,$FA,$00 ;
 $E8A0 DEFB $00,$47,$E2,$00 ;
 $E8A4 DEFB $00,$80,$01,$00 ;
 $E8A8 DEFB $00,$87,$E1,$00 ;
 $E8AC DEFB $01,$0F,$F0,$80 ;
 $E8B0 DEFB $0A,$5F,$3B,$50 ;
 $E8B4 DEFB $0A,$FE,$DF,$50 ;
 $E8B8 DEFB $05,$FD,$AF,$A0 ;
 $E8BC DEFB $04,$7B,$96,$20 ;
 $E8C0 DEFB $08,$07,$88,$10 ;
 $E8C4 DEFB $10,$06,$64,$08 ;
 $E8C8 DEFB $10,$0C,$74,$08 ;
 $E8CC DEFB $60,$0F,$84,$06 ;
 $E8D0 DEFB $60,$1F,$82,$06 ;
 $E8D4 DEFB $40,$1E,$62,$02 ;
 $E8D8 DEFB $E0,$1E,$62,$07 ;
 $E8DC DEFB $40,$3F,$41,$02 ;
 $E8E0 DEFB $40,$3F,$41,$02 ;
 $E8E4 DEFB $40,$3F,$81,$02 ;
 $E8E8 DEFB $00,$38,$B9,$00 ;
 $E8EC DEFB $00,$31,$9D,$00 ;
 $E8F0 DEFB $00,$3F,$81,$00 ;
 $E8F4 DEFB $00,$3F,$87,$00 ;
 $E8F8 DEFB $00,$07,$F8,$00 ; }

; Sprite: Flame
;
; .
;
; .
;
; Frame 1.
b$E8FC DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E8FD DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $E8FE DEFB $01,$80  ; {#GRAPHIC$34(34*)
 $E900 DEFB $07,$E0  ;
 $E902 DEFB $0E,$F0  ;
 $E904 DEFB $1C,$98  ;
 $E906 DEFB $39,$8C  ;
 $E908 DEFB $71,$8C  ;
 $E90A DEFB $D3,$CE  ;
 $E90C DEFB $97,$66  ;
 $E90E DEFB $3E,$36  ;
 $E910 DEFB $3A,$13  ;
 $E912 DEFB $32,$33  ;
 $E914 DEFB $32,$3B  ;
 $E916 DEFB $22,$7E  ;
 $E918 DEFB $0A,$76  ;
 $E91A DEFB $1B,$6E  ;
 $E91C DEFB $71,$3C  ;
 $E91E DEFB $59,$BC  ;
 $E920 DEFB $1C,$F4  ;
 $E922 DEFB $08,$74  ;
 $E924 DEFB $08,$60  ;
 $E926 DEFB $08,$E0  ;
 $E928 DEFB $03,$60  ; }
; Frame 2.
 $E92A DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E92B DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $E92C DEFB $05,$00  ; {#GRAPHIC$35(35*)
 $E92E DEFB $18,$BC  ;
 $E930 DEFB $33,$E6  ;
 $E932 DEFB $66,$DB  ;
 $E934 DEFB $CE,$CD  ;
 $E936 DEFB $9C,$66  ;
 $E938 DEFB $38,$22  ;
 $E93A DEFB $30,$63  ;
 $E93C DEFB $60,$79  ;
 $E93E DEFB $6C,$3D  ;
 $E940 DEFB $6E,$37  ;
 $E942 DEFB $7E,$33  ;
 $E944 DEFB $7B,$23  ;
 $E946 DEFB $5B,$62  ;
 $E948 DEFB $2B,$62  ;
 $E94A DEFB $3D,$42  ;
 $E94C DEFB $1D,$C0  ;
 $E94E DEFB $05,$E4  ;
 $E950 DEFB $30,$F6  ;
 $E952 DEFB $10,$32  ;
 $E954 DEFB $18,$1A  ;
 $E956 DEFB $08,$00  ; }
; Frame 3.
 $E958 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E959 DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $E95A DEFB $1D,$00  ; {#GRAPHIC$36(36*)
 $E95C DEFB $3B,$80  ;
 $E95E DEFB $77,$C0  ;
 $E960 DEFB $6E,$60  ;
 $E962 DEFB $4C,$30  ;
 $E964 DEFB $58,$90  ;
 $E966 DEFB $17,$C8  ;
 $E968 DEFB $3E,$6C  ;
 $E96A DEFB $78,$3C  ;
 $E96C DEFB $61,$1E  ;
 $E96E DEFB $E1,$9E  ;
 $E970 DEFB $F8,$8E  ;
 $E972 DEFB $9C,$9E  ;
 $E974 DEFB $BE,$3E  ;
 $E976 DEFB $B6,$36  ;
 $E978 DEFB $63,$62  ;
 $E97A DEFB $61,$62  ;
 $E97C DEFB $61,$69  ;
 $E97E DEFB $41,$E8  ;
 $E980 DEFB $43,$E4  ;
 $E982 DEFB $03,$C6  ;
 $E984 DEFB $07,$8C  ;
 $E986 DEFB $0E,$08  ; }
; Frame 4.
 $E988 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $E989 DEFB $17      ; Height = #N(#PEEK(#PC)) pixels.
 $E98A DEFB $01,$00  ; {#GRAPHIC$37(37*)
 $E98C DEFB $01,$80  ;
 $E98E DEFB $02,$5C  ;
 $E990 DEFB $04,$26  ;
 $E992 DEFB $04,$92  ;
 $E994 DEFB $09,$8A  ;
 $E996 DEFB $13,$CC  ;
 $E998 DEFB $22,$66  ;
 $E99A DEFB $66,$33  ;
 $E99C DEFB $42,$59  ;
 $E99E DEFB $41,$C1  ;
 $E9A0 DEFB $49,$8D  ;
 $E9A2 DEFB $5C,$97  ;
 $E9A4 DEFB $76,$93  ;
 $E9A6 DEFB $76,$32  ;
 $E9A8 DEFB $37,$72  ;
 $E9AA DEFB $33,$72  ;
 $E9AC DEFB $13,$E2  ;
 $E9AE DEFB $11,$E0  ;
 $E9B0 DEFB $15,$C8  ;
 $E9B2 DEFB $01,$88  ;
 $E9B4 DEFB $03,$10  ;
 $E9B6 DEFB $02,$20  ; }

; Sprite: Rat
;
; .
;
; .
;
; Left Frame 1.
b$E9B8 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $E9B9 DEFB $09         ; Height = #N(#PEEK(#PC)) pixels.
 $E9BA DEFB $00,$70,$00 ; {#GRAPHIC$98(98)
 $E9BD DEFB $01,$98,$3E ;
 $E9C0 DEFB $03,$3D,$F0 ;
 $E9C3 DEFB $E6,$7B,$C0 ;
 $E9C6 DEFB $FF,$7F,$80 ;
 $E9C9 DEFB $4F,$7F,$80 ;
 $E9CC DEFB $2F,$BF,$00 ;
 $E9CF DEFB $1C,$C6,$00 ;
 $E9D2 DEFB $08,$3C,$00 ; }
; Left Frame 2.
 $E9D5 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $E9D6 DEFB $09         ; Height = #N(#PEEK(#PC)) pixels.
 $E9D7 DEFB $30,$1E,$00 ; {#GRAPHIC$99(99)
 $E9DA DEFB $18,$03,$00 ;
 $E9DD DEFB $0C,$DF,$7E ;
 $E9E0 DEFB $E7,$BE,$F0 ;
 $E9E3 DEFB $FF,$BD,$C0 ;
 $E9E6 DEFB $4F,$BF,$80 ;
 $E9E9 DEFB $2F,$DF,$00 ;
 $E9EC DEFB $1C,$EE,$00 ;
 $E9EF DEFB $08,$3C,$00 ; }
; Right Frame 1.
 $E9F2 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $E9F3 DEFB $09         ; Height = #N(#PEEK(#PC)) pixels.
 $E9F4 DEFB $00,$0E,$00 ; {#GRAPHIC$9A(9A)
 $E9F7 DEFB $7C,$19,$80 ;
 $E9FA DEFB $0F,$BC,$C0 ;
 $E9FD DEFB $03,$DE,$67 ;
 $EA00 DEFB $01,$FE,$FF ;
 $EA03 DEFB $01,$FE,$F2 ;
 $EA06 DEFB $00,$FD,$F4 ;
 $EA09 DEFB $00,$63,$38 ;
 $EA0C DEFB $00,$3C,$10 ; }
; Right Frame 2.
 $EA0F DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EA10 DEFB $09         ; Height = #N(#PEEK(#PC)) pixels.
 $EA11 DEFB $00,$78,$0C ; {#GRAPHIC$9B(9B)
 $EA14 DEFB $00,$C0,$18 ;
 $EA17 DEFB $7E,$FB,$30 ;
 $EA1A DEFB $0F,$7D,$E7 ;
 $EA1D DEFB $03,$BD,$FF ;
 $EA20 DEFB $01,$FD,$F2 ;
 $EA23 DEFB $00,$FB,$F4 ;
 $EA26 DEFB $00,$77,$38 ;
 $EA29 DEFB $00,$3C,$10 ; }

; Sprite: Bird
;
; .
;
; .
;
; Left Frame 1.
b$EA2C DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EA2D DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $EA2E DEFB $00,$03,$80 ; {#GRAPHIC$9C(9C)
 $EA31 DEFB $00,$03,$40 ;
 $EA34 DEFB $00,$AB,$60 ;
 $EA37 DEFB $00,$BA,$E0 ;
 $EA3A DEFB $03,$97,$C0 ;
 $EA3D DEFB $01,$97,$80 ;
 $EA40 DEFB $00,$DF,$00 ;
 $EA43 DEFB $00,$7F,$00 ;
 $EA46 DEFB $00,$FF,$00 ;
 $EA49 DEFB $00,$FE,$80 ;
 $EA4C DEFB $00,$FD,$E0 ;
 $EA4F DEFB $00,$FB,$E0 ;
 $EA52 DEFB $09,$FB,$D0 ;
 $EA55 DEFB $35,$F7,$B0 ;
 $EA58 DEFB $37,$37,$78 ;
 $EA5B DEFB $DB,$37,$F7 ;
 $EA5E DEFB $7C,$E3,$CF ;
 $EA61 DEFB $00,$00,$FC ; }
; Left Frame 2.
 $EA64 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EA65 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $EA66 DEFB $00,$03,$80 ; {#GRAPHIC$9D(9D)
 $EA69 DEFB $00,$03,$40 ;
 $EA6C DEFB $00,$AB,$60 ;
 $EA6F DEFB $00,$BA,$E0 ;
 $EA72 DEFB $03,$97,$C0 ;
 $EA75 DEFB $01,$97,$80 ;
 $EA78 DEFB $00,$DF,$00 ;
 $EA7B DEFB $00,$7F,$00 ;
 $EA7E DEFB $00,$FF,$00 ;
 $EA81 DEFB $00,$FE,$80 ;
 $EA84 DEFB $00,$FD,$80 ;
 $EA87 DEFB $00,$FB,$80 ;
 $EA8A DEFB $01,$FB,$80 ;
 $EA8D DEFB $05,$F7,$80 ;
 $EA90 DEFB $07,$36,$00 ;
 $EA93 DEFB $03,$37,$80 ;
 $EA96 DEFB $00,$EE,$00 ;
 $EA99 DEFB $00,$0F,$80 ;
 $EA9C DEFB $01,$EF,$C0 ;
 $EA9F DEFB $00,$C6,$00 ;
 $EAA2 DEFB $01,$83,$E0 ;
 $EAA5 DEFB $01,$00,$F0 ; }
; Right Frame 1.
 $EAA8 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EAA9 DEFB $12         ; Height = #N(#PEEK(#PC)) pixels.
 $EAAA DEFB $01,$C0,$00 ; {#GRAPHIC$9E(9E)
 $EAAD DEFB $02,$C0,$00 ;
 $EAB0 DEFB $06,$D5,$00 ;
 $EAB3 DEFB $07,$5D,$00 ;
 $EAB6 DEFB $03,$E9,$C0 ;
 $EAB9 DEFB $01,$E9,$80 ;
 $EABC DEFB $00,$FB,$00 ;
 $EABF DEFB $00,$FE,$00 ;
 $EAC2 DEFB $00,$FF,$00 ;
 $EAC5 DEFB $01,$7F,$00 ;
 $EAC8 DEFB $07,$BF,$00 ;
 $EACB DEFB $07,$DF,$00 ;
 $EACE DEFB $0B,$DF,$90 ;
 $EAD1 DEFB $0D,$EF,$AC ;
 $EAD4 DEFB $1E,$EC,$EC ;
 $EAD7 DEFB $EF,$EC,$DB ;
 $EADA DEFB $F3,$C7,$3E ;
 $EADD DEFB $3F,$00,$00 ; }
; Right Frame 2.
 $EAE0 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EAE1 DEFB $16         ; Height = #N(#PEEK(#PC)) pixels.
 $EAE2 DEFB $01,$C0,$00 ; {#GRAPHIC$9F(9F)
 $EAE5 DEFB $02,$C0,$00 ;
 $EAE8 DEFB $06,$D5,$00 ;
 $EAEB DEFB $07,$5D,$00 ;
 $EAEE DEFB $03,$E9,$C0 ;
 $EAF1 DEFB $01,$E9,$80 ;
 $EAF4 DEFB $00,$FB,$00 ;
 $EAF7 DEFB $00,$FE,$00 ;
 $EAFA DEFB $00,$FF,$00 ;
 $EAFD DEFB $01,$7F,$00 ;
 $EB00 DEFB $01,$BF,$00 ;
 $EB03 DEFB $01,$DF,$00 ;
 $EB06 DEFB $01,$DF,$80 ;
 $EB09 DEFB $01,$EF,$A0 ;
 $EB0C DEFB $00,$6C,$E0 ;
 $EB0F DEFB $01,$EC,$C0 ;
 $EB12 DEFB $00,$77,$00 ;
 $EB15 DEFB $01,$F0,$00 ;
 $EB18 DEFB $03,$F7,$80 ;
 $EB1B DEFB $00,$63,$00 ;
 $EB1E DEFB $07,$C1,$80 ;
 $EB21 DEFB $0F,$00,$80 ; }

; Sprite: Mosquito
;
; .
;
; .
;
; Left Frame 1.
b$EB24 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $EB25 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EB26 DEFB $02,$0C  ; {#GRAPHIC$B4(B4)
 $EB28 DEFB $22,$3C  ;
 $EB2A DEFB $44,$4E  ;
 $EB2C DEFB $48,$FA  ;
 $EB2E DEFB $91,$F2  ;
 $EB30 DEFB $A3,$E4  ;
 $EB32 DEFB $A3,$CC  ;
 $EB34 DEFB $97,$F8  ;
 $EB36 DEFB $77,$E0  ;
 $EB38 DEFB $0B,$00  ;
 $EB3A DEFB $75,$E0  ;
 $EB3C DEFB $FA,$18  ;
 $EB3E DEFB $71,$06  ;
 $EB40 DEFB $00,$C1  ;
 $EB42 DEFB $00,$31  ;
 $EB44 DEFB $00,$0F  ; }
; Left Frame 2.
 $EB46 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $EB47 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $EB48 DEFB $10,$03  ; {#GRAPHIC$B5(B5)
 $EB4A DEFB $22,$0F  ;
 $EB4C DEFB $24,$7F  ;
 $EB4E DEFB $48,$F9  ;
 $EB50 DEFB $90,$FE  ;
 $EB52 DEFB $A1,$E6  ;
 $EB54 DEFB $A3,$84  ;
 $EB56 DEFB $97,$08  ;
 $EB58 DEFB $77,$30  ;
 $EB5A DEFB $0A,$C0  ;
 $EB5C DEFB $74,$00  ;
 $EB5E DEFB $FB,$00  ;
 $EB60 DEFB $70,$00  ;
 $EB62 DEFB $00,$00  ; }
; Right Frame 1.
 $EB64 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $EB65 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EB66 DEFB $30,$04  ; {#GRAPHIC$B6(B6)
 $EB68 DEFB $33,$44  ;
 $EB6A DEFB $7E,$22  ;
 $EB6C DEFB $5F,$12  ;
 $EB6E DEFB $4F,$89  ;
 $EB70 DEFB $27,$C5  ;
 $EB72 DEFB $33,$C5  ;
 $EB74 DEFB $1F,$E9  ;
 $EB76 DEFB $07,$EE  ;
 $EB78 DEFB $00,$D0  ;
 $EB7A DEFB $07,$AE  ;
 $EB7C DEFB $18,$5F  ;
 $EB7E DEFB $60,$8E  ;
 $EB80 DEFB $83,$00  ;
 $EB82 DEFB $8C,$00  ;
 $EB84 DEFB $F0,$00  ; }
; Right Frame 1.
 $EB86 DEFB $02      ; Width = #N(#PEEK(#PC)) bytes.
 $EB87 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $EB88 DEFB $C0,$08  ; {#GRAPHIC$B7(B7)
 $EB8A DEFB $E0,$44  ;
 $EB8C DEFB $FC,$24  ;
 $EB8E DEFB $FE,$12  ;
 $EB90 DEFB $9F,$09  ;
 $EB92 DEFB $7F,$85  ;
 $EB94 DEFB $67,$C5  ;
 $EB96 DEFB $21,$E9  ;
 $EB98 DEFB $10,$EE  ;
 $EB9A DEFB $0C,$50  ;
 $EB9C DEFB $03,$2E  ;
 $EB9E DEFB $00,$DF  ;
 $EBA0 DEFB $00,$0E  ;
 $EBA2 DEFB $00,$00  ; }

; Sprite: Frog
;
; .
;
; .
;
; Left Frame 1.
b$EBA4 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EBA5 DEFB $0C         ; Height = #N(#PEEK(#PC)) pixels.
 $EBA6 DEFB $00,$00,$01 ; {#GRAPHIC$B0(B0)
 $EBA9 DEFB $00,$00,$03 ;
 $EBAC DEFB $30,$01,$0E ;
 $EBAF DEFB $FC,$03,$FB ;
 $EBB2 DEFB $7E,$7F,$FE ;
 $EBB5 DEFB $0F,$BB,$F8 ;
 $EBB8 DEFB $03,$FF,$80 ;
 $EBBB DEFB $06,$7F,$00 ;
 $EBBE DEFB $1F,$FC,$00 ;
 $EBC1 DEFB $39,$F8,$00 ;
 $EBC4 DEFB $19,$E0,$00 ;
 $EBC7 DEFB $06,$00,$00 ; }
; Left Frame 2.
 $EBCA DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EBCB DEFB $0A         ; Height = #N(#PEEK(#PC)) pixels.
 $EBCC DEFB $07,$CF,$E0 ; {#GRAPHIC$B1(B1)
 $EBCF DEFB $03,$81,$D8 ;
 $EBD2 DEFB $01,$BB,$38 ;
 $EBD5 DEFB $00,$D6,$F0 ;
 $EBD8 DEFB $01,$EF,$F0 ;
 $EBDB DEFB $07,$E0,$E0 ;
 $EBDE DEFB $1F,$FF,$80 ;
 $EBE1 DEFB $1C,$FE,$00 ;
 $EBE4 DEFB $0C,$C0,$00 ;
 $EBE7 DEFB $03,$00,$00 ; }
; Right Frame 1.
 $EBEA DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EBEB DEFB $0C         ; Height = #N(#PEEK(#PC)) pixels.
 $EBEC DEFB $80,$00,$00 ; {#GRAPHIC$B2(B2)
 $EBEF DEFB $C0,$00,$00 ;
 $EBF2 DEFB $70,$80,$0C ;
 $EBF5 DEFB $BF,$C0,$3F ;
 $EBF8 DEFB $7F,$EF,$7E ;
 $EBFB DEFB $1F,$DD,$F0 ;
 $EBFE DEFB $01,$FF,$C0 ;
 $EC01 DEFB $00,$FE,$60 ;
 $EC04 DEFB $00,$3F,$F8 ;
 $EC07 DEFB $00,$1F,$9C ;
 $EC0A DEFB $00,$07,$98 ;
 $EC0D DEFB $00,$00,$60 ; }
; Right Frame 2.
 $EC10 DEFB $03         ; Width = #N(#PEEK(#PC)) bytes.
 $EC11 DEFB $0A         ; Height = #N(#PEEK(#PC)) pixels.
 $EC12 DEFB $07,$F3,$E0 ; {#GRAPHIC$B3(B3)
 $EC15 DEFB $1B,$81,$C0 ;
 $EC18 DEFB $1C,$DD,$80 ;
 $EC1B DEFB $0F,$6B,$00 ;
 $EC1E DEFB $0F,$F7,$80 ;
 $EC21 DEFB $07,$07,$E0 ;
 $EC24 DEFB $01,$FF,$F8 ;
 $EC27 DEFB $00,$7F,$38 ;
 $EC2A DEFB $00,$03,$30 ;
 $EC2D DEFB $00,$00,$C0 ; }

; Message at EC30
t$EC30 DEFM "COPYRIGHT 1984 A.C.G. LTD. ALL RIGHTS RESERVED."

; Data block at EC5F
b$EC5F DEFB $00,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EC67 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EC6F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EC77 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EC7F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EC87 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EC8F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EC97 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EC9F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ECA7 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ECAF DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ECB7 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ECBF DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ECC7 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ECCF DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ECD7 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ECDF DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ECE7 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ECEF DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ECF7 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ECFF DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ED07 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ED0F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ED17 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ED1F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ED27 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ED2F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ED37 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ED3F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ED47 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ED4F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ED57 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ED5F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ED67 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ED6F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ED77 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $ED7F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $ED87 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $ED8F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $ED97 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $ED9F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EDA7 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EDAF DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EDB7 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EDBF DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EDC7 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EDCF DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EDD7 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EDDF DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EDE7 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EDEF DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EDF7 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EDFF DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EE07 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EE0F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EE17 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EE1F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EE27 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EE2F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EE37 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EE3F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EE47 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EE4F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EE57 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EE5F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EE67 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EE6F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EE77 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EE7F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EE87 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EE8F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EE97 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EE9F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EEA7 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EEAF DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EEB7 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EEBF DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EEC7 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EECF DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EED7 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EEDF DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EEE7 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EEEF DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EEF7 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EEFF DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EF07 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EF0F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EF17 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EF1F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EF27 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EF2F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EF37 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EF3F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EF47 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EF4F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EF57 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EF5F DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EF67 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EF6F DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EF77 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EF7F DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EF87 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EF8F DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EF97 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EF9F DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EFA7 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EFAF DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EFB7 DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EFBF DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EFC7 DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EFCF DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EFD7 DEFB $53,$DE,$B0,$84,$F4,$9D,$1F,$33
 $EFDF DEFB $70,$CE,$16,$D5,$0C,$AD,$02,$53
 $EFE7 DEFB $DE,$B0,$84,$F4,$9D,$1F,$33,$70
 $EFEF DEFB $CE,$16,$FF,$FF,$F5,$FF,$FF,$FF
 $EFF7 DEFB $FF,$86,$DE,$DF,$D5,$0C,$AD,$02
 $EFFF DEFB $53,$42,$55,$47,$7E,$4F,$46,$46
 $F007 DEFB $3B,$3B,$FD,$26,$F0,$FD,$2E,$2E
 $F00F DEFB $FD,$E3,$01,$2E,$00,$FD,$09,$FD
 $F017 DEFB $5D,$FD,$54,$6B,$62,$01,$3E,$02
 $F01F DEFB $ED,$57,$E4,$08,$30,$ED,$5F,$AE
 $F027 DEFB $77,$ED,$A0,$E0,$3B,$3B,$E8,$C9
 $F02F DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F037 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F03F DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F047 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F04F DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F057 DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F05F DEFB $C9,$C9,$C9,$C9,$C9,$C9,$C9,$C9
 $F067 DEFB $C9,$C9,$C9,$C9,$A7,$ED,$52,$08
 $F06F DEFB $21,$2E,$F0,$06,$3D,$36,$C9,$23
 $F077 DEFB $10,$FB,$08,$CA,$02,$F2,$FD,$21
 $F07F DEFB $00,$00,$FD,$36,$75,$00,$FD,$23
 $F087 DEFB $18,$F8,$3D,$20,$FD,$A7,$04,$C8
 $F08F DEFB $3E,$7F,$DB,$FE,$1F,$A9,$E6,$20
 $F097 DEFB $28,$F4,$79,$2F,$4F,$E6,$07,$F6
 $F09F DEFB $08,$D3,$FE,$37,$C9,$F3,$14,$15
 $F0A7 DEFB $3E,$0F,$D3,$FE,$21,$5A,$F2,$E5
 $F0AF DEFB $DB,$FE,$1F,$E6,$20,$F6,$02,$4F
 $F0B7 DEFB $BF,$CD,$89,$F0,$30,$FB,$21,$15
 $F0BF DEFB $04,$10,$FE,$2B,$7C,$B5,$20,$F9
 $F0C7 DEFB $3E,$0A,$CD,$89,$F0,$30,$EA,$06
 $F0CF DEFB $C4,$3E,$16,$CD,$89,$F0,$30,$E1
 $F0D7 DEFB $3E,$D6,$B8,$38,$F2,$06,$C4,$3E
 $F0DF DEFB $16,$CD,$89,$F0,$30,$D3,$3E,$DF
 $F0E7 DEFB $B8,$38,$E4,$FD,$21,$68,$F2,$FD
 $F0EF DEFB $66,$00,$06,$C4,$3E,$16,$CD,$89
 $F0F7 DEFB $F0,$30,$BE,$3E,$CD,$B8,$30,$DD
 $F0FF DEFB $24,$20,$EF,$06,$60,$3E,$16,$CD
 $F107 DEFB $89,$F0,$30,$AD,$3E,$16,$CD,$89
 $F10F DEFB $F0,$30,$A6,$3E,$AB,$B8,$38,$0A
 $F117 DEFB $FD,$23,$FD,$7D,$FE,$6C,$20,$CF
 $F11F DEFB $18,$C9,$79,$EE,$03,$4F,$06,$B0
 $F127 DEFB $2E,$04,$3E,$0B,$18,$02,$3E,$0C
 $F12F DEFB $CD,$89,$F0,$D0,$78,$08,$3E,$0E
 $F137 DEFB $CD,$89,$F0,$D0,$3E,$13,$3E,$C3
 $F13F DEFB $B8,$CB,$15,$06,$B0,$D2,$2D,$F1
 $F147 DEFB $3E,$3A,$BD,$C2,$7D,$F0,$67,$26
 $F14F DEFB $86,$26,$00,$06,$C4,$2E,$01,$3E
 $F157 DEFB $08,$18,$11,$DD,$75,$00,$DD,$23
 $F15F DEFB $1B,$06,$C4,$2E,$01,$00,$3E,$06
 $F167 DEFB $18,$02,$3E,$0C,$CD,$89,$F0,$D0
 $F16F DEFB $78,$08,$3E,$0E,$CD,$89,$F0,$D0
 $F177 DEFB $3E,$13,$3E,$D7,$B8,$CB,$15,$06
 $F17F DEFB $C4,$D2,$69,$F1,$7C,$AD,$67,$7A
 $F187 DEFB $B3,$20,$D0,$7C,$FE,$01,$C9,$CD
 $F18F DEFB $A4,$F0,$21,$00,$80,$06,$FF,$C5
 $F197 DEFB $CD,$A3,$F1,$73,$23,$C1,$10,$F7
 $F19F DEFB $CD,$BF,$F1,$C9,$1E,$00,$4B,$06
 $F1A7 DEFB $FF,$3E,$7F,$DB,$FE,$E6,$40,$A9
 $F1AF DEFB $28,$09,$1C,$79,$2F,$E6,$40,$4F
 $F1B7 DEFB $10,$EF,$C9,$00,$00,$C3,$B7,$F1
 $F1BF DEFB $21,$00,$00,$11,$00,$80,$06,$32
 $F1C7 DEFB $C5,$1A,$06,$00,$4F,$09,$13,$C1
 $F1CF DEFB $10,$F6,$E5,$21,$00,$00,$11,$CD
 $F1D7 DEFB $80,$06,$32,$C5,$1A,$06,$00,$4F
 $F1DF DEFB $09,$13,$C1,$10,$F6,$C1,$7C,$FE
 $F1E7 DEFB $00,$20,$13,$A7,$ED,$42,$01,$32
 $F1EF DEFB $00,$A7,$ED,$42,$D8,$09,$01,$CD
 $F1F7 DEFB $FF,$A7,$ED,$42,$D0,$3C,$32,$01
 $F1FF DEFB $F2,$C9,$00,$06,$40,$21,$C0,$5A
 $F207 DEFB $36,$00,$23,$10,$FB,$DD,$21,$00
 $F20F DEFB $80,$11,$14,$00,$CD,$8E,$F1,$DD
 $F217 DEFB $21,$00,$40,$11,$00,$1B,$CD,$A4
 $F21F DEFB $F0,$DD,$21,$00,$60,$11,$60,$8C
 $F227 DEFB $CD,$A4,$F0,$3A,$01,$F2,$FE,$00
 $F22F DEFB $C2,$7D,$F0,$21,$58,$27,$D9,$FD
 $F237 DEFB $21,$3A,$5C,$31,$FE,$5F,$00,$00
 $F23F DEFB $00,$00,$AF,$D3,$FE,$21,$10,$00
 $F247 DEFB $01,$00,$00,$0B,$78,$B1,$20,$FB
 $F24F DEFB $2B,$7C,$B5,$20,$F3,$ED,$56,$FB
 $F257 DEFB $C3,$00,$60,$F5,$AF,$E6,$38,$0F
 $F25F DEFB $0F,$0F,$D3,$FE,$F1,$D8,$C3,$7D
 $F267 DEFB $F0,$1E,$22,$24,$20,$E0,$CC,$8F
 $F26F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F277 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F27F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F287 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F28F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F297 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F29F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F2A7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F2AF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F2B7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F2BF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F2C7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F2CF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F2D7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F2DF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F2E7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F2EF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F2F7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F2FF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F307 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F30F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F317 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F31F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F327 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F32F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F337 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F33F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F347 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F34F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F357 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F35F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F367 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F36F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F377 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F37F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F387 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F38F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F397 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F39F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F3A7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F3AF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F3B7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F3BF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F3C7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F3CF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F3D7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F3DF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F3E7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F3EF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F3F7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F3FF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F407 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F40F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F417 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F41F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F427 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F42F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F437 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F43F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F447 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F44F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F457 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F45F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F467 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F46F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F477 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F47F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F487 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F48F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F497 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F49F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F4A7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F4AF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F4B7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F4BF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F4C7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F4CF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F4D7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F4DF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F4E7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F4EF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F4F7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F4FF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F507 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F50F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F517 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F51F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F527 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F52F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F537 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F53F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F547 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F54F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F557 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F55F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F567 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F56F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F577 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F57F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F587 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F58F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F597 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F59F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F5A7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F5AF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F5B7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F5BF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F5C7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F5CF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F5D7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F5DF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F5E7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F5EF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F5F7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F5FF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F607 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F60F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F617 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F61F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F627 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F62F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F637 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F63F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F647 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F64F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F657 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F65F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F667 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F66F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F677 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F67F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F687 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F68F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F697 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F69F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F6A7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F6AF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F6B7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F6BF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F6C7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F6CF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F6D7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F6DF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F6E7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F6EF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F6F7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F6FF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F707 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F70F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F717 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F71F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F727 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F72F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F737 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F73F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F747 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F74F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F757 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F75F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F767 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F76F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F777 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F77F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F787 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F78F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F797 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F79F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F7A7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F7AF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F7B7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F7BF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F7C7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F7CF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F7D7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F7DF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F7E7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F7EF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F7F7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F7FF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F807 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F80F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F817 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F81F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F827 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F82F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F837 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F83F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F847 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F84F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F857 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F85F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F867 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F86F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F877 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F87F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F887 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F88F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F897 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F89F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F8A7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F8AF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F8B7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F8BF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F8C7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F8CF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F8D7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F8DF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F8E7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F8EF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F8F7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F8FF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F907 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F90F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F917 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F91F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F927 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F92F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F937 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F93F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F947 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F94F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F957 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F95F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F967 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F96F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F977 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F97F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F987 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F98F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F997 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F99F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F9A7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F9AF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F9B7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F9BF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F9C7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F9CF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F9D7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $F9DF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $F9E7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $F9EF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $F9F7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $F9FF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FA07 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FA0F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FA17 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FA1F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FA27 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FA2F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FA37 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FA3F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FA47 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FA4F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FA57 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FA5F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FA67 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FA6F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FA77 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FA7F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FA87 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FA8F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FA97 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FA9F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FAA7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FAAF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FAB7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FABF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FAC7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FACF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FAD7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FADF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FAE7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FAEF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FAF7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FAFF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FB07 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FB0F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FB17 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FB1F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FB27 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FB2F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FB37 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FB3F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FB47 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FB4F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FB57 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FB5F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FB67 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FB6F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FB77 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FB7F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FB87 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FB8F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FB97 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FB9F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FBA7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FBAF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FBB7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FBBF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FBC7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FBCF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FBD7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FBDF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FBE7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FBEF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FBF7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FBFF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FC07 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FC0F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FC17 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FC1F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FC27 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FC2F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FC37 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FC3F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FC47 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FC4F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FC57 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FC5F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FC67 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FC6F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FC77 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FC7F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FC87 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FC8F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FC97 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FC9F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FCA7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FCAF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FCB7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FCBF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FCC7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FCCF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FCD7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FCDF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FCE7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FCEF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FCF7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FCFF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FD07 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FD0F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FD17 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FD1F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FD27 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FD2F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FD37 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FD3F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FD47 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FD4F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FD57 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FD5F DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FD67 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FD6F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FD77 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FD7F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FD87 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FD8F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FD97 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FD9F DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FDA7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FDAF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FDB7 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FDBF DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FDC7 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FDCF DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FDD7 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FDDF DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FDE7 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FDEF DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FDF7 DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FDFF DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FE07 DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FE0F DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FE17 DEFB $8F,$31,$E9,$2A,$F3,$52,$FD,$AC
 $FE1F DEFB $21,$4F,$7B,$0B,$62,$E0,$CC,$8F
 $FE27 DEFB $31,$E9,$00,$00,$0A,$00,$00,$00
 $FE2F DEFB $00,$79,$21,$20,$2A,$F3,$52,$FD
 $FE37 DEFB $AC,$21,$4F,$7B,$0B,$62,$E0,$CC
 $FE3F DEFB $8F,$31,$E9,$00,$00,$00,$00,$00
 $FE47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FE9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FECF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FED7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FEFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FF17 DEFB $00,$F3,$0D,$CE,$0B,$E3,$50,$00
 $FF1F DEFB $80,$00,$00,$7C,$B8,$0A,$0F,$B1
 $FF27 DEFB $33,$00,$80,$00,$00,$8A,$B8,$0A
 $FF2F DEFB $0F,$B1,$33,$00,$80,$DB,$02,$4D
 $FF37 DEFB $00,$F0,$62,$62,$00,$EB,$62,$6A
 $FF3F DEFB $32,$9B,$36,$65,$33,$B7,$2D,$EB
 $FF47 DEFB $62,$E6,$62,$9C,$1E,$92,$1E,$FE
 $FF4F DEFB $01,$76,$F1,$93,$00,$2A,$F2,$E2
 $FF57 DEFB $3E,$00,$3C,$42,$42,$7E,$42,$42
 $FF5F DEFB $00,$00,$7C,$42,$7C,$42,$42,$7C
 $FF67 DEFB $00,$00,$3C,$42,$40,$40,$42,$3C
 $FF6F DEFB $00,$00,$78,$44,$42,$42,$44,$78
 $FF77 DEFB $00,$00,$7E,$40,$7C,$40,$40,$7E
 $FF7F DEFB $00,$00,$7E,$40,$7C,$40,$40,$40
 $FF87 DEFB $00,$00,$3C,$42,$40,$4E,$42,$3C
 $FF8F DEFB $00,$00,$42,$42,$7E,$42,$42,$42
 $FF97 DEFB $00,$00,$3E,$08,$08,$08,$08,$3E
 $FF9F DEFB $00,$00,$02,$02,$02,$42,$42,$3C
 $FFA7 DEFB $00,$00,$44,$48,$70,$48,$44,$42
 $FFAF DEFB $00,$00,$40,$40,$40,$40,$40,$7E
 $FFB7 DEFB $00,$00,$42,$66,$5A,$42,$42,$42
 $FFBF DEFB $00,$00,$42,$62,$52,$4A,$46,$42
 $FFC7 DEFB $00,$00,$3C,$42,$42,$42,$42,$3C
 $FFCF DEFB $00,$00,$7C,$42,$42,$7C,$40,$40
 $FFD7 DEFB $00,$00,$3C,$42,$42,$52,$4A,$3C
 $FFDF DEFB $00,$00,$7C,$42,$42,$7C,$44,$42
 $FFE7 DEFB $00,$00,$3C,$40,$3C,$02,$42,$3C
 $FFEF DEFB $00,$00,$FE,$10,$10,$10,$10,$10
 $FFF7 DEFB $00,$00,$42,$42,$42,$42,$42,$3C
 $FFFF DEFB $00
