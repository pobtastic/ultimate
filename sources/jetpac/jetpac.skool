@org=$4000
@start=$5B80

; Loading screen
;
; #UDGTABLE
; { #SCR2(loading) | JetPac Loading Screen. }
; TABLE#
@label=Loading
b$4000 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {Pixels
 $4020 DEFB $FF,$FF,$00,$3F,$FF,$FF,$C0,$0F,$FF,$FF,$F0,$03,$FF,$FF,$FC,$00,$0F,$FF,$FF,$C0,$00,$03,$FF,$FF,$E0,$00,$FF,$FF,$F8,$01,$FF,$FF ;
 $4040 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FC,$20,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E2,$00,$BF,$FF,$FF,$C4,$23,$FF,$FF,$08,$01,$FF,$FF ;
 $4060 DEFB $FF,$FF,$00,$07,$7F,$EC,$00,$37,$FF,$FF,$EC,$00,$37,$FE,$C0,$00,$37,$FF,$FF,$FC,$07,$FF,$FF,$FF,$D8,$1B,$FF,$60,$00,$01,$FF,$FF ;
 $4080 DEFB $FF,$FF,$00,$DF,$FF,$E2,$00,$47,$FF,$FF,$00,$00,$47,$FE,$20,$00,$47,$FE,$20,$00,$BF,$FE,$18,$FF,$C4,$23,$FF,$FF,$C0,$01,$FF,$FF ;
 $40A0 DEFB $FF,$FF,$01,$1F,$FF,$84,$00,$47,$FF,$FF,$E4,$00,$47,$FE,$20,$00,$47,$FE,$20,$0B,$FF,$E1,$08,$FF,$C4,$10,$FF,$FF,$F2,$01,$FF,$FF ;
 $40C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4120 DEFB $FF,$FF,$00,$DF,$FF,$FF,$B0,$37,$FF,$FF,$CC,$0D,$FF,$FF,$FF,$00,$37,$FF,$FF,$E0,$00,$0F,$FF,$FF,$D8,$03,$FF,$FF,$E6,$01,$FF,$FF ;
 $4140 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FC,$40,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E2,$01,$3F,$FF,$FF,$C4,$23,$FF,$FE,$10,$01,$FF,$FF ;
 $4160 DEFB $FF,$FF,$00,$04,$FF,$F2,$00,$4F,$FF,$FF,$F2,$00,$4F,$FF,$20,$00,$4F,$FF,$FF,$F2,$1F,$FF,$FF,$FF,$E4,$27,$FF,$90,$00,$01,$FF,$FF ;
 $4180 DEFB $FF,$FF,$01,$9F,$FF,$E2,$00,$47,$FF,$FE,$80,$00,$47,$FE,$20,$00,$47,$FE,$20,$01,$3F,$FE,$28,$FF,$C4,$23,$FF,$FF,$20,$01,$FF,$FF ;
 $41A0 DEFB $FF,$FF,$01,$20,$00,$04,$00,$48,$00,$00,$14,$00,$48,$01,$20,$00,$48,$01,$20,$16,$00,$32,$09,$00,$24,$10,$00,$00,$0A,$01,$FF,$FF ;
 $41C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$10,$10,$18,$1E,$06,$07,$F0,$60,$7F,$1F,$83,$E0,$40,$C1,$18,$C0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4220 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FF,$C2,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$F0,$00,$17,$FF,$FF,$C4,$07,$FF,$FF,$E1,$01,$FF,$FF ;
 $4240 DEFB $FF,$FF,$01,$20,$FF,$F0,$48,$47,$FE,$03,$40,$12,$0F,$FF,$04,$80,$47,$FE,$1F,$E2,$01,$7F,$F8,$FF,$C4,$23,$FF,$81,$10,$01,$FF,$FF ;
 $4260 DEFB $FF,$FF,$00,$07,$00,$0E,$00,$70,$00,$00,$0C,$00,$70,$00,$E0,$00,$70,$00,$00,$0E,$1C,$00,$00,$00,$5C,$38,$00,$70,$00,$01,$FF,$FF ;
 $4280 DEFB $FF,$FF,$01,$1F,$FF,$E2,$00,$47,$FF,$FE,$40,$00,$47,$FE,$20,$00,$47,$FE,$20,$01,$7F,$FC,$28,$FF,$C4,$23,$FF,$FF,$90,$01,$FF,$FF ;
 $42A0 DEFB $FF,$FF,$01,$C0,$00,$18,$00,$70,$00,$00,$0E,$00,$70,$00,$E0,$00,$70,$00,$E0,$1C,$00,$1E,$0E,$00,$1C,$0C,$00,$00,$07,$01,$FF,$FF ;
 $42C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$10,$30,$18,$0C,$04,$0F,$F8,$C0,$FF,$1F,$01,$C0,$40,$63,$18,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4320 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FF,$84,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E8,$00,$27,$FF,$FF,$C4,$0B,$FF,$FF,$C2,$01,$FF,$FF ;
 $4340 DEFB $FF,$FF,$01,$C3,$7F,$EC,$38,$47,$FE,$00,$80,$1C,$37,$FE,$C3,$80,$47,$FE,$1F,$E2,$02,$7F,$F0,$FF,$C4,$23,$FF,$60,$E0,$01,$FF,$FF ;
 $4360 DEFB $FF,$FF,$00,$04,$FF,$F2,$00,$4F,$FF,$FF,$F2,$00,$4F,$FF,$20,$00,$4F,$FF,$FF,$F2,$27,$FF,$FF,$FF,$E4,$27,$FF,$90,$00,$01,$FF,$FF ;
 $4380 DEFB $FF,$FF,$01,$1F,$FF,$E2,$00,$47,$FF,$FF,$60,$00,$47,$FE,$20,$00,$47,$FE,$20,$02,$7F,$FC,$48,$FF,$C4,$23,$FF,$FF,$90,$01,$FF,$FF ;
 $43A0 DEFB $FF,$FF,$01,$FF,$FF,$E0,$00,$7F,$FF,$FF,$FE,$00,$7F,$FF,$E0,$00,$7F,$FF,$E0,$3F,$FF,$FC,$0F,$FF,$FC,$03,$FF,$FF,$FF,$01,$FF,$FF ;
 $43C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$71,$FC,$78,$8C,$44,$7F,$F8,$C7,$FF,$1F,$11,$C4,$44,$63,$08,$8F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $4420 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FF,$04,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E4,$00,$2F,$FF,$FF,$C4,$13,$FF,$FF,$C2,$01,$FF,$FF ;
 $4440 DEFB $FF,$FF,$01,$FC,$7F,$E3,$F8,$47,$FF,$FF,$F0,$1F,$C7,$FE,$3F,$80,$47,$FF,$FF,$E2,$02,$FF,$FF,$FF,$C4,$23,$FF,$1F,$E0,$01,$FF,$FF ;
 $4460 DEFB $FF,$FF,$00,$07,$7F,$EC,$00,$37,$FF,$FF,$EC,$00,$37,$FE,$C0,$00,$37,$FF,$FF,$8C,$3F,$FF,$FF,$FF,$DC,$1B,$FF,$60,$00,$01,$FF,$FF ;
 $4480 DEFB $FF,$FF,$01,$1F,$FF,$E2,$00,$47,$FF,$FF,$20,$00,$47,$FE,$20,$00,$47,$FE,$20,$02,$FF,$F8,$48,$FF,$C4,$23,$FF,$FF,$C8,$01,$FF,$FF ;
 $44A0 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $44C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$70,$7C,$78,$08,$04,$7F,$F8,$F0,$FF,$1F,$11,$80,$44,$63,$00,$88,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $4520 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FF,$08,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E4,$00,$4F,$FF,$FF,$C4,$13,$FF,$FF,$84,$01,$FF,$FF ;
 $4540 DEFB $FF,$FF,$00,$04,$7F,$E2,$00,$4F,$FF,$FF,$FC,$00,$0F,$FF,$20,$00,$4F,$FF,$FF,$F2,$05,$FF,$FF,$FF,$E4,$27,$FF,$90,$00,$01,$FF,$FF ;
 $4560 DEFB $FF,$FF,$00,$04,$7F,$E2,$00,$47,$FE,$00,$12,$00,$47,$FE,$20,$00,$47,$FF,$00,$04,$4F,$FF,$81,$FF,$C4,$23,$FF,$10,$00,$01,$FF,$FF ;
 $4580 DEFB $FF,$FF,$01,$1F,$FF,$E2,$00,$47,$FF,$FF,$90,$00,$47,$FE,$20,$00,$47,$FE,$20,$04,$FF,$F8,$88,$FF,$C4,$23,$FF,$FF,$C8,$01,$FF,$FF ;
 $45A0 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $45C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$71,$FC,$78,$18,$04,$7F,$F8,$FC,$7F,$1F,$11,$80,$44,$63,$10,$8C,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $4620 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FE,$10,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E2,$00,$5F,$FF,$FF,$C4,$23,$FF,$FF,$84,$01,$FF,$FF ;
 $4640 DEFB $FF,$FF,$00,$04,$00,$02,$00,$70,$00,$00,$0E,$00,$30,$00,$E0,$00,$70,$00,$00,$0E,$06,$00,$00,$00,$1C,$38,$00,$70,$00,$01,$FF,$FF ;
 $4660 DEFB $FF,$FF,$00,$04,$7F,$E2,$00,$47,$FE,$00,$0E,$00,$47,$FE,$20,$00,$47,$FE,$C0,$18,$5F,$FF,$67,$FF,$C4,$23,$FF,$10,$00,$01,$FF,$FF ;
 $4680 DEFB $FF,$FF,$01,$1F,$FF,$E2,$00,$47,$FF,$FF,$D0,$00,$47,$FE,$20,$00,$47,$FE,$20,$05,$FF,$F0,$88,$FF,$C4,$23,$FF,$FF,$E4,$01,$FF,$FF ;
 $46A0 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $46C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$70,$3C,$78,$F1,$C4,$0F,$F8,$E0,$7F,$01,$01,$1C,$40,$63,$18,$80,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $4720 DEFB $FF,$FF,$01,$1F,$FF,$FF,$88,$47,$FF,$FC,$10,$11,$FF,$FF,$FC,$80,$47,$FF,$FF,$E2,$00,$9F,$FF,$FF,$C4,$23,$FF,$FF,$08,$01,$FF,$FF ;
 $4740 DEFB $FF,$FF,$00,$04,$FF,$F2,$00,$4F,$FF,$FF,$F2,$00,$4F,$FF,$20,$00,$4F,$FF,$FF,$F2,$09,$FF,$FF,$FF,$E4,$27,$FF,$90,$00,$01,$FF,$FF ;
 $4760 DEFB $FF,$FF,$00,$3F,$FF,$E2,$00,$47,$FF,$FF,$FE,$00,$47,$FE,$20,$00,$47,$FE,$3F,$E0,$9F,$FF,$18,$FF,$C4,$23,$FF,$FF,$00,$01,$FF,$FF ;
 $4780 DEFB $FF,$FF,$01,$1F,$FF,$C2,$00,$47,$FF,$FF,$C8,$00,$47,$FE,$20,$00,$47,$FE,$20,$09,$FF,$F1,$08,$FF,$C4,$21,$FF,$FF,$F4,$01,$FF,$FF ;
 $47A0 DEFB $FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF ;
 $47C0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$F0,$1C,$78,$F1,$C6,$07,$F0,$40,$FF,$01,$83,$1C,$40,$C1,$18,$C0,$CF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00 ;
 $4820 DEFB $F0,$00,$00,$08,$9F,$00,$00,$04,$E8,$00,$C2,$00,$00,$00,$00,$00,$00,$40,$00,$00,$17,$37,$DF,$81,$0E,$00,$00,$7E,$00,$00,$00,$00 ;
 $4840 DEFB $33,$00,$13,$C1,$9F,$70,$3C,$00,$00,$00,$C1,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$51,$B2,$DE,$BB,$D0,$00,$07,$0E,$0B,$F0,$00 ;
 $4860 DEFB $0C,$78,$04,$04,$18,$20,$E0,$6C,$00,$30,$48,$78,$00,$01,$30,$00,$00,$57,$03,$E0,$0F,$1F,$FF,$BC,$F7,$F7,$70,$01,$FF,$07,$0B,$8C ;
 $4880 DEFB $01,$00,$61,$E4,$07,$81,$83,$C0,$00,$60,$07,$03,$FE,$9A,$28,$EE,$00,$37,$C7,$FF,$C0,$78,$30,$88,$E3,$BF,$77,$80,$00,$3F,$C0,$F3 ;
 $48A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F6,$93,$FE,$90,$90,$02,$01,$EA,$26,$77,$EE,$3E,$80,$07,$CC,$FC ;
 $48C0 DEFB $03,$E0,$CE,$0C,$00,$80,$C0,$00,$8C,$00,$7C,$40,$E0,$7C,$10,$03,$F8,$07,$FC,$0F,$F0,$07,$FC,$FF,$E3,$80,$31,$EA,$00,$00,$02,$31 ;
 $48E0 DEFB $03,$03,$C0,$3E,$00,$70,$61,$E0,$7E,$06,$00,$06,$00,$1C,$0F,$F2,$0B,$98,$01,$C7,$E7,$18,$03,$F0,$78,$9F,$11,$7A,$5E,$A0,$00,$03 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$00 ;
 $4920 DEFB $F0,$00,$00,$09,$BB,$00,$00,$00,$40,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$26,$0B,$BF,$86,$F1,$00,$01,$FE,$00,$00,$00,$00 ;
 $4940 DEFB $33,$80,$23,$C8,$8F,$E0,$3E,$00,$00,$03,$F2,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$89,$BD,$5E,$BB,$E8,$00,$03,$8C,$18,$78,$60 ;
 $4960 DEFB $02,$38,$04,$08,$18,$10,$F0,$6E,$00,$50,$98,$78,$00,$02,$1C,$00,$00,$CF,$87,$80,$3B,$FF,$C0,$79,$EB,$F7,$B8,$00,$6B,$83,$85,$8E ;
 $4980 DEFB $01,$00,$C3,$76,$0F,$C0,$80,$60,$01,$C0,$03,$80,$7F,$B6,$51,$C7,$03,$FF,$C4,$9F,$FF,$FA,$08,$88,$C9,$BF,$7B,$40,$00,$1F,$E0,$7B ;
 $49A0 DEFB $00,$07,$07,$B4,$00,$1C,$00,$63,$8C,$06,$00,$70,$01,$C1,$E3,$80,$27,$BF,$FF,$61,$00,$02,$03,$D9,$23,$EF,$EC,$3E,$80,$06,$E6,$BC ;
 $49C0 DEFB $07,$82,$FE,$0C,$00,$40,$E0,$00,$C3,$00,$1E,$20,$70,$3F,$0C,$01,$FC,$02,$AB,$FF,$FF,$F8,$01,$FF,$82,$00,$CD,$F2,$00,$00,$00,$38 ;
 $49E0 DEFB $02,$03,$C0,$3F,$00,$78,$20,$F0,$7F,$01,$80,$0F,$80,$06,$1C,$7D,$85,$F0,$02,$38,$18,$06,$1C,$00,$F8,$DF,$39,$74,$3F,$84,$00,$01 ;
 $4A00 DEFB $00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$99,$00 ;
 $4A20 DEFB $D8,$00,$00,$11,$AD,$80,$00,$00,$10,$00,$28,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4E,$06,$EF,$89,$EF,$00,$01,$EF,$80,$00,$00,$00 ;
 $4A40 DEFB $63,$C0,$5B,$88,$47,$70,$3F,$00,$00,$02,$74,$E0,$00,$00,$00,$00,$02,$00,$00,$00,$9D,$06,$B3,$D9,$FB,$EC,$00,$03,$F0,$18,$7D,$E0 ;
 $4A60 DEFB $02,$30,$08,$10,$38,$11,$38,$67,$38,$F0,$9C,$7C,$00,$02,$43,$00,$00,$E8,$9F,$7F,$FD,$3D,$3F,$CD,$DB,$FB,$B8,$00,$35,$E1,$C3,$E7 ;
 $4A80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$BE,$04,$4F,$FF,$E9,$80,$1F,$78,$DF,$B8,$20,$00,$07,$F0,$3D ;
 $4AA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$AD,$86,$49,$98,$00,$04,$0D,$DD,$13,$DF,$92,$1E,$80,$0F,$F3,$5E ;
 $4AC0 DEFB $0E,$07,$8C,$0E,$00,$40,$F0,$00,$E1,$00,$1F,$10,$70,$3F,$C2,$00,$7E,$01,$B5,$FF,$FF,$FF,$FF,$FF,$19,$03,$3D,$E4,$70,$00,$00,$1C ;
 $4AE0 DEFB $02,$0E,$00,$3F,$00,$3C,$20,$70,$0E,$00,$F0,$EF,$F8,$03,$8C,$0F,$C2,$F0,$03,$E9,$E0,$01,$7C,$01,$F8,$C3,$FF,$6A,$7E,$D0,$C0,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FC,$00,$00,$44,$00,$00,$00,$10,$A1,$00 ;
 $4B20 DEFB $B8,$00,$01,$11,$AD,$C0,$10,$02,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4E,$03,$37,$36,$1E,$80,$03,$E5,$C0,$00,$00,$00 ;
 $4B40 DEFB $61,$C0,$99,$88,$41,$E0,$C7,$80,$00,$02,$38,$E0,$00,$00,$00,$00,$01,$00,$00,$00,$FE,$00,$ED,$47,$F7,$EF,$00,$01,$F8,$2C,$37,$B8 ;
 $4B60 DEFB $04,$20,$08,$18,$3C,$01,$1C,$3B,$FF,$41,$2C,$76,$00,$05,$23,$C0,$00,$57,$A1,$FF,$FD,$C2,$FF,$F3,$DD,$FB,$DC,$00,$3B,$F8,$C1,$B7 ;
 $4B80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F5,$5B,$70,$4F,$89,$C4,$C0,$11,$3C,$EF,$BC,$20,$00,$00,$F8,$0F ;
 $4BA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$D4,$D6,$49,$C7,$FF,$F8,$33,$DC,$97,$BE,$73,$1E,$80,$1E,$F3,$8E ;
 $4BC0 DEFB $1C,$0E,$18,$1E,$00,$C0,$F8,$01,$F1,$80,$7E,$08,$38,$33,$E2,$80,$3F,$00,$EA,$FF,$FF,$FF,$FF,$FF,$81,$0C,$FD,$EC,$24,$00,$00,$0E ;
 $4BE0 DEFB $04,$3C,$00,$EF,$80,$3E,$20,$70,$07,$00,$78,$01,$FE,$00,$E0,$0F,$F0,$F0,$00,$16,$30,$00,$BE,$03,$F8,$E3,$39,$76,$C3,$04,$08,$00 ;
 $4C00 DEFB $00,$00,$00,$00,$C0,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$18,$00,$00,$00,$00,$03,$FF,$FC,$03,$00,$06,$00,$08,$40,$38,$A1,$00 ;
 $4C20 DEFB $CC,$00,$03,$A1,$BD,$C3,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$03,$77,$DB,$DF,$40,$07,$EC,$70,$06,$00,$00 ;
 $4C40 DEFB $61,$E0,$A5,$10,$21,$F1,$1B,$C0,$00,$04,$30,$D0,$00,$00,$00,$00,$10,$00,$00,$01,$CC,$40,$EE,$7A,$BF,$EF,$00,$01,$F8,$2C,$36,$1C ;
 $4C60 DEFB $08,$20,$10,$0C,$3C,$02,$1E,$3D,$EF,$81,$0C,$7B,$00,$0A,$12,$C0,$00,$BE,$7F,$FF,$D9,$FE,$FF,$FB,$BD,$FD,$DE,$00,$2F,$F8,$20,$F9 ;
 $4C80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$ED,$2F,$C0,$4F,$B4,$60,$60,$3C,$9C,$6F,$BC,$70,$00,$00,$FE,$87 ;
 $4CA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EE,$49,$E0,$00,$F7,$C3,$BC,$8C,$79,$92,$8E,$80,$1E,$39,$C7 ;
 $4CC0 DEFB $18,$1C,$F0,$1E,$00,$60,$F8,$03,$F8,$C0,$F8,$0C,$1C,$21,$F0,$C0,$3F,$06,$7F,$FF,$FF,$FF,$FF,$FF,$01,$B3,$FE,$F0,$12,$40,$00,$0F ;
 $4CE0 DEFB $00,$38,$00,$7F,$80,$3D,$10,$30,$03,$C0,$78,$00,$0F,$80,$1F,$80,$00,$38,$01,$E4,$08,$7C,$9F,$0F,$F4,$A3,$11,$F9,$1A,$B0,$90,$00 ;
 $4D00 DEFB $80,$00,$00,$01,$70,$00,$00,$02,$10,$00,$74,$00,$00,$00,$00,$18,$00,$00,$00,$00,$06,$FF,$F6,$FC,$C0,$00,$00,$18,$00,$10,$99,$00 ;
 $4D20 DEFB $CE,$00,$05,$A1,$8C,$C4,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$03,$79,$E4,$0F,$C0,$3F,$C2,$38,$1B,$80,$00 ;
 $4D40 DEFB $30,$F1,$05,$10,$20,$F1,$07,$E0,$00,$04,$30,$D0,$00,$00,$40,$00,$00,$00,$00,$1F,$CE,$A9,$F7,$AD,$BF,$EF,$C0,$01,$F8,$4C,$12,$1E ;
 $4D60 DEFB $04,$40,$10,$0C,$3C,$00,$0F,$06,$78,$12,$4C,$79,$80,$14,$11,$30,$00,$BB,$77,$1C,$C8,$FB,$F8,$17,$BE,$FD,$EE,$00,$7F,$F7,$10,$DC ;
 $4D80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$B0,$17,$F0,$0F,$92,$32,$A0,$44,$9E,$77,$DC,$78,$00,$01,$FF,$47 ;
 $4DA0 DEFB $00,$1C,$07,$08,$00,$01,$00,$30,$70,$00,$80,$70,$00,$E2,$40,$78,$00,$33,$FF,$FF,$FF,$F8,$07,$7E,$4D,$E6,$14,$ED,$00,$3C,$1C,$C7 ;
 $4DC0 DEFB $30,$18,$E0,$1E,$00,$70,$EC,$03,$FC,$61,$F0,$04,$07,$01,$F0,$20,$0B,$0F,$00,$1F,$FF,$FF,$FF,$FF,$20,$CC,$FE,$F0,$79,$00,$00,$07 ;
 $4DE0 DEFB $00,$30,$00,$FF,$C0,$7D,$80,$C0,$03,$20,$7C,$00,$03,$E0,$1C,$70,$00,$0C,$01,$DF,$E7,$FF,$5F,$7F,$E4,$B7,$93,$DF,$5B,$D4,$60,$00 ;
 $4E00 DEFB $C0,$00,$00,$02,$38,$00,$00,$00,$40,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$3F,$EE,$30,$30,$20,$00,$3C,$08,$00,$42,$00 ;
 $4E20 DEFB $E6,$00,$09,$E1,$9E,$C8,$70,$00,$40,$00,$00,$80,$00,$00,$00,$00,$00,$00,$00,$00,$9C,$02,$FE,$DE,$77,$A0,$46,$42,$3C,$13,$80,$08 ;
 $4E40 DEFB $10,$FA,$02,$08,$10,$F0,$81,$F0,$00,$08,$20,$70,$00,$00,$E0,$00,$00,$1C,$00,$7E,$27,$17,$8B,$4D,$BF,$EE,$E0,$01,$FC,$24,$12,$1B ;
 $4E60 DEFB $02,$40,$20,$7C,$3E,$04,$0F,$03,$E0,$30,$8E,$7F,$E0,$65,$12,$7C,$00,$5C,$76,$0C,$24,$0F,$86,$17,$77,$7E,$EF,$00,$FD,$FE,$01,$DC ;
 $4E80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FA,$48,$3C,$0D,$92,$30,$28,$76,$4F,$17,$DC,$FE,$00,$01,$FF,$F0 ;
 $4EA0 DEFB $00,$38,$0D,$0C,$01,$00,$80,$0C,$38,$00,$D0,$80,$00,$72,$20,$1E,$00,$10,$03,$FF,$FF,$FF,$F7,$7E,$7D,$98,$0D,$65,$00,$E0,$0C,$E3 ;
 $4EC0 DEFB $20,$38,$E8,$1E,$00,$70,$67,$01,$F8,$39,$80,$04,$03,$81,$DF,$18,$0B,$0D,$00,$40,$0F,$FF,$FF,$FC,$30,$B0,$FE,$F0,$5D,$08,$00,$07 ;
 $4EE0 DEFB $00,$30,$01,$F3,$C0,$7E,$10,$18,$01,$10,$7C,$00,$00,$E0,$03,$08,$00,$04,$01,$A0,$77,$FF,$FF,$FF,$E3,$3D,$FF,$6F,$1F,$62,$74,$00 ;
 $4F00 DEFB $E0,$00,$00,$04,$9E,$00,$00,$00,$40,$00,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$CF,$EF,$40,$0C,$00,$00,$7C,$00,$00,$3C,$08 ;
 $4F20 DEFB $77,$00,$13,$C1,$97,$70,$70,$00,$00,$00,$01,$80,$00,$00,$00,$00,$00,$00,$00,$00,$9E,$23,$3E,$DE,$8B,$D0,$80,$86,$0D,$CB,$60,$00 ;
 $4F40 DEFB $10,$7C,$02,$04,$18,$70,$80,$F8,$00,$10,$40,$78,$00,$01,$60,$00,$00,$3F,$00,$F8,$16,$F7,$FE,$D6,$7F,$EF,$E0,$01,$FE,$1E,$09,$1D ;
 $4F60 DEFB $00,$80,$20,$F4,$0F,$83,$03,$80,$C0,$61,$86,$3F,$F8,$9A,$2A,$EE,$00,$BF,$88,$02,$24,$3F,$C1,$0F,$E3,$7E,$F7,$80,$80,$FF,$C0,$E6 ;
 $4F80 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$ED,$24,$03,$09,$92,$10,$20,$EA,$47,$2B,$DD,$7D,$00,$00,$DD,$F8 ;
 $4FA0 DEFB $00,$70,$0E,$0C,$01,$00,$80,$07,$1C,$00,$78,$03,$E0,$3C,$30,$0F,$C8,$0C,$00,$00,$0F,$FF,$FA,$FE,$22,$60,$0B,$C5,$00,$80,$06,$75 ;
 $4FC0 DEFB $01,$F0,$60,$1E,$00,$F0,$63,$C0,$7C,$0F,$00,$06,$00,$61,$8F,$CC,$1B,$1C,$00,$3F,$10,$E7,$FF,$F8,$38,$C1,$92,$F8,$AA,$01,$00,$03 ;
 $4FE0 DEFB $00,$20,$10,$F3,$C0,$FC,$08,$1C,$01,$08,$FC,$00,$00,$60,$00,$07,$00,$03,$00,$A3,$9B,$FF,$FF,$FE,$C5,$18,$FC,$3F,$A7,$F8,$96,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$ED,$FF,$FF,$FC,$C5,$10,$F0,$80,$1E,$EA,$21,$00 ;
 $5020 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$5F,$0E,$7E,$00,$00,$00,$01,$01,$AF,$FE,$FE,$14,$A0 ;
 $5040 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C,$00,$03,$1C,$FF,$DC,$00,$00,$00,$04,$88,$00,$06,$3D,$AA ;
 $5060 DEFB $38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C,$3C,$00,$01,$F7,$FF,$75,$80,$00,$00,$00,$0A,$AE,$FF,$F7 ;
 $5080 DEFB $38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$79,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C,$00,$01,$BE,$0F,$F3,$00,$00,$00,$00,$00,$00,$02,$6A,$D9 ;
 $50A0 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$F7,$5C,$FF,$9C,$42,$DD,$C2,$23,$66,$D4,$7A,$00 ;
 $5120 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$20,$39,$FE,$00,$00,$00,$00,$0A,$57,$FF,$ED,$AB,$08 ;
 $5140 DEFB $38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$F0,$1F,$80,$1C,$00,$00,$F3,$C1,$BE,$00,$00,$00,$00,$23,$1A,$9B,$5F,$DE ;
 $5160 DEFB $38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$C2,$F0,$17,$80,$1C,$42,$00,$07,$FB,$FF,$7B,$80,$00,$00,$00,$21,$71,$FF,$FF ;
 $5180 DEFB $38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C,$00,$00,$1D,$EF,$EF,$00,$00,$00,$00,$00,$00,$00,$85,$26 ;
 $51A0 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$1F,$8C,$AE,$9A,$8C,$3E,$1D,$DC,$7F,$EA,$3E,$80 ;
 $5220 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$00,$1F,$E7,$FD,$80,$00,$00,$00,$31,$CE,$DF,$D6,$17,$64 ;
 $5240 DEFB $38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C,$00,$00,$0C,$01,$67,$00,$00,$00,$02,$0D,$BF,$53,$77,$75 ;
 $5260 DEFB $38,$BF,$FF,$2F,$FF,$2F,$01,$E9,$E8,$BC,$7E,$5E,$0F,$E2,$F0,$17,$FF,$1C,$99,$00,$1F,$FD,$FE,$F6,$00,$00,$00,$00,$45,$AF,$DF,$FF ;
 $5280 DEFB $38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C,$00,$00,$00,$DF,$9E,$00,$00,$00,$00,$00,$00,$04,$13,$5D ;
 $52A0 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$8F,$FF,$C4,$A1,$9A,$88,$00,$A1,$59,$FF,$BD,$5E,$00 ;
 $5320 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$00,$08,$0F,$FB,$C0,$00,$00,$00,$06,$19,$F4,$FC,$5E,$10 ;
 $5340 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C,$00,$00,$04,$02,$C3,$80,$00,$00,$00,$25,$E5,$FD,$BE,$F6 ;
 $5360 DEFB $38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C,$A1,$00,$FF,$FE,$FE,$EE,$00,$00,$00,$00,$00,$95,$7F,$FB ;
 $5380 DEFB $38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$00,$00,$00,$1F,$70,$00,$00,$00,$00,$00,$00,$00,$21,$2A ;
 $53A0 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$7F,$FF,$E9,$C1,$35,$30,$00,$2A,$AF,$FF,$F8,$95,$20 ;
 $5420 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$00,$08,$FF,$F7,$E0,$00,$00,$00,$05,$36,$FB,$B5,$06,$A8 ;
 $5440 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C,$00,$00,$03,$0D,$86,$80,$00,$00,$00,$0B,$6B,$5A,$5E,$D9 ;
 $5460 DEFB $38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$A1,$01,$FF,$FD,$FE,$DC,$00,$00,$00,$00,$0C,$2F,$DD,$FE ;
 $5480 DEFB $38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$00,$00,$00,$1C,$E0,$00,$00,$00,$00,$00,$00,$00,$04,$28 ;
 $54A0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$80,$07,$F0,$43,$24,$C0,$00,$57,$7F,$FF,$F2,$3E,$80 ;
 $5520 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$00,$08,$01,$EF,$E0,$00,$00,$00,$02,$55,$D5,$6C,$7F,$20 ;
 $5540 DEFB $38,$A4,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C,$00,$00,$00,$F3,$0E,$F8,$00,$00,$00,$00,$4D,$AA,$FB,$B2 ;
 $5560 DEFB $38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$99,$00,$FF,$FB,$FE,$A0,$00,$00,$00,$00,$01,$5A,$BA,$DD ;
 $5580 DEFB $38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C,$00,$00,$00,$0B,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$21 ;
 $55A0 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$80,$FF,$6F,$FC,$07,$00,$00,$15,$7F,$7F,$FD,$44,$10 ;
 $5620 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$00,$04,$00,$DF,$E0,$00,$00,$00,$00,$A5,$53,$52,$4D,$D6 ;
 $5640 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C,$00,$00,$00,$DF,$9E,$BC,$00,$00,$00,$00,$B7,$5D,$FF,$EC ;
 $5660 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$42,$03,$1F,$FB,$FE,$60,$00,$00,$00,$00,$00,$13,$6F,$7A ;
 $5680 DEFB $38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$E7,$3D,$FF,$1C,$00,$00,$00,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$40,$FB,$9E,$03,$F8,$00,$00,$55,$7F,$D7,$78,$3F,$40 ;
 $5720 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$00,$04,$03,$3F,$F0,$00,$00,$00,$00,$01,$48,$48,$57,$39 ;
 $5740 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C,$00,$00,$00,$EF,$FF,$47,$00,$00,$00,$05,$2A,$FB,$DF,$FB ;
 $5760 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$3C,$03,$E1,$F7,$FD,$C0,$00,$00,$00,$00,$00,$08,$9C,$FE ;
 $5780 DEFB $38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46 ; {Attributes
 $5820 DEFB $46,$46,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$46,$46,$46 ;
 $5840 DEFB $46,$46,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$46,$46,$46 ;
 $5860 DEFB $46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$46,$46 ;
 $5880 DEFB $46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$46,$46 ;
 $58A0 DEFB $46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$46,$46 ;
 $58C0 DEFB $46,$46,$46,$46,$46,$46,$46,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$C6,$46,$46,$46,$46,$46,$46,$46 ;
 $58E0 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46 ;
 $5900 DEFB $43,$00,$47,$43,$43,$00,$00,$47,$47,$00,$47,$00,$47,$00,$00,$47,$00,$00,$00,$00,$47,$47,$47,$47,$47,$47,$00,$43,$47,$47,$46,$47 ;
 $5920 DEFB $43,$00,$43,$43,$43,$43,$43,$47,$47,$00,$47,$43,$00,$00,$00,$00,$00,$47,$00,$00,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$47 ;
 $5940 DEFB $43,$43,$43,$43,$43,$43,$43,$43,$00,$43,$43,$43,$00,$43,$43,$00,$47,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43 ;
 $5960 DEFB $43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43 ;
 $5980 DEFB $42,$42,$42,$42,$43,$43,$43,$41,$41,$41,$45,$45,$44,$44,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$43,$43,$43 ;
 $59A0 DEFB $42,$42,$42,$42,$43,$43,$43,$41,$41,$41,$45,$45,$44,$44,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43 ;
 $59C0 DEFB $43,$43,$43,$43,$00,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$43,$43 ;
 $59E0 DEFB $43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$42,$43 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$42,$42 ;
 $5A20 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$00,$47,$47,$47,$47,$00,$00,$42,$46,$46,$46,$46,$42,$42 ;
 $5A40 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$00,$47,$47,$47,$47,$47,$00,$00,$42,$42,$42,$42,$42,$42 ;
 $5A60 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$43,$47,$47,$47,$47,$47,$47,$00,$00,$00,$42,$42,$42,$42 ;
 $5A80 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$00,$47,$47,$47,$47,$00,$00,$00,$00,$00,$00,$42,$42,$42 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5AC0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ;
 $5AE0 DEFB $38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38 ; }

i$5B00

; Game entry point
@label=GameEntry
c$5B80 LD HL,$6004   ; {Moves #N$2000 bytes from #N$6004 to #N$6000.
 $5B83 LD DE,$6000   ;
 $5B86 LD BC,$2000   ;
 $5B89 LDIR          ; }
 $5B8B JP $61E5      ; Jump to #R$61E5.
; View the equivalent code in;
; #LIST
; { #COOKIE$5B80 }
; { #PSSST$5B80 }
; { #TRANZAM$5B80 }
; LIST#
; .
; Later Ultimate games use more advanced decryption mechanisms;
; #LIST
; { #ATICATAC$5B80 }
; { #LUNARJETMAN$5B80 }
; LIST#

i$5B8E

; High Score
@label=HIGH_SCORE
g$5CF0 DEFB $31,$0E,$7D

; Game Type
;
; Holds the number of players and the chosen control method.
; #TABLE(default,centre,:w) { =h Bit(n) | =h Unset(0) | =h Set(1) } { 0 | 1up | 2up } { 1 | Keyboard | Kempston } TABLE#
@label=GAME_TYPE
g$5CF3 DEFB $4C      ; #TABLE(default,centre,:w) { =h Value | =h Num Players | =h Control Method }
                     ; { 0 | 1UP | Keyboard }
                     ; { 1 | 2UP | Keyboard }
                     ; { 2 | 1UP | Kempston }
                     ; { 3 | 2UP | Kempston }
                     ; TABLE#

; Player 1 Score
;
; The current score for player 1.
@label=1UP_SCORE_1ST
g$5CF4 DEFB $CC      ; Upper scoring byte
@label=1UP_SCORE_2ND
 $5CF5 DEFB $CC      ; Middle scoring byte
@label=1UP_SCORE_3RD
 $5CF6 DEFB $CC      ; Lower scoring byte

; Player 2 Score
;
; The current score for player 2.
@label=2UP_SCORE_1ST
g$5CF7 DEFB $2C      ; Upper scoring byte
@label=2UP_SCORE_2ND
 $5CF8 DEFB $32      ; Middle scoring byte
@label=2UP_SCORE_3RD
 $5CF9 DEFB $0E      ; Lower scoring byte

; Buffer
b$5CFA DEFB $00,$00,$02,$00,$00,$3A

; Jetman Frame
;
; Relates to which frame to display.
@label=JETMAN_FRAME
g$5D00 DEFB $D7      ; #TABLE(default,centre,centre,centre,centre,centre) { =h Value | =h Walking | =h Flying | =h Direction | =h Bits }
                     ; { $00 | #SPACE(1)     | #SPACE(1) | None  | #EVAL($00,$02,$08) }
                     ; { $01 | #SPACE(1)     | X         | Right | #EVAL($01,$02,$08) }
                     ; { $41 | #SPACE(1)     | X         | Left  | #EVAL($41,$02,$08) }
                     ; { $82 | X             | #SPACE(1) | Right | #EVAL($82,$02,$08) }
                     ; { $C2 | X             | #SPACE(1) | Left  | #EVAL($C2,$02,$08) }
                     ; TABLE#
; "None" is used to not show Jetman at all i.e. at the start of a game and
; while "inside the rocket".

; Jetman X Co-ordinate
@label=JETMAN_POS_X
g$5D01 DEFB $2E

; Jetman Y Co-ordinate
@label=JETMAN_POS_Y
g$5D02 DEFB $31

; Data block at 5D03
b$5D03 DEFB $0E,$7D,$4C,$CC,$CC,$CC,$2C,$33
 $5D0B DEFB $0E,$00,$00

; Game status buffer entry at 5D0E
g$5D0E DEFB $03,$00,$00,$3A,$D7,$2E,$31,$0E
 $5D16 DEFB $7D,$4C,$CC,$CC,$CC,$2C,$34,$0E
 $5D1E DEFB $00,$00,$04,$00,$00,$3A,$D7,$2E
 $5D26 DEFB $31,$0E,$7D,$4C,$CC,$CC,$CC,$2C
 $5D2E DEFB $35,$0E

; PARAM1
g$5D30 DEFB $00

; PARAM2
g$5D31 DEFB $00

; PARAM3
g$5D32 DEFB $05

; PARAM4
g$5D33 DEFB $00

; PARAM5
g$5D34 DEFB $00

; Number of collected fuel pods for current level
@label=NUM_FUEL_PODS
g$5D35 DEFB $3A

; PARAM7
g$5D36 DEFB $DA

; PARAM8
g$5D37 DEFB $30

; PARAM10
g$5D38 DEFB $0E

; Ship top section X position
g$5D39 DEFB $00

; Fuel (height)
g$5D3A DEFB $00

; PARAM12
g$5D3B DEFB $00

; Fuel status
;
; Note the status doesn't "reset". For example, after you've filled the ship with fuel and the ship is flashing
;       this value remains at $07 even though no more fuel pods will drop.  Hence, it only has a value of $00 when the
;       ship is in pieces and no fuel pod is set to drop.
@label=FUEL_POD_STATUS
g$5D3C DEFB $00      ; #TABLE(default,centre,centre,centre,centre,centre) { =h Value | =h State | =h Bits }
                     ; { $00 | Invisible/ None             | #EVAL($00,$02,$08) }
                     ; { $01 | Falling (from the sky)      | #EVAL($01,$02,$08) }
                     ; { $03 | Collected (i.e. "attached") | #EVAL($03,$02,$08) }
                     ; { $07 | Falling (can't recollect)   | #EVAL($07,$02,$08) }
                     ; TABLE#

; PARAM14
g$5D3D DEFB $00

; PARAM15
g$5D3E DEFB $3A

; PARAM16
g$5D3F DEFB $D9

; Item visibility
;
; $00 when not on screen, $0e when visible
@label=ITEM_VISIBILITY
g$5D40 DEFB $37      ; $00 (#EVAL($00,$02,$08)) when not on screen, $0e
                     ; (#EVAL($0e,$02,$08)) when visible

; Ship middle section X position
g$5D41 DEFB $0E

; Falling item (height)
g$5D42 DEFB $00,$00,$07,$00,$00,$3A

; Data block at 5D48
b$5D48 DEFB $DC
 $5D49 DEFB $31
 $5D4A DEFB $0E
 $5D4B DEFB $00
 $5D4C DEFB $00
 $5D4D DEFB $01
 $5D4E DEFB $00
 $5D4F DEFB $00

; Alien 1
g$5D50 DEFB $3A
 $5D51 DEFB $FB                 ; Alien 1 X?
 $5D52 DEFB $3A                 ; Alien 1 Y?
 $5D53 DEFB $F5,$DC,$31,$0E,$00 ; Alien 1 Frame?

; Alien 2
g$5D58 DEFB $00
 $5D59 DEFB $01                 ; Alien 2 X?
 $5D5A DEFB $00                 ; Alien 2 Y?
 $5D5B DEFB $00,$3B,$D9,$37,$0E ; Alien 2 Frame?

; Alien 3
g$5D60 DEFB $00
 $5D61 DEFB $00                 ; Alien 3 X?
 $5D62 DEFB $07                 ; Alien 3 Y?
 $5D63 DEFB $00,$00,$3B,$AC,$39 ; Alien 3 Frame?

; Alien 4
g$5D68 DEFB $0E
 $5D69 DEFB $00                 ; Alien 4 X?
 $5D6A DEFB $00                 ; Alien 4 Y?
 $5D6B DEFB $09,$00,$00,$2C,$37 ; Alien 4 Frame?

; Alien 5
g$5D70 DEFB $0E
 $5D71 DEFB $00                 ; Alien 5 X?
 $5D72 DEFB $00                 ; Alien 5 Y?
 $5D73 DEFB $07,$00,$00,$3B,$22 ; Alien 5 Frame?

; Alien 6
g$5D78 DEFB $4A
 $5D79 DEFB $45                             ; Alien 6 X?
 $5D7A DEFB $54                             ; Alien 6 Y?
 $5D7B DEFB $50,$41,$43,$20,$49,$53,$20,$4C ; {Alien 6 Frame?
 $5D83 DEFB $4F,$41,$44,$49,$4E             ; }

; Game status buffer entry at 5D88
g$5D88 DEFB $47,$22,$3B,$AC,$31,$32,$0E,$00
 $5D90 DEFB $00,$0C,$00,$00,$2C,$31,$30,$0E

; ???
g$5D98 DEFB $00,$00,$0A,$00,$00,$3B,$22,$14
 $5DA0 DEFB $01,$50,$4C,$45,$41,$53,$45,$20
 $5DA8 DEFB $57,$41,$49,$54,$22,$14,$00,$3A
 $5DB0 DEFB $F5,$AC,$30,$0E,$00,$00,$00,$00
 $5DB8 DEFB $00,$2C,$30,$0E,$00,$00,$00,$00
 $5DC0 DEFB $00,$3A,$EF,$22,$22

; ???
g$5DC5 DEFB $AA

; ???
g$5DC6 DEFB $3A,$D9,$30,$0E

; Game status buffer entry at 5DCA
g$5DCA DEFB $00

; ???
g$5DCB DEFB $00

; ????
g$5DCC DEFB $00,$00,$00

; LOOKING2
g$5DCF DEFB $3A,$DA

; Active Player
;
; Which player is currently active.
@label=ACTIVE_PLAYER
g$5DD1 DEFB $30      ; #TABLE(default,centre,centre) { =h Value | =h Player }
                     ; { $00 | 1UP }
                     ; { $FF | 2UP }
                     ; TABLE#

; ???
g$5DD2 DEFB $0E

; ???
g$5DD3 DEFB $00

; ???
g$5DD4 DEFB $00

; ???
g$5DD5 DEFB $00

; $C7 / $47 before game starts then $00?
g$5DD6 DEFB $00

; Countdown timer for interval before game starts
@label=INTERVAL_COUNTDOWN
g$5DD7 DEFB $00,$3A,$F5,$AC,$35,$0E,$00,$00
 $5DDF DEFB $05,$00,$00,$2C,$30,$0E,$00,$00
 $5DE7 DEFB $00,$00,$00,$3A,$EF,$22,$22,$AF
 $5DEF DEFB $3A

; Player Current Level
@label=CURRENT_LEVEL
g$5DF0 DEFB $F5

; Player 1 Lives
@label=1UP_CURRENT_LIVES
g$5DF1 DEFB $AC

; LOOKING3
@label=LOOKING3
g$5DF2 DEFB $35,$0E,$00,$00,$05,$00

; ?????
g$5DF8 DEFB $00

; Player 2 Lives
@label=2UP_CURRENT_LIVES
g$5DF9 DEFB $2C,$30,$0E,$00,$00,$00,$00

; Data block at 5E00
b$5E00 DEFB $00,$3A,$EF,$22,$22,$AF,$3A,$F5
 $5E08 DEFB $AC,$35,$0E,$00,$00,$05,$00,$00
 $5E10 DEFB $2C,$30,$0E,$00,$00,$00,$00,$00
 $5E18 DEFB $3A,$EF,$22,$22,$AF,$3A,$F5,$AC
 $5E20 DEFB $35,$0E,$00,$00,$05,$00,$00,$2C
 $5E28 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5E30 DEFB $EF,$22,$22,$AF,$3A,$F5,$C0,$32
 $5E38 DEFB $34,$35,$37,$36,$0E,$00,$00,$00
 $5E40 DEFB $60,$00,$0D,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at 5FC0
b$5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6000 DEFB $04,$80,$60,$1B,$06,$78,$B8,$88
 $6008 DEFB $04,$30,$48,$23,$04,$D0,$30,$23

; Data block at 6010
b$6010 DEFB $01,$80,$B7,$47,$00,$00,$00,$24

; New Game Parameters
@label=INIT_GAME_ENV
g$6018 DEFB $09
 $6019 DEFB $A8
 $601A DEFB $B7
 $601B DEFB $02
 $601C DEFB $01
 $601D DEFB $00
 $601E DEFB $00
 $601F DEFB $1C
 $6020 DEFB $04
 $6021 DEFB $30
 $6022 DEFB $47
 $6023 DEFB $47
 $6024 DEFB $00
 $6025 DEFB $00
 $6026 DEFB $10
 $6027 DEFB $18
 $6028 DEFB $04
 $6029 DEFB $80

; Data block at 602A
b$602A DEFB $5F,$47,$01,$00,$08,$18,$04,$00
 $6032 DEFB $20,$43,$01,$00,$18,$18

; Data block at 6038
b$6038 DEFB $0E,$00,$20,$00,$00,$00,$00,$18

; Rights Messaging
@label=Message_Rights
t$6040 DEFM $47                                      ; {"© 1983 A.C.G. ALL
 $6041 DEFM $7F                                      ; RIGHTS RESERVED".
 $6042 DEFM "1983 A.C.G. ALL RIGHTS RESERVE","D"+$80 ; }

; Copyright Messaging
@label=Message_Copyright
t$6061 DEFM "COPYRIGHT 1983 A.C.G. ALL RIGHTS RESERVED" ; "COPYRIGHT 1983
                                                        ; A.C.G. ALL RIGHTS
                                                        ; RESERVED".

; Routine at 608A
;
; Used by the routine at #R$61EB.
@label=LEVEL_INIT
c$608A XOR A                            ; Black Border
 $608B OUT ($FE),A                      ;
 $608D CALL $71B8                       ; Clear the screen
 $6090 CALL $71C6                       ; Reset the screen colours
 $6093 CALL $7192                       ; Display score labels
 $6096 LD HL,$5820                      ; Attribute file address
 $6099 LD BC,$2046                      ; #REGb=loop counter, #REGc=Cyan/Yellow
*$609C LD (HL),C                        ; Reset bytes in the attribute file
 $609D INC L                            ;
 $609E DJNZ $609C                       ; Decrease #REGb by one, jump to
                                        ; #R$609C if not zero
 $60A0 CALL $711C                       ; Update display with player 1 score
 $60A3 CALL $7124                       ; Update display with player 2 score
 $60A6 JP $712C                         ; Update display with high score
; This entry point is used by the routines at #R$630F and #R$63DA.
*$60A9 LD A,($5DF0)                     ; #REGa=#R$5DF0
 $60AC AND $03                          ; {If #R$5DF0 is divisible by $03 ...
 $60AE JR NZ,$60BA                      ; jump to init with a "broken ship"}
 $60B0 CALL $60CD                       ;
 $60B3 LD HL,$5DF1                      ; {Increase the live counter #R$5DF1 by
 $60B6 INC (HL)                         ; one}
 $60B7 CALL $619A                       ;
*$60BA CALL $6929                       ;
 $60BD CALL $608A                       ;
 $60C0 CALL $766D                       ;
 $60C3 CALL $70A4                       ;
 $60C6 LD A,($5C78)                     ; #HTML(#REGa=<a
                                        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $60C9 LD ($5DD4),A                     ; Write #REGa to #R$5DD4
 $60CC RET                              ; Return
; This entry point is used by the routine at #R$630F.
*$60CD LD HL,$6018                      ; #REGhl Source address: #R$6018
 $60D0 LD DE,$5D30                      ; #REGde Target address: #R$5D30
 $60D3 LD BC,$0018                      ; #REGbc=loop counter
 $60D6 LDIR                             ; Action! Copy source to target,
                                        ; decrease counter, repeat until zero
 $60D8 LD A,$08                         ; #REGa=$08
 $60DA JP $6EF9                         ; Jump to #R$6EF9
; This entry point is used by the routine at #R$67ED.
*$60DD LD HL,$5D48                      ;
 $60E0 LD B,$0A                         ;
 $60E2 CALL $6660                       ;
 $60E5 LD HL,$5D3C                      ;
 $60E8 RES 1,(HL)                       ;
 $60EA LD HL,$5D44                      ;
 $60ED RES 1,(HL)                       ;
 $60EF LD A,($5CF3)                     ;
 $60F2 AND $01                          ;
 $60F4 JR NZ,$6103                      ;
*$60F6 LD A,($5DF1)                     ;
 $60F9 AND A                            ;
 $60FA JP Z,$6155                       ;
 $60FD CALL $60BA                       ;
 $6100 JP $619A                         ;
*$6103 LD A,($5DF9)                     ; #REGa=#R$5DF9
 $6106 AND A                            ;
 $6107 JR Z,$60F6                       ;
 $6109 LD A,($5DF1)                     ;
 $610C AND A                            ;
 $610D CALL Z,$614D                     ;
 $6110 CALL $616A                       ;
 $6113 LD A,($5DD1)                     ;
 $6116 CPL                              ;
 $6117 LD ($5DD1),A                     ;
 $611A LD A,($5D34)                     ;
 $611D RLCA                             ;
 $611E RLCA                             ;
 $611F RLCA                             ;
 $6120 AND $38                          ;
 $6122 CALL $6EF9                       ;
 $6125 CALL $60BA                       ;
 $6128 JP $619A                         ;
*$612B LD A,$B1                         ;
*$612D LD ($6199),A                     ;
 $6130 CALL $608A                       ;
 $6133 LD DE,$6187                      ;
 $6136 LD HL,$7038                      ;
 $6139 CALL $716C                       ;
 $613C LD B,$04                         ;
 $613E LD HL,$0000                      ;
*$6141 DEC HL                           ;
 $6142 LD A,H                           ;
 $6143 OR L                             ;
 $6144 JR NZ,$6141                      ;
 $6146 DJNZ $6141                       ; Decrease #REGb by one, jump to
                                        ; #R$6141 if not zero
 $6148 RET                              ;
*$6149 LD A,$B2                         ;
 $614B JR $612D                         ;
*$614D LD A,($5DD1)                     ;
 $6150 AND A                            ;
 $6151 JR Z,$612B                       ;
 $6153 JR $6149                         ;
*$6155 CALL $6398                       ;
 $6158 LD A,($5DD1)                     ;
 $615B AND A                            ;
 $615C JR NZ,$6164                      ;
 $615E CALL $612B                       ;
 $6161 JP $61F5                         ;
*$6164 CALL $6149                       ;
 $6167 JP $61F5                         ;
; This entry point is used by the routine at #R$630F.
*$616A LD HL,$5DF0                      ; #REGhl=#R$5DF0
 $616D LD DE,$5DF8                      ; #REGde=#R$5DF8
 $6170 LD B,$02                         ; #REGb=$02
 $6172 CALL $617D                       ;
 $6175 LD HL,$5D30                      ; #REGhl=#R$5D30
 $6178 LD DE,$5D98                      ; #REGde=#R$5D98
 $617B LD B,$18                         ; #REGb=$18
*$617D LD A,(DE)                        ; #REGa=#REGde
 $617E LD C,(HL)                        ; #REGc=#REGhl
 $617F LD (HL),A                        ; Writes #REGa to #REGhl
 $6180 LD A,C                           ; #REGa=#REGc
 $6181 LD (DE),A                        ; Writes #REGa to #REGde
 $6182 INC HL                           ; Increase #REGhl by one
 $6183 INC DE                           ; Increase #REGde by one
 $6184 DJNZ $617D                       ; Decrease #REGb by one, jump to
                                        ; #R$617D if not zero
 $6186 RET                              ; Return
 $6187 DEFB $47                         ;
 $6188 DEFM "GAME OVER PLAYER ","1"+$80 ; GAME OVER PLAYER 1
; This entry point is used by the routine at #R$63DA.
*$619A LD HL,$6010                      ; #REGhl Source address: #R$6010
 $619D LD DE,$5D00                      ; #REGde Target address: #R$5D00
 $61A0 LD BC,$0008                      ; #REGbc=loop counter
 $61A3 LDIR                             ; Action! Copy source to target,
                                        ; decrease counter, repeat until zero
 $61A5 LD A,$80                         ; #REGa=$80
 $61A7 LD HL,$5CF3                      ; {if bit 0 is set for #R$5CF3 (is this
 $61AA BIT 0,(HL)                       ; a 2UP game) then jump to #R$61B0
 $61AC JR Z,$61B0                       ; }
 $61AE ADD A,$7F                        ; {Add $7F to #REGa and update #R$5DD7
*$61B0 LD ($5DD7),A                     ; with the result}
 $61B3 LD A,($5DF1)                     ; {Decrease #R$5DF1 by 1
 $61B6 DEC A                            ;
 $61B7 LD ($5DF1),A                     ; }
 $61BA JP $70A4                         ; Jump to #R$70A4
; This entry point is used by the routine at #R$71B8.
*$61BD LD A,($5DD1)                     ; #REGa=#R$5DD1
 $61C0 AND A                            ;
 $61C1 JR NZ,$61E0                      ;
 $61C3 LD HL,$0018                      ; #REGhl=$0018
*$61C6 CALL $720E                       ;
 $61C9 LD B,$03                         ; #REGb=$03
*$61CB LD A,(HL)                        ; #REGa=(#REGhl)
 $61CC OR $80                           ;
 $61CE LD (HL),A                        ; Push #REGa into the memory location
                                        ; at #REGhl
 $61CF INC HL                           ; Increase #REGhl by one
 $61D0 DJNZ $61CB                       ; Decrease #REGb by one, jump to
                                        ; #R$61CB if not zero
 $61D2 RET                              ; Return
; This entry point is used by the routine at #R$71B8.
*$61D3 CALL $720E                       ;
 $61D6 LD B,$03                         ;
*$61D8 LD A,(HL)                        ;
 $61D9 AND $7F                          ;
 $61DB LD (HL),A                        ;
 $61DC INC HL                           ;
 $61DD DJNZ $61D8                       ; Decrease #REGb by one, jump to
                                        ; #R$61D8 if not zero
 $61DF RET                              ;
*$61E0 LD HL,$00D8                      ;
 $61E3 JR $61C6                         ;

; Security Check
;
; Used by the routine at #R$5B80.
@label=SecurityCheck
c$61E5 LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $61E8 CP $83        ; {Return if #REGa is not #N$83.
 $61EA RET NZ        ; }
; Continue on to #R$61EB.
; .
; View the equivalent code in;
; #LIST
; { #ATICATAC$6000 }
; { #COOKIE$5F00 }
; { #LUNARJETMAN$8000 }
; { #PSSST$61C6 }
; { #TRANZAM$5F00 }
; LIST#

; Game Initialisation
;
; .
;
; .
;
; Blank the 1UP, 2UP and HI scores.
@label=GameInitialisation
c$61EB LD HL,$5CF0   ; {Write #N$00 to #N$0A bytes from #R$5CF0 to #N$5CFA.
 $61EE LD BC,$0A00   ;
@label=GameInitialisation_Loop
*$61F1 LD (HL),C     ;
 $61F2 INC HL        ;
 $61F3 DJNZ $61F1    ; }
; This entry point is used by the routine at #R$608A.
@label=Game_Restart
*$61F5 DI            ; Disable interrupts.
 $61F6 LD SP,$5CF0   ; Set the stack pointer to #R$5CF0.
 $61F9 CALL $608A    ; Call #R$608A.
 $61FC LD A,$04      ; {Write #N$04 to #R$5DCA.
 $61FE LD ($5DCA),A  ; }
*$6201 CALL $6260    ;
 $6204 LD A,($5CF3)  ; {#REGd=#R$5CF3.
 $6207 LD D,A        ; }
 $6208 LD A,$F7      ; {Read from the keyboard;
 $620A OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $620C IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $620E CPL           ; Flip the bits.
; Handle 1UP selection.
 $620F BIT 0,A       ; Has key "1" been pressed? ("1 PLAYER GAME").
 $6211 JR Z,$6215    ; If not jump to #R$6215.
 $6213 RES 0,D       ; Set player count = 1.
; Handle 2UP selection.
@label=GameSelect_CheckP2
*$6215 BIT 1,A       ; Has key "2" been pressed? ("2 PLAYER GAME").
 $6217 JR Z,$621B    ; If not jump to #R$621B.
 $6219 SET 0,D       ; Set player count = 2.
; Handle Keyboard selection.
@label=GameSelect_CheckKeyboard
*$621B BIT 2,A       ; Has key "3" been pressed? ("3 KEYBOARD").
 $621D JR Z,$6221    ; If not jump to #R$6221.
 $621F RES 1,D       ; Set control = "keyboard".
; Handle Kempston Joystick selection.
@label=GameSelect_CheckKempston
*$6221 BIT 3,A       ; Has key "4" been pressed? ("4 KEMPSTON JOYSTICK").
 $6223 JR Z,$6227    ; If not jump to #R$6227.
 $6225 SET 1,D       ; Set control = "joystick".
; Handle starting a new game.
@label=GameSelect_CheckStart
*$6227 BIT 4,A       ; Has key "5" been pressed? ("5 START GAME").
 $6229 JP NZ,$6333   ; If so, jump to #R$6333.
; Handle flashing each selection.
 $622C LD A,D        ;
 $622D LD ($5CF3),A  ;
 $6230 LD HL,$628E   ; #REGhl=#R$628D(GameSelection_Attributes)+#N$01 (i.e.
                     ; ignoring "Game Selection" as it doesn't flash).
 $6233 LD A,($5CF3)  ;
 $6236 LD C,A        ;
 $6237 BIT 0,C       ;
 $6239 JR NZ,$6248   ;
 $623B CALL $6252    ;
*$623E BIT 1,C       ;
 $6240 JR NZ,$624D   ;
 $6242 CALL $6252    ;
*$6245 JP $6201      ;
*$6248 CALL $6259    ;
 $624B JR $623E      ;
*$624D CALL $6259    ;
 $6250 JR $6245      ;
*$6252 SET 7,(HL)    ;
 $6254 INC HL        ;
 $6255 RES 7,(HL)    ;
 $6257 INC HL        ;
 $6258 RET           ;
*$6259 RES 7,(HL)    ;
 $625B INC HL        ;
 $625C SET 7,(HL)    ;
 $625E INC HL        ;
 $625F RET           ;
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #COOKIE$6298 }
; { #LUNARJETMAN$800A }
; { #PSSST$61CD }
; { #TRANZAM$5F07 }
; LIST#

; Game Selection Menu
;
; Used by the routine at #R$61EB.
@label=GameMenu
c$6260 LD DE,$628D   ; #REGde=#R$628D.
 $6263 EXX           ; Switch to the shadow registers.
 $6264 LD HL,$6293   ; #REGhl'=#R$6293.
 $6267 LD DE,$6299   ; #REGde'=#R$6299.
; There are six lines of text.
 $626A LD B,$06      ; #REGb'=#N$06 (counter).
@label=GameMenu_Loop
*$626C EXX           ; Switch back to the normal registers.
 $626D LD A,(DE)     ; {Copy a byte from #REGde to #R$5DD6.
 $626E LD ($5DD6),A  ; }
 $6271 INC DE        ; Increment #REGde by one.
 $6272 EXX           ; Switch to the shadow registers.
 $6273 PUSH BC       ; Stash #REGbc' on the stack.
 $6274 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $6275 INC HL        ; Increment #REGhl' (position data pointer) by one.
 $6276 PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $6277 LD H,A        ; {#REGh'=#REGa #REGl'=#N$30.
 $6278 LD L,$30      ; }
 $627A CALL $62FF    ; Call #R$62FF.
 $627D EXX           ; Switch back to the normal registers.
 $627E POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $627F POP BC        ; }
 $6280 INC DE        ; Increase #REGde by one.
 $6281 DJNZ $626C    ; Decrease counter by one and loop back to #R$626C until
                     ; counter is zero.
 $6283 LD HL,$B800   ; #REGhl=#N$B800 (screen buffer position).
 $6286 LD DE,$6040   ; #REGde=#R$6040.
 $6289 CALL $716C    ; Call #R$716C.
 $628C RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #COOKIE$6332 }
; { #LUNARJETMAN$80D1 }
; { #PSSST$6250 }
; { #TRANZAM$5F6C }
; LIST#

; Game Select Attribute Table
@label=GameSelection_Attributes
b$628D DEFB $47      ; {#TABLE(default,centre)
 $628E DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $628F DEFB $47      ; { #N$01 | Game Selection }
 $6290 DEFB $47      ; { #N$02 | 1 Player Game }
 $6291 DEFB $47      ; { #N$03 | 2 Player Game }
 $6292 DEFB $47      ; { #N$04 | 3 Keyboard }
                     ; { #N$05 | 4 Kempston Joystick }
                     ; { #N$06 | 5 Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #COOKIE$635E }
; { #LUNARJETMAN$810E }
; { #PSSST$627C }
; { #TRANZAM$5FA7 }
; LIST#

; Game Select Y Position Table
@label=GameSelection_Position
b$6293 DEFB $20      ; {#TABLE(default,centre,centre)
 $6294 DEFB $38      ; { =h Byte(n) | =h Position | =h Menu Item }
 $6295 DEFB $48      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | Game Selection }
 $6296 DEFB $58      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 1 Player Game }
 $6297 DEFB $68      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 2 Player Game }
 $6298 DEFB $98      ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | 3 Keyboard }
                     ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | 4 Kempston Joystick }
                     ; { #N$06 | #EVAL(#PEEK(#PC+$05) / $08) | 5 Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #COOKIE$6365 }
; { #LUNARJETMAN$8115 }
; { #PSSST$6282 }
; { #TRANZAM$5FAC }
; LIST#

; Game Selection Title text
@label=GameSelection_Text
t$6299 DEFM "JETPAC GAME SELECTIO","N"+$80 ; "JETPAC GAME SELECTION".
 $62AE DEFM "1   1 PLAYER GAM","E"+$80     ; "1   1 PLAYER GAME".
 $62BF DEFM "2   2 PLAYER GAM","E"+$80     ; "2   2 PLAYER GAME".
 $62D0 DEFM "3   KEYBOAR","D"+$80          ; "3   KEYBOARD".
 $62DC DEFM "4   KEMPSTON JOYSTIC","K"+$80 ; "4   KEMPSTON JOYSTICK".
 $62F1 DEFM "5   START GAM","E"+$80        ; "5   START GAME".
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #COOKIE$636C }
; { #LUNARJETMAN$811C }
; { #PSSST$6288 }
; { #TRANZAM$5FB1 }
; LIST#

; Routine at 62FF
;
; Used by the routine at #R$6260.
c$62FF PUSH HL       ; Store #REGhl on the stack
 $6300 CALL $7308    ;
 $6303 LD A,($5DD6)  ; #REGa=#R$5DD6
 $6306 EX AF,AF'     ; Exchanges #REGaf with #REGaf'
 $6307 EXX           ; Exchange #REGbc, #REGde, and #REGhl with shadow
                     ; registers with #REGbc', #REGde', and #REGhl'
 $6308 POP HL        ; Restore #REGhl
 $6309 CALL $720E    ;
 $630C JP $7178      ; Jump to #R$7178

; Routine at 630F
c$630F LD B,$02      ; #REGb=$02
*$6311 PUSH BC       ; Stores #REGbc on the stack
 $6312 XOR A         ; Clear #REGa (sets to $00)
 $6313 LD ($5DF0),A  ; #R$5DF0=#REGa
 $6316 LD A,$04      ; #REGa=Number of lives for 1UP on starting a game
 $6318 LD ($5DF1),A  ; Updates #R$5DF1 with the number of starting lives
 $631B CALL $60CD    ;
 $631E CALL $616A    ;
 $6321 POP BC        ;
 $6322 DJNZ $6311    ; Decrease #REGb by one, jump to #R$6311 if not zero
 $6324 LD A,$05      ; #REGa=Number of lives for 2UP on starting a game
 $6326 LD ($5DF9),A  ; Updates #R$5DF9 with the number of starting lives
 $6329 LD A,($5CF3)  ; #REGa=#R$5CF3
 $632C AND $01       ; {Return if this is a 2UP game
 $632E RET NZ        ; }
 $632F LD ($5DF9),A  ; Sets #R$5DF9 to zero (as a 1UP game is in progress)
 $6332 RET           ; Return
; This entry point is used by the routine at #R$61EB.
*$6333 LD HL,$5CF4   ; #REGhl=#R$5CF4
 $6336 LD BC,$6000   ; #REGbc=#R$6000
 $6339 CALL $71BD    ;
 $633C CALL $630F    ;
 $633F CALL $698B    ;
 $6342 CALL $60A9    ;
; This entry point is used by the routine at #R$6965.
*$6345 LD SP,$5CF0   ; Change the stack pointer to #R$5CF0
 $6348 EI            ; Enable interrupts
 $6349 LD IX,$5D30   ; #REGix=#R$5D30
 $634D XOR A         ; Clear #REGa (sets to $00)
 $634E LD ($5DCB),A  ; Writes #REGa to #R$5DCB
; This entry point is used by the routine at #R$6965.
*$6351 LD A,($5C78)  ;
 $6354 LD C,A        ;
 $6355 LD A,($5DD4)  ;
 $6358 CP C          ;
 $6359 CALL NZ,$6965 ;
 $635C LD HL,$69A8   ;
 $635F PUSH HL       ;
 $6360 LD HL,$6374   ;
 $6363 LD A,(IX+$00) ;
 $6366 RLCA          ;
 $6367 AND $7E       ;
; This entry point is used by the routine at #R$63DA.
*$6369 LD C,A        ;
 $636A LD B,$00      ;
 $636C ADD HL,BC     ;
 $636D LD A,(HL)     ;
 $636E INC HL        ;
 $636F LD H,(HL)     ;
 $6370 LD L,A        ;
 $6371 JP $5CB0      ;
 $6374 DEC DE        ;
 $6375 LD L,C        ;
 $6376 OR D          ;
 $6377 LD (HL),E     ;
 $6378 LD (HL),C     ;
 $6379 LD (HL),L     ;
 $637A OUT ($6D),A   ;
 $637C RRA           ;
 $637D LD H,L        ;
 $637E PUSH AF       ;
 $637F LD L,H        ;
 $6380 CPL           ;
 $6381 LD L,H        ;
 $6382 JP C,$B163    ;
 $6385 LD L,B        ;
 $6386 RLCA          ;
 $6387 LD H,A        ;
 $6388 RST $00       ;
 $6389 LD H,(HL)     ;
 $638A EX DE,HL      ;
 $638B LD H,(HL)     ;
 $638C LD D,H        ;
 $638D LD L,B        ;
 $638E LD C,E        ;
 $638F LD L,B        ;
 $6390 SBC A,B       ;
 $6391 LD H,H        ;
 $6392 RST $28       ;
 $6393 LD L,D        ;
 $6394 CALL M,$6C6F  ;
 $6397 LD L,D        ;
; This entry point is used by the routine at #R$608A.
*$6398 LD HL,($5CF4) ;
 $639B LD DE,($5CF7) ;
 $639F LD A,L        ;
 $63A0 LD L,H        ;
 $63A1 LD H,A        ;
 $63A2 LD A,E        ;
 $63A3 LD E,D        ;
 $63A4 LD D,A        ;
 $63A5 AND A         ;
 $63A6 SBC HL,DE     ;
 $63A8 JR C,$63B6    ;
 $63AA JR NZ,$63D5   ;
 $63AC LD A,($5CF6)  ; {#REGe=#R$5CF6
 $63AF LD E,A        ; }
 $63B0 LD A,($5CF9)  ; {Compare #REGe with #R$5CF9
 $63B3 CP E          ; }
 $63B4 JR C,$63D5    ; Jump if carry flag is set to #R$63D5
; Tests to see if the highscore has been beaten by 2UP.
@label=COMPARE_2UP_SCORE
*$63B6 LD HL,$5CF7   ; #REGhl=#R$5CF7
; This entry point is used by the routine at #R$63CB.
@label=CHECK_HIGHSCORE
*$63B9 PUSH HL       ; Push #REGhl onto the stack (see #R$63CB)
 $63BA LD DE,$5CF0   ; #REGde=#R$5CF0
 $63BD LD B,$03      ; #REGb=$03
*$63BF LD A,(DE)     ; {Compare #REGa against #R$5CF0
 $63C0 CP (HL)       ; }
 $63C1 JR C,$63CB    ; If it's higher, update the highscore
 $63C3 JR NZ,$63C9   ; Jump if not zero to #R$63C9 (so if it's less than the
                     ; current highscore)
 $63C5 INC HL        ; Increase #REGhl by one
 $63C6 INC DE        ; Increase #REGde by one
 $63C7 DJNZ $63BF    ; Decrease #REGb by one, jump to #R$63BF if not zero
*$63C9 POP HL        ; Fetch #REGhl off the stack (to clear it)
 $63CA RET           ; Return

; Updates the highscore
;
; The top of the stack will contain either #R$5CF4 or #R$5CF7. The three bytes which make up the players score are
;       copied over to the #R$5CF0 memory location.
@label=UPDATE_HIGHSCORE
c$63CB POP HL        ; Fetch #REGhl off the stack
 $63CC LD DE,$5CF0   ; #REGde Target address: #R$5CF0
 $63CF LD BC,$0003   ; #REGbc=loop counter
 $63D2 LDIR          ; Action! Copy source to target, decrease counter, repeat
                     ; until zero
 $63D4 RET           ; Return
; Tests to see if the highscore has been beaten by 1UP.
@label=COMPARE_1UP_SCORE
*$63D5 LD HL,$5CF4   ; #REGhl=#R$5CF4
 $63D8 JR $63B9      ; Jump to #R$63B9

; Routine at 63DA
c$63DA LD HL,$5DCB     ;
 $63DD INC (HL)        ;
 $63DE CALL $6CE7      ;
 $63E1 LD A,(IX+$04)   ;
 $63E4 LD HL,$0000     ;
 $63E7 BIT 1,A         ;
 $63E9 JR NZ,$6423     ;
 $63EB CALL $6408      ;
 $63EE LD A,($5D02)    ;
 $63F1 SUB $0C         ;
 $63F3 CP (IX+$02)     ;
 $63F6 CALL Z,$640E    ;
 $63F9 LD A,($5DCC)    ;
 $63FC AND $40         ;
 $63FE JR Z,$6404      ;
*$6400 INC H           ;
 $6401 INC H           ;
 $6402 INC H           ;
 $6403 INC H           ;
*$6404 DEC H           ;
 $6405 DEC H           ;
 $6406 JR $643D        ;
*$6408 LD A,($5DCE)    ;
 $640B AND $1F         ;
 $640D RET NZ          ;
*$640E SET 1,(IX+$04)  ;
 $6412 LD C,A          ;
 $6413 LD A,($5DCC)    ;
 $6416 ADD A,C         ;
 $6417 AND $7F         ;
 $6419 OR $20          ;
 $641B LD (IX+$05),A   ;
 $641E LD (IX+$03),$47 ;
 $6422 RET             ;
*$6423 DEC (IX+$05)    ;
 $6426 JR Z,$6481      ;
 $6428 LD A,$04        ;
 $642A BIT 6,(IX+$00)  ;
 $642E JR Z,$6432      ;
 $6430 NEG             ;
*$6432 LD L,A          ;
 $6433 LD A,($5D02)    ;
 $6436 CP (IX+$02)     ;
 $6439 JR C,$6404      ;
 $643B JR $6400        ;
*$643D LD A,(IX+$00)   ;
 $6440 AND $C0         ;
 $6442 OR $03          ;
 $6444 LD (IX+$00),A   ;
 $6447 LD A,(IX+$01)   ;
 $644A ADD A,L         ;
 $644B LD (IX+$01),A   ;
 $644E LD A,(IX+$02)   ;
 $6451 ADD A,H         ;
 $6452 LD (IX+$02),A   ;
 $6455 CALL $726A      ;
 $6458 CALL $71CF      ;
 $645B LD A,(IX+$02)   ;
 $645E CP $28          ;
 $6460 JR C,$6481      ;
 $6462 CALL $6E52      ;
 $6465 BIT 0,C         ;
 $6467 JR NZ,$6481     ;
 $6469 CALL $761D      ;
 $646C BIT 2,E         ;
 $646E JR NZ,$6481     ;
 $6470 CALL $6E20      ;
 $6473 DEC E           ;
 $6474 JR Z,$648D      ;
 $6476 LD A,(IX+$00)   ;
 $6479 AND $C0         ;
 $647B OR $07          ;
 $647D LD (IX+$00),A   ;
 $6480 RET             ;
*$6481 LD BC,$0055     ;
 $6484 CALL $70F9      ;
 $6487 CALL $67ED      ;
 $648A JP $6894        ;
; This entry point is used by the routine at #R$6965.
*$648D CALL $6894      ;
 $6490 LD A,$01        ;
 $6492 CALL $6834      ;
 $6495 JP $6875        ;
 $6498 CALL $7327      ;
 $649B CALL $761D      ;
 $649E BIT 2,E         ;
 $64A0 JR NZ,$64A8     ;
 $64A2 INC (IX+$02)    ;
 $64A5 INC (IX+$02)    ;
*$64A8 CALL $6E20      ;
 $64AB DEC E           ;
 $64AC JR NZ,$64C2     ;
 $64AE XOR A           ;
 $64AF CALL $64E5      ;
 $64B2 CALL $72A0      ;
 $64B5 LD (IX+$00),$00 ;
 $64B9 LD BC,$0250     ;
 $64BC CALL $70F9      ;
 $64BF JP $6809        ;
*$64C2 LD A,(IX+$06)   ;
 $64C5 AND $0F         ;
 $64C7 LD HL,$64CD     ;
 $64CA JP $6369        ;
 $64CD RST $10         ;
 $64CE LD H,H          ;
 $64CF LD SP,HL        ;
 $64D0 LD H,H          ;
 $64D1 LD SP,HL        ;
 $64D2 LD H,H          ;
 $64D3 DI              ;
 $64D4 LD H,H          ;
 $64D5 LD C,$65        ;
 $64D7 LD (IX+$03),$46 ;
*$64DB XOR A           ;
 $64DC CALL $64E5      ;
 $64DF CALL $725E      ;
 $64E2 JP $71CF        ;
*$64E5 ADD A,(IX+$06)  ;
*$64E8 LD HL,$67C3     ;
 $64EB LD C,A          ;
 $64EC LD B,$00        ;
 $64EE ADD HL,BC       ;
 $64EF LD E,(HL)       ;
 $64F0 INC HL          ;
 $64F1 LD D,(HL)       ;
 $64F2 RET             ;
 $64F3 LD (IX+$03),$44 ;
 $64F7 JR $64DB        ;
 $64F9 LD A,($5DCC)    ;
 $64FC AND $1F         ;
 $64FE CP $18          ;
 $6500 JR NC,$6508     ;
 $6502 LD (IX+$03),$00 ;
 $6506 JR $64DB        ;
*$6508 LD (IX+$03),$45 ;
 $650C JR $64DB        ;
 $650E LD A,($5DCC)    ;
 $6511 RRCA            ;
 $6512 RRCA            ;
 $6513 AND $07         ;
 $6515 JR NZ,$6518     ;
 $6517 INC A           ;
*$6518 OR $40          ;
 $651A LD (IX+$03),A   ;
 $651D JR $64DB        ;
 $651F CALL $7327      ;
 $6522 LD A,(IX+$04)   ;
 $6525 BIT 2,A         ;
 $6527 JP NZ,$659C     ;
 $652A BIT 1,A         ;
 $652C JR NZ,$6578     ;
 $652E BIT 0,A         ;
 $6530 JR Z,$654B      ;
 $6532 CALL $6E20      ;
 $6535 DEC E           ;
 $6536 JR Z,$655A      ;
 $6538 CALL $761D      ;
 $653B BIT 2,E         ;
 $653D JR NZ,$6545     ;
*$653F INC (IX+$02)    ; {Drop #REGix+$02 (fuel Y co-ordinate) by two pixels
 $6542 INC (IX+$02)    ; }
*$6545 CALL $726A      ;
 $6548 JP $71CF        ;
*$654B LD A,($5DF0)    ;
 $654E RRCA            ;
 $654F AND $06         ;
 $6551 CALL $64E5      ;
 $6554 CALL $729B      ;
 $6557 JP $71CF        ;
*$655A SET 1,(IX+$04)  ;
 $655E CALL $72A5      ;
 $6561 LD BC,$0100     ;
 $6564 CALL $70F9      ;
 $6567 CALL $6803      ;
 $656A LD HL,($5D01)   ;
 $656D LD (IX+$01),L   ;
 $6570 LD (IX+$02),H   ;
 $6573 CALL $7327      ;
 $6576 JR $6545        ;
*$6578 LD HL,($5D01)   ;
 $657B LD (IX+$01),L   ;
 $657E LD (IX+$02),H   ;
 $6581 LD A,($5D31)    ;
 $6584 SUB (IX+$01)    ;
 $6587 JP P,$658C      ;
 $658A NEG             ;
*$658C CP $06          ;
 $658E JR NC,$6545     ;
 $6590 SET 2,(IX+$04)  ;
 $6594 LD A,($5D31)    ;
 $6597 LD (IX+$01),A   ;
 $659A JR $6545        ;
*$659C LD A,(IX+$06)   ;
 $659F CP $18          ;
 $65A1 JR Z,$65CE      ;
 $65A3 SLA A           ;
 $65A5 ADD A,(IX+$02)  ;
 $65A8 CP $B7          ;
 $65AA JP C,$653F      ;
 $65AD LD A,($5D3C)    ;
 $65B0 OR $01          ;
 $65B2 LD ($5D3C),A    ;
 $65B5 LD A,($5D34)    ;
 $65B8 INC A           ;
 $65B9 LD ($5D34),A    ;
 $65BC LD A,(IX+$06)   ;
 $65BF ADD A,$08       ;
 $65C1 CALL $6EF9      ;
*$65C4 CALL $72A5      ;
 $65C7 LD (IX+$00),$00 ;
 $65CB JP $67FD        ;
*$65CE LD A,(IX+$02)   ; #REGa=(#REGix+$02) (fuel Y co-ordinate)
 $65D1 CP $B0          ; Is #REGa=$B0? (has the fuel reached the ship yet?)
 $65D3 JP C,$653F      ; If not, jump back to #R$653F
 $65D6 LD A,($5D35)    ; {Fuel pod deposited correctly; increase #R$5D35 by one
 $65D9 INC A           ;
 $65DA LD ($5D35),A    ; }
 $65DD JR $65C4        ; Jump to #R$65C4
; This entry point is used by the routine at #R$6965.
*$65DF LD A,($5D00)    ; {If #R$5D00 is &$3F then return...
 $65E2 AND $3F         ;
 $65E4 RET Z           ; }
 $65E5 CP $03          ; {Return if #R$5D00 is greater than (or equal to) $03
 $65E7 RET NC          ; }
 $65E8 LD HL,$6038     ; #REGhl Source address: $6038
 $65EB LD DE,$5D40     ; #REGde Target address: #R$5D40
 $65EE LD BC,$0008     ; #REGbc=loop counter
 $65F1 LD A,(DE)       ; #REGa=(#REGde)
 $65F2 AND A           ;
 $65F3 RET NZ          ;
 $65F4 LD A,($5DCC)    ;
 $65F7 AND $7F         ;
 $65F9 RET NZ          ;
 $65FA LDIR            ; Action! Copy source to target, decrease counter,
                       ; repeat until zero
 $65FC CALL $6612      ;
 $65FF LD ($5D41),A    ;
 $6602 LD A,R          ;
 $6604 AND $0E         ;
 $6606 BIT 3,A         ;
 $6608 JR Z,$660C      ;
 $660A AND $08         ;
*$660C OR $20          ;
 $660E LD ($5D46),A    ;
 $6611 RET             ;
*$6612 LD HL,$6620     ;
 $6615 LD A,($5DCE)    ;
 $6618 AND $0F         ;
 $661A LD C,A          ;
 $661B LD B,$00        ;
 $661D ADD HL,BC       ;
 $661E LD A,(HL)       ;
 $661F RET             ;
 $6620 EX AF,AF'       ;
 $6621 JR NZ,$664B     ;
 $6623 JR NC,$665D     ;
 $6625 LD B,B          ;
 $6626 LD E,B          ;
 $6627 LD H,B          ;
 $6628 LD A,B          ;
 $6629 ADD A,B         ;
 $662A ADC A,B         ;
 $662B RET NZ          ;
 $662C RET PO          ;
 $662D EX AF,AF'       ;
 $662E LD E,B          ;
 $662F LD H,B          ;
; This entry point is used by the routine at #R$6965.
*$6630 LD A,($5D00)    ;
 $6633 AND $3F         ;
 $6635 RET Z           ;
 $6636 CP $03          ;
 $6638 RET NC          ;
 $6639 LD HL,$6030     ; #REGhl=$6030
 $663C LD DE,$5D38     ; #REGde=#R$5D38
 $663F LD BC,$0008     ; #REGbc=$0008
 $6642 LD A,(DE)       ; #REGa=(#REGde)
 $6643 AND A           ;
 $6644 RET NZ          ;
 $6645 LD A,($5D35)    ; {Check if #R$5D35 is $06? Is the ship full of fuel?
 $6648 CP $06          ; }
 $664A RET NC          ;
*$664B LD A,($5DCC)    ;
 $664E CPL             ;
 $664F AND $0F         ;
 $6651 RET NZ          ;
 $6652 LDIR            ;
 $6654 CALL $6612      ;
 $6657 LD ($5D39),A    ;
 $665A RET             ; Return
*$665B LD HL,$5D38     ; #REGhl=#R$5D38
 $665E LD B,$0C        ; #REGb=$0C
; This entry point is used by the routine at #R$608A.
*$6660 LD DE,$0008     ; #REGde=$0008
*$6663 LD (HL),$00     ; Reset the memory held at location #REGhl (set to $00)
 $6665 ADD HL,DE       ; Increase #REGhl by $08
 $6666 DJNZ $6663      ; Decrease #REGb by one, and loop back to #R$6663 until
                       ; zero
 $6668 RET             ; Return
*$6669 LD A,(IX+$02)   ;
 $666C ADD A,$15       ;
 $666E LD (IX+$02),A   ;
 $6671 LD HL,$5DC1     ;
 $6674 LD A,(HL)       ;
 $6675 ADD A,$15       ;
 $6677 LD (HL),A       ;
 $6678 LD A,(IX+$02)   ;
 $667B CP $B8          ;
 $667D JR Z,$66B8      ;
 $667F JR NC,$66A3     ;
 $6681 LD A,($5DCC)    ;
 $6684 AND $04         ;
 $6686 JR NZ,$66B3     ;
 $6688 LD DE,$7FAF     ;
*$668B PUSH DE         ;
 $668C LD DE,$7F8C     ;
 $668F CALL $72A0      ;
 $6692 LD DE,$7FAF     ;
 $6695 CALL $72A0      ;
 $6698 POP DE          ;
 $6699 CALL $729B      ;
 $669C LD (IX+$03),$42 ;
 $66A0 CALL $71CF      ;
*$66A3 LD A,(IX+$02)   ;
 $66A6 SUB $15         ;
 $66A8 LD (IX+$02),A   ;
 $66AB LD HL,$5DC1     ;
 $66AE LD A,(HL)       ;
 $66AF SUB $15         ;
 $66B1 LD (HL),A       ;
 $66B2 RET             ;
*$66B3 LD DE,$7F8C     ;
 $66B6 JR $668B        ;
*$66B8 LD DE,$7F8C     ;
 $66BB CALL $72A0      ;
 $66BE LD DE,$7FAF     ;
 $66C1 CALL $72A0      ;
 $66C4 JP $66A3        ;
 $66C7 CALL $7327      ;
 $66CA DEC (IX+$02)    ;
 $66CD CALL $67ED      ;
 $66D0 CALL $6669      ;
 $66D3 LD A,(IX+$02)   ;
 $66D6 CP $28          ;
 $66D8 JR NC,$6733     ;
 $66DA LD HL,$5DF0     ;
 $66DD INC (HL)        ;
 $66DE CALL $665B      ;
 $66E1 INC (IX+$00)    ;
 $66E4 LD (IX+$05),$00 ;
 $66E8 JP $60A9        ;
 $66EB CALL $7327      ;
 $66EE INC (IX+$02)    ;
 $66F1 CALL $67ED      ;
 $66F4 CALL $6669      ;
 $66F7 LD A,(IX+$02)   ;
 $66FA CP $B7          ;
 $66FC JR C,$6733      ;
 $66FE LD (IX+$00),$09 ;
 $6702 CALL $619A      ;
 $6705 JR $6733        ;
 $6707 CALL $7327      ;
 $670A CALL $6E20      ;
 $670D DEC E           ;
 $670E JR NZ,$6733     ;
 $6710 LD A,(IX+$05)   ;
 $6713 CP $06          ;
 $6715 JR C,$6733      ;
 $6717 INC (IX+$00)    ;
 $671A PUSH IX         ; Store #REGix on the stack
 $671C LD IX,$5D00     ; #REGix=#R$5D00
 $6720 CALL $7327      ;
 $6723 CALL $72A5      ;
 $6726 LD (IX+$00),$00 ;
 $672A POP IX          ;
 $672C LD HL,$5DF1     ;
 $672F INC (HL)        ;
 $6730 JP $70A4        ;
*$6733 LD L,(IX+$01)   ;
 $6736 LD H,(IX+$02)   ;
 $6739 PUSH HL         ;
 $673A LD A,(IX+$04)   ;
 $673D LD B,A          ;
 $673E LD C,$00        ;
*$6740 PUSH BC         ;
 $6741 LD A,($5DF0)    ;
 $6744 RRCA            ;
 $6745 RRCA            ;
 $6746 AND $03         ;
 $6748 OR C            ;
 $6749 SLA A           ;
 $674B CALL $64E8      ;
 $674E CALL $725E      ;
 $6751 POP BC          ;
 $6752 LD A,(IX+$02)   ;
 $6755 SUB $10         ;
 $6757 LD (IX+$02),A   ;
 $675A LD A,($5DC1)    ;
 $675D SUB $10         ;
 $675F LD ($5DC1),A    ;
 $6762 LD A,C          ;
 $6763 ADD A,$04       ;
 $6765 LD C,A          ;
 $6766 DJNZ $6740      ; Decrease #REGb by one, and loop back to #R$6740 until
                       ; zero
 $6768 LD A,$02        ;
 $676A LD ($5DC4),A    ;
 $676D XOR A           ;
 $676E LD ($5DC3),A    ;
 $6771 POP HL          ;
 $6772 LD (IX+$02),H   ;
 $6775 LD ($5DCF),HL   ;
 $6778 LD B,(IX+$04)   ;
 $677B SLA B           ;
 $677D LD A,B          ;
 $677E CP $06          ;
 $6780 JR C,$67A9      ;
 $6782 LD A,(IX+$05)   ;
 $6785 AND A           ;
 $6786 JR Z,$67A9      ;
 $6788 CP $06          ;
 $678A PUSH AF         ;
 $678B LD A,($5DCC)    ;
 $678E RRCA            ;
 $678F RRCA            ;
 $6790 AND $04         ;
 $6792 OR $43          ;
 $6794 LD C,A          ;
 $6795 POP AF          ;
 $6796 LD A,C          ;
 $6797 JR NC,$67AB     ;
 $6799 LD B,(IX+$05)   ;
 $679C LD (IX+$03),$43 ;
 $67A0 CALL $67B1      ;
 $67A3 LD A,$06        ;
 $67A5 SUB (IX+$05)    ;
 $67A8 LD B,A          ;
*$67A9 LD A,$47        ;
*$67AB LD (IX+$03),A   ;
 $67AE JP $67B1        ;
*$67B1 PUSH BC         ;
 $67B2 CALL $71CF      ;
 $67B5 POP BC          ;
 $67B6 LD HL,($5DCF)   ;
 $67B9 LD A,H          ;
 $67BA SUB $08         ;
 $67BC LD H,A          ;
 $67BD LD ($5DCF),HL   ;
 $67C0 DJNZ $67B1      ; Decrease #REGb by one, and loop back to #R$67B1 until
                       ; zero
 $67C2 RET             ;

; Collectables Sprite Table
@label=CollectableSpritesTable
w$67C3 DEFW $7CCE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67C5 DEFW $7D37    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67C7 DEFW $7C65    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67C9 DEFW $7DA0    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67CB DEFW $7CF1    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67CD DEFW $7D5A    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67CF DEFW $7C88    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67D1 DEFW $7DC3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67D3 DEFW $7D14    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67D5 DEFW $7D7D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67D7 DEFW $7CAB    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67D9 DEFW $7DE6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67DB DEFW $7E1C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67DD DEFW $7E1C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67DF DEFW $7E1C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67E1 DEFW $7E1C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67E3 DEFW $7E09    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67E5 DEFW $7E35    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67E7 DEFW $7E4E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67E9 DEFW $7E6B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
 $67EB DEFW $7E80    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + $01) *
                     ; $100)(#N((#PC - $67C3) / $02)) #COLLECTABLENAME((#PC -
                     ; $67C3) / 2).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #LUNARJETMAN$BAC0 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Routine at 67ED
;
; Used by the routine at #R$63DA.
c$67ED LD A,(IX+$02)   ;
 $67F0 RRCA            ;
 $67F1 RRCA            ;
 $67F2 RRCA            ;
 $67F3 RRCA            ;
 $67F4 AND $7F         ;
 $67F6 OR $40          ;
 $67F8 LD D,A          ;
 $67F9 LD C,$10        ;
 $67FB JR $6812        ;
; This entry point is used by the routine at #R$63DA.
*$67FD LD D,$20        ;
 $67FF LD C,$50        ;
 $6801 JR $6812        ;
; This entry point is used by the routine at #R$63DA.
*$6803 LD D,$50        ;
 $6805 LD C,$28        ;
 $6807 JR $6812        ;
; This entry point is used by the routines at #R$63DA and #R$71B8.
*$6809 LD D,$30        ;
 $680B LD C,$40        ;
*$680D LD A,$10        ;
 $680F OUT ($FE),A     ;
 $6811 LD B,D          ;
*$6812 DJNZ $6812      ; Decrease #REGb by one, and loop back to #R$6812 until
                       ; zero
 $6814 XOR A           ;
 $6815 OUT ($FE),A     ;
 $6817 LD B,D          ;
*$6818 DJNZ $6818      ; Decrease #REGb by one, and loop back to #R$6818 until
                       ; zero
 $681A DEC C           ;
 $681B JR NZ,$680D     ;
 $681D RET             ;
; This entry point is used by the routine at #R$6965.
*$681E LD C,$08        ;
*$6820 LD B,C          ;
*$6821 DJNZ $6821      ; Decrease #REGb by one, and loop back to #R$6821 until
                       ; zero
 $6823 LD A,$10        ;
 $6825 OUT ($FE),A     ;
 $6827 LD B,C          ;
*$6828 DJNZ $6828      ; Decrease #REGb by one, and loop back to #R$6828 until
                       ; zero
 $682A XOR A           ;
 $682B OUT ($FE),A     ;
 $682D INC C           ;
 $682E LD A,C          ;
 $682F CP $38          ;
 $6831 JR NZ,$6820     ;
 $6833 RET             ;
; This entry point is used by the routines at #R$63DA and #R$6965.
*$6834 LD C,A          ;
 $6835 SLA C           ;
 $6837 LD B,$00        ;
 $6839 LD DE,$5D28     ;
 $683C LD HL,$6847     ;
 $683F ADD HL,BC       ;
 $6840 LD A,(HL)       ;
 $6841 LD (DE),A       ;
 $6842 INC HL          ;
 $6843 INC DE          ;
 $6844 LD A,(HL)       ;
 $6845 LD (DE),A       ;
 $6846 RET             ;
 $6847 INC C           ;
 $6848 INC B           ;
 $6849 DEC C           ;
 $684A INC B           ;
 $684B DEC (IX+$01)    ;
 $684E JR Z,$6870      ;
 $6850 LD C,$10        ;
 $6852 JR $685F        ;
 $6854 DEC (IX+$01)    ;
 $6857 JR Z,$6870      ;
 $6859 LD A,(IX+$01)   ;
 $685C ADD A,$18       ;
 $685E LD C,A          ;
*$685F LD A,$10        ;
 $6861 OUT ($FE),A     ;
 $6863 LD B,C          ;
*$6864 DJNZ $6864      ; Decrease #REGb by one, and loop back to #R$6864 until
                       ; zero
 $6866 XOR A           ;
 $6867 OUT ($FE),A     ;
 $6869 LD B,C          ;
*$686A DJNZ $686A      ; Decrease #REGb by one, and loop back to #R$686A until
                       ; zero
 $686C DEC C           ;
 $686D JR NZ,$685F     ;
 $686F RET             ;
*$6870 LD (IX+$00),$00 ;
 $6874 RET             ;
; This entry point is used by the routine at #R$63DA.
*$6875 PUSH IX         ;
 $6877 LD IX,$5D80     ;
 $687B LD HL,$5D00     ;
 $687E LD C,(HL)       ;
 $687F INC HL          ;
 $6880 LD A,(HL)       ;
 $6881 LD (IX+$01),A   ;
 $6884 INC HL          ;
 $6885 LD A,(HL)       ;
 $6886 LD (IX+$02),A   ;
 $6889 LD A,C          ;
 $688A CALL $68AB      ;
 $688D POP IX          ;
 $688F XOR A           ;
 $6890 LD ($5D00),A    ;
 $6893 RET             ;
; This entry point is used by the routines at #R$63DA, #R$6965 and #R$71B8.
*$6894 LD A,(IX+$00)   ;
 $6897 AND $C0         ;
 $6899 OR $03          ;
 $689B LD (IX+$05),$00 ;
*$689F LD (IX+$06),A   ;
 $68A2 LD (IX+$00),$08 ;
 $68A6 LD (IX+$04),$00 ;
 $68AA RET             ;
*$68AB LD (IX+$05),$01 ;
 $68AF JR $689F        ;
 $68B1 LD HL,$5DCB     ;
 $68B4 INC (HL)        ;
 $68B5 LD C,(IX+$04)   ;
 $68B8 LD B,(IX+$05)   ;
 $68BB LD A,($5DCC)    ;
 $68BE AND B           ;
 $68BF JR NZ,$68C4     ;
 $68C1 INC (IX+$04)    ;
*$68C4 LD A,C          ;
 $68C5 SLA C           ;
 $68C7 LD B,$00        ;
 $68C9 LD HL,$690F     ;
 $68CC ADD HL,BC       ;
 $68CD LD E,(HL)       ;
 $68CE INC HL          ;
 $68CF LD D,(HL)       ;
 $68D0 LD L,(IX+$01)   ;
 $68D3 LD H,(IX+$02)   ;
 $68D6 CP $06          ;
 $68D8 JR NC,$68EE     ;
 $68DA CP $03          ;
 $68DC JR NC,$6909     ;
 $68DE CALL $729B      ;
 $68E1 LD A,($5DCE)    ;
 $68E4 AND $07         ;
 $68E6 OR $42          ;
 $68E8 LD (IX+$03),A   ;
 $68EB JP $71CF        ;
*$68EE LD A,(IX+$06)   ;
 $68F1 LD (IX+$00),A   ;
 $68F4 CALL $7327      ;
 $68F7 CALL $72A5      ;
 $68FA LD (IX+$00),$00 ;
 $68FE LD A,(IX+$06)   ;
 $6901 AND $3F         ;
 $6903 CP $03          ;
 $6905 JP C,$60DD      ;
 $6908 RET             ;
*$6909 CALL $722A      ;
 $690C JP $72A8        ;

; Explosion Sprite Table
@label=ExplosionSpritesTable
w$690F DEFW $7C32    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
 $6911 DEFW $7BFF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
 $6913 DEFW $7BCC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
 $6915 DEFW $7C32    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
 $6917 DEFW $7BFF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
 $6919 DEFW $7BCC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $690F) / 2)) #EXPLOSIONNAME((#PC -
                     ; $690F) / 2).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #LUNARJETMAN$BAC0 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Routine at 691B
c$691B LD A,($5DD5)  ;
 $691E AND A         ;
 $691F RET NZ        ;
 $6920 LD HL,$00C0   ; #REGhl=$00C0
*$6923 DEC HL        ; Decrease #REGhl by one
 $6924 LD A,L        ;
 $6925 OR H          ;
 $6926 JR NZ,$6923   ;
 $6928 RET           ; Return
; This entry point is used by the routine at #R$608A.
*$6929 LD HL,$6945   ; #REGhl=#R$6945
 $692C LD A,($5DF0)  ; #REGa=#R$5DF0
 $692F RLCA          ;
 $6930 RLCA          ;
 $6931 AND $1C       ;
 $6933 LD E,A        ;
 $6934 LD D,$00      ;
 $6936 ADD HL,DE     ;
 $6937 PUSH HL       ;
 $6938 LD DE,$5E00   ;
 $693B CALL $6F26    ;
 $693E POP HL        ;
 $693F LD DE,$5E66   ;
 $6942 JP $6F4D      ;

; Alien Sprite Table
@label=AlienSpritesTable
w$6945 DEFW $7B9E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6947 DEFW $7BB5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6949 DEFW $7E9B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $694B DEFW $7EB8    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $694D DEFW $7EF5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $694F DEFW $7F16    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6951 DEFW $7ED5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6953 DEFW $7ED5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6955 DEFW $7EE4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6957 DEFW $7EE4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6959 DEFW $7F33    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $695B DEFW $7F33    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $695D DEFW $7F52    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $695F DEFW $7F52    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6961 DEFW $7F6F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
 $6963 DEFW $7F6F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $6945) / 2)) #ALIENNAME((#PC - $6945) /
                     ; 2).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #LUNARJETMAN$BAC0 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Routine at 6965
;
; Used by the routine at #R$630F.
c$6965 DI              ;
 $6966 LD A,($5C78)    ;
 $6969 LD ($5DD4),A    ;
 $696C LD A,$01        ;
 $696E LD ($5DD5),A    ;
 $6971 PUSH IX         ;
 $6973 LD HL,$5D30     ;
 $6976 LD ($69B5),HL   ;
 $6979 LD A,$C3        ;
 $697B LD ($69D3),A    ;
 $697E LD HL,$699D     ;
 $6981 LD ($69D4),HL   ;
 $6984 LD IX,$5D00     ;
 $6988 JP $6351        ;
; This entry point is used by the routine at #R$630F.
*$698B LD HL,$5D88     ; #REGhl=#R$5D88
 $698E LD ($69B5),HL   ; Push #REGhl to $69B5
 $6991 LD A,$3A        ; #REGa=$3A
 $6993 LD ($69D3),A    ; Push #REGa to #R$69D3
 $6996 LD HL,$0244     ; #REGhl=$0244
 $6999 LD ($69D4),HL   ; Push #REGhl to $69D4
 $699C RET             ; Return
 $699D CALL $698B      ;
 $69A0 POP IX          ;
 $69A2 XOR A           ;
 $69A3 LD ($5DD5),A    ;
 $69A6 EI              ;
 $69A7 RET             ;
 $69A8 LD HL,$5DCE     ;
 $69AB INC (HL)        ;
 $69AC LD DE,$0008     ;
 $69AF ADD IX,DE       ;
 $69B1 PUSH IX         ;
 $69B3 POP HL          ;
 $69B4 LD BC,$5D88     ;
 $69B7 AND A           ;
 $69B8 SBC HL,BC       ;
 $69BA JP C,$6351      ;
*$69BD LD A,$FE        ;
 $69BF OUT ($FD),A     ;
 $69C1 IN A,($FE)      ;
 $69C3 BIT 0,A         ;
 $69C5 JR Z,$69BD      ;
 $69C7 LD HL,($5DCC)   ;
 $69CA INC HL          ;
 $69CB LD ($5DCC),HL   ;
 $69CE LD H,$00        ;
 $69D0 LD A,R          ;
 $69D2 LD C,A          ;
 $69D3 LD A,($5DCE)    ;
 $69D6 ADD A,(HL)      ;
 $69D7 ADD A,C         ;
 $69D8 LD ($5DCE),A    ;
 $69DB EX AF,AF'       ;
 $69DC LD A,($5DCB)    ;
 $69DF CP $03          ;
 $69E1 JR C,$69EF      ;
 $69E3 EX AF,AF'       ;
 $69E4 AND $1F         ;
 $69E6 JR NZ,$6A10     ;
 $69E8 LD A,($5DCB)    ;
 $69EB CP $06          ;
 $69ED JR NC,$6A10     ;
*$69EF LD A,($5DD7)    ;
 $69F2 AND A           ;
 $69F3 JR NZ,$6A10     ;
 $69F5 LD A,($5D00)    ;
 $69F8 AND $3F         ;
 $69FA DEC A           ;
 $69FB JR Z,$6A00      ;
 $69FD DEC A           ;
 $69FE JR NZ,$6A10     ;
*$6A00 LD HL,$5D50     ; #REGhl=#R$5D50
 $6A03 LD B,$06        ; #REGb=$06
 $6A05 LD DE,$0008     ; #REGde=$0008
*$6A08 LD A,(HL)       ; #REGa=(#REGhl)
 $6A09 AND A           ;
 $6A0A JP Z,$6A19      ; If zero jump back to #R$6A19
 $6A0D ADD HL,DE       ; Add #REGde to #REGhl
 $6A0E DJNZ $6A08      ; Decrease #REGb by one, and loop back to #R$6A08 until
                       ; zero
*$6A10 CALL $6630      ;
 $6A13 CALL $65DF      ;
 $6A16 JP $6345        ; Jump to #R$6345
*$6A19 PUSH HL         ;
 $6A1A EX DE,HL        ;
 $6A1B LD HL,$6DCB     ;
 $6A1E LD BC,$0008     ;
 $6A21 LDIR            ;
 $6A23 POP IX          ;
 $6A25 LD A,($5DCC)    ;
 $6A28 LD E,A          ;
 $6A29 AND $40         ;
 $6A2B LD (IX+$04),A   ;
 $6A2E LD (IX+$00),A   ;
 $6A31 LD A,E          ;
 $6A32 AND $7F         ;
 $6A34 ADD A,$28       ;
 $6A36 LD (IX+$02),A   ;
 $6A39 PUSH IX         ;
 $6A3B POP BC          ;
 $6A3C LD A,C          ;
 $6A3D RRA             ;
 $6A3E RRA             ;
 $6A3F RRA             ;
 $6A40 AND $03         ;
 $6A42 INC A           ;
 $6A43 INC A           ;
 $6A44 LD (IX+$03),A   ;
 $6A47 AND $01         ;
 $6A49 LD (IX+$06),A   ;
 $6A4C LD HL,$6A64     ;
 $6A4F LD A,($5DF0)    ;
 $6A52 AND $07         ;
 $6A54 LD E,A          ;
 $6A55 LD D,$00        ;
 $6A57 ADD HL,DE       ;
 $6A58 LD A,(IX+$00)   ;
 $6A5B AND $C0         ;
 $6A5D OR (HL)         ;
 $6A5E LD (IX+$00),A   ;
 $6A61 JP $6A10        ;
 $6A64 INC BC          ;
 $6A65 LD DE,$0706     ;
 $6A68 RRCA            ;
 $6A69 DEC B           ;
 $6A6A INC BC          ;
 $6A6B RRCA            ;
 $6A6C LD HL,$5DCB     ;
 $6A6F INC (HL)        ;
 $6A70 CALL $6CE7      ;
 $6A73 CALL $6E52      ;
 $6A76 DEC C           ;
 $6A77 JP Z,$6AE6      ;
 $6A7A CALL $6E20      ;
 $6A7D DEC E           ;
 $6A7E JP Z,$648D      ;
 $6A81 XOR A           ;
 $6A82 LD ($5DC9),A    ;
*$6A85 CALL $761D      ;
 $6A88 BIT 2,E         ;
 $6A8A JR Z,$6AA1      ;
 $6A8C BIT 7,E         ;
 $6A8E JR NZ,$6ACA     ;
 $6A90 BIT 4,E         ;
 $6A92 JR NZ,$6AD0     ;
 $6A94 LD A,E          ;
 $6A95 AND $40         ;
 $6A97 LD E,A          ;
 $6A98 LD A,(IX+$04)   ;
 $6A9B AND $BF         ;
 $6A9D OR E            ;
 $6A9E LD (IX+$04),A   ;
*$6AA1 BIT 6,(IX+$04)  ;
 $6AA5 LD A,(IX+$01)   ;
 $6AA8 JR Z,$6AD6      ;
 $6AAA ADD A,$02       ;
*$6AAC LD (IX+$01),A   ;
 $6AAF BIT 7,(IX+$04)  ;
 $6AB3 LD A,(IX+$02)   ;
 $6AB6 JR Z,$6ADA      ;
 $6AB8 ADD A,$02       ;
*$6ABA LD (IX+$02),A   ;
 $6ABD LD A,($5DC9)    ;
 $6AC0 AND A           ;
 $6AC1 JP NZ,$6D7A     ;
 $6AC4 INC A           ;
 $6AC5 LD ($5DC9),A    ;
 $6AC8 JR $6A85        ;
*$6ACA RES 7,(IX+$04)  ;
 $6ACE JR $6AA1        ;
*$6AD0 SET 7,(IX+$04)  ;
 $6AD4 JR $6AA1        ;
*$6AD6 SUB $02         ;
 $6AD8 JR $6AAC        ;
*$6ADA SUB $02         ;
 $6ADC CP $24          ;
 $6ADE JR NC,$6ABA     ;
 $6AE0 SET 7,(IX+$04)  ;
 $6AE4 JR $6ABA        ;
*$6AE6 LD BC,$0080     ;
 $6AE9 CALL $70F9      ;
 $6AEC JP $6C28        ;
 $6AEF LD HL,$5DCB     ;
 $6AF2 INC (HL)        ;
 $6AF3 CALL $6CE7      ;
 $6AF6 CALL $6E52      ;
 $6AF9 DEC C           ;
 $6AFA JP Z,$6C22      ;
 $6AFD CALL $6E20      ;
 $6B00 DEC E           ;
 $6B01 JP Z,$648D      ;
 $6B04 XOR A           ;
 $6B05 LD ($5DC9),A    ;
*$6B08 CALL $761D      ;
 $6B0B BIT 2,E         ;
 $6B0D JR Z,$6B28      ;
 $6B0F BIT 7,E         ;
 $6B11 JP NZ,$6C04     ;
 $6B14 BIT 4,E         ;
 $6B16 JP NZ,$6C0B     ;
 $6B19 LD A,E          ;
 $6B1A AND $40         ;
 $6B1C XOR $40         ;
 $6B1E LD E,A          ;
 $6B1F LD A,(IX+$04)   ;
 $6B22 AND $BF         ;
 $6B24 OR E            ;
 $6B25 LD (IX+$04),A   ;
*$6B28 LD A,(IX+$05)   ;
 $6B2B LD B,A          ;
 $6B2C AND $0F         ;
 $6B2E LD C,A          ;
 $6B2F LD A,B          ;
 $6B30 AND $F0         ;
 $6B32 LD B,A          ;
 $6B33 LD A,($5D01)    ;
 $6B36 SUB (IX+$01)    ;
 $6B39 JP P,$6BAB      ;
 $6B3C BIT 6,(IX+$04)  ;
 $6B40 JP Z,$6BCD      ;
 $6B43 LD A,C          ;
 $6B44 CP $0F          ;
 $6B46 JR NC,$6B49     ;
 $6B48 INC A           ;
*$6B49 LD C,A          ;
 $6B4A LD H,(IX+$01)   ;
 $6B4D CALL $6C12      ;
 $6B50 AND A           ;
 $6B51 SBC HL,DE       ;
*$6B53 LD (IX+$01),H   ;
 $6B56 LD A,L          ;
 $6B57 AND $F0         ;
 $6B59 OR C            ;
 $6B5A LD (IX+$05),A   ;
 $6B5D LD A,(IX+$06)   ;
 $6B60 LD B,A          ;
 $6B61 AND $0F         ;
 $6B63 LD C,A          ;
 $6B64 LD A,B          ;
 $6B65 AND $F0         ;
 $6B67 LD B,A          ;
 $6B68 LD A,($5D02)    ;
 $6B6B SUB (IX+$02)    ;
 $6B6E JP P,$6BD9      ;
 $6B71 BIT 7,(IX+$04)  ;
 $6B75 JP Z,$6BFA      ;
 $6B78 LD A,C          ;
 $6B79 DEC A           ;
 $6B7A JR NZ,$6BE5     ;
 $6B7C RES 7,(IX+$04)  ;
*$6B80 LD C,A          ;
 $6B81 LD H,(IX+$02)   ;
 $6B84 CALL $6C12      ;
 $6B87 AND A           ;
 $6B88 SBC HL,DE       ;
*$6B8A LD A,H          ;
 $6B8B CP $28          ;
 $6B8D JR NC,$6B93     ;
 $6B8F SET 7,(IX+$04)  ;
*$6B93 LD (IX+$02),A   ;
 $6B96 LD A,L          ;
 $6B97 AND $F0         ;
 $6B99 OR C            ;
 $6B9A LD (IX+$06),A   ;
 $6B9D LD A,($5DC9)    ;
 $6BA0 AND A           ;
 $6BA1 JP NZ,$6D7A     ;
 $6BA4 INC A           ;
 $6BA5 LD ($5DC9),A    ;
 $6BA8 JP $6B08        ;
*$6BAB BIT 6,(IX+$04)  ;
 $6BAF JR Z,$6BC5      ;
 $6BB1 LD A,C          ;
 $6BB2 DEC A           ;
 $6BB3 JP NZ,$6B49     ;
 $6BB6 RES 6,(IX+$04)  ;
*$6BBA LD C,A          ;
 $6BBB LD H,(IX+$01)   ;
 $6BBE CALL $6C12      ;
 $6BC1 ADD HL,DE       ;
 $6BC2 JP $6B53        ;
*$6BC5 LD A,C          ;
 $6BC6 CP $0F          ;
 $6BC8 JR NC,$6BBA     ;
 $6BCA INC A           ;
 $6BCB JR $6BBA        ;
*$6BCD LD A,C          ;
 $6BCE DEC A           ;
 $6BCF JP NZ,$6BBA     ;
 $6BD2 SET 6,(IX+$04)  ;
 $6BD6 JP $6B49        ;
*$6BD9 BIT 7,(IX+$04)  ;
 $6BDD JR Z,$6BF0      ;
 $6BDF LD A,C          ;
 $6BE0 CP $0F          ;
 $6BE2 JR NC,$6BE5     ;
 $6BE4 INC A           ;
*$6BE5 LD C,A          ;
 $6BE6 LD H,(IX+$02)   ;
 $6BE9 CALL $6C12      ;
 $6BEC ADD HL,DE       ;
 $6BED JP $6B8A        ;
*$6BF0 LD A,C          ;
 $6BF1 DEC A           ;
 $6BF2 JR NZ,$6B80     ;
 $6BF4 SET 7,(IX+$04)  ;
 $6BF8 JR $6BE5        ;
*$6BFA LD A,C          ;
 $6BFB CP $0F          ;
 $6BFD JP NC,$6B80     ;
 $6C00 INC A           ;
 $6C01 JP $6B80        ;
*$6C04 RES 7,(IX+$04)  ;
 $6C08 JP $6B28        ;
*$6C0B SET 7,(IX+$04)  ;
 $6C0F JP $6B28        ;
*$6C12 LD L,B          ;
 $6C13 LD A,C          ;
 $6C14 RLA             ;
 $6C15 RLA             ;
 $6C16 RLA             ;
 $6C17 RLA             ;
 $6C18 AND $F0         ;
 $6C1A LD E,A          ;
 $6C1B LD D,$00        ;
 $6C1D SLA E           ;
 $6C1F RL D            ;
 $6C21 RET             ;
*$6C22 LD BC,$0050     ;
 $6C25 CALL $70F9      ;
*$6C28 CALL $6894      ;
 $6C2B XOR A           ;
 $6C2C JP $6834        ;
 $6C2F LD HL,$5DCB     ;
 $6C32 INC (HL)        ;
 $6C33 CALL $6CE7      ;
 $6C36 XOR A           ;
 $6C37 LD ($5DC9),A    ;
 $6C3A CALL $6E52      ;
 $6C3D DEC C           ;
 $6C3E LD BC,$0040     ;
 $6C41 JP Z,$6D93      ;
 $6C44 CALL $6E20      ;
 $6C47 DEC E           ;
 $6C48 JP Z,$648D      ;
*$6C4B CALL $761D      ;
 $6C4E BIT 2,E         ;
 $6C50 JR Z,$6C67      ;
 $6C52 BIT 7,E         ;
 $6C54 JR NZ,$6CCB     ;
 $6C56 BIT 4,E         ;
 $6C58 JR NZ,$6CD1     ;
 $6C5A LD A,E          ;
 $6C5B AND $40         ;
 $6C5D LD E,A          ;
 $6C5E LD A,(IX+$04)   ;
 $6C61 AND $BF         ;
 $6C63 OR E            ;
 $6C64 LD (IX+$04),A   ;
*$6C67 BIT 0,(IX+$04)  ;
 $6C6B JR NZ,$6C92     ;
 $6C6D LD A,($5DCE)    ;
 $6C70 LD E,A          ;
 $6C71 AND $0F         ;
 $6C73 JR NZ,$6C92     ;
 $6C75 SET 0,(IX+$04)  ;
 $6C79 LD A,($5DCC)    ;
 $6C7C AND $1F         ;
 $6C7E ADD A,$10       ;
 $6C80 LD (IX+$06),A   ;
 $6C83 LD A,E          ;
 $6C84 AND $80         ;
 $6C86 LD E,A          ;
 $6C87 LD A,(IX+$04)   ;
 $6C8A AND $7F         ;
 $6C8C OR E            ;
 $6C8D LD (IX+$04),A   ;
 $6C90 JR $6C4B        ;
*$6C92 BIT 0,(IX+$04)  ;
 $6C96 JR Z,$6CAF      ;
 $6C98 LD A,(IX+$02)   ;
 $6C9B BIT 7,(IX+$04)  ;
 $6C9F JR Z,$6CD7      ;
 $6CA1 ADD A,$02       ;
*$6CA3 LD (IX+$02),A   ;
 $6CA6 DEC (IX+$06)    ;
 $6CA9 JR NZ,$6CAF     ;
 $6CAB RES 0,(IX+$04)  ;
*$6CAF LD A,(IX+$01)   ;
 $6CB2 BIT 6,(IX+$04)  ;
 $6CB6 JR Z,$6CE3      ;
 $6CB8 ADD A,$02       ;
*$6CBA LD (IX+$01),A   ;
 $6CBD LD A,($5DC9)    ;
 $6CC0 AND A           ;
 $6CC1 JP NZ,$6D7A     ;
 $6CC4 INC A           ;
 $6CC5 LD ($5DC9),A    ;
 $6CC8 JP $6C4B        ;
*$6CCB RES 7,(IX+$04)  ;
 $6CCF JR $6C67        ;
*$6CD1 SET 7,(IX+$04)  ;
 $6CD5 JR $6C67        ;
*$6CD7 SUB $02         ;
 $6CD9 CP $28          ;
 $6CDB JR NC,$6CA3     ;
 $6CDD SET 7,(IX+$04)  ;
 $6CE1 JR $6CA3        ;
*$6CE3 SUB $02         ;
 $6CE5 JR $6CBA        ;
; This entry point is used by the routine at #R$63DA.
*$6CE7 CALL $7327      ;
 $6CEA LD A,(IX+$00)   ;
 $6CED AND $C0         ;
 $6CEF OR $03          ;
 $6CF1 LD ($5DC2),A    ;
 $6CF4 RET             ;
 $6CF5 CALL $6CE7      ;
 $6CF8 LD HL,$5DCB     ;
 $6CFB INC (HL)        ;
 $6CFC CALL $6E52      ;
 $6CFF DEC C           ;
 $6D00 JP Z,$6D90      ;
 $6D03 CALL $6E20      ;
 $6D06 DEC E           ;
 $6D07 JP Z,$648D      ;
 $6D0A XOR A           ;
 $6D0B LD ($5DC9),A    ;
*$6D0E CALL $761D      ;
 $6D11 BIT 2,E         ;
 $6D13 JR Z,$6D2E      ;
 $6D15 BIT 7,E         ;
 $6D17 JP NZ,$6D9E     ;
 $6D1A BIT 4,E         ;
 $6D1C JP NZ,$6DAD     ;
 $6D1F LD A,E          ;
 $6D20 AND $40         ;
 $6D22 XOR $40         ;
 $6D24 LD E,A          ;
 $6D25 LD A,(IX+$04)   ;
 $6D28 AND $BF         ;
 $6D2A OR E            ;
 $6D2B LD (IX+$04),A   ;
*$6D2E BIT 6,(IX+$04)  ;
 $6D32 LD A,(IX+$01)   ;
 $6D35 JP NZ,$6DB4     ;
 $6D38 ADD A,$02       ;
*$6D3A LD (IX+$01),A   ;
 $6D3D LD H,$00        ;
 $6D3F LD L,(IX+$06)   ;
 $6D42 ADD HL,HL       ;
 $6D43 LD D,(IX+$02)   ;
 $6D46 LD E,(IX+$05)   ;
 $6D49 BIT 7,(IX+$04)  ;
 $6D4D JR Z,$6DC4      ;
 $6D4F ADD HL,DE       ;
*$6D50 LD (IX+$05),L   ;
 $6D53 LD (IX+$02),H   ;
 $6D56 LD A,H          ;
 $6D57 CP $28          ;
 $6D59 JR NC,$6D5F     ;
 $6D5B SET 7,(IX+$04)  ;
*$6D5F BIT 7,(IX+$04)  ;
 $6D63 JR Z,$6DB9      ;
 $6D65 INC (IX+$06)    ;
 $6D68 JR NZ,$6D6E     ;
 $6D6A LD (IX+$06),$FF ;
*$6D6E LD A,($5DC9)    ;
 $6D71 AND A           ;
 $6D72 JR NZ,$6D7A     ;
 $6D74 INC A           ;
 $6D75 LD ($5DC9),A    ;
 $6D78 JR $6D0E        ;
*$6D7A LD A,(IX+$00)   ;
 $6D7D PUSH AF         ;
 $6D7E AND $C0         ;
 $6D80 OR $03          ;
 $6D82 LD (IX+$00),A   ;
 $6D85 CALL $726A      ;
 $6D88 CALL $71CF      ;
 $6D8B POP AF          ;
 $6D8C LD (IX+$00),A   ;
 $6D8F RET             ;
*$6D90 LD BC,$0060     ;
*$6D93 CALL $70F9      ;
 $6D96 CALL $6894      ;
 $6D99 LD A,$01        ;
 $6D9B JP $6834        ;
*$6D9E RES 7,(IX+$04)  ;
 $6DA2 LD A,($5DCE)    ;
 $6DA5 ADD A,$08       ;
 $6DA7 LD (IX+$06),A   ;
 $6DAA JP $6D2E        ;
*$6DAD SET 7,(IX+$04)  ;
 $6DB1 JP $6D2E        ;
*$6DB4 SUB $02         ;
 $6DB6 JP $6D3A        ;
*$6DB9 DEC (IX+$06)    ;
 $6DBC JR NZ,$6D6E     ;
 $6DBE SET 7,(IX+$04)  ;
 $6DC2 JR $6D6E        ;
*$6DC4 AND A           ;
 $6DC5 EX DE,HL        ;
 $6DC6 SBC HL,DE       ;
 $6DC8 JP $6D50        ;
 $6DCB INC BC          ;
 $6DCC NOP             ;
 $6DCD NOP             ;
 $6DCE LD B,D          ;
 $6DCF ADD A,B         ;
 $6DD0 INC B           ;
 $6DD1 NOP             ;
 $6DD2 INC E           ;
 $6DD3 CALL $7327      ;
 $6DD6 LD HL,$5DCB     ; #REGhl=$5DCB
 $6DD9 INC (HL)        ;
 $6DDA LD A,(IX+$01)   ;
 $6DDD BIT 6,(IX+$04)  ;
 $6DE1 JR NZ,$6E1B     ;
 $6DE3 ADD A,(IX+$05)  ;
*$6DE6 LD (IX+$01),A   ;
 $6DE9 LD A,(IX+$02)   ;
 $6DEC ADD A,(IX+$06)  ;
 $6DEF LD (IX+$02),A   ;
 $6DF2 CALL $726A      ;
 $6DF5 CALL $71CF      ;
 $6DF8 CALL $761D      ;
 $6DFB BIT 2,E         ;
 $6DFD JR NZ,$6E14     ;
 $6DFF CALL $6E52      ;
 $6E02 LD A,C          ;
 $6E03 AND A           ;
 $6E04 JR NZ,$6E0E     ;
 $6E06 CALL $6E20      ;
 $6E09 DEC E           ;
 $6E0A JP Z,$648D      ;
 $6E0D RET             ;
*$6E0E LD BC,$0025     ;
 $6E11 CALL $70F9      ;
*$6E14 CALL $6894      ;
 $6E17 XOR A           ;
 $6E18 JP $6834        ;
*$6E1B SUB (IX+$05)    ;
 $6E1E JR $6DE6        ;
; This entry point is used by the routine at #R$63DA.
*$6E20 LD HL,$5D00     ;
 $6E23 LD E,$00        ;
 $6E25 LD A,(HL)       ;
 $6E26 AND $3F         ;
 $6E28 DEC A           ;
 $6E29 JR Z,$6E2D      ;
 $6E2B DEC A           ;
 $6E2C RET NZ          ;
*$6E2D INC HL          ;
 $6E2E LD A,(HL)       ;
 $6E2F SUB (IX+$01)    ;
 $6E32 JP P,$6E37      ;
 $6E35 NEG             ;
*$6E37 CP $0C          ;
 $6E39 RET NC          ;
 $6E3A INC HL          ;
 $6E3B LD A,(HL)       ;
 $6E3C SUB (IX+$02)    ;
 $6E3F JP P,$6E4B      ;
 $6E42 NEG             ;
 $6E44 LD D,(IX+$07)   ;
 $6E47 ADD A,$0E       ;
 $6E49 JR $6E4D        ;
*$6E4B LD D,$15        ;
*$6E4D CP D            ;
 $6E4E RET NC          ;
 $6E4F LD E,$01        ;
 $6E51 RET             ;
; This entry point is used by the routine at #R$63DA.
*$6E52 LD DE,$0008     ;
 $6E55 LD HL,$5D08     ;
 $6E58 LD B,$04        ;
*$6E5A PUSH HL         ;
 $6E5B LD A,(HL)       ;
 $6E5C AND A           ;
 $6E5D JR Z,$6E96      ;
 $6E5F INC HL          ;
 $6E60 INC HL          ;
 $6E61 INC HL          ;
 $6E62 LD A,(HL)       ;
 $6E63 DEC HL          ;
 $6E64 BIT 2,A         ;
 $6E66 JR Z,$6E96      ;
 $6E68 AND $F8         ;
 $6E6A SUB (IX+$01)    ;
 $6E6D JP P,$6E76      ;
 $6E70 NEG             ;
 $6E72 LD C,$08        ;
 $6E74 JR $6E78        ;
*$6E76 LD C,$20        ;
*$6E78 CP C            ;
 $6E79 JR NC,$6E96     ;
 $6E7B DEC HL          ;
 $6E7C LD A,(HL)       ;
 $6E7D SUB (IX+$02)    ;
 $6E80 NEG             ;
 $6E82 JP M,$6E96      ;
 $6E85 ADD A,$0C       ;
 $6E87 CP (IX+$07)     ;
 $6E8A JP NC,$6E96     ;
 $6E8D LD C,$01        ;
 $6E8F INC HL          ;
 $6E90 LD A,(HL)       ;
 $6E91 AND $F8         ;
 $6E93 LD (HL),A       ;
 $6E94 POP HL          ;
 $6E95 RET             ;
*$6E96 POP HL          ;
 $6E97 ADD HL,DE       ;
 $6E98 DJNZ $6E5A      ; Decrease #REGb by one, and loop back to #R$6E5A until
                       ; zero
 $6E9A LD C,$00        ;
 $6E9C RET             ;
*$6E9D LD A,B          ;
 $6E9E EX AF,AF'       ;
 $6E9F LD E,$00        ;
 $6EA1 LD C,(HL)       ;
 $6EA2 INC HL          ;
 $6EA3 LD D,(HL)       ;
 $6EA4 INC HL          ;
 $6EA5 LD A,B          ;
 $6EA6 AND A           ;
 $6EA7 RET Z           ;
*$6EA8 SRL C           ;
 $6EAA RR D            ;
 $6EAC RR E            ;
 $6EAE DJNZ $6EA8      ; Decrease #REGb by one, and loop back to #R$6EA8 until
                       ; zero
 $6EB0 EX AF,AF'       ;
 $6EB1 LD B,A          ;
 $6EB2 RET             ;
*$6EB3 PUSH BC         ;
 $6EB4 LD B,$08        ;
*$6EB6 RRCA            ;
 $6EB7 RL C            ;
 $6EB9 DJNZ $6EB6      ; Decrease #REGb by one, and loop back to #R$6EB6 until
                       ; zero
 $6EBB LD A,C          ;
 $6EBC POP BC          ;
 $6EBD RET             ;
*$6EBE LD A,B          ;
 $6EBF EX AF,AF'       ;
 $6EC0 LD C,$00        ;
 $6EC2 LD A,(HL)       ;
 $6EC3 CALL $6EB3      ;
 $6EC6 LD E,A          ;
 $6EC7 INC HL          ;
 $6EC8 LD A,(HL)       ;
 $6EC9 CALL $6EB3      ;
 $6ECC LD D,A          ;
 $6ECD INC HL          ;
 $6ECE LD A,B          ;
 $6ECF AND A           ;
 $6ED0 RET Z           ;
*$6ED1 SLA E           ;
 $6ED3 RL D            ;
 $6ED5 RL C            ;
 $6ED7 DJNZ $6ED1      ; Decrease #REGb by one, and loop back to #R$6ED1 until
                       ; zero
 $6ED9 EX AF,AF'       ;
 $6EDA LD B,A          ;
 $6EDB RET             ;
*$6EDC EXX             ;
 $6EDD LD A,($5DD2)    ;
 $6EE0 AND A           ;
 $6EE1 JR Z,$6EF4      ;
 $6EE3 CALL $6EBE      ;
*$6EE6 PUSH DE         ;
 $6EE7 PUSH BC         ;
 $6EE8 EXX             ;
 $6EE9 POP DE          ;
 $6EEA LD (HL),E       ;
 $6EEB INC HL          ;
 $6EEC POP DE          ;
 $6EED LD (HL),D       ;
 $6EEE INC HL          ;
 $6EEF LD (HL),E       ;
 $6EF0 INC HL          ;
 $6EF1 DJNZ $6EDC      ; Decrease #REGb by one, and loop back to #R$6EDC until
                       ; zero
 $6EF3 RET             ;
*$6EF4 CALL $6E9D      ;
 $6EF7 JR $6EE6        ;
; This entry point is used by the routines at #R$608A and #R$63DA.
*$6EF9 LD C,A          ;
 $6EFA LD A,($5DF0)    ; #REGa=#R$5DF0
 $6EFD RRCA            ;
 $6EFE AND $06         ;
 $6F00 OR C            ;
 $6F01 LD C,A          ;
 $6F02 LD B,$00        ;
 $6F04 LD HL,$67C3     ;
 $6F07 ADD HL,BC       ;
 $6F08 LD DE,$5ECC     ;
 $6F0B LD A,$02        ;
 $6F0D LD ($5DD3),A    ;
 $6F10 XOR A           ;
 $6F11 LD ($5DD2),A    ;
 $6F14 LD C,$04        ;
 $6F16 XOR A           ;
*$6F17 PUSH BC         ;
 $6F18 LD B,A          ;
 $6F19 LD C,$01        ;
 $6F1B CALL $6F42      ;
 $6F1E LD A,B          ;
 $6F1F POP BC          ;
 $6F20 DEC HL          ;
 $6F21 DEC HL          ;
 $6F22 DEC C           ;
 $6F23 JR NZ,$6F17     ;
 $6F25 RET             ;
; This entry point is used by the routine at #R$691B.
*$6F26 LD BC,$0002     ;
 $6F29 LD A,$04        ;
 $6F2B LD ($5DD3),A    ;
*$6F2E XOR A           ;
 $6F2F JR $6F57        ;
 $6F31 LD BC,$0004     ;
 $6F34 LD A,$02        ;
 $6F36 LD ($5DD3),A    ;
 $6F39 JR $6F2E        ;
 $6F3B LD BC,$0004     ;
 $6F3E LD A,$02        ;
 $6F40 JR $6F52        ;
*$6F42 PUSH HL         ;
 $6F43 PUSH DE         ;
 $6F44 PUSH BC         ;
 $6F45 LD A,(HL)       ;
 $6F46 INC HL          ;
 $6F47 LD H,(HL)       ;
 $6F48 LD L,A          ;
 $6F49 INC HL          ;
 $6F4A INC HL          ;
 $6F4B JR $6F61        ;
; This entry point is used by the routine at #R$691B.
*$6F4D LD BC,$0002     ;
 $6F50 LD A,$04        ;
*$6F52 LD A,($5DD3)    ;
 $6F55 LD A,$01        ;
*$6F57 LD ($5DD2),A    ;
*$6F5A PUSH HL         ;
 $6F5B PUSH DE         ;
 $6F5C PUSH BC         ;
 $6F5D LD A,(HL)       ;
 $6F5E INC HL          ;
 $6F5F LD H,(HL)       ;
 $6F60 LD L,A          ;
*$6F61 PUSH HL         ;
 $6F62 EX DE,HL        ;
 $6F63 EXX             ;
 $6F64 POP HL          ;
 $6F65 POP BC          ;
 $6F66 PUSH BC         ;
 $6F67 LD A,(HL)       ;
 $6F68 EX AF,AF'       ;
 $6F69 INC HL          ;
 $6F6A EXX             ;
 $6F6B LD (HL),$00     ;
 $6F6D INC HL          ;
 $6F6E LD (HL),$03     ;
 $6F70 INC HL          ;
 $6F71 EX AF,AF'       ;
 $6F72 CP $11          ;
 $6F74 JR C,$6F78      ;
 $6F76 LD A,$10        ;
*$6F78 LD (HL),A       ;
 $6F79 INC HL          ;
 $6F7A LD B,A          ;
 $6F7B CALL $6EDC      ;
 $6F7E POP BC          ;
 $6F7F POP HL          ;
 $6F80 LD DE,$0033     ;
 $6F83 ADD HL,DE       ;
 $6F84 POP DE          ;
 $6F85 EX DE,HL        ;
 $6F86 INC HL          ;
 $6F87 INC HL          ;
 $6F88 LD A,($5DD3)    ;
 $6F8B ADD A,B         ;
 $6F8C LD B,A          ;
 $6F8D DEC C           ;
 $6F8E JR NZ,$6F5A     ;
 $6F90 RET             ;
; This entry point is used by the routine at #R$71B8.
*$6F91 LD A,($5C78)    ; #HTML(#REGa=<a
                       ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $6F94 AND $03         ;
 $6F96 RET NZ          ;
 $6F97 LD HL,$5D08     ;
 $6F9A LD DE,$0008     ;
 $6F9D LD B,$04        ;
*$6F9F LD A,(HL)       ;
 $6FA0 AND A           ;
 $6FA1 JR Z,$6FA7      ;
 $6FA3 ADD HL,DE       ;
 $6FA4 DJNZ $6F9F      ; Decrease #REGb by one, and loop back to #R$6F9F until
                       ; zero
 $6FA6 RET             ;
*$6FA7 LD (HL),$10     ;
 $6FA9 INC HL          ;
 $6FAA LD DE,$5D00     ;
 $6FAD LD A,(DE)       ;
 $6FAE LD B,A          ;
 $6FAF INC DE          ;
 $6FB0 LD A,(DE)       ;
 $6FB1 AND $F8         ;
 $6FB3 OR $05          ;
 $6FB5 LD C,A          ;
 $6FB6 BIT 6,B         ;
 $6FB8 JR Z,$6FED      ;
 $6FBA SUB $08         ;
 $6FBC LD C,A          ;
*$6FBD INC DE          ;
 $6FBE LD A,(DE)       ;
 $6FBF SUB $0D         ;
 $6FC1 LD (HL),A       ;
 $6FC2 INC HL          ;
 $6FC3 LD B,$03        ;
 $6FC5 LD (HL),C       ;
 $6FC6 LD A,C          ;
 $6FC7 AND $FB         ;
*$6FC9 INC HL          ;
 $6FCA LD (HL),A       ;
 $6FCB DJNZ $6FC9      ; Decrease #REGb by one, and loop back to #R$6FC9 until
                       ; zero
 $6FCD INC HL          ;
 $6FCE LD A,($5DCE)    ;
 $6FD1 AND $38         ;
 $6FD3 OR $84          ;
 $6FD5 LD (HL),A       ;
 $6FD6 INC HL          ;
 $6FD7 EX DE,HL        ;
 $6FD8 LD HL,$6FE9     ;
 $6FDB LD A,($5DCE)    ;
 $6FDE AND $03         ;
 $6FE0 LD C,A          ;
 $6FE1 LD B,$00        ;
 $6FE3 ADD HL,BC       ;
 $6FE4 LD A,(HL)       ;
 $6FE5 LD (DE),A       ;
 $6FE6 JP $681E        ;
 $6FE9 LD B,A          ;
 $6FEA LD B,E          ;
 $6FEB LD B,E          ;
 $6FEC LD B,L          ;
*$6FED LD A,(DE)       ;
 $6FEE AND $07         ;
 $6FF0 LD A,C          ;
 $6FF1 JR Z,$6FF5      ;
 $6FF3 ADD A,$08       ;
*$6FF5 ADD A,$10       ;
 $6FF7 AND $FE         ;
 $6FF9 LD C,A          ;
 $6FFA JR $6FBD        ;
 $6FFC LD D,(IX+$01)   ;
 $6FFF LD A,(IX+$02)   ;
 $7002 BIT 2,A         ;
 $7004 JR Z,$703E      ;
 $7006 LD L,A          ;
 $7007 LD A,$08        ;
 $7009 BIT 0,L         ;
 $700B JR Z,$700F      ;
 $700D NEG             ;
*$700F ADD A,L         ;
 $7010 LD E,A          ;
 $7011 LD H,D          ;
 $7012 PUSH HL         ;
 $7013 CALL $7308      ;
 $7016 LD A,(IX+$01)   ;
 $7019 CP $80          ;
 $701B JR NC,$7021     ;
 $701D LD A,(HL)       ;
 $701E AND A           ;
 $701F JR NZ,$7063     ;
*$7021 LD (IX+$02),E   ;
 $7024 LD (HL),$FF     ;
 $7026 POP HL          ;
 $7027 CALL $720E      ;
 $702A LD A,(IX+$07)   ;
 $702D LD (HL),A       ;
 $702E LD A,(IX+$06)   ;
 $7031 SUB $08         ;
 $7033 LD (IX+$06),A   ;
 $7036 AND $F8         ;
 $7038 JR NZ,$703E     ;
*$703A RES 2,(IX+$02)  ;
*$703E EXX             ;
 $703F LD BC,$031C     ;
 $7042 LD E,$E0        ;
 $7044 EXX             ;
 $7045 LD E,$03        ;
 $7047 PUSH IX         ;
 $7049 POP BC          ;
 $704A INC BC          ;
 $704B INC BC          ;
 $704C INC BC          ;
*$704D LD A,(BC)       ;
 $704E XOR (IX+$02)    ;
 $7051 AND $F8         ;
 $7053 JR NZ,$7066     ;
 $7055 EXX             ;
 $7056 LD A,B          ;
 $7057 LD B,C          ;
 $7058 LD C,E          ;
 $7059 EXX             ;
 $705A INC BC          ;
 $705B DEC E           ;
 $705C JR NZ,$704D     ;
 $705E LD (IX+$00),$00 ;
 $7062 RET             ;
*$7063 POP HL          ;
 $7064 JR $703A        ;
*$7066 LD A,(BC)       ;
 $7067 BIT 2,A         ;
 $7069 JR NZ,$7086     ;
 $706B DEC (IX+$06)    ;
 $706E LD A,(IX+$06)   ; #REGa=(IX+$06) #R$5D0E
 $7071 AND $07         ;
 $7073 RET NZ          ;
 $7074 LD A,($5DCE)    ;
 $7077 AND $03         ;
 $7079 OR $04          ;
 $707B OR (IX+$06)     ;
 $707E LD (IX+$06),A   ;
 $7081 LD A,(BC)       ;
 $7082 OR $04          ;
 $7084 LD (BC),A       ;
 $7085 RET             ;
*$7086 LD A,(BC)       ;
 $7087 LD L,A          ;
 $7088 LD A,$08        ;
 $708A BIT 0,L         ;
 $708C JR Z,$7090      ;
 $708E NEG             ;
*$7090 ADD A,L         ;
 $7091 LD (BC),A       ;
 $7092 LD H,D          ;
 $7093 CALL $7308      ;
 $7096 EXX             ;
 $7097 LD A,B          ;
 $7098 LD B,C          ;
 $7099 LD C,E          ;
 $709A EXX             ;
 $709B CPL             ;
 $709C AND (HL)        ;
 $709D LD (HL),A       ;
 $709E INC BC          ;
 $709F DEC E           ;
 $70A0 JP NZ,$704D     ;
 $70A3 RET             ;
; This entry point is used by the routines at #R$608A and #R$63DA.
*$70A4 LD HL,$0040     ; #REGhl=$0040
 $70A7 CALL $7308      ; Call the routine at #R$7308
 $70AA CALL $70E3      ; Call the routine at #R$70E3
 $70AD AND A           ;
 $70AE JR Z,$70CC      ;
 $70B0 CALL $70BF      ;
*$70B3 LD HL,$00B0     ;
 $70B6 CALL $7308      ;
 $70B9 CALL $70F1      ;
 $70BC AND A           ;
 $70BD JR Z,$70D1      ;
*$70BF ADD A,$30       ;
 $70C1 CALL $714C      ;
 $70C4 LD DE,$70DB     ;
 $70C7 PUSH BC         ;
 $70C8 PUSH DE         ;
 $70C9 JP $715C        ;
*$70CC CALL $70D1      ;
 $70CF JR $70B3        ;
*$70D1 LD A,$20        ;
 $70D3 CALL $714C      ;
 $70D6 LD A,$20        ;
 $70D8 JP $714C        ;

; Lives UDG
;
; The graphic for the lives icon
@label=UDG_LIVES
b$70DB DEFB $18,$24,$3C,$7E,$5A,$3C,$3C,$66 ; #UDG#(#PC),attr=7

; Lives left for active player
;
; Loads the number of lives left for the active player into #REGa.
@label=ACTIVE_PLAYER_LIVES
c$70E3 LD A,($5DD1)  ; {Evaluate #R$5DD1
 $70E6 AND A         ; }
 $70E7 JR NZ,$70ED   ; Jump to #R$70ED if 2UP is active player
@label=1UP_PLAYER_LIVES
*$70E9 LD A,($5DF1)  ; #REGa=#R$5DF1
 $70EC RET           ; Return
@label=2UP_PLAYER_LIVES
*$70ED LD A,($5DF9)  ; #REGa=#R$5DF9
 $70F0 RET           ; Return
; This entry point is used by the routine at #R$6965.
@label=INACTIVE_PLAYER_LIVES
*$70F1 LD A,($5DD1)  ; {Evaluate #R$5DD1
 $70F4 AND A         ; }
 $70F5 JR Z,$70ED    ; Jump to #R$70ED if 1UP is active player
 $70F7 JR $70E9      ; Jump to #R$70E9
; This entry point is used by the routines at #R$63DA and #R$6965.
*$70F9 LD A,($5DD1)  ; {Evaluate #R$5DD1
 $70FC AND A         ; }
 $70FD JR NZ,$7104   ; Jump to #R$7104 if 2UP is active player
 $70FF LD HL,$5CF6   ; #REGhl=#R$5CF6
 $7102 JR $7107      ; Jump forward to #R$7107
*$7104 LD HL,$5CF9   ; #REGhl=#R$5CF9
*$7107 LD A,(HL)     ; #REGa=#REGhl
 $7108 ADD A,C       ;
 $7109 DAA           ;
 $710A LD (HL),A     ;
 $710B DEC HL        ;
 $710C LD A,(HL)     ;
 $710D ADC A,B       ;
 $710E DAA           ;
 $710F LD (HL),A     ;
 $7110 DEC HL        ;
 $7111 LD A,(HL)     ;
 $7112 ADC A,$00     ;
 $7114 DAA           ;
 $7115 LD (HL),A     ; Writes #REGa to the memory location currently in #REGhl
 $7116 LD A,($5DD1)  ; {Evaluate #R$5DD1
 $7119 AND A         ; }
 $711A JR NZ,$7124   ; Jump to #R$7124 if 2UP is active player

; Scoring Display Routines
;
; Used by the routine at #R$608A.
;
; .
;
; Point to Player 1 score and display
@label=DISPLAY_1UP_SCORE
c$711C LD HL,$4021   ; #REGhl=Screen location for output
 $711F LD DE,$5CF4   ; #REGde=#R$5CF4
 $7122 JR $7132      ; Generate scores and output to screen
; Point to Player 2 score and display
@label=DISPLAY_2UP_SCORE
*$7124 LD HL,$4039   ; #REGhl=Screen location for output
 $7127 LD DE,$5CF7   ; #REGde=#R$5CF7
 $712A JR $7132      ; Generate scores and output to screen
; Point to Highscore and display
@label=DISPLAY_HIGHSCORE
*$712C LD HL,$402D   ; #REGhl=Screen location for output
 $712F LD DE,$5CF0   ; #REGde=#R$5CF0
; Display routine
@label=DISPLAY_SCORE
*$7132 LD B,$03      ; #REGb=3
@label=DISPLAY_SCORE_LOOP
*$7134 LD A,(DE)     ; #REGa=Loads the accumulator with the contents of #REGde
 $7135 RRCA          ; {#REGa=Shift 4 bits to the right
 $7136 RRCA          ;
 $7137 RRCA          ;
 $7138 RRCA          ; }
 $7139 AND $0F       ;
 $713B ADD A,$30     ; Adds $30 to #REGa
 $713D CALL $714C    ; Call routine @#R$714C
 $7140 LD A,(DE)     ; Loads #REGa with the contents of the memory location
                     ; held by #REGde
 $7141 AND $0F       ;
 $7143 ADD A,$30     ; Adds $30 to #REGa
 $7145 CALL $714C    ; Call routine @#R$714C
 $7148 INC DE        ; Increments #REGde by one
 $7149 DJNZ $7134    ; Decrease #REGb by one, and loop back to #R$7134 until
                     ; zero
 $714B RET           ; Return
; This entry point is used by the routine at #R$6965.
*$714C PUSH BC       ; {Push #REGbc, #REGde and #REGhl onto the stack
 $714D PUSH DE       ;
 $714E PUSH HL       ; }
 $714F LD L,A        ; #REGl=#REGa
 $7150 LD H,$00      ; #REGh=$00
 $7152 ADD HL,HL     ; {Add #REGhl to itself 3 times
 $7153 ADD HL,HL     ;
 $7154 ADD HL,HL     ; }
 $7155 LD DE,($5C36) ; #HTML(#REGde=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C36.html">CHARS</a>.)
 $7159 ADD HL,DE     ; Add #REGde to #REGhl
 $715A EX DE,HL      ; Exchanges #REGhl with #REGde
 $715B POP HL        ; Fetch #REGhl off the stack
; This entry point is used by the routine at #R$6965.
*$715C LD B,$08      ; #REGb=$08
; This entry point is used by the routine at #R$71B8.
*$715E LD A,(DE)     ;
 $715F LD (HL),A     ;
 $7160 INC DE        ;
 $7161 INC H         ;
 $7162 DJNZ $715E    ; Decrease #REGb by one, and loop back to #R$715E until
                     ; zero
 $7164 POP DE        ; {Fetch #REGde and #REGbc back off the stack
 $7165 POP BC        ; }
 $7166 LD A,H        ;
 $7167 SUB $08       ;
 $7169 LD H,A        ;
 $716A INC L         ;
 $716B RET           ; Return
; This entry point is used by the routines at #R$608A, #R$6260 and #R$7192.
*$716C PUSH HL       ;
 $716D CALL $7308    ;
 $7170 LD A,(DE)     ;
 $7171 EX AF,AF'     ;
 $7172 INC DE        ;
 $7173 EXX           ;
 $7174 POP HL        ;
 $7175 CALL $720E    ;
; This entry point is used by the routine at #R$62FF.
*$7178 EXX           ; Exchange #REGbc, #REGde, and #REGhl with shadow
                     ; registers with #REGbc', #REGde', and #REGhl'
 $7179 LD A,(DE)     ;
 $717A BIT 7,A       ;
 $717C JR NZ,$7189   ;
 $717E CALL $714C    ;
 $7181 INC DE        ;
 $7182 EXX           ;
 $7183 EX AF,AF'     ;
 $7184 LD (HL),A     ;
 $7185 INC L         ;
 $7186 EX AF,AF'     ;
 $7187 JR $7178      ;
*$7189 AND $7F       ;
 $718B CALL $714C    ;
 $718E EXX           ;
 $718F EX AF,AF'     ;
 $7190 LD (HL),A     ;
 $7191 RET           ; Return

; Routine at 7192
;
; Used by the routine at #R$608A.
@label=SCORE_LABELS
c$7192 LD HL,$0018   ; #REGhl=$0018
 $7195 LD DE,$71AD   ; #REGde=$71AD
 $7198 CALL $716C    ;
 $719B LD HL,$0078   ; #REGhl=$0078
 $719E LD DE,$71B5   ; #REGde=$71B5
 $71A1 CALL $716C    ;
 $71A4 LD HL,$00D8   ; #REGhl=$00D8
 $71A7 LD DE,$71B1   ; #REGde=$71B1
 $71AA JP $716C      ;
 $71AD LD B,A        ;
 $71AE LD SP,$D055   ;
 $71B1 LD B,A        ;
 $71B2 LD ($D055),A  ;
 $71B5 LD B,L        ;
 $71B6 LD C,B        ;
 $71B7 RET           ;

; Routine at 71B8
;
; Clears the screen
@label=CLEAR_PIXELS
c$71B8 LD HL,$4000     ; #REGhl=Start of the screen buffer
 $71BB LD B,$58        ; #REGb=$58
; This entry point is used by the routine at #R$630F.
*$71BD LD C,$00        ; #REGc=0
*$71BF LD (HL),C       ; Send #REGc (0) to #REGhl (clearing the screen)
 $71C0 INC HL          ;
 $71C1 LD A,H          ; {Loop back when #REGh=#REGb (i.e. when #REGhl reaches
 $71C2 CP B            ; $5800)
 $71C3 JR C,$71BF      ; }
 $71C5 RET             ; Return
; Reset the screen colours
@label=CLEAR_ATTRIBUTES
*$71C6 LD HL,$5800     ; #REGhl=Start of the attribute buffer
 $71C9 LD B,$5B        ; #REGb=$5B End of the attribute space
 $71CB LD C,$47        ; #REGc=$47
 $71CD JR $71BF        ; Runs the #R$71BF loop again to set all the attributes
                       ; to #REGc ($47=PAPER:Black;INK:While;BRIGHT)
; This entry point is used by the routines at #R$63DA, #R$67ED and #R$6965.
*$71CF EXX             ;
 $71D0 LD HL,($5DCF)   ;
 $71D3 CALL $720E      ;
 $71D6 LD A,($5DC4)    ;
 $71D9 LD B,A          ;
 $71DA LD A,($5DC3)    ;
 $71DD RRCA            ;
 $71DE RRCA            ;
 $71DF INC A           ;
 $71E0 RRCA            ;
 $71E1 AND $1F         ;
 $71E3 INC A           ;
 $71E4 LD C,A          ;
 $71E5 LD D,(IX+$03)   ;
 $71E8 LD E,B          ;
*$71E9 PUSH HL         ;
*$71EA LD A,H          ;
 $71EB CP $5B          ;
 $71ED JR NC,$7200     ;
 $71EF CP $58          ;
 $71F1 JR C,$7200      ;
 $71F3 LD (HL),D       ;
 $71F4 INC L           ;
 $71F5 LD A,L          ;
 $71F6 AND $1F         ;
 $71F8 JR NZ,$71FE     ;
 $71FA LD A,L          ;
 $71FB SUB $20         ;
 $71FD LD L,A          ;
*$71FE DJNZ $71EA      ; Decrease #REGb by one, and loop back to #R$71EA until
                       ; zero
*$7200 POP HL          ;
 $7201 PUSH BC         ;
 $7202 AND A           ;
 $7203 LD BC,$0020     ;
 $7206 SBC HL,BC       ;
 $7208 POP BC          ;
 $7209 LD B,E          ;
 $720A DEC C           ;
 $720B JR NZ,$71E9     ;
 $720D RET             ;
; This entry point is used by the routines at #R$608A, #R$62FF, #R$6965 and
; #R$711C.
*$720E LD A,L          ;
 $720F RRCA            ;
 $7210 RRCA            ;
 $7211 RRCA            ;
 $7212 AND $1F         ;
 $7214 LD L,A          ;
 $7215 LD A,H          ;
 $7216 RLCA            ;
 $7217 RLCA            ;
 $7218 LD C,A          ;
 $7219 AND $E0         ;
 $721B OR L            ;
 $721C LD L,A          ;
 $721D LD A,C          ;
 $721E AND $03         ;
 $7220 OR $58          ;
 $7222 LD H,A          ;
 $7223 RET             ;
*$7224 CALL $72C1      ;
*$7227 LD HL,($5DC0)   ;
; This entry point is used by the routine at #R$67ED.
*$722A LD A,(DE)       ;
 $722B INC DE          ;
 $722C ADD A,L         ;
 $722D LD L,A          ;
 $722E CALL $7308      ;
 $7231 LD A,(DE)       ;
 $7232 LD B,A          ;
 $7233 INC DE          ;
 $7234 LD A,(DE)       ;
 $7235 LD ($5DC5),A    ;
*$7238 LD C,$00        ;
 $723A INC DE          ;
 $723B RET             ;
*$723C CALL $72E3      ;
*$723F LD L,(IX+$01)   ;
 $7242 LD H,(IX+$02)   ;
 $7245 LD A,(DE)       ;
 $7246 INC DE          ;
 $7247 ADD A,L         ;
 $7248 LD L,A          ;
 $7249 LD ($5DCF),HL   ;
 $724C CALL $7308      ;
 $724F LD A,(DE)       ;
 $7250 LD B,A          ;
 $7251 LD ($5DC4),A    ;
 $7254 INC DE          ;
 $7255 LD A,(DE)       ;
 $7256 LD ($5DC6),A    ;
 $7259 LD ($5DC3),A    ;
 $725C JR $7238        ;
; This entry point is used by the routine at #R$63DA.
*$725E PUSH DE         ;
 $725F CALL $7227      ;
 $7262 EXX             ;
 $7263 POP DE          ;
 $7264 CALL $723F      ;
 $7267 EXX             ;
 $7268 JR $7271        ;
; This entry point is used by the routines at #R$63DA and #R$6965.
*$726A CALL $723C      ;
 $726D EXX             ;
 $726E CALL $7224      ;
*$7271 LD A,($5DC1)    ;
 $7274 SUB (IX+$02)    ;
 $7277 JP Z,$777D      ;
 $727A JP M,$728C      ;
 $727D LD C,A          ;
 $727E LD A,($5DC5)    ;
 $7281 CP C            ;
 $7282 JP C,$777D      ;
 $7285 SUB C           ;
 $7286 LD ($5DC5),A    ;
 $7289 JP $773A        ;
*$728C EXX             ;
 $728D NEG             ;
 $728F LD C,A          ;
 $7290 LD A,($5DC6)    ;
 $7293 CP C            ;
 $7294 JP C,$777C      ;
 $7297 SUB C           ;
 $7298 JP $7790        ;
; This entry point is used by the routines at #R$63DA and #R$67ED.
*$729B CALL $723F      ;
 $729E JR $72B8        ;
; This entry point is used by the routine at #R$63DA.
*$72A0 CALL $7227      ;
 $72A3 JR $72A8        ;
; This entry point is used by the routines at #R$63DA and #R$67ED.
*$72A5 CALL $7224      ;
; This entry point is used by the routine at #R$67ED.
*$72A8 EXX             ;
 $72A9 XOR A           ;
 $72AA LD C,A          ;
 $72AB LD ($5DC6),A    ;
 $72AE LD ($5DC3),A    ;
 $72B1 EXX             ;
 $72B2 JP $773A        ;
 $72B5 CALL $723C      ;
*$72B8 EXX             ;
 $72B9 XOR A           ;
 $72BA LD ($5DC5),A    ;
 $72BD LD C,A          ;
 $72BE JP $773A        ;
*$72C1 LD A,($5DC0)    ;
 $72C4 AND $06         ;
 $72C6 LD C,A          ;
 $72C7 LD A,($5DC2)    ;
*$72CA BIT 6,A         ;
 $72CC JR Z,$72D0      ;
 $72CE SET 3,C         ;
*$72D0 DEC A           ;
 $72D1 RLCA            ;
 $72D2 RLCA            ;
 $72D3 RLCA            ;
 $72D4 RLCA            ;
 $72D5 AND $F0         ;
 $72D7 OR C            ;
 $72D8 LD C,A          ;
 $72D9 LD B,$00        ;
 $72DB LD HL,$76FA     ;
 $72DE ADD HL,BC       ;
 $72DF LD E,(HL)       ;
 $72E0 INC HL          ;
 $72E1 LD D,(HL)       ;
 $72E2 RET             ;
*$72E3 LD A,(IX+$01)   ;
 $72E6 AND $06         ;
 $72E8 LD C,A          ;
 $72E9 LD A,(IX+$00)   ;
 $72EC JR $72CA        ;
; This entry point is used by the routine at #R$7758.
*$72EE DEC H           ;
 $72EF LD A,H          ;
 $72F0 AND $07         ;
 $72F2 CP $07          ;
 $72F4 RET NZ          ;
 $72F5 LD A,L          ;
 $72F6 SUB $20         ;
 $72F8 LD L,A          ;
 $72F9 AND $E0         ;
 $72FB CP $E0          ;
 $72FD RET Z           ;
 $72FE LD A,H          ;
 $72FF ADD A,$08       ;
 $7301 LD H,A          ;
 $7302 RET             ;
 $7303 LD A,L          ;
 $7304 SUB $20         ;
 $7306 LD L,A          ;
 $7307 RET             ;
; This entry point is used by the routines at #R$62FF, #R$6965 and #R$711C.
*$7308 LD A,L          ;
 $7309 RRCA            ;
 $730A RRCA            ;
 $730B RRCA            ;
 $730C AND $1F         ;
 $730E LD L,A          ;
 $730F LD A,H          ;
 $7310 RLCA            ;
 $7311 RLCA            ;
 $7312 AND $E0         ;
 $7314 OR L            ;
 $7315 LD L,A          ;
 $7316 LD A,H          ;
 $7317 AND $07         ;
 $7319 EX AF,AF'       ;
 $731A LD A,H          ;
 $731B RRCA            ;
 $731C RRCA            ;
 $731D RRCA            ;
 $731E AND $18         ;
 $7320 OR $40          ;
 $7322 LD H,A          ;
 $7323 EX AF,AF'       ;
 $7324 OR H            ;
 $7325 LD H,A          ;
 $7326 RET             ;
; This entry point is used by the routines at #R$63DA, #R$67ED and #R$6965.
@label=MOVE_JETMAN_POS
*$7327 LD A,(IX+$01)   ; {Copy #R$5D01 to $5DC0
 $732A LD ($5DC0),A    ; }
 $732D LD A,(IX+$02)   ; {Copy #R$5D02 to $5DC1
 $7330 LD ($5DC1),A    ; }
 $7333 LD A,(IX+$00)   ; {Copy #R$5D00 to $5DC2
 $7336 LD ($5DC2),A    ; }
 $7339 RET             ; Return
*$733A IN A,($1F)      ;
 $733C CPL             ;
 $733D RET             ;
*$733E LD A,($5CF3)    ;
 $7341 BIT 1,A         ;
 $7343 JR NZ,$733A     ;
 $7345 LD A,$FE        ;
 $7347 OUT ($FD),A     ;
 $7349 IN A,($FE)      ;
 $734B AND $1E         ;
 $734D CP $1E          ;
 $734F JR Z,$7359      ;
 $7351 AND $14         ;
 $7353 CP $14          ;
 $7355 JR Z,$736B      ;
 $7357 JR $736E        ;
*$7359 LD A,$7F        ;
 $735B OUT ($FD),A     ;
 $735D IN A,($FE)      ;
 $735F AND $1E         ;
 $7361 CP $1E          ;
 $7363 JR Z,$7371      ;
 $7365 AND $14         ;
 $7367 CP $14          ;
 $7369 JR Z,$736E      ;
*$736B LD A,$FD        ;
 $736D RET             ;
*$736E LD A,$FE        ;
 $7370 RET             ;
*$7371 LD A,$FF        ;
 $7373 RET             ;
*$7374 LD A,($5CF3)    ;
 $7377 BIT 1,A         ;
 $7379 JR NZ,$733A     ;
 $737B LD B,$02        ;
 $737D LD A,$FD        ;
*$737F OUT ($FD),A     ;
 $7381 IN A,($FE)      ;
 $7383 AND $1F         ;
 $7385 CP $1F          ;
 $7387 JR NZ,$7390     ;
 $7389 LD A,$BF        ;
 $738B DJNZ $737F      ; Decrease #REGb by one, and loop back to #R$737F until
                       ; zero
 $738D LD A,$FF        ;
 $738F RET             ;
*$7390 LD A,$EF        ;
 $7392 RET             ;
*$7393 LD A,($5CF3)    ;
 $7396 BIT 1,A         ;
 $7398 JR NZ,$733A     ;
 $739A LD B,$02        ;
 $739C LD A,$FB        ;
*$739E OUT ($FD),A     ;
 $73A0 IN A,($FE)      ;
 $73A2 AND $1F         ;
 $73A4 CP $1F          ;
 $73A6 JR NZ,$73AF     ;
 $73A8 LD A,$DF        ;
 $73AA DJNZ $739E      ; Decrease #REGb by one, and loop back to #R$739E until
                       ; zero
 $73AC LD A,$FF        ;
 $73AE RET             ;
*$73AF LD A,$F7        ;
 $73B1 RET             ;
 $73B2 LD HL,$5DD7     ;
 $73B5 LD A,(HL)       ;
 $73B6 AND A           ;
 $73B7 JR Z,$73D3      ;
 $73B9 DEC (HL)        ;
 $73BA JP NZ,$61BD     ;
 $73BD CALL $6809      ;
 $73C0 LD A,($5DD1)    ;
 $73C3 AND A           ;
 $73C4 JR NZ,$73CE     ;
 $73C6 LD HL,$0018     ;
*$73C9 CALL $61D3      ;
 $73CC JR $73D3        ;
*$73CE LD HL,$00D8     ;
 $73D1 JR $73C9        ;
*$73D3 CALL $7327      ;
 $73D6 CALL $733E      ;
 $73D9 BIT 0,A         ;
 $73DB JP Z,$73ED      ;
 $73DE BIT 1,A         ;
 $73E0 JP Z,$7536      ;
 $73E3 LD A,($5DCC)    ;
 $73E6 AND $01         ;
 $73E8 JR Z,$740F      ;
 $73EA JP $7562        ;
*$73ED RES 6,(IX+$00)  ;
 $73F1 BIT 6,(IX+$04)  ;
 $73F5 JP NZ,$7541     ;
*$73F8 LD A,($5DCA)    ;
 $73FB NEG             ;
 $73FD ADD A,$08       ;
 $73FF ADD A,(IX+$05)  ;
 $7402 CP $40          ;
 $7404 JR NC,$740B     ;
*$7406 LD (IX+$05),A   ;
 $7409 JR $740F        ;
*$740B LD (IX+$05),$40 ;
*$740F LD H,$00        ;
 $7411 LD L,(IX+$05)   ;
 $7414 ADD HL,HL       ;
 $7415 ADD HL,HL       ;
 $7416 ADD HL,HL       ;
 $7417 LD D,(IX+$01)   ;
 $741A LD A,($5DC7)    ;
 $741D LD E,A          ;
 $741E BIT 6,(IX+$04)  ;
 $7422 JP NZ,$752F     ;
 $7425 ADD HL,DE       ;
*$7426 LD A,L          ;
 $7427 LD ($5DC7),A    ;
 $742A LD (IX+$01),H   ;
 $742D LD A,($5CF3)    ;
 $7430 BIT 1,A         ;
 $7432 JP NZ,$7473     ;
 $7435 LD B,$02        ;
 $7437 LD A,$EF        ;
*$7439 OUT ($FD),A     ;
 $743B IN A,($FE)      ;
 $743D AND $1F         ;
 $743F CP $1F          ;
 $7441 JR NZ,$746D     ;
 $7443 LD A,$F7        ;
 $7445 DJNZ $7439      ; Decrease #REGb by one, and loop back to #R$7439 until
                       ; zero
*$7447 CALL $7393      ;
 $744A BIT 3,A         ;
 $744C JP NZ,$750A     ;
 $744F RES 7,(IX+$00)  ;
 $7453 BIT 7,(IX+$04)  ;
 $7457 JP NZ,$7515     ;
*$745A LD A,($5DCA)    ;
 $745D NEG             ;
 $745F ADD A,$08       ;
 $7461 ADD A,(IX+$06)  ;
 $7464 CP $3F          ;
 $7466 JR NC,$747D     ;
*$7468 LD (IX+$06),A   ;
 $746B JR $7481        ;
*$746D LD (IX+$06),$00 ;
 $7471 JR $7481        ;
*$7473 CALL $733A      ;
 $7476 BIT 2,A         ;
 $7478 JP Z,$746D      ;
 $747B JR $7447        ;
*$747D LD (IX+$06),$3F ;
*$7481 LD L,(IX+$06)   ;
 $7484 LD H,$00        ;
 $7486 ADD HL,HL       ;
 $7487 ADD HL,HL       ;
 $7488 ADD HL,HL       ;
 $7489 LD D,(IX+$02)   ;
 $748C LD A,($5DC8)    ;
 $748F LD E,A          ;
 $7490 BIT 7,(IX+$04)  ;
 $7494 JP Z,$755B      ;
 $7497 ADD HL,DE       ;
*$7498 LD A,L          ;
 $7499 LD ($5DC8),A    ;
 $749C LD (IX+$02),H   ;
 $749F LD A,H          ;
 $74A0 CP $C0          ;
 $74A2 JR NC,$74F4     ;
 $74A4 CP $2A          ;
 $74A6 JR C,$74FA      ;
*$74A8 CALL $761D      ;
 $74AB BIT 2,E         ;
 $74AD JR Z,$74C7      ;
 $74AF BIT 7,E         ;
 $74B1 JP NZ,$74DC     ;
 $74B4 BIT 4,E         ;
 $74B6 JR NZ,$74D6     ;
 $74B8 LD A,E          ;
 $74B9 XOR $40         ;
 $74BB AND $40         ;
 $74BD LD E,A          ;
 $74BE LD A,(IX+$04)   ;
 $74C1 AND $BF         ;
 $74C3 OR E            ;
 $74C4 LD (IX+$04),A   ;
*$74C7 CALL $726A      ;
 $74CA CALL $71CF      ;
 $74CD CALL $7374      ;
 $74D0 BIT 4,A         ;
 $74D2 CALL Z,$6F91    ;
 $74D5 RET             ;
*$74D6 SET 7,(IX+$04)  ;
 $74DA JR $74C7        ;
*$74DC RES 7,(IX+$04)  ;
 $74E0 LD A,(IX+$00)   ;
 $74E3 AND $C0         ;
 $74E5 OR $02          ;
 $74E7 LD (IX+$00),A   ;
 $74EA LD (IX+$05),$00 ;
 $74EE LD (IX+$06),$00 ;
 $74F2 JR $74C7        ;
*$74F4 RES 7,(IX+$04)  ;
 $74F8 JR $74A8        ;
*$74FA SET 7,(IX+$04)  ;
 $74FE LD A,(IX+$06)   ;
 $7501 SRL A           ;
 $7503 JR Z,$74A8      ;
 $7505 LD (IX+$06),A   ;
 $7508 JR $74A8        ;
*$750A SET 7,(IX+$00)  ;
 $750E BIT 7,(IX+$04)  ;
 $7512 JP NZ,$745A     ;
*$7515 LD A,($5DCA)    ;
 $7518 SUB $08         ;
 $751A ADD A,(IX+$06)  ;
 $751D JP P,$7468      ;
 $7520 LD (IX+$06),$00 ;
 $7524 LD A,(IX+$04)   ;
 $7527 XOR $80         ;
 $7529 LD (IX+$04),A   ;
 $752C JP $7481        ;
*$752F AND A           ;
 $7530 EX DE,HL        ;
 $7531 SBC HL,DE       ;
 $7533 JP $7426        ;
*$7536 SET 6,(IX+$00)  ;
 $753A BIT 6,(IX+$04)  ;
 $753E JP NZ,$73F8     ;
*$7541 LD A,($5DCA)    ;
 $7544 SUB $08         ;
 $7546 ADD A,(IX+$05)  ;
 $7549 JP P,$7406      ;
 $754C LD (IX+$05),$00 ;
 $7550 LD A,(IX+$04)   ;
 $7553 XOR $40         ;
 $7555 LD (IX+$04),A   ;
 $7558 JP $740F        ;
*$755B AND A           ;
 $755C EX DE,HL        ;
 $755D SBC HL,DE       ;
 $755F JP $7498        ;
*$7562 LD A,($5DCA)    ;
 $7565 SUB $08         ;
 $7567 ADD A,(IX+$05)  ;
 $756A JP P,$7406      ;
 $756D XOR A           ;
 $756E JP $7406        ;
 $7571 CALL $7327      ;
 $7574 CALL $733E      ;
 $7577 BIT 0,A         ;
 $7579 JR Z,$75E2      ;
 $757B BIT 1,A         ;
 $757D JP Z,$75F4      ;
 $7580 LD (IX+$05),$00 ;
*$7584 CALL $7393      ;
 $7587 BIT 3,A         ;
 $7589 JR Z,$75B4      ;
 $758B CALL $761D      ;
 $758E BIT 2,E         ;
 $7590 JR Z,$75B4      ;
 $7592 BIT 3,E         ;
 $7594 JP Z,$74C7      ;
 $7597 LD A,(IX+$05)   ;
 $759A AND A           ;
 $759B JP NZ,$74C7     ;
 $759E BIT 6,(IX+$00)  ;
 $75A2 JR Z,$75AA      ;
 $75A4 DEC (IX+$01)    ;
 $75A7 JP $74C7        ;
*$75AA INC (IX+$01)    ;
 $75AD LD (IX+$05),$20 ;
 $75B1 JP $74C7        ;
*$75B4 LD A,(IX+$00)   ;
 $75B7 AND $C0         ;
 $75B9 OR $01          ;
 $75BB LD (IX+$00),A   ;
 $75BE LD HL,($5D01)   ;
 $75C1 PUSH IX         ;
 $75C3 LD IX,$5D48     ;
 $75C7 LD A,(IX+$00)   ;
 $75CA AND A           ;
 $75CB JR NZ,$75D7     ;
 $75CD LD (IX+$00),$03 ;
 $75D1 LD ($5D49),HL   ;
 $75D4 CALL $6894      ;
*$75D7 POP IX          ;
 $75D9 DEC (IX+$02)    ;
 $75DC DEC (IX+$02)    ;
 $75DF JP $74C7        ;
*$75E2 INC (IX+$01)    ;
 $75E5 RES 6,(IX+$00)  ;
 $75E9 RES 6,(IX+$04)  ;
 $75ED LD (IX+$05),$20 ;
 $75F1 JP $7584        ;
*$75F4 DEC (IX+$01)    ;
 $75F7 SET 6,(IX+$00)  ;
 $75FB SET 6,(IX+$04)  ;
 $75FF LD (IX+$05),$20 ;
 $7603 JP $7584        ;
*$7606 EX AF,AF'       ;
 $7607 LD A,(IX+$00)   ;
 $760A AND $3F         ;
 $760C CP $03          ;
 $760E JR Z,$7613      ;
 $7610 EX AF,AF'       ;
 $7611 JR $7631        ;
*$7613 EX AF,AF'       ;
 $7614 SUB $09         ;
 $7616 JP P,$7631      ;
 $7619 ADD A,$09       ;
 $761B JR $7631        ;
; This entry point is used by the routines at #R$63DA and #R$6965.
*$761D LD B,$04        ;
 $761F LD HL,$6000     ;
*$7622 LD E,$00        ;
 $7624 PUSH HL         ;
 $7625 INC HL          ;
 $7626 LD A,(HL)       ;
 $7627 SUB (IX+$01)    ;
 $762A JP P,$7606      ;
 $762D NEG             ;
 $762F SET 6,E         ;
*$7631 INC HL          ;
 $7632 INC HL          ;
 $7633 CP (HL)         ;
 $7634 JP NC,$7665     ;
 $7637 ADD A,$12       ;
 $7639 CP (HL)         ;
 $763A JP C,$763F      ;
 $763D SET 3,E         ;
*$763F DEC HL          ;
 $7640 LD A,(HL)       ;
 $7641 SUB (IX+$02)    ;
 $7644 NEG             ;
 $7646 INC A           ;
 $7647 INC A           ;
 $7648 JP M,$7665      ;
 $764B CP $02          ;
 $764D JR C,$7661      ;
 $764F CP (IX+$07)     ;
 $7652 JR C,$765D      ;
 $7654 DEC A           ;
 $7655 DEC A           ;
 $7656 CP (IX+$07)     ;
 $7659 JR NC,$7665     ;
 $765B SET 4,E         ;
*$765D SET 2,E         ;
 $765F POP HL          ;
 $7660 RET             ;
*$7661 SET 7,E         ;
 $7663 JR $765D        ;
*$7665 POP HL          ;
 $7666 INC HL          ;
 $7667 INC HL          ;
 $7668 INC HL          ;
 $7669 INC HL          ;
 $766A DJNZ $7622      ; Decrease #REGb by one, and loop back to #R$7622 until
                       ; zero
 $766C RET             ;
; This entry point is used by the routine at #R$608A.
*$766D LD B,$04        ;
 $766F LD HL,$6000     ;
*$7672 PUSH BC         ;
 $7673 LD A,(HL)       ;
 $7674 AND A           ;
 $7675 JP Z,$76D3      ;
 $7678 INC HL          ;
 $7679 LD C,(HL)       ;
 $767A INC HL          ;
 $767B INC HL          ;
 $767C LD A,(HL)       ;
 $767D AND $FC         ;
 $767F NEG             ;
 $7681 ADD A,C         ;
 $7682 ADD A,$10       ;
 $7684 PUSH HL         ;
 $7685 DEC HL          ;
 $7686 LD H,(HL)       ;
 $7687 LD L,A          ;
 $7688 CALL $7308      ;
 $768B LD DE,$76E2     ;
 $768E CALL $76DB      ;
 $7691 EX (SP),HL      ;
 $7692 LD A,(HL)       ;
 $7693 EX (SP),HL      ;
 $7694 SRL A           ;
 $7696 SRL A           ;
 $7698 SUB $04         ;
 $769A LD B,A          ;
 $769B LD DE,$76EA     ;
*$769E CALL $76DB      ;
 $76A1 DJNZ $769E      ; Decrease #REGb by one, and loop back to #R$769E until
                       ; zero
 $76A3 LD DE,$76F2     ;
 $76A6 CALL $76DB      ;
 $76A9 POP HL          ;
 $76AA LD A,(HL)       ;
 $76AB AND $FC         ;
 $76AD NEG             ;
 $76AF ADD A,C         ;
 $76B0 ADD A,$10       ;
 $76B2 PUSH HL         ;
 $76B3 DEC HL          ;
 $76B4 LD B,(HL)       ;
 $76B5 DEC HL          ;
 $76B6 DEC HL          ;
 $76B7 LD C,(HL)       ;
 $76B8 LD H,B          ;
 $76B9 LD L,A          ;
 $76BA PUSH BC         ;
 $76BB CALL $720E      ;
 $76BE POP BC          ;
 $76BF EX (SP),HL      ;
 $76C0 LD A,(HL)       ;
 $76C1 EX (SP),HL      ;
 $76C2 SRL A           ;
 $76C4 SRL A           ;
 $76C6 SUB $02         ;
 $76C8 LD B,A          ;
 $76C9 LD A,C          ;
*$76CA LD (HL),A       ;
 $76CB INC HL          ;
 $76CC DJNZ $76CA      ; Decrease #REGb by one, and loop back to #R$76CA until
                       ; zero
 $76CE POP HL          ;
 $76CF INC HL          ;
 $76D0 POP BC          ;
 $76D1 JR $76D8        ;
*$76D3 POP BC          ;
 $76D4 INC HL          ;
 $76D5 INC HL          ;
 $76D6 INC HL          ;
 $76D7 INC HL          ;
*$76D8 DJNZ $7672      ; Decrease #REGb by one, and loop back to #R$7672 until
                       ; zero
 $76DA RET             ;
*$76DB PUSH BC         ;
 $76DC PUSH DE         ;
 $76DD LD B,$08        ;
 $76DF JP $715E        ;

; Platform Graphics
;
; Middle section repeats for both floor and platforms
;
; .
;
; #UDGARRAY6,attr=4,scale=4;(#PC);(#PC+$08)x4;(#PC+$10)(platform)
; .
; #UDGARRAY6,attr=6,scale=4;(#PC);(#PC+$08)x2;(#PC+$10)(floor)
; .
; Left-hand Platform UDG
@label=PLATFORM
b$76E2 DEFB $2F,$7F,$FF,$DD,$FB,$7B,$71,$21 ; #UDG#(#PC),attr=4
; Middle Platform UDG
 $76EA DEFB $BD,$FF,$FF,$F7,$EB,$DD,$AD,$04 ; #UDG#(#PC),attr=4
; Right-hand Platform UDG
 $76F2 DEFB $4C,$FE,$FF,$3E,$FF,$FE,$9C,$08 ; #UDG#(#PC),attr=4

; Jetman Sprite Table
@label=JetmanSpritesTable
w$76FA DEFW $7796    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $76FC DEFW $77C9    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $76FE DEFW $7814    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7700 DEFW $785F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7702 DEFW $795B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7704 DEFW $7910    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7706 DEFW $78DD    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7708 DEFW $78AA    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $770A DEFW $7AA2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $770C DEFW $7AD5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $770E DEFW $7B08    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7710 DEFW $7B53    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7712 DEFW $7A57    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7714 DEFW $7A0C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7716 DEFW $79D9    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
 $7718 DEFW $79A6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#N((#PC - $76FA) / 2)).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #LUNARJETMAN$BAC0 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Data block at 771A
w$771A DEFW $5E00
 $771C DEFW $5E00
 $771E DEFW $5E33
 $7720 DEFW $5E33
 $7722 DEFW $5E99
 $7724 DEFW $5E99
 $7726 DEFW $5E66
 $7728 DEFW $5E66
 $772A DEFW $5ECC
 $772C DEFW $5EFF
 $772E DEFW $5F32
 $7730 DEFW $5F65
 $7732 DEFW $5F65
 $7734 DEFW $5F32
 $7736 DEFW $5EFF
 $7738 DEFW $5ECC
*$773A DEFW $A779
 $773C DEFW $3928
 $773E DEFW $C50D
 $7740 DEFW $1AE5
 $7742 DEFW $A62F
 $7744 DEFW $1377
 $7746 DEFW $7D2C
 $7748 DEFW $1FE6
 $774A DEFW $0420
 $774C DEFW $D67D
 $774E DEFW $6F20
 $7750 DEFW $EF10
 $7752 DEFW $CDE1
 $7754 DEFW $72EE
 $7756 DEFW $D9C1

; Routine at 7758
c$7758 LD A,C        ;
 $7759 AND A         ;
 $775A JR Z,$7774    ;
*$775C DEC C         ;
 $775D PUSH BC       ;
 $775E PUSH HL       ;
*$775F LD A,(DE)     ;
 $7760 OR (HL)       ;
 $7761 LD (HL),A     ;
 $7762 INC DE        ;
 $7763 INC L         ;
 $7764 LD A,L        ;
 $7765 AND $1F       ;
 $7767 JR NZ,$776D   ;
 $7769 LD A,L        ;
 $776A SUB $20       ;
 $776C LD L,A        ;
*$776D DJNZ $775F    ;
 $776F POP HL        ;
 $7770 CALL $72EE    ;
 $7773 POP BC        ;
*$7774 EXX           ;
 $7775 JR $773A      ;
 $7777 EXX           ;
 $7778 LD A,C        ;
 $7779 AND A         ;
 $777A JR NZ,$775C   ;
; This entry point is used by the routine at #R$71B8.
*$777C EXX           ;
; This entry point is used by the routine at #R$71B8.
*$777D LD A,($5DC5)  ;
 $7780 LD C,A        ;
 $7781 LD A,($5DC6)  ;
 $7784 OR C          ;
 $7785 RET Z         ;
 $7786 XOR A         ;
 $7787 LD ($5DC5),A  ;
 $778A EXX           ;
 $778B LD A,($5DC6)  ;
 $778E LD C,A        ;
 $778F XOR A         ;
; This entry point is used by the routine at #R$71B8.
*$7790 LD ($5DC6),A  ;
 $7793 EXX           ;
 $7794 JR $773A      ;

; JetMan Graphics
;
; .
;
; .
;
; Flying Frame Right 1
b$7796 DEFB $00                             ; Terminator.
 $7797 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $7798 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7799 DEFB $10,$00,$20,$00,$D8,$00,$44,$00 ; {#JETMAN$00(fly-r-1)
 $77A1 DEFB $38,$00,$50,$1E,$00,$1C,$7C,$00 ;
 $77A9 DEFB $54,$18,$29,$F8,$3D,$F8,$7B,$80 ;
 $77B1 DEFB $5B,$C0,$74,$3E,$54,$D0,$74,$D0 ;
 $77B9 DEFB $57,$80,$60,$00,$67,$C0,$2E,$E0 ;
 $77C1 DEFB $2E,$E0,$2D,$E0,$0E,$00,$07,$80 ; }
; Flying Frame Right 2
 $77C9 DEFB $00                             ; Terminator.
 $77CA DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $77CB DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $77CC DEFB $0A,$00,$00,$50,$00,$00,$05,$00 ; {#JETMAN$01(fly-r-2)
 $77D4 DEFB $00,$0A,$00,$00,$08,$80,$00,$15 ;
 $77DC DEFB $07,$80,$00,$07,$00,$1F,$00,$00 ;
 $77E4 DEFB $15,$06,$00,$0A,$7E,$00,$0F,$7E ;
 $77EC DEFB $00,$1E,$E0,$00,$16,$F0,$00,$1D ;
 $77F4 DEFB $0F,$80,$15,$34,$00,$1D,$34,$00 ;
 $77FC DEFB $15,$E0,$00,$18,$00,$00,$19,$F0 ;
 $7804 DEFB $00,$0B,$B8,$00,$0B,$B8,$00,$0B ;
 $780C DEFB $78,$00,$03,$80,$00,$01,$E0,$00 ; }
; Flying Frame Right 3
 $7814 DEFB $00                             ; Terminator.
 $7815 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7816 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7817 DEFB $01,$00,$00,$04,$00,$00,$10,$80 ; {#JETMAN$02(fly-r-3)
 $781F DEFB $00,$06,$00,$00,$00,$80,$00,$06 ;
 $7827 DEFB $C1,$E0,$00,$01,$C0,$07,$C0,$00 ;
 $782F DEFB $05,$41,$80,$02,$9F,$80,$03,$DF ;
 $7837 DEFB $80,$07,$B8,$00,$05,$BC,$00,$07 ;
 $783F DEFB $43,$E0,$05,$4D,$00,$07,$4D,$00 ;
 $7847 DEFB $05,$78,$00,$06,$00,$00,$06,$7C ;
 $784F DEFB $00,$02,$EE,$00,$02,$EE,$00,$02 ;
 $7857 DEFB $DE,$00,$00,$E0,$00,$00,$78,$00 ; }
; Flying Frame Right 4
 $785F DEFB $00                             ; Terminator.
 $7860 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7861 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7862 DEFB $08,$00,$00,$00,$80,$00,$09,$20 ; {#JETMAN$03(fly-r-4)
 $786A DEFB $00,$02,$40,$00,$00,$90,$00,$02 ;
 $7872 DEFB $D0,$78,$00,$00,$70,$01,$F0,$00 ;
 $787A DEFB $01,$50,$60,$00,$A7,$E0,$00,$F7 ;
 $7882 DEFB $E0,$01,$EE,$00,$01,$6F,$00,$01 ;
 $788A DEFB $D0,$F8,$01,$53,$40,$01,$D3,$40 ;
 $7892 DEFB $01,$5E,$00,$01,$80,$00,$01,$9F ;
 $789A DEFB $00,$00,$BB,$80,$00,$BB,$80,$00 ;
 $78A2 DEFB $B7,$80,$00,$38,$00,$00,$1E,$00 ; }
; Flying Frame Left 1
 $78AA DEFB $08                             ; Terminator.
 $78AB DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $78AC DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $78AD DEFB $00,$08,$00,$04,$00,$1B,$00,$22 ; {#JETMAN$07(fly-l-1)
 $78B5 DEFB $00,$1C,$78,$0A,$38,$00,$00,$3E ;
 $78BD DEFB $18,$2A,$1F,$94,$1F,$BC,$01,$DE ;
 $78C5 DEFB $03,$DA,$7C,$2E,$0B,$2A,$0B,$2E ;
 $78CD DEFB $01,$EA,$00,$06,$03,$E6,$07,$74 ;
 $78D5 DEFB $07,$74,$07,$B4,$00,$70,$01,$E0 ; }
; Flying Frame Left 2
 $78DD DEFB $08                             ; Terminator.
 $78DE DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $78DF DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $78E0 DEFB $00,$50,$00,$0A,$00,$A0,$00,$50 ; {#JETMAN$06(fly-l-2)
 $78E8 DEFB $01,$10,$E0,$A8,$E0,$00,$00,$F8 ;
 $78F0 DEFB $60,$A8,$7E,$50,$7E,$F0,$07,$78 ;
 $78F8 DEFB $0F,$68,$F0,$B8,$2C,$A8,$2C,$B8 ;
 $7900 DEFB $07,$A8,$00,$18,$0F,$98,$1D,$D0 ;
 $7908 DEFB $1D,$D0,$1E,$D0,$01,$C0,$07,$80 ; }
; Flying Frame Left 3
 $7910 DEFB $00                             ; Terminator.
 $7911 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7912 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7913 DEFB $00,$00,$80,$00,$00,$20,$00,$01 ; {#JETMAN$05(fly-l-3)
 $791B DEFB $08,$00,$00,$60,$00,$01,$00,$07 ;
 $7923 DEFB $83,$60,$03,$80,$00,$00,$03,$E0 ;
 $792B DEFB $01,$82,$A0,$01,$F9,$40,$01,$FB ;
 $7933 DEFB $C0,$00,$1D,$E0,$00,$3D,$A0,$07 ;
 $793B DEFB $C2,$E0,$00,$B2,$A0,$00,$B2,$E0 ;
 $7943 DEFB $00,$1E,$A0,$00,$00,$60,$00,$3E ;
 $794B DEFB $60,$00,$77,$40,$00,$77,$40,$00 ;
 $7953 DEFB $7B,$40,$00,$07,$00,$00,$1E,$00 ; }
; Flying Frame Left 4
 $795B DEFB $00                             ; Terminator.
 $795C DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $795D DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $795E DEFB $00,$00,$10,$00,$01,$00,$00,$04 ; {#JETMAN$04(fly-l-4)
 $7966 DEFB $90,$00,$02,$40,$00,$09,$00,$1E ;
 $796E DEFB $0B,$40,$0E,$00,$00,$00,$0F,$80 ;
 $7976 DEFB $06,$0A,$80,$07,$E5,$00,$07,$EF ;
 $797E DEFB $00,$00,$77,$80,$00,$F6,$80,$1F ;
 $7986 DEFB $0B,$80,$02,$CA,$80,$02,$CB,$80 ;
 $798E DEFB $00,$7A,$80,$00,$01,$80,$00,$F9 ;
 $7996 DEFB $80,$01,$DD,$00,$01,$DD,$00,$01 ;
 $799E DEFB $ED,$00,$00,$1C,$00,$00,$78,$00 ; }
; Walking Frame Left 1
 $79A6 DEFB $08                             ; Terminator.
 $79A7 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $79A8 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $79A9 DEFB $00,$00,$00,$00,$07,$80,$03,$80 ; {#JETMAN$0F(wlk-l-1)
 $79B1 DEFB $01,$80,$00,$00,$01,$80,$03,$BE ;
 $79B9 DEFB $03,$AA,$03,$D4,$03,$FC,$03,$BE ;
 $79C1 DEFB $03,$DA,$7C,$2E,$0B,$2A,$0B,$2E ;
 $79C9 DEFB $01,$EA,$00,$06,$03,$E6,$07,$74 ;
 $79D1 DEFB $07,$74,$07,$B4,$00,$70,$01,$E0 ; }
; Walking Frame Left 2
 $79D9 DEFB $08                             ; Terminator.
 $79DA DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $79DB DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $79DC DEFB $00,$00,$00,$00,$7F,$80,$3B,$80 ; {#JETMAN$0E(wlk-l-2)
 $79E4 DEFB $19,$80,$0B,$00,$17,$00,$0E,$F8 ;
 $79EC DEFB $0E,$A8,$0F,$50,$0F,$F0,$0F,$E8 ;
 $79F4 DEFB $0F,$68,$F0,$B8,$2C,$A8,$2C,$B8 ;
 $79FC DEFB $07,$A8,$00,$18,$0F,$98,$1D,$D0 ;
 $7A04 DEFB $1D,$C8,$1E,$C8,$01,$C0,$07,$80 ; }
; Walking Frame Left 3
 $7A0C DEFB $00                             ; Terminator.
 $7A0D DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7A0E DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7A0F DEFB $00,$00,$00,$00,$00,$00,$07,$87 ; {#JETMAN$0D(wlk-l-3)
 $7A17 DEFB $00,$03,$83,$80,$01,$85,$80,$00 ;
 $7A1F DEFB $CE,$00,$00,$DC,$00,$00,$7B,$E0 ;
 $7A27 DEFB $00,$7E,$A0,$00,$3D,$40,$00,$3F ;
 $7A2F DEFB $C0,$00,$3D,$E0,$00,$3D,$A0,$07 ;
 $7A37 DEFB $C2,$E0,$00,$B2,$A0,$00,$B2,$E0 ;
 $7A3F DEFB $00,$1E,$A0,$00,$00,$60,$00,$3E ;
 $7A47 DEFB $60,$00,$77,$40,$00,$77,$40,$00 ;
 $7A4F DEFB $7B,$40,$00,$07,$00,$00,$1E,$00 ; }
; Walking Frame Left 4
 $7A57 DEFB $00                             ; Terminator.
 $7A58 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7A59 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7A5A DEFB $00,$00,$00,$00,$00,$00,$07,$F8 ; {#JETMAN$0C(wlk-l-4)
 $7A62 DEFB $00,$03,$B8,$00,$01,$98,$00,$00 ;
 $7A6A DEFB $B0,$00,$01,$70,$00,$00,$EF,$80 ;
 $7A72 DEFB $00,$EA,$80,$00,$F5,$00,$00,$FF ;
 $7A7A DEFB $00,$00,$F7,$80,$00,$F6,$80,$1F ;
 $7A82 DEFB $0B,$80,$02,$CA,$80,$02,$CB,$80 ;
 $7A8A DEFB $00,$7A,$80,$00,$01,$80,$00,$F1 ;
 $7A92 DEFB $80,$01,$DC,$80,$01,$DC,$80,$01 ;
 $7A9A DEFB $EC,$80,$00,$1C,$00,$00,$78,$00 ; }
; Walking Frame Right 1
 $7AA2 DEFB $00                             ; Terminator.
 $7AA3 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $7AA4 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7AA5 DEFB $00,$00,$00,$00,$01,$E0,$01,$C0 ; {#JETMAN$08(wlk-r-1)
 $7AAD DEFB $01,$80,$00,$00,$01,$80,$7D,$C0 ;
 $7AB5 DEFB $55,$C0,$2B,$C0,$3F,$C0,$7B,$C0 ;
 $7ABD DEFB $5B,$C0,$74,$3E,$54,$D0,$74,$D0 ;
 $7AC5 DEFB $57,$80,$60,$00,$67,$C0,$2E,$E0 ;
 $7ACD DEFB $2E,$E0,$2D,$E0,$0E,$00,$07,$80 ; }
; Walking Frame Right 2
 $7AD5 DEFB $00                             ; Terminator.
 $7AD6 DEFB $02                             ; Width = #N(#PEEK(#PC)) bytes.
 $7AD7 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7AD8 DEFB $00,$00,$00,$00,$01,$FE,$01,$DC ; {#JETMAN$09(wlk-r-2)
 $7AE0 DEFB $01,$98,$00,$D0,$00,$E8,$1F,$70 ;
 $7AE8 DEFB $15,$70,$0A,$F0,$0F,$F0,$1E,$F0 ;
 $7AF0 DEFB $16,$F0,$1D,$0F,$15,$34,$1D,$34 ;
 $7AF8 DEFB $15,$E0,$18,$00,$19,$F0,$0B,$B8 ;
 $7B00 DEFB $13,$B8,$13,$78,$03,$80,$01,$E0 ; }
; Walking Frame Right 3
 $7B08 DEFB $00                             ; Terminator.
 $7B09 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7B0A DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7B0B DEFB $00,$00,$00,$00,$00,$00,$00,$E1 ; {#JETMAN$0A(wlk-r-3)
 $7B13 DEFB $E0,$01,$C1,$C0,$01,$A1,$80,$00 ;
 $7B1B DEFB $73,$00,$00,$3B,$00,$07,$DE,$00 ;
 $7B23 DEFB $05,$7E,$00,$02,$BC,$00,$03,$FC ;
 $7B2B DEFB $00,$07,$BC,$00,$05,$BC,$00,$07 ;
 $7B33 DEFB $43,$E0,$05,$4D,$00,$07,$4D,$00 ;
 $7B3B DEFB $05,$78,$00,$06,$00,$00,$06,$7C ;
 $7B43 DEFB $00,$02,$EE,$00,$02,$EE,$00,$02 ;
 $7B4B DEFB $DE,$00,$00,$E0,$00,$00,$78,$00 ; }
; Walking Frame Right 4
 $7B53 DEFB $00                             ; Terminator.
 $7B54 DEFB $03                             ; Width = #N(#PEEK(#PC)) bytes.
 $7B55 DEFB $18                             ; Height = #N(#PEEK(#PC)) pixels.
 $7B56 DEFB $00,$00,$00,$00,$00,$00,$00,$1F ; {#JETMAN$0B(wlk-r-4)
 $7B5E DEFB $E0,$00,$1D,$C0,$00,$19,$80,$00 ;
 $7B66 DEFB $0D,$00,$00,$0E,$80,$01,$F7,$00 ;
 $7B6E DEFB $01,$57,$00,$00,$AF,$00,$00,$FF ;
 $7B76 DEFB $00,$01,$EF,$00,$01,$6F,$00,$01 ;
 $7B7E DEFB $D0,$F8,$01,$53,$40,$01,$D3,$40 ;
 $7B86 DEFB $01,$5E,$00,$01,$80,$00,$01,$8F ;
 $7B8E DEFB $00,$01,$3B,$80,$01,$3B,$80,$01 ;
 $7B96 DEFB $37,$80,$00,$38,$00,$00,$1E,$00 ; }

; Round 1 Alien Graphics
;
; .
;
; .
;
; Frame 1
b$7B9E DEFB $0B                 ; Height = #N(#PEEK(#PC)) pixels.
 $7B9F DEFB %00000010,%11111000 ; {#ALIEN$00(round-1-1*)
 $7BA1 DEFB %00000010,%11101100 ;
 $7BA3 DEFB %01010001,%10001110 ;
 $7BA5 DEFB %00100111,%11100011 ;
 $7BA7 DEFB %10010011,%11111001 ;
 $7BA9 DEFB %11101111,%11100011 ;
 $7BAB DEFB %00100111,%10011101 ;
 $7BAD DEFB %01011011,%11000010 ;
 $7BAF DEFB %00100101,%11110100 ;
 $7BB1 DEFB %00000001,%01111000 ;
 $7BB3 DEFB %00001000,%00010000 ; }
; Frame 2
 $7BB5 DEFB $0B                 ; Height = #N(#PEEK(#PC)) pixels.
 $7BB6 DEFB %00000100,%01111000 ; {#ALIEN$01(round-1-2*)
 $7BB8 DEFB %00000010,%10001100 ;
 $7BBA DEFB %00100101,%10100110 ;
 $7BBC DEFB %00010111,%11011111 ;
 $7BBE DEFB %11000011,%11100011 ;
 $7BC0 DEFB %01011011,%10001111 ;
 $7BC2 DEFB %00010110,%00111111 ;
 $7BC4 DEFB %01001101,%10011010 ;
 $7BC6 DEFB %00000001,%11100100 ;
 $7BC8 DEFB %00000100,%01110000 ;
 $7BCA DEFB %00000000,%10010000 ; }
; #UDGARRAY*round-1-1,50;round-1-2(round-1-frames)

; Explosion Frames
;
; .
;
; .
;
; Small.
b$7BCC DEFB $00                           ; Terminator.
 $7BCD DEFB $03                           ; Width = #N(#PEEK(#PC)) bytes.
 $7BCE DEFB $10                           ; Height = #N(#PEEK(#PC)) pixels.
 $7BCF DEFB %00000001,%11110000,%00000000 ; {#EXPLOSION$00(exp-01*)
 $7BD2 DEFB %00000111,%11111000,%10000110 ;
 $7BD5 DEFB %00001111,%11111110,%11110000 ;
 $7BD8 DEFB %01101011,%11111110,%11111000 ;
 $7BDB DEFB %11111100,%11111111,%11111100 ;
 $7BDE DEFB %11111111,%01111111,%01111000 ;
 $7BE1 DEFB %11111111,%10111110,%11100100 ;
 $7BE4 DEFB %11111111,%01111110,%01011110 ;
 $7BE7 DEFB %01111110,%11111001,%10111111 ;
 $7BEA DEFB %01111011,%11111111,%11011111 ;
 $7BED DEFB %11011101,%11111110,%11111111 ;
 $7BF0 DEFB %00111111,%11101111,%10111110 ;
 $7BF3 DEFB %01101111,%11101111,%11000100 ;
 $7BF6 DEFB %01100111,%11010011,%11111000 ;
 $7BF9 DEFB %00111011,%10011100,%11100000 ;
 $7BFC DEFB %00001111,%00001110,%11000000 ; }
; Medium.
 $7BFF DEFB $00                           ; Terminator.
 $7C00 DEFB $03                           ; Width = #N(#PEEK(#PC)) bytes.
 $7C01 DEFB $10                           ; Height = #N(#PEEK(#PC)) pixels.
 $7C02 DEFB %00000000,%00000000,%00000000 ; {#EXPLOSION$01(exp-02*)
 $7C05 DEFB %00000000,%00000000,%00000000 ;
 $7C08 DEFB %00000000,%01111100,%00000000 ;
 $7C0B DEFB %00000000,%11100110,%00000000 ;
 $7C0E DEFB %00001110,%11111110,%11000000 ;
 $7C11 DEFB %00011111,%01111111,%11100000 ;
 $7C14 DEFB %00011111,%10111111,%11000000 ;
 $7C17 DEFB %00011111,%11010111,%11111000 ;
 $7C1A DEFB %00001111,%11101111,%11111100 ;
 $7C1D DEFB %00011111,%11101111,%11101100 ;
 $7C20 DEFB %00010111,%11011111,%10111100 ;
 $7C23 DEFB %00011110,%11111111,%11011000 ;
 $7C26 DEFB %00001001,%10111111,%11000000 ;
 $7C29 DEFB %00000111,%00011111,%10000000 ;
 $7C2C DEFB %00000000,%00000000,%00000000 ;
 $7C2F DEFB %00000000,%00000000,%00000000 ; }
; Large.
 $7C32 DEFB $00                           ; Terminator.
 $7C33 DEFB $03                           ; Width = #N(#PEEK(#PC)) bytes.
 $7C34 DEFB $10                           ; Height = #N(#PEEK(#PC)) pixels.
 $7C35 DEFB %00000000,%00000000,%00000000 ; {#EXPLOSION$02(exp-03*)
 $7C38 DEFB %00000000,%00000000,%00000000 ;
 $7C3B DEFB %00000000,%00000000,%00000000 ;
 $7C3E DEFB %00000000,%00000000,%00000000 ;
 $7C41 DEFB %00000000,%00001100,%00000000 ;
 $7C44 DEFB %00000001,%11011110,%11000000 ;
 $7C47 DEFB %00000011,%11011111,%11000000 ;
 $7C4A DEFB %00000011,%11101111,%11000000 ;
 $7C4D DEFB %00000011,%10101100,%01110000 ;
 $7C50 DEFB %00000011,%11011111,%11111000 ;
 $7C53 DEFB %00000001,%11111111,%11111000 ;
 $7C56 DEFB %00000000,%00101111,%10110000 ;
 $7C59 DEFB %00000000,%00110011,%00000000 ;
 $7C5C DEFB %00000000,%00001110,%00000000 ;
 $7C5F DEFB %00000000,%00000000,%00000000 ;
 $7C62 DEFB %00000000,%00000000,%00000000 ; }
; #UDGARRAY*exp-01,50;exp-02;exp-03(explosion)

; Ship U3
;
; .
;
; .
;
; #SHIP(ship-u3)
; .
; Bottom.
b$7C65 DEFB $00                 ; Terminator.
 $7C66 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7C67 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7C68 DEFB %10011110,%01001111 ; {#COLLECTABLE$02(ship-u3-1)
 $7C6A DEFB %10011110,%01001111 ;
 $7C6C DEFB %10011110,%01001111 ;
 $7C6E DEFB %10000010,%01000001 ;
 $7C70 DEFB %01011100,%00101110 ;
 $7C72 DEFB %01011100,%00101110 ;
 $7C74 DEFB %00101000,%00010100 ;
 $7C76 DEFB %01111111,%11111110 ;
 $7C78 DEFB %01000101,%11111110 ;
 $7C7A DEFB %01000101,%11111110 ;
 $7C7C DEFB %01000101,%11111110 ;
 $7C7E DEFB %01000101,%11111110 ;
 $7C80 DEFB %01111111,%11111110 ;
 $7C82 DEFB %10100110,%01100101 ;
 $7C84 DEFB %10100110,%01100101 ;
 $7C86 DEFB %11011001,%10011000 ; }
; Middle.
 $7C88 DEFB $00                 ; Terminator.
 $7C89 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7C8A DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7C8B DEFB %11011001,%10011011 ; {#COLLECTABLE$06(ship-u3-2)
 $7C8D DEFB %11111111,%11111111 ;
 $7C8F DEFB %10001011,%11111111 ;
 $7C91 DEFB %10001010,%00010001 ;
 $7C93 DEFB %10001010,%11011101 ;
 $7C95 DEFB %10001010,%11010001 ;
 $7C97 DEFB %10001010,%11011101 ;
 $7C99 DEFB %10001010,%11010001 ;
 $7C9B DEFB %10001011,%11111111 ;
 $7C9D DEFB %10001011,%11111111 ;
 $7C9F DEFB %11111111,%11111111 ;
 $7CA1 DEFB %10100110,%01100101 ;
 $7CA3 DEFB %10100110,%01100101 ;
 $7CA5 DEFB %11011001,%10011011 ;
 $7CA7 DEFB %11011001,%10011011 ;
 $7CA9 DEFB %01111111,%11111110 ; }
; Top.
 $7CAB DEFB $00                 ; Terminator.
 $7CAC DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7CAD DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7CAE DEFB %01001011,%11111110 ; {#COLLECTABLE$0A(ship-u3-3)
 $7CB0 DEFB %00100101,%11111100 ;
 $7CB2 DEFB %00100101,%11111100 ;
 $7CB4 DEFB %00010011,%11111000 ;
 $7CB6 DEFB %00011110,%00001000 ;
 $7CB8 DEFB %00001001,%11110000 ;
 $7CBA DEFB %00001001,%11110000 ;
 $7CBC DEFB %00001001,%11110000 ;
 $7CBE DEFB %00001000,%00010000 ;
 $7CC0 DEFB %00000101,%11100000 ;
 $7CC2 DEFB %00000010,%01000000 ;
 $7CC4 DEFB %00000001,%10000000 ;
 $7CC6 DEFB %00000001,%10000000 ;
 $7CC8 DEFB %00000001,%10000000 ;
 $7CCA DEFB %00000001,%10000000 ;
 $7CCC DEFB %00000001,%10000000 ; }

; Ship U1
;
; .
;
; .
;
; #SHIP(ship-u1)
; .
; Bottom.
b$7CCE DEFB $00                 ; Terminator.
 $7CCF DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7CD0 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7CD1 DEFB %10111000,%00010111 ; {#COLLECTABLE$00(ship-u1-1)
 $7CD3 DEFB %10111000,%00010111 ;
 $7CD5 DEFB %10111001,%10010111 ;
 $7CD7 DEFB %10001001,%10010001 ;
 $7CD9 DEFB %01010010,%11001010 ;
 $7CDB DEFB %01010101,%11101010 ;
 $7CDD DEFB %11110101,%11101111 ;
 $7CDF DEFB %11110100,%00101111 ;
 $7CE1 DEFB %10101111,%11110101 ;
 $7CE3 DEFB %10101001,%11110101 ;
 $7CE5 DEFB %10101001,%11110101 ;
 $7CE7 DEFB %11111001,%11111111 ;
 $7CE9 DEFB %10111001,%11110111 ;
 $7CEB DEFB %10111001,%11110111 ;
 $7CED DEFB %10111001,%11110111 ;
 $7CEF DEFB %10111001,%11110111 ; }
; Middle.
 $7CF1 DEFB $00                 ; Terminator.
 $7CF2 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7CF3 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7CF4 DEFB %10111001,%11110111 ; {#COLLECTABLE$04(ship-u1-2)
 $7CF6 DEFB %10111001,%11110111 ;
 $7CF8 DEFB %10111001,%11110111 ;
 $7CFA DEFB %10111001,%11110111 ;
 $7CFC DEFB %10001001,%11110001 ;
 $7CFE DEFB %01011001,%11110110 ;
 $7D00 DEFB %01011001,%11110110 ;
 $7D02 DEFB %00101001,%11110100 ;
 $7D04 DEFB %00101001,%11111100 ;
 $7D06 DEFB %00011001,%11111000 ;
 $7D08 DEFB %00011001,%00011000 ;
 $7D0A DEFB %00001001,%10110000 ;
 $7D0C DEFB %00001001,%00110000 ;
 $7D0E DEFB %00001001,%10110000 ;
 $7D10 DEFB %00001001,%11110000 ;
 $7D12 DEFB %00001001,%00010000 ; }
; Top.
 $7D14 DEFB $00                 ; Terminator.
 $7D15 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7D16 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D17 DEFB %00001001,%01010000 ; {#COLLECTABLE$08(ship-u1-3)
 $7D19 DEFB %00001001,%01010000 ;
 $7D1B DEFB %00001001,%01010000 ;
 $7D1D DEFB %00001001,%11110000 ;
 $7D1F DEFB %00001001,%11110000 ;
 $7D21 DEFB %00001001,%11110000 ;
 $7D23 DEFB %00001001,%11110000 ;
 $7D25 DEFB %00001001,%11110000 ;
 $7D27 DEFB %00001000,%00010000 ;
 $7D29 DEFB %00001001,%11110000 ;
 $7D2B DEFB %00000101,%11100000 ;
 $7D2D DEFB %00000101,%11100000 ;
 $7D2F DEFB %00000010,%11000000 ;
 $7D31 DEFB %00000010,%11000000 ;
 $7D33 DEFB %00000001,%10000000 ;
 $7D35 DEFB %00000001,%10000000 ; }

; Ship U2
;
; .
;
; .
;
; #SHIP(ship-u2)
; .
; Bottom.
b$7D37 DEFB $00                 ; Terminator.
 $7D38 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7D39 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D3A DEFB %10000000,%01001111 ; {#COLLECTABLE$01(ship-u2-1)
 $7D3C DEFB %10000000,%01001111 ;
 $7D3E DEFB %11000000,%01001111 ;
 $7D40 DEFB %11011111,%01001111 ;
 $7D42 DEFB %11010111,%01001111 ;
 $7D44 DEFB %11010111,%01001111 ;
 $7D46 DEFB %11010111,%00100001 ;
 $7D48 DEFB %11010111,%00101110 ;
 $7D4A DEFB %11010111,%10100010 ;
 $7D4C DEFB %01010111,%10011100 ;
 $7D4E DEFB %01010111,%11111110 ;
 $7D50 DEFB %00110111,%01111110 ;
 $7D52 DEFB %00110111,%01110110 ;
 $7D54 DEFB %00011011,%01110110 ;
 $7D56 DEFB %00001011,%01110110 ;
 $7D58 DEFB %00001101,%01110110 ; }
; Middle.
 $7D5A DEFB $00                 ; Terminator.
 $7D5B DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7D5C DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D5D DEFB %00001011,%01110110 ; {#COLLECTABLE$05(ship-u2-2)
 $7D5F DEFB %00001100,%01111100 ;
 $7D61 DEFB %00001111,%11110110 ;
 $7D63 DEFB %00001111,%11110110 ;
 $7D65 DEFB %00001011,%00010110 ;
 $7D67 DEFB %00001011,%01110110 ;
 $7D69 DEFB %00001011,%00010110 ;
 $7D6B DEFB %00001011,%11010110 ;
 $7D6D DEFB %00001101,%00010110 ;
 $7D6F DEFB %00001011,%11110110 ;
 $7D71 DEFB %00001011,%11110110 ;
 $7D73 DEFB %00001011,%00010110 ;
 $7D75 DEFB %00001011,%01010110 ;
 $7D77 DEFB %00001101,%01010010 ;
 $7D79 DEFB %00001011,%01011010 ;
 $7D7B DEFB %00001011,%01011010 ; }
; Top.
 $7D7D DEFB $00                 ; Terminator.
 $7D7E DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7D7F DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7D80 DEFB %00001011,%11111010 ; {#COLLECTABLE$09(ship-u2-3)
 $7D82 DEFB %00001011,%11111010 ;
 $7D84 DEFB %00001111,%11111010 ;
 $7D86 DEFB %00001111,%11111010 ;
 $7D88 DEFB %00001100,%11111010 ;
 $7D8A DEFB %00001100,%11111010 ;
 $7D8C DEFB %00000111,%11110010 ;
 $7D8E DEFB %00000100,%11110010 ;
 $7D90 DEFB %00000100,%11110010 ;
 $7D92 DEFB %00000011,%11110010 ;
 $7D94 DEFB %00000001,%11110010 ;
 $7D96 DEFB %00000001,%11110010 ;
 $7D98 DEFB %00000000,%11110010 ;
 $7D9A DEFB %00000000,%11110010 ;
 $7D9C DEFB %00000000,%01111100 ;
 $7D9E DEFB %00000000,%00111000 ; }

; Ship U4
;
; .
;
; .
;
; #SHIP(ship-u4)
; .
; Bottom.
b$7DA0 DEFB $00                 ; Terminator.
 $7DA1 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7DA2 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DA3 DEFB %10000000,%00000001 ; {#COLLECTABLE$03(ship-u4-1)
 $7DA5 DEFB %10001001,%11110001 ;
 $7DA7 DEFB %10001001,%11110001 ;
 $7DA9 DEFB %11001001,%11110011 ;
 $7DAB DEFB %11001000,%00010011 ;
 $7DAD DEFB %11100101,%11100111 ;
 $7DAF DEFB %11100101,%11100111 ;
 $7DB1 DEFB %11110010,%01001111 ;
 $7DB3 DEFB %11110011,%11001111 ;
 $7DB5 DEFB %11111011,%11011101 ;
 $7DB7 DEFB %10001011,%11010001 ;
 $7DB9 DEFB %10101011,%11010101 ;
 $7DBB DEFB %10101011,%11011111 ;
 $7DBD DEFB %10101011,%11010111 ;
 $7DBF DEFB %11111011,%11011111 ;
 $7DC1 DEFB %10111011,%11011101 ; }
; Middle.
 $7DC3 DEFB $00                 ; Terminator.
 $7DC4 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7DC5 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DC6 DEFB %10111011,%11011101 ; {#COLLECTABLE$07(ship-u4-2)
 $7DC8 DEFB %10111011,%11011101 ;
 $7DCA DEFB %10010111,%11101001 ;
 $7DCC DEFB %10010111,%11101001 ;
 $7DCE DEFB %10010111,%11101001 ;
 $7DD0 DEFB %10001111,%11110001 ;
 $7DD2 DEFB %10001111,%11110001 ;
 $7DD4 DEFB %10001111,%11110001 ;
 $7DD6 DEFB %00001111,%11110000 ;
 $7DD8 DEFB %00011111,%11111000 ;
 $7DDA DEFB %00011111,%11111000 ;
 $7DDC DEFB %00011111,%11111000 ;
 $7DDE DEFB %00011101,%10111000 ;
 $7DE0 DEFB %00011001,%10011000 ;
 $7DE2 DEFB %00010001,%10001000 ;
 $7DE4 DEFB %00011001,%10001000 ; }
; Top.
 $7DE6 DEFB $00                 ; Terminator.
 $7DE7 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7DE8 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7DE9 DEFB %00010101,%10001000 ; {#COLLECTABLE$0B(ship-u4-3)
 $7DEB DEFB %00010011,%10001000 ;
 $7DED DEFB %00011001,%10001000 ;
 $7DEF DEFB %00010101,%10001000 ;
 $7DF1 DEFB %00011011,%10011000 ;
 $7DF3 DEFB %00001001,%10010000 ;
 $7DF5 DEFB %00001001,%10010000 ;
 $7DF7 DEFB %00001101,%10110000 ;
 $7DF9 DEFB %00000101,%10100000 ;
 $7DFB DEFB %00000101,%10100000 ;
 $7DFD DEFB %00000111,%11100000 ;
 $7DFF DEFB %00000011,%11000000 ;
 $7E01 DEFB %00000011,%11000000 ;
 $7E03 DEFB %00000011,%11000000 ;
 $7E05 DEFB %00000001,%10000000 ;
 $7E07 DEFB %00000001,%10000000 ; }

; Sprite: Gold Bar
b$7E09 DEFB $00                 ; Terminator.
 $7E0A DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E0B DEFB $08                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E0C DEFB %11111111,%11111100 ; {#COLLECTABLE$10(gold-bar)
 $7E0E DEFB %10000000,%00001110 ;
 $7E10 DEFB %01000000,%00011110 ;
 $7E12 DEFB %01000000,%00011111 ;
 $7E14 DEFB %00100000,%00111111 ;
 $7E16 DEFB %00111111,%11011110 ;
 $7E18 DEFB %00011111,%11101100 ;
 $7E1A DEFB %00001111,%11111000 ; }

; Sprite: Fuel Pod
b$7E1C DEFB $00                 ; Terminator.
 $7E1D DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E1E DEFB $0B                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E1F DEFB %00011000,%00011000 ; {#COLLECTABLE$0C(fuel)
 $7E21 DEFB %11111111,%11111111 ;
 $7E23 DEFB %11111111,%11111111 ;
 $7E25 DEFB %10111000,%10001001 ;
 $7E27 DEFB %10111010,%10111011 ;
 $7E29 DEFB %10001010,%10011011 ;
 $7E2B DEFB %10111010,%10111011 ;
 $7E2D DEFB %10001010,%10001011 ;
 $7E2F DEFB %11111111,%11111111 ;
 $7E31 DEFB %11111111,%11111111 ;
 $7E33 DEFB %00011000,%00011000 ; }

; Sprite: Plutonium
b$7E35 DEFB $00                 ; Terminator.
 $7E36 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E37 DEFB $0B                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E38 DEFB %00001111,%11111000 ; {#COLLECTABLE$11(plutonium)
 $7E3A DEFB %00010000,%00000100 ;
 $7E3C DEFB %00100011,%11100010 ;
 $7E3E DEFB %01000001,%11000001 ;
 $7E40 DEFB %01100000,%10000011 ;
 $7E42 DEFB %00100000,%10000010 ;
 $7E44 DEFB %01101111,%01111011 ;
 $7E46 DEFB %01001110,%00111001 ;
 $7E48 DEFB %00100100,%00010010 ;
 $7E4A DEFB %00010000,%00000100 ;
 $7E4C DEFB %00001111,%11111000 ; }

; Sprite: Isotope
b$7E4E DEFB $00                 ; Terminator.
 $7E4F DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E50 DEFB $0D                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E51 DEFB %01110000,%00011100 ; {#COLLECTABLE$12(isotope)
 $7E53 DEFB %11111000,%00111110 ;
 $7E55 DEFB %10111111,%11101110 ;
 $7E57 DEFB %10011000,%00100110 ;
 $7E59 DEFB %01110000,%00011100 ;
 $7E5B DEFB %00100000,%00001000 ;
 $7E5D DEFB %00010000,%00010000 ;
 $7E5F DEFB %00010000,%00010000 ;
 $7E61 DEFB %00001011,%10100000 ;
 $7E63 DEFB %00001111,%11100000 ;
 $7E65 DEFB %00000101,%11000000 ;
 $7E67 DEFB %00000100,%11000000 ;
 $7E69 DEFB %00000011,%10000000 ; }

; Sprite: Mineral
b$7E6B DEFB $00                 ; Terminator.
 $7E6C DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E6D DEFB $09                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E6E DEFB %00111111,%11111100 ; {#COLLECTABLE$13(mineral)
 $7E70 DEFB %01111111,%11111110 ;
 $7E72 DEFB %11111111,%11111111 ;
 $7E74 DEFB %11001111,%11111111 ;
 $7E76 DEFB %11000111,%11111111 ;
 $7E78 DEFB %11000011,%11111111 ;
 $7E7A DEFB %01100000,%01111110 ;
 $7E7C DEFB %00111000,%00111100 ;
 $7E7E DEFB %00001111,%11110000 ; }

; Sprite: Gemstone
b$7E80 DEFB $00                 ; Terminator.
 $7E81 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7E82 DEFB $0C                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E83 DEFB %00000001,%10000000 ; {#COLLECTABLE$14(gemstone)
 $7E85 DEFB %00000011,%11000000 ;
 $7E87 DEFB %00000111,%11100000 ;
 $7E89 DEFB %00001111,%11110000 ;
 $7E8B DEFB %00011111,%11111000 ;
 $7E8D DEFB %00111000,%00011100 ;
 $7E8F DEFB %01101000,%00010110 ;
 $7E91 DEFB %01000111,%11100010 ;
 $7E93 DEFB %00101111,%11110100 ;
 $7E95 DEFB %00011111,%11111000 ;
 $7E97 DEFB %00001111,%11110000 ;
 $7E99 DEFB %00000011,%11000000 ; }

; Round 2 Alien Graphics
;
; .
;
; .
;
; Frame 1
b$7E9B DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7E9C DEFB %00010010,%01000000 ; {#ALIEN$02(round-2-1*)
 $7E9E DEFB %00011010,%10010100 ;
 $7EA0 DEFB %01101011,%11101010 ;
 $7EA2 DEFB %01011111,%11111111 ;
 $7EA4 DEFB %00111111,%11111110 ;
 $7EA6 DEFB %11111001,%10011111 ;
 $7EA8 DEFB %00110110,%01101100 ;
 $7EAA DEFB %11110110,%01101110 ;
 $7EAC DEFB %01111001,%10011111 ;
 $7EAE DEFB %00111111,%11111110 ;
 $7EB0 DEFB %01001111,%11111101 ;
 $7EB2 DEFB %00001111,%11110100 ;
 $7EB4 DEFB %00010110,%11101000 ;
 $7EB6 DEFB %00001010,%01000100 ; }
; Frame 2
 $7EB8 DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7EB9 DEFB %00001010,%01000100 ; {#ALIEN$03(round-2-2*)
 $7EBB DEFB %00010110,%11101000 ;
 $7EBD DEFB %00001111,%11110100 ;
 $7EBF DEFB %01001101,%11111101 ;
 $7EC1 DEFB %00111111,%11111110 ;
 $7EC3 DEFB %01111001,%10011111 ;
 $7EC5 DEFB %11110110,%01101110 ;
 $7EC7 DEFB %00110110,%01101100 ;
 $7EC9 DEFB %11111001,%10011111 ;
 $7ECB DEFB %00111111,%11111110 ;
 $7ECD DEFB %01011111,%11111111 ;
 $7ECF DEFB %01101011,%11101010 ;
 $7ED1 DEFB %00011010,%10010100 ;
 $7ED3 DEFB %00010010,%01000000 ; }
; #UDGARRAY*round-2-1,50;round-2-2(round-2-frames)

; Round 4 Alien Graphics
b$7ED5 DEFB $07                 ; Height = #N(#PEEK(#PC)) pixels.
 $7ED6 DEFB %00011111,%11110000 ; {#ALIEN$06(round-4-1)
 $7ED8 DEFB %11000111,%10000000 ;
 $7EDA DEFB %11111011,%11011111 ;
 $7EDC DEFB %11111111,%11101100 ;
 $7EDE DEFB %11001111,%11110000 ;
 $7EE0 DEFB %00011110,%00000000 ;
 $7EE2 DEFB %01111000,%00000000 ; }

; Round 5 Alien Graphics
b$7EE4 DEFB $08                 ; Height = #N(#PEEK(#PC)) pixels.
 $7EE5 DEFB %00111111,%11111100 ; {#ALIEN$08(round-5-1)
 $7EE7 DEFB %01111111,%11111110 ;
 $7EE9 DEFB %11011001,%10011011 ;
 $7EEB DEFB %01111111,%11111110 ;
 $7EED DEFB %00111111,%11111100 ;
 $7EEF DEFB %00001101,%10110000 ;
 $7EF1 DEFB %00000111,%11100000 ;
 $7EF3 DEFB %00000001,%10000000 ; }

; Round 3 Alien Graphics
;
; .
;
; .
;
; Frame 1
b$7EF5 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $7EF6 DEFB %00000111,%11100000 ; {#ALIEN$04(round-3-1*)
 $7EF8 DEFB %00011111,%11111000 ;
 $7EFA DEFB %00111111,%11111100 ;
 $7EFC DEFB %01111111,%11111110 ;
 $7EFE DEFB %01111111,%11111110 ;
 $7F00 DEFB %11111111,%11111111 ;
 $7F02 DEFB %11111111,%11111111 ;
 $7F04 DEFB %11111111,%11111111 ;
 $7F06 DEFB %11100111,%11111111 ;
 $7F08 DEFB %11100111,%11111111 ;
 $7F0A DEFB %11100011,%11111111 ;
 $7F0C DEFB %01110001,%11111110 ;
 $7F0E DEFB %01111001,%11111110 ;
 $7F10 DEFB %00111111,%11111100 ;
 $7F12 DEFB %00011111,%11111000 ;
 $7F14 DEFB %00000111,%11100000 ; }
; Frame 2
 $7F16 DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F17 DEFB %00000111,%11100000 ; {#ALIEN$05(round-3-2*)
 $7F19 DEFB %00011111,%11111000 ;
 $7F1B DEFB %00111111,%11111100 ;
 $7F1D DEFB %01111111,%11111110 ;
 $7F1F DEFB %01111111,%11111110 ;
 $7F21 DEFB %11111111,%11111111 ;
 $7F23 DEFB %11111111,%11111111 ;
 $7F25 DEFB %11100111,%11111111 ;
 $7F27 DEFB %11100111,%11111111 ;
 $7F29 DEFB %01100011,%11111110 ;
 $7F2B DEFB %01110001,%11111110 ;
 $7F2D DEFB %00111001,%11111100 ;
 $7F2F DEFB %00011111,%11111000 ;
 $7F31 DEFB %00000111,%11100000 ; }
; #UDGARRAY*round-3-1,50;round-3-2(round-3-frames)

; Round 6 Alien Graphics
b$7F33 DEFB $0F                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F34 DEFB %00000011,%10000000 ; {#ALIEN$0A(round-6-1)
 $7F36 DEFB %00000101,%11000000 ;
 $7F38 DEFB %00000100,%01000000 ;
 $7F3A DEFB %00000111,%11000000 ;
 $7F3C DEFB %00000100,%01000000 ;
 $7F3E DEFB %01111011,%10111100 ;
 $7F40 DEFB %11110100,%01011110 ;
 $7F42 DEFB %10110101,%01010110 ;
 $7F44 DEFB %10010100,%01010010 ;
 $7F46 DEFB %01111011,%10111100 ;
 $7F48 DEFB %00000100,%01000000 ;
 $7F4A DEFB %00000111,%11000000 ;
 $7F4C DEFB %00000101,%11000000 ;
 $7F4E DEFB %00000100,%11000000 ;
 $7F50 DEFB %00000011,%10000000 ; }

; Round 7 Alien Graphics
b$7F52 DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F53 DEFB %00010000,%00000000 ; {#ALIEN$0C(round-7-1)
 $7F55 DEFB %00011110,%00000000 ;
 $7F57 DEFB %00111111,%11000000 ;
 $7F59 DEFB %01100001,%11111000 ;
 $7F5B DEFB %11000000,%00111111 ;
 $7F5D DEFB %11111111,%11111111 ;
 $7F5F DEFB %11001010,%11000000 ;
 $7F61 DEFB %11001010,%11000000 ;
 $7F63 DEFB %11111111,%11111111 ;
 $7F65 DEFB %11000000,%00111111 ;
 $7F67 DEFB %01100001,%11111000 ;
 $7F69 DEFB %00111111,%11000000 ;
 $7F6B DEFB %00011110,%00000000 ;
 $7F6D DEFB %00010000,%00000000 ; }

; Round 8 Alien Graphics
b$7F6F DEFB $0E                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F70 DEFB %00001100,%00110000 ; {#ALIEN$0E(round-8-1)
 $7F72 DEFB %00010011,%11001000 ;
 $7F74 DEFB %00111111,%11111100 ;
 $7F76 DEFB %01111111,%11111110 ;
 $7F78 DEFB %11111111,%11111111 ;
 $7F7A DEFB %11011111,%11111111 ;
 $7F7C DEFB %11011111,%11111111 ;
 $7F7E DEFB %01001000,%10011110 ;
 $7F80 DEFB %01000110,%01101110 ;
 $7F82 DEFB %00101111,%11110100 ;
 $7F84 DEFB %00011001,%10011000 ;
 $7F86 DEFB %00011001,%10011000 ;
 $7F88 DEFB %00001111,%11110000 ;
 $7F8A DEFB %00000110,%01100000 ; }

; Flame Graphics
;
; .
;
; .
;
; Flame Frame 1
b$7F8C DEFB $00                 ; Terminator.
 $7F8D DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7F8E DEFB $0F                 ; Height = #N(#PEEK(#PC)) pixels.
 $7F8F DEFB %00000000,%01000000 ; {#UDGARRAY$02,attr=$02,scale=$04,step=$02,flip=$02;(#PC)-(#PC+$11)-$01-$10{0,($10-#PEEK(#PC-$01))*$04,$10*$04,#PEEK(#PC-$01)*$04}(flame-1*)
 $7F91 DEFB %00000100,%10001000 ;
 $7F93 DEFB %00000010,%01000000 ;
 $7F95 DEFB %00010000,%10010000 ;
 $7F97 DEFB %00001011,%01011000 ;
 $7F99 DEFB %00100100,%01100010 ;
 $7F9B DEFB %01010011,%10110100 ;
 $7F9D DEFB %00110111,%01101010 ;
 $7F9F DEFB %10001010,%01011010 ;
 $7FA1 DEFB %01010111,%11101101 ;
 $7FA3 DEFB %00101110,%11110100 ;
 $7FA5 DEFB %10110111,%11111101 ;
 $7FA7 DEFB %01011110,%11101100 ;
 $7FA9 DEFB %01111111,%11110100 ;
 $7FAB DEFB %00101111,%11111100 ; }
 $7FAD DEFS $02
; Flame Frame 2
 $7FAF DEFB $00                 ; Terminator.
 $7FB0 DEFB $02                 ; Width = #N(#PEEK(#PC)) bytes.
 $7FB1 DEFB $0F                 ; Height = #N(#PEEK(#PC)) pixels.
 $7FB2 DEFB %00000000,%10000000 ; {#UDGARRAY$02,attr=$02,scale=$04,step=$02,flip=$02;(#PC)-(#PC+$11)-$01-$10{0,($10-#PEEK(#PC-$01))*$04,$10*$04,#PEEK(#PC-$01)*$04}(flame-2*)
 $7FB4 DEFB %00000010,%00000000 ;
 $7FB6 DEFB %00000000,%00000000 ;
 $7FB8 DEFB %00000000,%00100000 ;
 $7FBA DEFB %00010010,%01000000 ;
 $7FBC DEFB %00000000,%00000000 ;
 $7FBE DEFB %00001001,%10100100 ;
 $7FC0 DEFB %00010010,%11001000 ;
 $7FC2 DEFB %01001110,%00011000 ;
 $7FC4 DEFB %00010101,%11010010 ;
 $7FC6 DEFB %00101010,%10101001 ;
 $7FC8 DEFB %01011011,%11010100 ;
 $7FCA DEFB %00101101,%00101110 ;
 $7FCC DEFB %00010010,%11110100 ;
 $7FCE DEFB %10111111,%01111010 ; }
; #UDGTABLE(ships,centre,centre,centre,centre)
; {
;   #UDGARRAY#($02,attr=$07,scale=$04,step=$02,flip=2#FOR($03,$49,$23)(n,;($7CCE+n)-($7CCE+n+$11)-$01-$10))(ship-u1-flame)  |
;   #UDGARRAY#($02,attr=$07,scale=$04,step=$02,flip=2#FOR($03,$49,$23)(n,;($7D37+n)-($7D37+n+$11)-$01-$10))(ship-u2-flame)  |
;   #UDGARRAY#($02,attr=$07,scale=$04,step=$02,flip=2#FOR($03,$49,$23)(n,;($7C65+n)-($7C65+n+$11)-$01-$10))(ship-u3-flame)  |
;   #UDGARRAY#($02,attr=$07,scale=$04,step=$02,flip=2#FOR($03,$49,$23)(n,;($7DA0+n)-($7DA0+n+$11)-$01-$10))(ship-u4-flame)
; }
; { #UDGARRAY*flame-1,50;flame-2(frame-frames)  | #UDGARRAY*flame-1,50;flame-2(frame-frames)  | #UDGARRAY*flame-1,50;flame-2(frame-frames)  | #UDGARRAY*flame-1,50;flame-2(frame-frames) }
; UDGTABLE#

; Copyright Messaging
@label=Message_Copyright2
t$7FD0 DEFM $1F                                             ; {COPYRIGHT 1983
 $7FD1 DEFM "|"+$80                                         ; A.C.G. ALL RIGHTS
 $7FD2 DEFM "COPYRIGHT 1983 A.C.G. ALL RIGHTS RESERVED",$8F ; RESERVED}
 $7FFC DEFS $04

