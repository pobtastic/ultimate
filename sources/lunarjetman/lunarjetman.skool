@org=$4000
@start=$5B80

; Loading screen
;
; #UDGTABLE
; { =h Lunar Jetman Loading Screen }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels
 $4020 DEFB $00,$63,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$F0,$1F,$C3,$6F,$FC,$EF,$CF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C6,$00 ;
 $4040 DEFB $00,$BC,$07,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$07,$FF,$FF,$FF,$FF,$FF,$80,$07,$FF,$80,$00,$03,$FF,$FF,$E0,$1F,$FE,$01,$FF,$E0,$3D,$00 ;
 $4060 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FE,$10,$23,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$10,$00,$BF,$FF,$FF,$C4,$8F,$FF,$FE,$FF,$C4,$3D,$00 ;
 $4080 DEFB $00,$BC,$00,$6F,$FD,$80,$1B,$FF,$FF,$F6,$00,$6F,$FD,$80,$1B,$FF,$FF,$FF,$FF,$60,$07,$FF,$FF,$FF,$D8,$6F,$FD,$DF,$FF,$D8,$3D,$00 ;
 $40A0 DEFB $00,$BC,$1B,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$5F,$EB,$FF,$FF,$FF,$FE,$18,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $40C0 DEFB $00,$BC,$23,$FF,$F0,$80,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$E1,$08,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $40E0 DEFB $00,$9F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$4F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$F0,$1F,$C3,$6F,$FC,$CF,$CF,$FF,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F2,$00 ;
 $4140 DEFB $00,$BC,$1B,$FF,$FF,$FF,$FF,$FF,$FF,$E6,$1B,$FF,$FF,$FF,$FF,$FF,$E0,$1F,$FF,$60,$00,$0F,$FF,$FF,$D8,$6F,$FF,$86,$FF,$D8,$3D,$00 ;
 $4160 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FE,$20,$23,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$10,$01,$3F,$FF,$FF,$C4,$8F,$FF,$FF,$FF,$C4,$3D,$00 ;
 $4180 DEFB $00,$BC,$00,$9F,$FE,$40,$27,$FF,$FF,$F9,$00,$9F,$FE,$40,$27,$FF,$FF,$FF,$FF,$90,$1F,$FF,$FF,$FF,$E4,$9F,$FE,$8F,$FF,$E4,$3D,$00 ;
 $41A0 DEFB $00,$BC,$33,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$30,$33,$FF,$FF,$FF,$FE,$28,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $41C0 DEFB $00,$BC,$24,$00,$00,$80,$24,$00,$00,$00,$00,$00,$02,$40,$24,$00,$90,$24,$00,$00,$00,$32,$09,$00,$00,$00,$02,$49,$00,$24,$3D,$00 ;
 $41E0 DEFB $00,$DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB,$3C ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$07,$E1,$9F,$86,$1F,$C3,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$DF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$07,$F0,$1F,$86,$67,$F9,$FF,$CF,$C3,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FB,$00 ;
 $4240 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FF,$E1,$23,$FF,$FF,$FF,$FF,$FF,$D0,$2F,$FF,$10,$00,$17,$FF,$FF,$C4,$8F,$FF,$68,$FF,$C4,$3D,$00 ;
 $4260 DEFB $00,$BC,$24,$1F,$FE,$00,$07,$FF,$01,$A0,$24,$1F,$FE,$00,$07,$FF,$FF,$FF,$FF,$10,$01,$7F,$F8,$FF,$C4,$8F,$FF,$FF,$FF,$C4,$3D,$00 ;
 $4280 DEFB $00,$BC,$00,$E0,$01,$C0,$38,$00,$00,$06,$00,$60,$01,$80,$38,$00,$00,$00,$00,$70,$1C,$00,$00,$00,$5C,$E0,$01,$D4,$00,$1C,$3D,$00 ;
 $42A0 DEFB $00,$BC,$33,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$1F,$E3,$FF,$FF,$FF,$FC,$28,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $42C0 DEFB $00,$BC,$38,$00,$03,$00,$38,$00,$00,$00,$00,$00,$01,$C0,$38,$00,$F0,$38,$00,$00,$00,$1E,$0E,$00,$00,$00,$01,$CE,$00,$1C,$3D,$00 ;
 $42E0 DEFB $00,$4F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F2,$42 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$07,$E1,$BF,$C6,$1F,$C3,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$9F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$07,$F0,$1F,$86,$C7,$FB,$FF,$CF,$C3,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F9,$00 ;
 $4340 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FF,$C2,$23,$FF,$FF,$FF,$FF,$FF,$E8,$5F,$FF,$10,$00,$27,$FF,$FF,$C4,$8F,$FF,$98,$FF,$C4,$3D,$10 ;
 $4360 DEFB $00,$BC,$38,$6F,$FD,$80,$1B,$FF,$00,$40,$38,$6F,$FD,$80,$1B,$FF,$FF,$FF,$FF,$10,$02,$7F,$F0,$FF,$C4,$8F,$FF,$FF,$FF,$C4,$3D,$00 ;
 $4380 DEFB $00,$BC,$00,$9F,$FE,$40,$27,$FF,$FF,$F9,$00,$9F,$FE,$40,$27,$FF,$FF,$FF,$FF,$90,$27,$FF,$FF,$FF,$E4,$9F,$FE,$67,$FF,$E4,$3D,$00 ;
 $43A0 DEFB $00,$BC,$23,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$FC,$48,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $43C0 DEFB $00,$BC,$3F,$FF,$FC,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$3F,$FF,$F0,$3F,$FF,$FF,$FF,$FC,$0F,$FF,$FF,$FF,$FF,$CF,$FF,$FC,$3D,$00 ;
 $43E0 DEFB $00,$63,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C6,$99 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$0F,$E1,$BF,$C6,$3F,$C7,$F0,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$BF,$FE,$C7,$FB,$8F,$DF,$C3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$00 ;
 $4440 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FF,$82,$23,$FF,$FF,$FF,$FF,$FF,$F4,$BF,$FF,$10,$00,$2F,$FF,$FF,$C4,$8F,$FF,$C8,$FF,$C4,$3D,$00 ;
 $4460 DEFB $00,$BC,$3F,$8F,$FC,$7F,$E3,$FF,$FF,$F8,$3F,$8F,$FC,$7F,$E3,$FF,$FF,$FF,$FF,$10,$02,$FF,$FF,$FF,$C4,$8F,$FD,$FF,$FF,$C4,$3D,$00 ;
 $4480 DEFB $00,$BC,$00,$6F,$FD,$80,$1B,$FF,$FF,$F6,$00,$6F,$FD,$80,$1B,$FF,$FF,$FF,$FF,$60,$3F,$FF,$FF,$FF,$DC,$6F,$FD,$D9,$FF,$D8,$3D,$00 ;
 $44A0 DEFB $00,$BC,$23,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$F8,$48,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $44C0 DEFB $00,$BC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00 ;
 $44E0 DEFB $00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$A1 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$0F,$E1,$BF,$C6,$3F,$C7,$F0,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$BE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$BF,$FE,$C3,$FB,$0F,$DF,$CF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7D,$00 ;
 $4540 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FF,$84,$23,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$10,$00,$4F,$FF,$FF,$C4,$8F,$FF,$E4,$FF,$C4,$3D,$00 ;
 $4560 DEFB $00,$BC,$00,$8F,$FC,$40,$27,$FF,$FF,$FE,$00,$9F,$FE,$40,$27,$FF,$FF,$FF,$FF,$90,$05,$FF,$FF,$FF,$E4,$9F,$FF,$FF,$FF,$E4,$3D,$00 ;
 $4580 DEFB $00,$BC,$00,$8F,$FC,$40,$23,$FF,$00,$09,$00,$8F,$FC,$40,$23,$FF,$FF,$FF,$FF,$10,$4F,$FF,$81,$FF,$C4,$8F,$FC,$61,$FF,$C4,$3D,$20 ;
 $45A0 DEFB $00,$BC,$23,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$F8,$88,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $45C0 DEFB $00,$BC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00 ;
 $45E0 DEFB $00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$99 ;
 $4600 DEFB $00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$03,$F8,$0F,$C3,$3F,$EC,$7F,$C7,$E1,$C0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00 ;
 $4620 DEFB $00,$BC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00 ;
 $4640 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FF,$08,$23,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$10,$00,$5F,$FF,$FF,$C4,$8F,$FF,$F4,$FF,$C4,$3D,$00 ;
 $4660 DEFB $00,$BC,$00,$80,$00,$40,$18,$00,$00,$07,$00,$E0,$01,$C0,$38,$00,$00,$00,$00,$70,$06,$00,$00,$00,$1C,$EF,$FD,$40,$00,$1C,$3D,$00 ;
 $4680 DEFB $00,$BC,$00,$8F,$FC,$40,$23,$FF,$00,$07,$00,$8F,$FC,$40,$23,$FF,$BF,$F7,$FF,$10,$5F,$FF,$66,$FF,$C4,$8F,$FC,$56,$FF,$C4,$3D,$00 ;
 $46A0 DEFB $00,$BC,$23,$FF,$FC,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$F0,$88,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $46C0 DEFB $00,$BE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7D,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42 ;
 $4700 DEFB $00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F8,$0F,$C3,$7F,$EC,$6F,$C7,$E1,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00 ;
 $4720 DEFB $00,$BC,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00 ;
 $4740 DEFB $00,$BC,$23,$FF,$FF,$FF,$FF,$FF,$FE,$08,$23,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$10,$00,$9F,$FF,$FF,$C4,$8F,$FF,$FA,$FF,$C4,$3D,$00 ;
 $4760 DEFB $00,$BC,$00,$9F,$FE,$40,$27,$FF,$FF,$F9,$00,$9F,$FE,$40,$27,$FF,$FF,$FF,$FF,$90,$09,$FF,$FF,$FF,$E4,$9F,$FF,$7F,$FF,$E4,$3D,$00 ;
 $4780 DEFB $00,$BC,$07,$FF,$FC,$40,$23,$FF,$FF,$FF,$00,$8F,$FC,$40,$23,$FF,$5F,$EB,$FF,$10,$9F,$FF,$18,$FF,$C4,$8F,$FC,$48,$FF,$C4,$3D,$00 ;
 $47A0 DEFB $00,$BC,$23,$FF,$F8,$40,$23,$FF,$FF,$FF,$FF,$FF,$FC,$40,$23,$FF,$10,$23,$FF,$FF,$FF,$F1,$08,$FF,$FF,$FF,$FC,$48,$FF,$C4,$3D,$00 ;
 $47C0 DEFB $00,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $01,$C3,$ED,$00,$00,$00,$03,$FF,$80,$00,$01,$E7,$76,$F7,$3E,$C0,$70,$00,$00,$7F,$FF,$C0,$00,$00,$00,$00,$0F,$03,$FF,$80,$00,$3B ;
 $4860 DEFB $00,$00,$00,$00,$03,$FF,$FD,$CE,$EA,$4A,$FF,$DF,$F1,$FF,$EB,$24,$93,$FF,$E0,$00,$03,$1F,$FC,$40,$08,$0E,$34,$04,$0A,$00,$00,$F0 ;
 $4880 DEFB $07,$FF,$FF,$FF,$FC,$FE,$7D,$BE,$AA,$87,$FC,$7C,$0F,$7B,$F7,$D6,$83,$39,$80,$00,$0F,$03,$BE,$60,$04,$0F,$E0,$10,$44,$00,$00,$00 ;
 $48A0 DEFB $FF,$FF,$FF,$BF,$E7,$FE,$DD,$6E,$EF,$7F,$C2,$03,$12,$4B,$78,$0F,$D8,$64,$E4,$00,$3E,$00,$00,$3C,$F0,$04,$E1,$D7,$FF,$80,$FF,$80 ;
 $48C0 DEFB $00,$0F,$D9,$7F,$FB,$7C,$71,$DB,$B3,$01,$C8,$E6,$9C,$C4,$00,$00,$00,$3C,$60,$00,$40,$FE,$00,$BB,$E0,$3F,$C7,$DF,$DE,$0F,$FE,$07 ;
 $48E0 DEFB $3F,$FF,$F7,$0C,$F0,$98,$83,$EE,$75,$78,$D1,$C0,$7F,$00,$00,$00,$00,$1F,$C6,$0E,$07,$BC,$18,$7F,$C2,$78,$2B,$FB,$F0,$3C,$F8,$20 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$07,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $2F,$C1,$CE,$00,$00,$3F,$FF,$FE,$60,$00,$07,$98,$EF,$F7,$5F,$78,$0E,$00,$07,$80,$00,$3E,$00,$00,$3E,$00,$F0,$E4,$00,$77,$83,$CC ;
 $4960 DEFB $00,$00,$00,$00,$00,$00,$0E,$BE,$D9,$23,$3F,$BF,$0F,$FF,$F5,$92,$49,$FF,$F8,$00,$00,$0F,$F2,$20,$00,$0E,$34,$0D,$F9,$00,$03,$00 ;
 $4980 DEFB $3F,$FF,$FF,$FF,$F3,$FD,$FD,$BC,$A3,$59,$FF,$11,$B3,$7B,$FB,$D6,$BF,$00,$00,$00,$FF,$C0,$7C,$C4,$03,$8F,$1E,$00,$80,$00,$10,$00 ;
 $49A0 DEFB $FF,$FF,$FE,$7F,$DF,$F9,$39,$6F,$7E,$00,$3D,$80,$80,$4A,$F1,$41,$EB,$11,$54,$01,$C0,$00,$00,$3C,$F0,$0D,$E3,$BB,$F7,$80,$FF,$80 ;
 $49C0 DEFB $FF,$F0,$07,$7F,$E6,$F6,$73,$DB,$6B,$80,$08,$B0,$E3,$5C,$01,$18,$00,$03,$80,$01,$80,$FE,$10,$BB,$E0,$7F,$E7,$1F,$DC,$0F,$FE,$0F ;
 $49E0 DEFB $C0,$0F,$F0,$DB,$F0,$8C,$87,$DB,$BB,$07,$0A,$40,$00,$00,$00,$00,$3C,$10,$7C,$1C,$0F,$B8,$18,$7F,$C4,$78,$5F,$F3,$F0,$3C,$78,$21 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$0F,$E0,$00,$00,$00,$00,$3F,$80,$00,$00,$03,$F0,$7F,$80,$00,$00,$10,$00,$00,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $07,$FF,$3F,$00,$00,$FF,$FF,$F9,$E7,$C0,$0E,$47,$CF,$AF,$5F,$BF,$FD,$C0,$18,$00,$F0,$01,$FF,$C7,$C1,$FF,$00,$18,$3E,$08,$7C,$00 ;
 $4A60 DEFB $00,$00,$0F,$FF,$FF,$FF,$37,$7F,$34,$81,$CF,$BF,$FF,$FF,$F5,$FF,$FF,$FF,$FF,$00,$00,$1C,$D3,$E0,$04,$0E,$18,$30,$7E,$00,$0C,$00 ;
 $4A80 DEFB $FF,$FF,$FF,$FF,$EF,$F3,$FD,$B8,$B1,$1E,$7F,$E7,$6D,$7D,$F8,$19,$7E,$B7,$00,$1E,$07,$FF,$FA,$00,$00,$47,$11,$C0,$10,$00,$10,$0F ;
 $4AA0 DEFB $01,$FF,$F9,$FF,$3F,$F6,$F1,$6F,$7D,$FF,$92,$60,$87,$0C,$E2,$40,$34,$C2,$74,$1F,$FF,$C0,$04,$1C,$F0,$19,$C3,$F7,$F7,$00,$FF,$80 ;
 $4AC0 DEFB $FF,$FF,$DF,$7F,$DD,$C2,$39,$5D,$52,$DC,$0E,$EE,$40,$8C,$00,$30,$20,$00,$00,$0E,$00,$FE,$10,$BB,$C0,$7F,$C6,$DF,$BC,$0F,$FC,$0E ;
 $4AE0 DEFB $FF,$F0,$07,$E7,$B0,$CC,$8F,$B5,$D3,$00,$4C,$40,$00,$00,$3F,$FF,$C3,$F8,$78,$1C,$0F,$F8,$18,$7F,$84,$F8,$5F,$E3,$F0,$38,$78,$42 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $FF,$50,$1E,$00,$00,$1F,$FF,$C0,$7C,$00,$00,$04,$3F,$07,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$80,$00,$18 ;
 $4B40 DEFB $0C,$FF,$FE,$80,$07,$FF,$FF,$F7,$D6,$38,$13,$BC,$3F,$2F,$AF,$C0,$00,$10,$64,$01,$08,$00,$00,$38,$00,$00,$00,$0E,$40,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$7F,$FF,$FF,$FC,$FB,$7F,$6C,$1C,$F3,$7F,$C0,$40,$00,$00,$00,$00,$00,$00,$38,$00,$0C,$20,$02,$1C,$00,$F8,$3A,$08,$70,$00 ;
 $4B80 DEFB $FF,$FF,$FF,$FF,$9F,$EF,$FA,$D1,$D5,$1F,$A0,$08,$DA,$3E,$FC,$03,$FC,$6D,$40,$1F,$0D,$FC,$EC,$00,$00,$40,$11,$F0,$00,$00,$00,$30 ;
 $4BA0 DEFB $FE,$00,$07,$FE,$FF,$ED,$E3,$B7,$78,$00,$69,$18,$19,$94,$CC,$80,$09,$24,$F4,$60,$00,$3F,$02,$1C,$F0,$31,$83,$EF,$F7,$00,$FF,$00 ;
 $4BC0 DEFB $FF,$FF,$DF,$BF,$B3,$82,$38,$67,$B2,$83,$DF,$B0,$23,$28,$10,$60,$24,$00,$00,$10,$04,$FC,$10,$FF,$C0,$7F,$CC,$DF,$BC,$07,$FC,$0C ;
 $4BE0 DEFB $7F,$FF,$FB,$8F,$10,$4C,$CF,$AE,$6A,$FF,$81,$80,$00,$1F,$FC,$01,$C3,$F8,$F8,$3C,$1F,$F8,$18,$7F,$88,$F0,$5F,$E7,$30,$38,$78,$46 ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$01,$80,$FF,$E0,$00,$00,$02,$3F,$00,$07,$C3,$F0,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18 ;
 $4C40 DEFB $01,$9F,$F0,$00,$1F,$FF,$FF,$CF,$31,$96,$3C,$E3,$F0,$EF,$AF,$DF,$FF,$F8,$80,$00,$F0,$0F,$E0,$00,$00,$00,$08,$01,$02,$18,$00,$18 ;
 $4C60 DEFB $00,$01,$FF,$FF,$FF,$FB,$FB,$7F,$54,$62,$7C,$00,$3F,$5F,$FF,$FF,$FF,$FA,$7F,$00,$64,$02,$00,$11,$C0,$F8,$0F,$3F,$87,$C0,$80,$1C ;
 $4C80 DEFB $FF,$FF,$FF,$FE,$7F,$9F,$F6,$D1,$DD,$5F,$DD,$06,$25,$8E,$FF,$FF,$03,$9A,$A0,$00,$31,$CC,$62,$00,$00,$3E,$09,$DC,$0F,$FC,$00,$60 ;
 $4CA0 DEFB $FF,$FF,$E7,$F8,$FF,$DB,$E7,$B7,$F5,$FE,$14,$84,$21,$47,$B1,$00,$06,$C7,$A4,$07,$00,$07,$02,$1D,$F0,$37,$83,$EF,$E7,$00,$FF,$01 ;
 $4CC0 DEFB $FF,$FF,$EF,$BF,$6F,$03,$38,$2D,$DD,$80,$11,$A8,$1C,$10,$00,$0F,$08,$00,$00,$21,$08,$DC,$08,$7F,$C0,$CF,$8D,$FF,$F8,$0F,$FC,$1C ;
 $4CE0 DEFB $80,$1F,$F8,$6E,$00,$46,$5F,$69,$A9,$00,$29,$80,$00,$20,$7C,$01,$83,$F0,$F8,$3C,$1F,$F0,$38,$7B,$88,$F0,$3F,$C7,$20,$18,$F0,$40 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$7F,$00,$00,$00,$00,$01,$C0,$F8,$06,$FC,$3C,$7B,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$33,$10,$00,$FF,$FF,$FF,$3E,$E8,$C9,$7F,$3F,$0F,$EF,$D7,$EF,$FF,$FE,$06,$68,$06,$51,$F0,$0F,$C2,$E0,$00,$78,$C0,$10,$00,$00 ;
 $4D60 DEFB $00,$0F,$FF,$FF,$FF,$E7,$F3,$7F,$A6,$81,$3E,$FF,$FF,$6C,$60,$1A,$FF,$F4,$7E,$00,$74,$00,$00,$0E,$3C,$00,$00,$FF,$FF,$A3,$02,$3A ;
 $4D80 DEFB $FF,$FF,$FF,$FD,$FF,$7F,$C8,$D4,$D9,$AF,$D8,$E1,$9A,$53,$7C,$00,$F0,$65,$50,$00,$01,$08,$7F,$F0,$00,$01,$C9,$DB,$FF,$83,$83,$C0 ;
 $4DA0 DEFB $FF,$FF,$EB,$F7,$FF,$37,$E6,$B7,$F4,$01,$C8,$82,$42,$23,$06,$00,$07,$B4,$48,$10,$80,$FE,$01,$39,$E0,$37,$83,$EF,$EF,$00,$FF,$03 ;
 $4DC0 DEFB $FF,$FF,$EF,$BC,$DF,$31,$3C,$6A,$63,$30,$1E,$E7,$00,$90,$00,$10,$80,$00,$00,$42,$09,$5C,$08,$7F,$C0,$DF,$1D,$FD,$F8,$1F,$FC,$1C ;
 $4DE0 DEFB $FF,$E0,$03,$F7,$00,$46,$7E,$D1,$6A,$FF,$CB,$00,$00,$40,$78,$01,$07,$F0,$F8,$7C,$1F,$F0,$38,$FB,$89,$F0,$3F,$3E,$20,$18,$F0,$40 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$3F,$F0,$00,$00,$00,$00,$00,$00,$00,$07,$15,$9F,$C2,$7D,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$02,$00,$03,$FF,$FF,$FE,$F9,$DB,$14,$FF,$C0,$FF,$DF,$D7,$F0,$00,$FF,$00,$30,$0D,$DC,$EE,$30,$4E,$38,$00,$84,$30,$00,$70,$00 ;
 $4E60 DEFB $00,$3F,$FF,$FF,$FF,$9F,$CB,$7F,$EE,$80,$0E,$FF,$FF,$6B,$AF,$CD,$40,$6C,$FC,$08,$38,$DF,$1E,$00,$1A,$00,$01,$FF,$F5,$DC,$00,$20 ;
 $4E80 DEFB $FF,$FF,$FF,$F3,$FC,$FF,$B6,$DE,$DB,$87,$D8,$10,$65,$2C,$03,$FF,$F6,$12,$A8,$60,$00,$0F,$80,$1E,$0E,$1F,$E9,$DD,$FF,$80,$7F,$C0 ;
 $4EA0 DEFB $FF,$FF,$ED,$CF,$FE,$CE,$F0,$B7,$EC,$00,$23,$60,$43,$AE,$78,$00,$03,$60,$88,$0F,$07,$F3,$00,$B9,$E0,$33,$87,$DF,$EF,$00,$FE,$03 ;
 $4EC0 DEFB $FF,$FF,$EF,$DB,$BD,$19,$14,$F3,$BA,$8F,$91,$38,$64,$A0,$08,$0F,$00,$00,$00,$86,$1F,$5C,$08,$7F,$C0,$BE,$13,$FD,$F8,$1E,$FC,$18 ;
 $4EE0 DEFB $FF,$FF,$FB,$F7,$00,$64,$7D,$A2,$D3,$80,$FE,$00,$00,$40,$78,$02,$07,$F0,$F0,$78,$1F,$F0,$78,$F7,$89,$F0,$3F,$8E,$20,$10,$F0,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$E1,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$79,$79,$F6,$BE,$87,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00 ;
 $4F40 DEFB $00,$00,$00,$1F,$FC,$00,$01,$F7,$30,$91,$FF,$EF,$FE,$1F,$EB,$FF,$FF,$FF,$C0,$00,$01,$E0,$1F,$8F,$83,$9C,$18,$78,$0C,$00,$0F,$0C ;
 $4F60 DEFB $01,$FF,$FF,$FF,$FF,$7F,$BD,$BF,$AE,$8F,$F3,$7F,$FF,$74,$77,$CE,$BC,$DC,$E0,$00,$03,$0F,$E1,$00,$09,$FE,$00,$1C,$CC,$60,$00,$00 ;
 $4F80 DEFB $FF,$FF,$FF,$CF,$FB,$FF,$6F,$6E,$EF,$00,$10,$0C,$12,$97,$7F,$F0,$39,$88,$04,$40,$01,$F0,$00,$1D,$F1,$E0,$E9,$D7,$FF,$80,$7F,$C0 ;
 $4FA0 DEFB $FF,$FF,$DE,$BF,$FD,$BC,$70,$DB,$DE,$FE,$05,$58,$87,$E2,$00,$00,$00,$D8,$10,$00,$38,$7E,$00,$BB,$E0,$3F,$C7,$DF,$CE,$05,$FE,$07 ;
 $4FC0 DEFB $FF,$FF,$EF,$D7,$79,$99,$95,$F5,$CE,$80,$11,$47,$88,$C0,$00,$00,$00,$00,$01,$86,$1F,$FC,$08,$7F,$C1,$3C,$2B,$FD,$F0,$1C,$FC,$10 ;
 $4FE0 DEFB $FF,$FF,$FD,$F7,$00,$20,$FB,$45,$B8,$FF,$F0,$00,$00,$80,$F0,$00,$07,$91,$F0,$F8,$1F,$F0,$78,$F7,$01,$F0,$3F,$9E,$00,$10,$F0,$00 ;
 $5000 DEFB $7F,$FF,$FD,$FB,$81,$21,$FA,$FD,$B0,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $80,$7F,$FF,$7E,$E3,$FD,$FF,$07,$C0,$00,$0C,$00,$05,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38 ;
 $5040 DEFB $80,$80,$7F,$EF,$BF,$00,$03,$C0,$24,$80,$1F,$F8,$09,$08,$38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C ;
 $5060 DEFB $80,$80,$80,$80,$F5,$C0,$00,$01,$1D,$80,$01,$18,$7D,$07,$38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C ;
 $5080 DEFB $7F,$80,$80,$80,$81,$80,$00,$00,$14,$00,$05,$08,$72,$10,$38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$79,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C ;
 $50A0 DEFB $00,$7F,$80,$80,$80,$80,$00,$00,$10,$00,$42,$20,$C4,$10,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $3F,$FF,$FD,$FB,$81,$33,$F6,$03,$70,$00,$00,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5120 DEFB $C0,$3F,$FF,$BE,$E1,$F8,$00,$F8,$A0,$3C,$10,$00,$09,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5140 DEFB $C0,$C0,$3F,$EF,$DE,$00,$00,$30,$45,$80,$12,$A8,$0D,$01,$38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$F0,$1F,$80,$1C ;
 $5160 DEFB $C0,$C0,$C0,$C0,$04,$3E,$00,$01,$04,$80,$00,$98,$79,$0F,$38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$C2,$F0,$17,$80,$1C ;
 $5180 DEFB $3F,$C0,$C0,$C0,$C0,$F0,$00,$00,$9C,$00,$09,$10,$32,$08,$38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C ;
 $51A0 DEFB $00,$3F,$C0,$C0,$C0,$C0,$00,$00,$00,$00,$82,$20,$84,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $1F,$FF,$FE,$FB,$89,$13,$EF,$FE,$E0,$00,$00,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5220 DEFB $E0,$1F,$FF,$BF,$71,$F8,$00,$06,$70,$43,$E3,$E0,$31,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C ;
 $5240 DEFB $E0,$E0,$1F,$EF,$DC,$00,$00,$08,$44,$80,$00,$04,$1D,$03,$38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C ;
 $5260 DEFB $E0,$E0,$E0,$E0,$04,$01,$FF,$F9,$04,$80,$00,$8C,$79,$0E,$38,$BF,$FF,$2F,$FF,$2F,$01,$E9,$E8,$BC,$7E,$5E,$0F,$E2,$70,$17,$FF,$1C ;
 $5280 DEFB $1F,$E0,$E0,$E0,$E0,$6E,$00,$07,$38,$00,$09,$10,$32,$10,$38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C ;
 $52A0 DEFB $00,$1F,$E0,$E0,$E0,$E0,$00,$00,$00,$00,$81,$20,$88,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $0F,$FF,$FE,$FB,$C5,$1F,$DF,$FE,$C0,$3E,$18,$00,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5320 DEFB $F0,$0F,$FF,$BF,$73,$F7,$FE,$01,$98,$81,$8D,$F8,$41,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C ;
 $5340 DEFB $F0,$F0,$0F,$EF,$DB,$FF,$80,$04,$F2,$80,$00,$0C,$1D,$03,$38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C ;
 $5360 DEFB $F0,$F0,$F0,$F0,$06,$00,$00,$00,$89,$00,$01,$8C,$72,$1C,$38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C ;
 $5380 DEFB $0F,$F0,$F0,$F0,$F0,$19,$FF,$F8,$50,$00,$11,$10,$32,$18,$38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C ;
 $53A0 DEFB $00,$0F,$F0,$F0,$F0,$F0,$10,$08,$01,$81,$01,$20,$08,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $07,$FF,$FE,$FD,$C5,$9F,$B0,$00,$C0,$40,$B8,$07,$E0,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $5420 DEFB $F8,$07,$FF,$BF,$77,$E8,$01,$E0,$4C,$02,$18,$74,$82,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C ;
 $5440 DEFB $F8,$F8,$07,$F7,$E8,$00,$7F,$00,$FE,$80,$00,$14,$1D,$03,$38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C ;
 $5460 DEFB $F8,$F8,$F8,$F8,$03,$80,$00,$00,$89,$00,$02,$8C,$32,$1C,$38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C ;
 $5480 DEFB $07,$F8,$F8,$F8,$F8,$06,$00,$01,$E0,$0C,$11,$10,$24,$00,$38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C ;
 $54A0 DEFB $00,$07,$F8,$F8,$F8,$F8,$00,$00,$07,$09,$01,$20,$08,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $03,$FF,$FE,$FD,$C7,$9F,$80,$07,$00,$40,$80,$78,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $5520 DEFB $FC,$03,$FF,$DF,$7F,$C0,$00,$1C,$0E,$0C,$3F,$CE,$92,$00,$38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C ;
 $5540 DEFB $FC,$FC,$03,$F7,$E8,$00,$00,$F0,$FE,$80,$00,$2C,$3D,$03,$38,$A4,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C ;
 $5560 DEFB $FC,$FC,$FC,$FC,$04,$70,$00,$04,$91,$00,$02,$9C,$32,$18,$38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C ;
 $5580 DEFB $03,$FC,$FC,$FC,$FC,$01,$E0,$0F,$00,$48,$22,$10,$64,$10,$38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C ;
 $55A0 DEFB $00,$03,$FC,$FC,$FC,$FC,$00,$00,$0C,$01,$01,$20,$04,$00,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $01,$FF,$FF,$7D,$C3,$BF,$7F,$F8,$00,$3F,$00,$81,$FF,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $5620 DEFB $FE,$01,$FF,$DF,$BF,$80,$00,$02,$02,$10,$3E,$1F,$12,$00,$38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C ;
 $5640 DEFB $FE,$FE,$01,$F7,$C8,$00,$00,$09,$0E,$80,$00,$48,$3D,$07,$38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C ;
 $5660 DEFB $FE,$FE,$FE,$FE,$04,$0E,$00,$78,$66,$00,$02,$98,$72,$18,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5680 DEFB $01,$FE,$FE,$FE,$FE,$00,$1F,$F0,$00,$10,$22,$10,$44,$00,$38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$E7,$3D,$FF,$1C ;
 $56A0 DEFB $00,$01,$FE,$FE,$FE,$FE,$00,$10,$00,$01,$01,$20,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $00,$FF,$FF,$7E,$E3,$FE,$FF,$FF,$00,$00,$03,$FE,$03,$00,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78 ;
 $5720 DEFB $FF,$00,$FF,$DF,$BF,$BF,$FC,$00,$19,$10,$7F,$FC,$0A,$00,$38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C ;
 $5740 DEFB $FF,$FF,$00,$1A,$0E,$00,$00,$01,$E2,$80,$00,$88,$7D,$07,$38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C ;
 $5760 DEFB $FF,$FF,$FF,$FF,$02,$01,$FF,$80,$04,$00,$43,$98,$72,$18,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C ;
 $5780 DEFB $00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$42,$10,$44,$00,$38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C ;
 $57A0 DEFB $00,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$01,$01,$10,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$00 ; {Attributes
 $5820 DEFB $00,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$00 ;
 $5840 DEFB $00,$46,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$46,$47 ;
 $5860 DEFB $00,$46,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$46,$00 ;
 $5880 DEFB $00,$46,$42,$42,$42,$42,$42,$42,$42,$42,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$47 ;
 $58A0 DEFB $00,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$00 ;
 $58C0 DEFB $00,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$46,$00 ;
 $58E0 DEFB $00,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$44 ;
 $5900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5920 DEFB $43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5940 DEFB $43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $5960 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $5980 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $59A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $59C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $59E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43 ;
 $5A00 DEFB $57,$47,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5A20 DEFB $56,$57,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$43,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47 ;
 $5A40 DEFB $74,$56,$57,$47,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47 ;
 $5A60 DEFB $61,$74,$56,$42,$47,$47,$47,$47,$47,$47,$43,$43,$43,$43,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47 ;
 $5A80 DEFB $41,$61,$74,$56,$42,$47,$47,$47,$47,$43,$43,$43,$43,$43,$47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47 ;
 $5AA0 DEFB $00,$41,$61,$74,$56,$42,$43,$43,$43,$43,$43,$43,$43,$43,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

i$5B00

; Decryption Routine
;
; .
;
; .
;
; Runs "RRD" on every byte from #N$7FFF-#N$FBFF.
@label=GameEntry
c$5B80 LD HL,$7FFF   ; #REGhl=#N$7FFF.
 $5B83 LD BC,$007C   ; #REGbc=#N$007C.
 $5B86 XOR A         ; Reset the flags.
@label=Decryption_Loop
*$5B87 RRD           ; RRD operation.
 $5B89 INC HL        ; Increment #REGhl by one.
 $5B8A DJNZ $5B87    ; Decrease counter by one and loop back to #R$5B87 until
                     ; counter is zero.
 $5B8C DEC C         ; Decrease #REGc by one.
 $5B8D JR NZ,$5B87   ; Loop back to #R$5B87 until #REGc is zero.
 $5B8F JP $8000      ; Jump to #R$8000.
; View the equivalent code in #ATICATAC$5B80.
; .
; Earlier Ultimate games use a much simpler mechanism;
; #LIST
; { #COOKIE$5B80 }
; { #JETPAC$5B80 }
; { #PSSST$5B80 }
; { #TRANZAM$5B80 }
; LIST#

i$5B92

; Indirect Jump
;
; Used by the routine at #R$81BB.
@label=IndirectJump
c$5CB0 JP (HL)       ; Jump to the address held in #REGhl.

i$5CB1

; Game Options
@label=GameOptions
g$5E00 DEFB $00

; Game status buffer entry at 5E01
g$5E01 DEFB $00,$2C,$30

; Font Pointer
;
; Holds a pointer to the currently used font data.
@label=FontPointer
g$5E04 DEFW $000E

; High Score
;
; 3-byte representation of the score.
@label=High_Score
g$5E06 DEFB $00,$00,$00
; View the equivalent code in;
; #LIST
; { #COOKIE$5F09 }
; { #JETPAC$5CF0 }
; { #PSSST$5E00 }
; LIST#

; Game status buffer entry at 5E09
g$5E09 DEFB $00,$3A,$EF,$22,$22,$AF,$3A,$F5
 $5E11 DEFB $AC,$36,$0E,$00,$00,$06,$00,$00
 $5E19 DEFB $2C,$30,$0E,$00,$00,$00,$00

; Game status buffer entry at 5E20
g$5E20 DEFB $00,$3A,$EF,$22,$22,$AF,$3A,$F5
 $5E28 DEFB $AC,$36,$0E,$00,$00,$06,$00,$00
 $5E30 DEFB $2C,$30,$0E,$00,$00

; Game status buffer entry at 5E35
g$5E35 DEFB $00,$00,$00

; Game status buffer entry at 5E38
g$5E38 DEFB $3A,$EF,$22,$22,$AF,$3A,$F5,$C0

; Game status buffer entry at 5E40
g$5E40 DEFB $32,$33

; Game status buffer entry at 5E42
g$5E42 DEFB $34,$32,$34,$0E,$00,$00,$80,$5B
 $5E4A DEFB $00,$0D,$00,$00,$00,$00

; Game status buffer entry at 5E50
g$5E50 DEFB $00,$00

; Game status buffer entry at 5E52
g$5E52 DEFB $00

; Last Frame
;
; #HTML(Holds a copy of the last <a
; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a> counter.)
@label=LastFrame
g$5E53 DEFB $00
 $5E54 DEFB $00,$00

; Game status buffer entry at 5E56
g$5E56 DEFB $00

; Game status buffer entry at 5E57
g$5E57 DEFB $00

; Game status buffer entry at 5E58
g$5E58 DEFB $00

; Game status buffer entry at 5E59
g$5E59 DEFB $00

; Game status buffer entry at 5E5A
g$5E5A DEFB $00,$00,$00

; Game status buffer entry at 5E5D
g$5E5D DEFB $00

; Game status buffer entry at 5E5E
g$5E5E DEFB $00

; 1UP Score
;
; 3-byte representation of the score.
@label=1UP_Score_1
g$5E5F DEFB $00      ; Byte #1.
@label=1UP_Score_2
 $5E60 DEFB $00      ; Byte #2.
@label=1UP_Score_3
 $5E61 DEFB $00      ; Byte #3.

; 2UP Score
;
; 3-byte representation of the score.
@label=2UP_Score_1
g$5E62 DEFB $00      ; Byte #1.
@label=2UP_Score_2
 $5E63 DEFB $00      ; Byte #2.
@label=2UP_Score_3
 $5E64 DEFB $00      ; Byte #3.

; Active Player
;
; Which player is currently active.
; $5E65 #TABLE(default,centre,centre) { =h Value | =h Player }
; { #N$00 | 1UP }
; { #N$FF | 2UP }
; TABLE#
@label=Flag_ActivePlayer
g$5E65 DEFB $00

; Current menu item colour attribute
@label=Current_MenuAttr
g$5E66 DEFB $00

; Game Delay Timer
;
; At the beginning of each player turn there is a delay to allow the player to be ready for play.
; #TABLE(default,centre,centre)
; { =h Value | =h Game Mode }
; { #N$80 | 1UP }
; { #N$FF | 2UP }
; TABLE#
; The larger delay for a 2UP game is useful for swapping players controls.
@label=GameDelayTimer
g$5E67 DEFB $00

; Game status buffer entry at 5E68
g$5E68 DEFB $00,$00,$00,$00

; Game status buffer entry at 5E6C
g$5E6C DEFB $00

; Game status buffer entry at 5E6D
g$5E6D DEFB $00,$00

; Game status buffer entry at 5E6F
g$5E6F DEFB $00,$00

; Number of players?
g$5E71 DEFB $00,$00

; Game status buffer entry at 5E73
g$5E73 DEFB $00

; Game status buffer entry at 5E74
g$5E74 DEFB $00

; Game status buffer entry at 5E75
g$5E75 DEFB $00,$00

; High Score Position
;
; Used when calculating the players position in the high score table.
@label=HighScorePosition
g$5E77 DEFB $00

; Game status buffer entry at 5E78
g$5E78 DEFB $00,$00,$00,$00

; Game status buffer entry at 5E7C
g$5E7C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E84 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E8C DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E94 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E9C DEFB $00,$00,$00,$00

; Active Player Fuel
@label=ActivePlayer_Fuel
g$5EA0 DEFB $00

; Active Player Lives
@label=ActivePlayer_Lives
g$5EA1 DEFB $00

; Game status buffer entry at 5EA2
g$5EA2 DEFB $00

; Game status buffer entry at 5EA3
g$5EA3 DEFB $00

; Inactive Player Fuel
@label=InactivePlayer_Fuel
g$5EA4 DEFB $00

; Inactive Player Lives
@label=InactivePlayer_Lives
g$5EA5 DEFB $00

; Game status buffer entry at 5EA6
g$5EA6 DEFB $00

; Game status buffer entry at 5EA7
g$5EA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ECF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FFF DEFB $00

; Laser Beam Parameters
;
; #TABLE(default,centre) { =h Bytes(n) | =h Variable }
; TABLE#
@label=Laser_Param_1
g$6000 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Laser Beam #1.
 $6008 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6010 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=Laser_Param_2
 $6018 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Laser Beam #2.
 $6020 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6028 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=Laser_Param_3
 $6030 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Laser Beam #3.
 $6038 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6040 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=Laser_Param_4
 $6048 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Laser Beam #4.
 $6050 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6058 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; View the equivalent code in;
; #LIST
; { #JETPAC$5D08 }
; LIST#

; Data block at 6060
b$6060 DEFB $00
 $6061 DEFB $00
 $6062 DEFB $00
 $6063 DEFB $00
 $6064 DEFB $00
 $6065 DEFB $00
 $6066 DEFB $00
 $6067 DEFB $00
 $6068 DEFB $00
 $6069 DEFB $00
 $606A DEFB $00
 $606B DEFB $00
 $606C DEFB $00
 $606D DEFB $00
 $606E DEFB $00
 $606F DEFB $00
 $6070 DEFB $00
 $6071 DEFB $00
 $6072 DEFB $00
 $6073 DEFB $00
 $6074 DEFB $00
 $6075 DEFB $00
 $6076 DEFB $00
 $6077 DEFB $00
 $6078 DEFB $00
 $6079 DEFB $00
 $607A DEFB $00
 $607B DEFB $00
 $607C DEFB $00
 $607D DEFB $00
 $607E DEFB $00
 $607F DEFB $00
 $6080 DEFB $00
 $6081 DEFB $00
 $6082 DEFB $00
 $6083 DEFB $00
 $6084 DEFB $00
 $6085 DEFB $00
 $6086 DEFB $00
 $6087 DEFB $00
 $6088 DEFB $00
 $6089 DEFB $00
 $608A DEFB $00
 $608B DEFB $00
 $608C DEFB $00
 $608D DEFB $00

; Fuel Level
@label=FuelLevel_1
g$608E DEFB $00
@label=FuelLevel_2
 $608F DEFB $00

; Data block at 6090
b$6090 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6098 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $60F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6100 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6108 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6110 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6118 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6120 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6128 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6130 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6138 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6140 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6148 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6150 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6158 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6160 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6168 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6170 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6178 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6180 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6188 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6190 DEFB $00,$00,$00,$00,$00

; Data block at 6195
b$6195 DEFB $00,$00,$00

; Bomb States?
@label=Bomb_StatesTBC
b$6198 DEFB $00
 $6199 DEFB $00
 $619A DEFB $00
 $619B DEFB $00
 $619C DEFB $00
 $619D DEFB $00
 $619E DEFB $00
 $619F DEFB $00
 $61A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Alien States
;
; There are a maximum of 6 aliens on the screen at one time, and those states
; are stored here in this data block.
; #TABLE(default,centre,centre,centre,centre,centre,centre)
; { =h Byte | =h State | =h Byte | =h State | =h Byte | =h State }
; { #N$00 | TBC | #N$08 | TBC | #N$10 | TBC }
; { #N$01 | TBC | #N$09 | TBC | #N$11 | TBC }
; { #N$02 | TBC | #N$0A | TBC | #N$12 | TBC }
; { #N$03 | TBC | #N$0B | TBC | #N$13 | TBC }
; { #N$04 | TBC | #N$0C | TBC | #N$14 | TBC }
; { #N$05 | TBC | #N$0D | TBC | #N$15 | TBC }
; { #N$06 | TBC | #N$0E | TBC | #N$16 | TBC }
; { #N$07 | TBC | #N$0F | TBC | #N$17 | TBC }
; TABLE#
@label=Alien_States
g$61B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 1.
 $61B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $61C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $61C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 2.
 $61D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $61D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $61E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 3.
 $61E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $61F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $61F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 4.
 $6200 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6208 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $6210 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 5.
 $6218 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6220 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $6228 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {Slot 6.
 $6230 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $6238 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Data block at 6240
b$6240 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6248 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6250 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6258 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6260 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6268 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6270 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6278 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6280 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6288 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6290 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6298 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $62F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6300 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6308 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6310 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6318 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6320 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6328 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6330 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6338 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6340 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6348 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6350 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6358 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6360 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6368 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6370 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6378 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6380 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6388 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6390 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6398 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6400 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6408 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6410 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6418 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6420 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6428 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6430 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6438 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6440 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6448 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6450 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6458 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6460 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6468 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6470 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6478 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6480 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6488 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6490 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6498 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $64F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6500 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6508 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6510 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6518 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6520 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6528 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6530 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6538 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6540 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6548 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6550 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6558 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6560 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6568 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6570 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6578 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6580 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6588 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6590 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6598 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $65F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6608 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6610 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6618 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6620 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6628 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6630 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6638 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6640 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6648 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6650 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6658 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6660 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6668 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6670 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6678 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6680 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6688 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6690 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6698 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6700 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6708 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6710 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6718 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6720 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6728 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6730 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6738 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6740 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6748 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6750 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6758 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6760 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6768 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6770 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6778 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6780 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6788 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6790 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6798 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $67F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6800 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6808 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6810 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6818 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6820 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6828 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6830 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6840 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6848 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6850 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6858 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6860 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6868 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6870 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6878 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6880 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6888 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6890 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6898 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $68F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6900 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6908 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6910 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6918 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6920 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6928 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6930 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6938 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6940 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6948 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6950 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6960 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6968 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6970 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6978 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6980 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6988 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6990 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6998 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $69F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6AF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Active Terrain Data
@label=TerrainData_Active
b$7000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7010 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7030 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7050 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7070 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7090 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $70F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7110 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7130 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7150 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7170 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7190 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $71F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7210 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7230 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7250 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7270 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7290 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $72F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7310 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7330 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7350 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7370 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7390 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $73F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Inactive Terrain Data
@label=TerrainData_Inactive
b$7400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7410 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7430 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7450 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7470 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7490 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $74F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7510 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7530 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7550 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7570 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7590 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $75F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7610 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7630 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7650 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7670 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7690 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $76F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7710 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7730 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7750 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7770 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $7790 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $77F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Data block at 7800
b$7800 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7808 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7810 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7818 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7820 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7828 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7830 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7838 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7840 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7848 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7850 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7858 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7860 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7868 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7870 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7878 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7880 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7888 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7890 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7898 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $78F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7900 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7908 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7910 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7918 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7920 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7928 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7930 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7938 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7940 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7948 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7950 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7958 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7960 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7968 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7970 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7978 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7980 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7988 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7990 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7998 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $79F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7A98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7AF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7CF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7D98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $7FF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Security Check
;
; Used by the routine at #R$5B80.
@label=SecurityCheck
c$8000 DI            ; Disable interrupts.
 $8001 LD SP,$5E00   ; Set the stack pointer to #N$5E00.
 $8004 LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $8007 CP $83        ; {Return if #REGa is not #N$83.
 $8009 RET NZ        ; }
; Continue on to #R$800A.
; .
; View the equivalent code in;
; #LIST
; { #ATICATAC$6000 }
; { #COOKIE$5F00 }
; { #JETPAC$61E5 }
; { #PSSST$61C6 }
; { #SABREWULF$995A }
; { #TRANZAM$5F00 }
; LIST#

; Game Initialisation
@label=GameInitialisation
c$800A LD HL,$5E00   ; {Write #N$00 to #N$2200 bytes starting from #R$5E00.
 $800D LD BC,$2200   ;
@label=GameInitialisation_Loop
*$8010 LD (HL),$00   ;
 $8012 INC HL        ;
 $8013 DEC BC        ;
 $8014 LD A,C        ;
 $8015 OR B          ;
 $8016 JR NZ,$8010   ; }
 $8018 LD HL,$D347   ; {Write #R$D347 to #R$5E04.
 $801B LD ($5E04),HL ; }
 $801E CALL $9C23    ; Call #R$9C23.
 $8021 CALL $84D8    ; Call #R$84D8.
 $8024 LD DE,$BA2A   ; #REGde=#R$BA2A.
 $8027 CALL $B9BC    ; Call #R$B9BC.
 $802A JR $8035      ; Jump to #R$8035.
; This entry point is used by the routine at #R$F33E.
@label=Game_Restart
*$802C CALL $84D8    ; Call #R$84D8.
 $802F CALL $F410    ; Call #R$F410.
 $8032 CALL $84D8    ; Call #R$84D8.
@label=GameSelect_Loop
*$8035 CALL $80D1    ; Call #R$80D1.
 $8038 LD A,$F7      ; {Read from the keyboard;
 $803A OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $803C IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $803E CPL           ; Flip the bits.
 $803F LD E,A        ; #REGe=#REGa.
 $8040 LD A,($5E00)  ; #REGa=#R$5E00.
 $8043 LD ($5E7C),A  ; Write #REGa to #R$5E7C.
; Handle 1UP selection.
@label=GameSelect_CheckP1
 $8046 BIT 0,E       ; Has key "1" been pressed? ("1 PLAYER GAME").
 $8048 JR Z,$804C    ; If not jump to #R$804C.
 $804A RES 0,A       ; Set player count = 1.
; Handle 2UP selection.
@label=GameSelect_CheckP2
*$804C BIT 1,E       ; Has key "2" been pressed? ("2 PLAYER GAME").
 $804E JR Z,$8052    ; If not jump to #R$8052.
 $8050 SET 0,A       ; Set player count = 2.
; Handle Keyboard selection.
@label=GameSelect_CheckKeyboard
*$8052 BIT 2,E       ; Has key "3" been pressed? ("3 KEYBOARD").
 $8054 JR Z,$8058    ; If not jump to #R$8058.
 $8056 AND %11111001 ; Set control method = keyboard.
; Handle Kempston Joystick selection.
@label=GameSelect_CheckKempston
*$8058 BIT 3,E       ; Has key "4" been pressed? ("4 KEMPSTON JOYSTICK").
 $805A JR Z,$8060    ; If not jump to #R$8060.
 $805C AND %11111001 ; Strip out the control method bits.
 $805E OR %00000010  ; Set control method = kempston.
; Handle Cursor Joystick selection.
@label=GameSelect_CheckCursor
*$8060 BIT 4,E       ; Has key "5" been pressed? ("5 CURSOR JOYSTICK").
 $8062 JR Z,$8068    ; If not jump to #R$8068.
 $8064 AND %11111001 ; Strip out the control method bits.
 $8066 OR %00000100  ; Set control method = cursor.
; Handle starting a new game.
@label=GameSelect_StartGame
*$8068 LD ($5E00),A  ; Store #REGa at #R$5E00.
 $806B LD A,$EF      ; {Read from the keyboard;
 $806D OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $806F IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
 $8071 CPL           ; Flip the bits.
 $8072 BIT 4,A       ; Has key "6" been pressed? ("6 START GAME").
 $8074 JP NZ,$81BB   ; If so, jump to #R$81BB.
 $8077 LD A,($5E00)  ; {#REGc=#R$5E00.
 $807A LD C,A        ; }
 $807B LD A,($5E7C)  ; #REGa=#R$5E7C.
 $807E XOR C         ;
 $807F PUSH AF       ; Stash #REGaf on the stack.
 $8080 BIT 0,A       ;
 $8082 CALL NZ,$80FD ;
 $8085 POP AF        ; Restore #REGaf from the stack.
 $8086 AND %00000110 ; Keep only bits 1-2.
 $8088 JR Z,$809A    ;
 $808A LD DE,$BA9E   ; #REGde=#R$BA9E.
 $808D LD A,C        ; #REGa=#REGc.
 $808E AND %00000110 ; Keep only bits 1-2.
 $8090 LD L,A        ; {Create an offset in #REGhl.
 $8091 LD H,$00      ; }
 $8093 ADD HL,DE     ; #REGhl=#R$BA9E + offset.
 $8094 LD E,(HL)     ; {#REGde=address held at #REGhl.
 $8095 INC HL        ;
 $8096 LD D,(HL)     ; }
 $8097 CALL $B9BC    ; Call #R$B9BC.
; Handle flashing each selection.
*$809A LD HL,$810F   ; #REGhl=#R$810F(GameSelection_Attributes)+#N$01 (i.e.
                     ; ignoring "Game Selection" as it doesn't flash).
 $809D LD A,($5E00)  ; {#REGc=#R$5E00.
 $80A0 LD C,A        ; }
 $80A1 BIT 0,C       ;
 $80A3 JR NZ,$80BE   ;
 $80A5 CALL $80C3    ;
@label=MenuAttrHandler
*$80A8 LD B,$03      ; #REGb=#N$03.
 $80AA LD A,C        ;
 $80AB RRCA          ;
@label=MenuAttrHandler_Loop
*$80AC AND %00000011 ;
 $80AE JR Z,$80B9    ;
 $80B0 CALL $80C6    ;
*$80B3 DEC A         ;
 $80B4 DJNZ $80AC    ;
 $80B6 JP $8035      ; Jump to #R$8035.
*$80B9 CALL $80CD    ; Call #R$80CD.
 $80BC JR $80B3      ; Jump to #R$80B3.
*$80BE CALL $80CA    ; Call #R$80CA.
 $80C1 JR $80A8      ; Jump to #R$80A8.
; Set the first menu item, unset the second.
@label=MenuAttributeSetUnset
*$80C3 SET 7,(HL)    ; Set the FLASH attribute for the menu attribute.
 $80C5 INC HL        ; Move onto the next menu attribute.
@label=MenuAttributeUnSetFirst
*$80C6 RES 7,(HL)    ; Unset the FLASH attribute for the menu attribute.
 $80C8 INC HL        ; Move onto the next menu attribute.
 $80C9 RET           ; Return.
; Unset the first menu item, set the second.
@label=MenuAttributeUnsetSet
*$80CA RES 7,(HL)    ; Unset the FLASH attribute for the menu attribute.
 $80CC INC HL        ; Move onto the next menu attribute.
@label=MenuAttributeSetFirst
*$80CD SET 7,(HL)    ; Set the FLASH attribute for the menu attribute.
 $80CF INC HL        ; Move onto the next menu attribute.
 $80D0 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #COOKIE$6298 }
; { #JETPAC$61EB }
; { #PSSST$61CD }
; { #TRANZAM$5F07 }
; LIST#

; Game Selection Menu
;
; Used by the routine at #R$800A.
@label=GameMenu
c$80D1 LD DE,$810E   ; #REGde=#R$810E.
 $80D4 EXX           ; Switch to the shadow registers.
 $80D5 LD HL,$8115   ; #REGhl'=#R$8115.
 $80D8 LD DE,$811C   ; #REGde'=#R$811C.
; There are seven lines of text.
 $80DB LD B,$07      ; #REGb'=#N$07 (counter).
@label=GameMenu_Loop
*$80DD EXX           ; Switch back to the normal registers.
 $80DE LD A,(DE)     ; {Copy a byte from #REGde to #R$5E66.
 $80DF LD ($5E66),A  ; }
 $80E2 INC DE        ; Increment #REGde by one.
 $80E3 EXX           ; Switch to the shadow registers.
 $80E4 PUSH BC       ; Stash #REGbc' on the stack.
 $80E5 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $80E6 INC HL        ; Increment #REGhl' (position data pointer) by one.
 $80E7 PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $80E8 LD H,A        ; {#REGh'=#REGa #REGl'=#N$38.
 $80E9 LD L,$38      ; }
 $80EB CALL $81AB    ; Call #R$81AB.
 $80EE EXX           ; Switch back to the normal registers.
 $80EF POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $80F0 POP BC        ; }
 $80F1 INC DE        ; Increment #REGde by one.
 $80F2 DJNZ $80DD    ; Decrease counter by one and loop back to #R$80DD until
                     ; counter is zero.
 $80F4 LD HL,$B800   ; #REGhl=#N($B800, $04, $04) (screen buffer location).
 $80F7 LD DE,$818A   ; #REGde=#R$818A.
 $80FA JP $8A11      ; Jump to #R$8A11.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #COOKIE$6332 }
; { #JETPAC$0000 }
; { #PSSST$6250 }
; { #TRANZAM$0000 }
; LIST#

; Routine at 80FD
;
; Used by the routine at #R$800A.
c$80FD LD DE,$BAA4   ; #REGde=#R$BAA4.
 $8100 LD A,C        ; #REGa=#REGc.
 $8101 RLCA          ; Rotate bit 0 to bit 1.
 $8102 AND %00000010 ; Keep only bit 1.
 $8104 LD L,A        ; {Create an offset in #REGhl.
 $8105 LD H,$00      ; }
 $8107 ADD HL,DE     ; #REGhl=#R$BAA4 + offset.
 $8108 LD E,(HL)     ; {#REGde=#REGhl.
 $8109 INC HL        ;
 $810A LD D,(HL)     ; }
 $810B JP $B9BC      ; Jump to #R$B9BC.

; Game Select Attribute Table
@label=GameSelection_Attributes
b$810E DEFB $47      ; {#TABLE(default,centre)
 $810F DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $8110 DEFB $47      ; { #N$01 | Game Selection }
 $8111 DEFB $47      ; { #N$02 | 1 Player Game }
 $8112 DEFB $47      ; { #N$03 | 2 Player Game }
 $8113 DEFB $47      ; { #N$04 | 3 Keyboard }
 $8114 DEFB $47      ; { #N$05 | 4 Kempston Joystick }
                     ; { #N$06 | 5 Cursor Joystick }
                     ; { #N$07 | 6 Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #COOKIE$635E }
; { #JETPAC$628D }
; { #PSSST$627C }
; { #TRANZAM$5FA7 }
; LIST#

; Game Select Y Position Table
@label=GameSelection_Position
b$8115 DEFB $20      ; {#TABLE(default,centre,centre)
 $8116 DEFB $38      ; { =h Byte(n) | =h Position | =h Menu Item }
 $8117 DEFB $48      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | Game Selection }
 $8118 DEFB $58      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 1 Player Game }
 $8119 DEFB $68      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 2 Player Game }
 $811A DEFB $78      ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | 3 Keyboard }
 $811B DEFB $98      ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | 4 Kempston Joystick }
                     ; { #N$06 | #EVAL(#PEEK(#PC+$05) / $08) | 5 Cursor Joystick }
                     ; { #N$07 | #EVAL(#PEEK(#PC+$06) / $08) | 6 Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #COOKIE$6365 }
; { #JETPAC$6293 }
; { #PSSST$6282 }
; { #TRANZAM$5FAC }
; LIST#

; Messaging: Game Selection Title
;
; .
;
; .
;
; #FONT:(GAME SELECTION)addr=$D347,attr=$47(game-selection)
@label=String_GameSelection
t$811C DEFM "GAME SELECTIO","N"+$80       ; "GAME SELECTION".
; #FONT:(1  1 PLAYER GAME)addr=$D347,attr=$47(1up-game)
@label=String_1UP_Game
 $812A DEFM "1  1 PLAYER GAM","E"+$80     ; "1  1 PLAYER GAME".
; #FONT:(2  2 PLAYER GAME)addr=$D347,attr=$47(2up-game)
@label=String_2UP_Game
 $813A DEFM "2  2 PLAYER GAM","E"+$80     ; "2  2 PLAYER GAME".
; #FONT:(3  KEYBOARD)addr=$D347,attr=$47(keyboard)
@label=String_Keyboard
 $814A DEFM "3  KEYBOAR","D"+$80          ; "3  KEYBOARD".
; #FONT:(4  KEMPSTON JOYSTICK)addr=$D347,attr=$47(kempston)
@label=String_Kempston
 $8155 DEFM "4  KEMPSTON JOYSTIC","K"+$80 ; "4  KEMPSTON JOYSTICK".
; #FONT:(5  CURSOR   JOYSTICK)addr=$D347,attr=$47(cursor)
@label=String_Cursor
 $8169 DEFM "5  CURSOR   JOYSTIC","K"+$80 ; "5  CURSOR   JOYSTICK".
; #FONT:(6  START GAME)addr=$D347,attr=$47(start-game)
@label=String_StartGame
 $817D DEFM "6  START GAM","E"+$80        ; "6  START GAME".
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #COOKIE$636C }
; { #JETPAC$6299 }
; { #PSSST$6288 }
; { #TRANZAM$5FB1 }
; LIST#

; Messaging: Copyright
;
; .
;
; .
;
; #FONT:(% 1983 A.C.G. ALL RIGHTS RESERVED)addr=$D347,attr=$45(copyright)
@label=String_Copyright
t$818A DEFM $45                                      ; {Attribute:
 $818B DEFM "%"                                      ; #N(#PEEK(#PC)) + "© 1983
 $818C DEFM "1983 A.C.G. ALL RIGHTS RESERVE","D"+$80 ; A.C.G. ALL RIGHTS
                                                     ; RESERVED".}
; View the equivalent code in #ATICATAC$7D51.

; Write Menu Line
;
; Used by the routine at #R$80D1.
@label=MenuWriteText
c$81AB PUSH HL       ; Stash #REGhl containing the co-ordinate on the stack.
 $81AC CALL $851E    ; Call #R$851E.
 $81AF LD A,($5E66)  ; #REGa=the menu attribute byte from #R$5E66.
 $81B2 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $81B3 EXX           ; Switch to the shadow registers.
 $81B4 POP HL        ; Restore #REGhl from the stack.
 $81B5 CALL $8506    ; Call #R$8506.
 $81B8 JP $8A1D      ; Jump to #R$8A1D.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D8A }
; { #COOKIE$63E0 }
; { #JETPAC$0000 }
; { #PSSST$62E7 }
; { #TRANZAM$0000 }
; LIST#

; Start Game
;
; Used by the routine at #R$800A.
@label=StartGame
c$81BB LD DE,$BA35   ; #REGde=#R$BA35.
 $81BE CALL $B9BC    ; Call #R$B9BC.
; Reset Planet data.
 $81C1 LD HL,$5E50   ; #REGhl=#R$5E50.
 $81C4 LD BC,$6000   ; #REGbc=#R$6000.
 $81C7 CALL $84B2    ; Call #R$84B2.
 $81CA CALL $84F7    ; Call #R$84F7.
 $81CD CALL $A84C    ; Call #R$A84C.
 $81D0 CALL $822F    ; Call #R$822F.
 $81D3 CALL $A826    ; Call #R$A826.
; This entry point is used by the routine at #R$8258.
*$81D6 LD SP,$5E00   ; Set the stack pointer to #R$5E00.
 $81D9 LD A,($5E68)  ; {If #R$5E68 is not zero, call #R$A2CF.
 $81DC AND A         ;
 $81DD CALL NZ,$A2CF ; }
 $81E0 EI            ; Enable interrupts.
; This entry point is used by the routine at #R$A1AA.
*$81E1 XOR A         ; {Write #N$00 to #R$5E5E.
 $81E2 LD ($5E5E),A  ; }
 $81E5 LD IX,$6078   ; #REGix=#R$6078.
; This entry point is used by the routines at #R$8209 and #R$8258.
*$81E9 LD A,($5C78)  ; {#HTML(#REGc=<a
 $81EC LD C,A        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
 $81ED LD A,($5E53)  ;
 $81F0 CP C          ;
 $81F1 CALL NZ,$8209 ;
 $81F4 LD HL,$8259   ; #REGhl=#R$8259.
 $81F7 PUSH HL       ; Stash #REGhl on the stack.
 $81F8 LD BC,$82C5   ; #REGbc=#R$82C5.
 $81FB LD L,(IX+$00) ;
; This entry point is used by the routine at #R$B6CF.
*$81FE LD H,$00      ;
 $8200 ADD HL,HL     ;
 $8201 ADD HL,BC     ;
 $8202 LD A,(HL)     ;
 $8203 INC HL        ;
 $8204 LD H,(HL)     ;
 $8205 LD L,A        ;
 $8206 JP $5CB0      ; Jump to #R$5CB0.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D9A }
; { #COOKIE$6428 }
; { #JETPAC$6333 }
; { #PSSST$631E }
; { #TRANZAM$5FEF }
; LIST#

; Routine at 8209
;
; Used by the routine at #R$81BB.
c$8209 DI            ; Disable interrupts.
 $820A LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $820D LD ($5E53),A  ;
 $8210 LD A,$01      ; {Write #N$01 to #R$5E52.
 $8212 LD ($5E52),A  ; }
 $8215 PUSH IX       ;
 $8217 LD HL,$6078   ; {Write #N$6078 to #R$8261(#N$8262).
 $821A LD ($8262),HL ; }
 $821D LD A,$C3      ; {Write #N$C3 to #R$826A.
 $821F LD ($826A),A  ; }
 $8222 LD HL,$823F   ; {Write #R$823F to #R$826B.
 $8225 LD ($826B),HL ; }
 $8228 LD IX,$6000   ; #REGix=#R$6000.
 $822C JP $81E9      ; Jump to #R$81E9.

; Routine at 822F
;
; Used by the routines at #R$81BB and #R$823F.
c$822F LD HL,$6240   ; {Write #R$6240 to #R$8261(#N$8262).
 $8232 LD ($8262),HL ; }
 $8235 LD HL,$826A   ; {Write #N$00 to #R$826A, #R$826B and #R$826C.
 $8238 XOR A         ;
 $8239 LD (HL),A     ;
 $823A INC HL        ;
 $823B LD (HL),A     ;
 $823C INC HL        ;
 $823D LD (HL),A     ; }
 $823E RET           ; Return.

; Routine at 823F
c$823F CALL $822F    ; Call #R$822F.
 $8242 POP IX        ;
 $8244 XOR A         ;
 $8245 LD ($5E52),A  ;
 $8248 EI            ; Enable interrupts.
 $8249 RET           ; Return.

; Routine at 824A
c$824A LD A,($5E52)  ; #REGa=#R$5E52.
 $824D AND A         ;
 $824E RET NZ        ;
 $824F LD HL,$00C0   ; #REGhl=#N($00C0,$04,$04).
*$8252 DEC HL        ; Decrease #REGhl by one.
 $8253 LD A,L        ; {Jump to #R$8252 until #REGhl is zero.
 $8254 OR H          ;
 $8255 JR NZ,$8252   ; }
 $8257 RET           ; Return.

; Routine at 8258
c$8258 RET           ; Return.
 $8259 LD DE,$0018   ;
 $825C ADD IX,DE     ;
 $825E PUSH IX       ;
 $8260 POP HL        ;
 $8261 LD BC,$6240   ;
 $8264 AND A         ;
 $8265 SBC HL,BC     ;
 $8267 JP C,$81E9    ;
 $826A DEFB $00      ;
 $826B DEFB $00      ;
 $826C DEFB $00      ;
 $826D LD HL,($5E42) ;
 $8270 INC HL        ;
 $8271 LD ($5E42),HL ;
 $8274 LD H,$00      ;
 $8276 LD A,($5E40)  ;
 $8279 ADD A,(HL)    ;
 $827A LD ($5E40),A  ;
 $827D CALL $8298    ;
 $8280 LD A,($5E6C)  ;
 $8283 AND A         ;
 $8284 JP NZ,$81D6   ;
 $8287 LD A,($5E5E)  ;
 $828A CP $07        ;
 $828C CALL C,$9466  ;
 $828F CALL $9F70    ;
 $8292 CALL $B731    ;
 $8295 JP $81D6      ;

; Controls: Pause
;
; Used by the routines at #R$8258 and #R$B52E.
@label=ControlsPause
c$8298 DI            ; Disable interrupts.
 $8299 LD A,$DF      ; {Read from the keyboard;
 $829B OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $829D IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#}
; If key "O" is not being pressed, then just return.
 $829F BIT 1,A       ; {Return if bit 1 is not set.
 $82A1 RET NZ        ; }
; Return if any other key has been pressed with "O".
 $82A2 CPL           ; Flip the bits.
 $82A3 AND %00011101 ; Keep only bits 0, 2-4.
 $82A5 RET NZ        ; Return if the result is not zero.
; Loop until the "O" button is released.
@label=GamePaused_Debounce
*$82A6 LD A,$DF      ; {Read from the keyboard;
 $82A8 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $82AA IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#}
 $82AC BIT 1,A       ; {Jump to #R$82A6 if bit 1 is set.
 $82AE JR Z,$82A6    ; }
; Creates an infinite loop which only exits when "O" is pressed again.
@label=GamePaused
*$82B0 LD A,$DF      ; {Read from the keyboard;
 $82B2 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $82B4 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#}
 $82B6 BIT 1,A       ; {Jump to #R$82B0 if bit 1 is not set.
 $82B8 JR NZ,$82B0   ; }
; Likewise, to prevent the pause from recurring instantly, loop until the "O"
; button is released.
@label=GamePaused_Debounce_Exit
*$82BA LD A,$DF      ; {Read from the keyboard;
 $82BC OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $82BE IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DF | P | O | I | U | Y }
                     ; TABLE#}
 $82C0 BIT 1,A       ; {Jump to #R$82BA if bit 1 is set.
 $82C2 JR Z,$82BA    ; }
 $82C4 RET           ; Return.

; Jump Table
@label=JumpTable
w$82C5 DEFW $824A
 $82C7 DEFW $8D06
 $82C9 DEFW $8D06
 $82CB DEFW $8D06
 $82CD DEFW $8D06
 $82CF DEFW $8D06
 $82D1 DEFW $8D06
 $82D3 DEFW $8D06
 $82D5 DEFW $8D06
 $82D7 DEFW $8C71
 $82D9 DEFW $8C71
 $82DB DEFW $8C71
 $82DD DEFW $8C71
 $82DF DEFW $8C71
 $82E1 DEFW $8C71
 $82E3 DEFW $8C71
 $82E5 DEFW $8C71
 $82E7 DEFW $9E2C
 $82E9 DEFW $91E2
 $82EB DEFW $91E2
 $82ED DEFW $91E2
 $82EF DEFW $91E2
 $82F1 DEFW $91E2
 $82F3 DEFW $91E2
 $82F5 DEFW $91E2
 $82F7 DEFW $91E2
 $82F9 DEFW $9ECA
 $82FB DEFW $9ECA
 $82FD DEFW $9ECA
 $82FF DEFW $9ECA
 $8301 DEFW $9ECA
 $8303 DEFW $9ECA
 $8305 DEFW $9ECA
 $8307 DEFW $9ECA
 $8309 DEFW $9EDC
 $830B DEFW $9EDC
 $830D DEFW $9EDC
 $830F DEFW $9EDC
 $8311 DEFW $9EDC
 $8313 DEFW $9EDC
 $8315 DEFW $9EDC
 $8317 DEFW $9EDC
 $8319 DEFW $A1AA
 $831B DEFW $A1AA
 $831D DEFW $A1AA
 $831F DEFW $A1AA
 $8321 DEFW $93A6
 $8323 DEFW $93E8
 $8325 DEFW $A325
 $8327 DEFW $A325
 $8329 DEFW $A325
 $832B DEFW $A325
 $832D DEFW $A325
 $832F DEFW $A325
 $8331 DEFW $A325
 $8333 DEFW $A325
 $8335 DEFW $A325
 $8337 DEFW $A325
 $8339 DEFW $A325
 $833B DEFW $A325
 $833D DEFW $A325
 $833F DEFW $A325
 $8341 DEFW $A325
 $8343 DEFW $A325
 $8345 DEFW $970E
 $8347 DEFW $970E
 $8349 DEFW $970E
 $834B DEFW $970E
 $834D DEFW $970E
 $834F DEFW $970E
 $8351 DEFW $970E
 $8353 DEFW $970E
 $8355 DEFW $9654
 $8357 DEFW $9654
 $8359 DEFW $9654
 $835B DEFW $9654
 $835D DEFW $9654
 $835F DEFW $9654
 $8361 DEFW $9654
 $8363 DEFW $9654
 $8365 DEFW $9531
 $8367 DEFW $9531
 $8369 DEFW $9531
 $836B DEFW $9531
 $836D DEFW $9531
 $836F DEFW $9531
 $8371 DEFW $9531
 $8373 DEFW $9531
 $8375 DEFW $A81C
 $8377 DEFW $A81C
 $8379 DEFW $A619
 $837B DEFW $A619
 $837D DEFW $A783
 $837F DEFW $A783
 $8381 DEFW $A783
 $8383 DEFW $A783
 $8385 DEFW $A783
 $8387 DEFW $A783
 $8389 DEFW $A783
 $838B DEFW $A78A
 $838D DEFW $A742
 $838F DEFW $A742
 $8391 DEFW $A742
 $8393 DEFW $A74C
 $8395 DEFW $AD59
 $8397 DEFW $AD59
 $8399 DEFW $AD59
 $839B DEFW $AD59
 $839D DEFW $AD59
 $839F DEFW $AD59
 $83A1 DEFW $AD59
 $83A3 DEFW $AD59
 $83A5 DEFW $ABBA
 $83A7 DEFW $ABBA
 $83A9 DEFW $ABBA
 $83AB DEFW $ABBA
 $83AD DEFW $ABBA
 $83AF DEFW $ABBA
 $83B1 DEFW $ABBA
 $83B3 DEFW $ABBA
 $83B5 DEFW $ABBA
 $83B7 DEFW $ABBA
 $83B9 DEFW $ABBA
 $83BB DEFW $ABBA
 $83BD DEFW $ABBA
 $83BF DEFW $ABBA
 $83C1 DEFW $ABBA
 $83C3 DEFW $ABBA
 $83C5 DEFW $ADAB
 $83C7 DEFW $B390
 $83C9 DEFW $ADEA
 $83CB DEFW $ADEA
 $83CD DEFW $ADAB
 $83CF DEFW $B39C
 $83D1 DEFW $AE1D
 $83D3 DEFW $AE1D
 $83D5 DEFW $9906
 $83D7 DEFW $9906
 $83D9 DEFW $9906
 $83DB DEFW $9906
 $83DD DEFW $9906
 $83DF DEFW $9906
 $83E1 DEFW $9906
 $83E3 DEFW $9906
 $83E5 DEFW $B128
 $83E7 DEFW $B128
 $83E9 DEFW $B128
 $83EB DEFW $B128
 $83ED DEFW $B128
 $83EF DEFW $B128
 $83F1 DEFW $B128
 $83F3 DEFW $B128
 $83F5 DEFW $AE3A
 $83F7 DEFW $AE3A
 $83F9 DEFW $AE3A
 $83FB DEFW $AE37
 $83FD DEFW $AE59
 $83FF DEFW $AE59
 $8401 DEFW $AE59
 $8403 DEFW $AE37
 $8405 DEFW $AF1C
 $8407 DEFW $B934
 $8409 DEFW $B098
 $840B DEFW $B098
 $840D DEFW $AF1C
 $840F DEFW $B922
 $8411 DEFW $B065
 $8413 DEFW $B065
 $8415 DEFW $993C
 $8417 DEFW $993C
 $8419 DEFW $993C
 $841B DEFW $993C
 $841D DEFW $993C
 $841F DEFW $993C
 $8421 DEFW $993C
 $8423 DEFW $993C
 $8425 DEFW $9994
 $8427 DEFW $9994
 $8429 DEFW $9994
 $842B DEFW $9994
 $842D DEFW $9994
 $842F DEFW $9994
 $8431 DEFW $9BBB
 $8433 DEFW $9BBB
 $8435 DEFW $9AE2
 $8437 DEFW $9AE2
 $8439 DEFW $9AE2
 $843B DEFW $9AE2
 $843D DEFW $9AE2
 $843F DEFW $9AE2
 $8441 DEFW $9AE2
 $8443 DEFW $9AE2
 $8445 DEFW $B1A4
 $8447 DEFW $B1A4
 $8449 DEFW $B1A4
 $844B DEFW $B1A4
 $844D DEFW $B1A4
 $844F DEFW $B1A4
 $8451 DEFW $B1A4
 $8453 DEFW $B1A4
 $8455 DEFW $B218
 $8457 DEFW $B218
 $8459 DEFW $B218
 $845B DEFW $B218
 $845D DEFW $9A2F
 $845F DEFW $9A2F
 $8461 DEFW $9A2F
 $8463 DEFW $9A2F
 $8465 DEFW $9A2F
 $8467 DEFW $9A2F
 $8469 DEFW $9A2F
 $846B DEFW $9A2F
 $846D DEFW $9A2F
 $846F DEFW $9A2F
 $8471 DEFW $9A2F
 $8473 DEFW $9A2F
 $8475 DEFW $9A2F
 $8477 DEFW $9A2F
 $8479 DEFW $9A2F
 $847B DEFW $9A2F
 $847D DEFW $B33D
 $847F DEFW $B33D
 $8481 DEFW $B33D
 $8483 DEFW $B33D
 $8485 DEFW $B3E8
 $8487 DEFW $B3E8
 $8489 DEFW $B3E8
 $848B DEFW $B3E8
 $848D DEFW $B460
 $848F DEFW $B460
 $8491 DEFW $B460
 $8493 DEFW $B49A
 $8495 DEFW $B49A
 $8497 DEFW $B49A
 $8499 DEFW $B4A0
 $849B DEFW $B4A0
 $849D DEFW $B6CF
 $849F DEFW $B6CF
 $84A1 DEFW $B6CF
 $84A3 DEFW $B6CF
 $84A5 DEFW $B6CF
 $84A7 DEFW $B6CF
 $84A9 DEFW $B6CF
 $84AB DEFW $B6CF

; Reset Screen Buffer
;
; Used by the routine at #R$84D8.
@label=ResetScreen
c$84AD LD HL,$4000   ; #REGhl=#R$4000(screen buffer).
 $84B0 LD B,$58      ; #REGb=#N$58 (i.e. finish once we reach the start of
                     ; #R$5800(attribute buffer)).
; This entry point is used by the routine at #R$81BB.
*$84B2 LD C,$00      ; #REGc=#N$00 (value to write).
; Continue on to #R$84B4 to blank the screen buffer.
; .
; View the equivalent code in;
; #LIST
; { #ATICATAC$80B4 }
; { #COOKIE$74D4 }
; { #JETPAC$71B8 }
; { #PSSST$7439 }
; { #TRANZAM$7211 }
; LIST#

; Reset Routine
;
; Used by the routine at #R$84BB.
;
; HL Target address
; B Single byte representing the MSB of the end address (will always end on LSB
; . #N$00)
; C Value to write
@label=ResetCopier
c$84B4 LD (HL),C     ; Write #REGc to the target address.
 $84B5 INC HL        ; Increment the target address by one.
 $84B6 LD A,H        ; {Are we finished yet? Check the MSB of the target vs.
 $84B7 CP B          ; #REGb.}
 $84B8 JR NZ,$84B4   ; Keep looping back to #R$84B4 until the comparison is
                     ; zero.
 $84BA RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80BB }
; { #COOKIE$74DB }
; { #JETPAC$71B8 }
; { #PSSST$7440 }
; { #TRANZAM$7218 }
; LIST#
; .
; View the equivalent code in #ATICATAC$80BB.

; Reset Attribute Buffer
;
; Used by the routine at #R$84D8.
@label=ResetAttributes
c$84BB XOR A         ; {Set the border to black.
 $84BC OUT ($FE),A   ; }
 $84BE LD HL,$5800   ; #REGhl=#R$5800(attribute buffer).
 $84C1 LD B,$5B      ; #REGb=#N$5B (i.e. finish once we reach the end of the
                     ; #R$5800(attribute buffer)).
 $84C3 LD C,$43      ; #REGc=#N$43 (value to write).
 $84C5 CALL $84B4    ; Call #R$84B4.
 $84C8 LD HL,$5800   ;
 $84CB LD DE,$001F   ;
 $84CE LD BC,$1800   ;
*$84D1 LD (HL),C     ;
 $84D2 ADD HL,DE     ;
 $84D3 LD (HL),C     ;
 $84D4 INC HL        ;
 $84D5 DJNZ $84D1    ;
 $84D7 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$80C2 }
; { #COOKIE$74E2 }
; { #JETPAC$71C6 }
; { #PSSST$7447 }
; { #TRANZAM$7200 }
; LIST#

; Create Game Window
;
; Used by the routines at #R$800A, #R$A826, #R$A8E3 and #R$F535.
;
; .
;
; Blank the screen and write the banner.
@label=CreateWindow
c$84D8 CALL $84BB    ; Call #R$84BB.
 $84DB CALL $84AD    ; Call #R$84AD.
 $84DE CALL $8A37    ; Call #R$8A37.
; Set the attributes for the score line (the whole line is INK:#N$46).
 $84E1 LD HL,$5820   ; #REGhl=#N$5820.
 $84E4 LD BC,$2046   ; #REGbc=counter:#N$20, INK:#N$46.
@label=CreateWindow_Loop
*$84E7 LD (HL),C     ; Write #N$46 to the attribute buffer.
 $84E8 INC L         ; Move onto the next column.
 $84E9 DJNZ $84E7    ; Decrease counter by one and loop back to #R$84E7 until
                     ; counter is zero.
; Write the 1UP, 2UP and HI scores.
 $84EB CALL $F5EC    ; Call #R$F5EC.
 $84EE CALL $89BF    ; Call #R$89BF.
 $84F1 CALL $89C7    ; Call #R$89C7.
 $84F4 JP $89CF      ; Jump to #R$89CF.
; View the equivalent code in;
; #LIST
; { #COOKIE$5FB7 }
; { #PSSST$5F53 }
; LIST#

; Reset Planet
;
; Used by the routine at #R$81BB.
@label=ResetPlanet
c$84F7 LD HL,$6000   ; #REGhl=#R$6000.
 $84FA LD BC,$0480   ; #REGbc=#N$0480 (counter).
@label=ResetPlanet_Loop
*$84FD LD (HL),$00   ; Write #N$00 to #REGhl.
 $84FF INC HL        ; Increment #REGhl by one.
 $8500 DEC BC        ; {Decrease counter by one and loop back to #R$84FD until
 $8501 LD A,B        ; counter is zero.
 $8502 OR C          ;
 $8503 JR NZ,$84FD   ; }
 $8505 RET           ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$81AB, #R$8733, #R$890A, #R$8A11, #R$8C01, #R$8C3E,
; #R$9E2C, #R$9EDC, #R$A993, #R$AD36 and #R$F662.
;
;   HL Pixel address co-ordinates
; O:HL Attribute buffer address
;
; Converts a given pixel address to the associated attribute buffer address.
@label=AttributeAddress
c$8506 PUSH BC       ; Stash #REGbc on the stack.
 $8507 LD A,L        ; Horizontal co-ordinate.
 $8508 RRCA          ; {Divide by #N08.
 $8509 RRCA          ;
 $850A RRCA          ; }
 $850B AND %00011111 ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                     ; horizontal screen values).
 $850D LD L,A        ; Store this back in #REGl.
 $850E LD A,H        ; Vertical co-ordinate.
 $850F RLCA          ; {Multiply by #N$04.
 $8510 RLCA          ; }
 $8511 LD C,A        ; Store this in #REGc temporarily.
 $8512 AND %11100000 ; Keep only bits 5-7.
 $8514 OR L          ; Set the bits from #REGl.
 $8515 LD L,A        ; #REGl=#REGa.
 $8516 LD A,C        ; Fetch the stored value from #REGc.
 $8517 AND %00000011 ; Keep only bits 0-1.
 $8519 OR %01011000  ; Set MSB of the attribute buffer #N$58. This ensures our
                     ; value is >= #R$5800.
 $851B LD H,A        ; Store this back in #REGh.
 $851C POP BC        ; Restore #REGbc from the stack.
 $851D RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BD2 }
; { #COOKIE$7534 }
; { #JETPAC$720E }
; { #PSSST$748F }
; { #TRANZAM$7097 }
; LIST#

; Calculate Screen Address
;
; Used by the routines at #R$81AB, #R$86A1, #R$8826, #R$894F, #R$8A11, #R$8A5C,
; #R$8C01, #R$9E2C, #R$A993, #R$F410 and #R$F628.
@label=ScreenAddress
c$851E LD A,L        ; #REGa=#REGl.
 $851F RRCA          ; {#REGa=#REGa / #N$08.
 $8520 RRCA          ;
 $8521 RRCA          ; }
 $8522 AND %00011111 ; Keep only bits 0-4.
 $8524 LD L,A        ; #REGl=#REGa.
 $8525 LD A,H        ; #REGa=#REGh.
 $8526 RLCA          ; {#REGa=#REGa * #N$04.
 $8527 RLCA          ; }
 $8528 AND %11100000 ; Keep only bits 5-7.
 $852A OR L          ;
 $852B LD L,A        ; #REGl=#REGa.
 $852C LD A,H        ; #REGa=#REGh.
 $852D AND %00000111 ; Keep only bits 0-2.
 $852F EX AF,AF'     ; Switch to the shadow #REGaf register.
 $8530 LD A,H        ; #REGa=#REGh.
 $8531 RRCA          ; {#REGa=#REGa / #N$08.
 $8532 RRCA          ;
 $8533 RRCA          ; }
 $8534 AND %00011000 ; Keep only bits 3-4.
 $8536 OR %01000000  ; Set bit 6.
 $8538 LD H,A        ; #REGh=#REGa.
 $8539 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $853A OR H          ;
 $853B LD H,A        ; #REGh=#REGa.
 $853C RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$9BA2 }
; { #COOKIE$76E3 }
; { #JETPAC$7308 }
; { #PSSST$759A }
; { #TRANZAM$6F10 }
; LIST#

; Routine at 853D
;
; Used by the routines at #R$8568 and #R$857F.
c$853D LD L,A        ;
 $853E SUB $40       ;
 $8540 CP $08        ;
 $8542 LD H,$00      ;
 $8544 JR C,$8560    ;
 $8546 SUB $08       ;
 $8548 LD H,$08      ;
 $854A CP $08        ;
 $854C JR C,$8560    ;
 $854E SUB $40       ;
 $8550 CP $08        ;
 $8552 LD H,$10      ;
 $8554 JR C,$8560    ;
 $8556 SUB $28       ;
 $8558 CP $06        ;
 $855A LD H,$18      ;
 $855C JR C,$8560    ;
 $855E LD A,L        ;
 $855F RET           ;
*$8560 AND $07       ;
 $8562 ADD A,H       ;
 $8563 INC A         ;
 $8564 LD BC,$EE7A   ;
 $8567 RET           ;

; Routine at 8568
c$8568 LD BC,$BAC0   ; #REGbc=#R$BAC0.
 $856B LD A,($5EA2)  ; #REGa=#R$5EA2.
 $856E AND A         ;
 $856F LD A,($5E54)  ; #REGa=#R$5E54.
 $8572 CALL NZ,$853D ;
; This entry point is used by the routine at #R$857F.
*$8575 DEC A         ;
 $8576 LD L,A        ;
 $8577 LD H,$00      ;
 $8579 ADD HL,HL     ;
 $857A ADD HL,BC     ;
 $857B LD E,(HL)     ;
 $857C INC HL        ;
 $857D LD D,(HL)     ;
 $857E RET           ; Return.

; Routine at 857F
;
; Used by the routines at #R$86A1, #R$8826, #R$88A3 and #R$8A5C.
c$857F LD BC,$BAC0   ; #REGbc=#R$BAC0.
 $8582 LD A,($5EA2)  ; #REGa=#R$5EA2.
 $8585 AND A         ;
 $8586 LD A,(IX+$00) ;
 $8589 CALL NZ,$853D ;
 $858C JR $8575      ; Jump to #R$8575.

; Routine at 858E
;
; Used by the routines at #R$8614 and #R$8701.
c$858E LD A,C        ;
 $858F AND A         ;
 $8590 JR Z,$85A2    ;
 $8592 DEC C         ;
 $8593 CALL $85CF    ;
 $8596 EXX           ;
 $8597 LD A,C        ;
 $8598 AND A         ;
 $8599 JR Z,$859F    ;
*$859B DEC C         ;
 $859C CALL $8614    ;
*$859F EXX           ;
 $85A0 JR $858E      ;
*$85A2 EXX           ;
 $85A3 LD A,C        ;
 $85A4 AND A         ;
 $85A5 JR NZ,$859B   ;
; This entry point is used by the routine at #R$8701.
*$85A7 EXX           ;
; This entry point is used by the routine at #R$8701.
*$85A8 LD A,($5E5A)  ;
 $85AB LD C,A        ;
 $85AC LD A,($5E59)  ;
 $85AF OR C          ;
 $85B0 RET Z         ;
 $85B1 XOR A         ;
 $85B2 LD ($5E5A),A  ;
 $85B5 EXX           ;
 $85B6 LD A,($5E59)  ;
 $85B9 LD C,A        ;
 $85BA XOR A         ;
; This entry point is used by the routine at #R$8701.
*$85BB LD ($5E59),A  ;
 $85BE EXX           ;
 $85BF JR $858E      ;
 $85C1 EX DE,HL      ;
 $85C2 EX (SP),HL    ;
 $85C3 LD A,D        ;
 $85C4 XOR (HL)      ;
 $85C5 LD (HL),A     ;
 $85C6 INC L         ;
 $85C7 LD A,E        ;
 $85C8 XOR (HL)      ;
 $85C9 LD (HL),A     ;
 $85CA POP DE        ;
 $85CB DEC L         ;
 $85CC JP $85F6      ;
*$85CF EX DE,HL      ;
 $85D0 PUSH DE       ;
 $85D1 LD D,(HL)     ;
 $85D2 INC HL        ;
 $85D3 LD E,(HL)     ;
 $85D4 INC HL        ;
 $85D5 EX DE,HL      ;
 $85D6 XOR A         ;
*$85D7 JR $85D7      ;

; Data block at 85D9
b$85D9 DEFB $29,$8F,$29,$8F,$29,$8F,$29,$8F
 $85E1 DEFB $29,$8F,$29,$8F,$29,$8F,$EB,$E3
 $85E9 DEFB $AE,$77,$2C,$7A,$AE,$77,$2C,$7B
 $85F1 DEFB $AE,$77,$D1,$2D,$2D

; Screen Address One Pixel Above
;
; Used by the routines at #R$858E, #R$8606, #R$87B9, #R$8BA5 and #R$A993.
;
;   HL Current position
; O:HL Address for new position
;
; Calculates the new address for writing a sprite pixel, in an upward
; direction, taking into consideration the screen memory layout.
@label=ScreenPos1PixelAbove
c$85F6 DEC H         ; Decrement #REGh by one to move up one pixel on screen.
 $85F7 LD A,H        ; {Store the inverted result in #REGa.
 $85F8 CPL           ; }
 $85F9 AND %00000111 ; Keep only bits 0-2.
 $85FB RET NZ        ; If a screen bank boundary has not been crossed then
                     ; return.
 $85FC LD A,L        ; {Else subtract #N$20 from #REGl.
 $85FD SUB $20       ;
 $85FF LD L,A        ; }
 $8600 RET C         ; If there is any carry then return.
 $8601 LD A,H        ; {Else add #N$08 to #REGh and return.
 $8602 ADD A,$08     ;
 $8604 LD H,A        ; }
 $8605 RET           ; Return.

; Routine at 8606
c$8606 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $8607 EX (SP),HL    ;
 $8608 LD A,D        ;
 $8609 XOR (HL)      ;
 $860A LD (HL),A     ;
 $860B INC L         ;
 $860C LD A,E        ;
 $860D XOR (HL)      ;
 $860E LD (HL),A     ;
 $860F POP DE        ;
 $8610 DEC L         ;
 $8611 JP $85F6      ; Jump to #R$85F6.

; Routine at 8614
;
; Used by the routine at #R$858E.
c$8614 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $8615 PUSH DE       ;
 $8616 LD D,(HL)     ;
 $8617 INC HL        ;
 $8618 LD E,(HL)     ;
 $8619 INC HL        ;
 $861A EX DE,HL      ;
 $861B XOR A         ;
*$861C JR $861C      ;
 $861E ADD HL,HL     ;
 $861F ADC A,A       ;
 $8620 ADD HL,HL     ;
 $8621 ADC A,A       ;
 $8622 ADD HL,HL     ;
 $8623 ADC A,A       ;
 $8624 ADD HL,HL     ;
 $8625 ADC A,A       ;
 $8626 ADD HL,HL     ;
 $8627 ADC A,A       ;
 $8628 ADD HL,HL     ;
 $8629 ADC A,A       ;
 $862A ADD HL,HL     ;
 $862B ADC A,A       ;
 $862C EX DE,HL      ;
 $862D JR $85E8      ;
 $862F CALL $86C2    ;
 $8632 JR $8637      ;
; This entry point is used by the routines at #R$8D06 and #R$91E2.
*$8634 CALL $86A1    ;
*$8637 EXX           ;
 $8638 XOR A         ;
 $8639 LD ($5E5A),A  ;
 $863C LD C,A        ;
 $863D JP $858E      ;
; This entry point is used by the routines at #R$A1AA, #R$A325, #R$AD36 and
; #R$B460.
*$8640 XOR A         ;
 $8641 LD ($5E59),A  ;
 $8644 LD ($5E58),A  ;
 $8647 LD C,A        ;
 $8648 EXX           ;
 $8649 CALL $865E    ;
 $864C JP $858E      ;

; Routine at 864F
;
; Used by the routines at #R$AD36 and #R$B3E8.
c$864F XOR A         ; {Write #N$00 to #LIST { #R$5E59 } { #R$5E58 } LIST#
 $8650 LD ($5E59),A  ;
 $8653 LD ($5E58),A  ; }
 $8656 LD C,A        ; #REGc=#N$00.
 $8657 EXX           ;
 $8658 CALL $88E8    ; Call #R$88E8.
 $865B JP $87B9      ; Jump to #R$87B9.

; Routine at 865E
;
; Used by the routines at #R$8614 and #R$8701.
c$865E LD E,(IX+$0C) ; #REGe=#REGix+#N$0C.
 $8661 LD D,(IX+$0D) ; #REGd=#REGix+#N$0D.
 $8664 LD L,(IX+$0E) ; #REGl=#REGix+#N$0E.
 $8667 LD H,(IX+$0F) ; #REGh=#REGix+#N$0F.
 $866A LD A,(IX+$09) ; #REGa=#REGix+#N$09.
 $866D LD ($85D8),A  ; Write #REGa to #R$85D7(#N$85D8).
 $8670 LD A,(IX+$0A) ; #REGa=#REGix+#N$0A.
 $8673 LD ($5E5A),A  ; Write #REGa to #R$5E5A.
 $8676 LD A,(IX+$0B) ; #REGa=#REGix+#N$0B.
 $8679 LD ($5E56),A  ; Write #REGa to #R$5E56.
 $867C LD C,$00      ; #REGc=#N$00.
 $867E RET           ; Return.

; Routine at 867F
;
; Used by the routines at #R$86A1 and #R$8A5C.
c$867F XOR A         ; {Write #N$00 to;
 $8680 LD (IX+$09),A ; #LIST
 $8683 LD (IX+$0A),A ; { #REGix+#N$09 }
 $8686 LD (IX+$0B),A ; { #REGix+#N$0A }
 $8689 LD (IX+$0C),A ; { #REGix+#N$0B }
 $868C LD (IX+$0D),A ; { #REGix+#N$0C }
 $868F LD (IX+$0E),A ; { #REGix+#N$0D }
 $8692 LD (IX+$0F),A ; { #REGix+#N$0E }
 $8695 LD ($5E59),A  ; { #REGix+#N$0F }
 $8698 LD ($5E57),A  ; { #R$5E59 }
 $869B LD ($5E58),A  ; { #R$5E57 }
                     ; { #R$5E58 }
                     ; LIST#}
 $869E LD C,$00      ; #REGc=#N$00.
 $86A0 RET           ; Return.

; Routine at 86A1
;
; Used by the routines at #R$8614, #R$8701 and #R$8A5C.
c$86A1 LD L,(IX+$02) ; #REGl=#REGix+#N$02.
 $86A4 LD H,(IX+$03) ; #REGh=#REGix+#N$03.
 $86A7 LD BC,$0078   ; {#REGhl=#REGhl+#N($0078,$04,$04).
 $86AA ADD HL,BC     ; }
 $86AB LD BC,($607A) ; #REGbc=#R$607A.
 $86AF AND A         ;
 $86B0 SBC HL,BC     ;
 $86B2 LD A,H        ;
 $86B3 AND %00011111 ; Keep only bits 0-4.
 $86B5 JR NZ,$867F   ;
 $86B7 LD A,L        ;
 $86B8 CP $F0        ;
 $86BA JR NC,$867F   ;
 $86BC LD (IX+$01),L ;
 $86BF CALL $857F    ; Call #R$857F.
; This entry point is used by the routine at #R$8614.
*$86C2 LD L,(IX+$01) ; #REGl=#REGix+#N$01.
 $86C5 LD H,(IX+$04) ; #REGh=#REGix+#N$04.
 $86C8 LD A,L        ;
 $86C9 DEC A         ;
 $86CA RLCA          ;
 $86CB AND %00001110 ; Keep only bits 1-3.
 $86CD CP $0E        ;
 $86CF JR NZ,$86D3   ;
 $86D1 LD A,$E8      ; #REGa=#N$E8.
*$86D3 LD ($861D),A  ;
 $86D6 LD (IX+$09),A ;
 $86D9 LD A,$02      ;
 $86DB JR Z,$86DE    ;
 $86DD INC A         ;
*$86DE LD ($5E57),A  ;
 $86E1 LD (IX+$0B),H ;
 $86E4 CALL $851E    ; Call #R$851E.
 $86E7 LD A,(DE)     ;
 $86E8 INC DE        ;
 $86E9 LD ($5E59),A  ;
 $86EC LD ($5E58),A  ;
 $86EF LD (IX+$0A),A ;
 $86F2 LD (IX+$0C),E ;
 $86F5 LD (IX+$0D),D ;
 $86F8 LD (IX+$0E),L ;
 $86FB LD (IX+$0F),H ;
 $86FE LD C,$00      ; #REGc=#N$00.
 $8700 RET           ; Return.

; Routine at 8701
;
; Used by the routines at #R$8D06, #R$93A6, #R$9531, #R$ABA9 and #R$AD36.
c$8701 CALL $865E    ; Call #R$865E.
 $8704 EXX           ; Switch to the shadow registers.
 $8705 CALL $86A1    ; Call #R$86A1.
 $8708 EXX           ; Switch back to the normal registers.
 $8709 LD A,($5E56)  ; #REGa=#R$5E56.
 $870C SUB (IX+$04)  ;
 $870F JP Z,$85A8    ;
 $8712 JP M,$8724    ;
 $8715 LD C,A        ; #REGc=#REGa.
 $8716 LD A,($5E5A)  ; #REGa=#R$5E5A.
 $8719 CP C          ;
 $871A JP C,$85A8    ;
 $871D SUB C         ;
 $871E LD ($5E5A),A  ;
 $8721 JP $858E      ; Jump to #R$858E.
*$8724 EXX           ;
 $8725 NEG           ;
 $8727 LD C,A        ;
 $8728 LD A,($5E59)  ;
 $872B CP C          ;
 $872C JP C,$85A7    ;
 $872F SUB C         ;
 $8730 JP $85BB      ; Jump to #R$85BB.

; Routine at 8733
;
; Used by the routines at #R$8D06, #R$93A6, #R$9531, #R$970E, #R$9EDC, #R$A325,
; #R$ABA9, #R$AD36 and #R$B3E8.
c$8733 LD L,(IX+$01) ; #REGl=#REGix+#N$01.
 $8736 LD H,(IX+$04) ; #REGh=#REGix+#N$04.
 $8739 LD D,(IX+$07) ; #REGd=#REGix+#N$07.
 $873C LD A,($5E57)  ; #REGa=#R$5E57.
 $873F AND A         ;
 $8740 RET Z         ;
 $8741 LD B,A        ;
 $8742 CALL $8506    ; Call #R$8506.
 $8745 LD A,($5E58)  ; #REGa=#R$5E58.
 $8748 RRCA          ;
 $8749 RRCA          ;
 $874A INC A         ;
 $874B RRCA          ;
 $874C AND %00011111 ; Keep only bits 0-4.
 $874E INC A         ; Increment #REGa by one.
 $874F LD C,A        ; #REGc=#REGa.
; This entry point is used by the routine at #R$AD36.
*$8750 PUSH BC       ;
 $8751 PUSH HL       ;
 $8752 LD A,H        ;
 $8753 CP $58        ;
 $8755 JR C,$8770    ;
 $8757 PUSH BC       ;
 $8758 PUSH HL       ;
 $8759 LD BC,$5AC0   ; #REGbc=#N$5AC0.
 $875C AND A         ;
 $875D SBC HL,BC     ;
 $875F POP HL        ;
 $8760 POP BC        ;
 $8761 JR NC,$8770   ;
*$8763 LD A,(HL)     ;
 $8764 AND A         ;
 $8765 JR Z,$8768    ;
 $8767 LD (HL),D     ;
*$8768 INC L         ;
 $8769 LD A,L        ;
 $876A AND $1F       ;
 $876C JR Z,$8770    ;
 $876E DJNZ $8763    ;
*$8770 POP HL        ;
 $8771 LD BC,$0020   ; #REGbc=#N($0020,$04,$04).
 $8774 AND A         ;
 $8775 SBC HL,BC     ;
 $8777 POP BC        ;
 $8778 DEC C         ;
 $8779 JR NZ,$8750   ;
 $877B RET           ; Return.

; Routine at 877C
;
; Used by the routine at #R$91E2.
c$877C CALL $88E8    ; Call #R$88E8.
 $877F EXX           ; Switch to the shadow registers.
 $8780 CALL $88A3    ; Call #R$88A3.
 $8783 EXX           ; Switch back to the normal registers.
 $8784 JP $878F      ; Jump to #R$878F.

; Routine at 8787
;
; Used by the routines at #R$9ECA, #R$9EDC, #R$AD36 and #R$B3E8.
c$8787 CALL $88E8    ; Call #R$88E8.
 $878A EXX           ; Switch to the shadow registers.
 $878B CALL $8826    ; Call #R$8826.
 $878E EXX           ; Switch back to the normal registers.
; This entry point is used by the routine at #R$877C.
*$878F LD A,($5E56)  ;
 $8792 SUB (IX+$04)  ;
 $8795 JP Z,$880D    ;
 $8798 JP M,$87AA    ;
 $879B LD C,A        ;
 $879C LD A,($5E5A)  ;
 $879F CP C          ;
 $87A0 JP C,$880D    ;
 $87A3 SUB C         ;
 $87A4 LD ($5E5A),A  ;
 $87A7 JP $87B9      ;
*$87AA EXX           ;
 $87AB NEG           ;
 $87AD LD C,A        ;
 $87AE LD A,($5E59)  ;
 $87B1 CP C          ;
 $87B2 JP C,$880C    ;
 $87B5 SUB C         ;
 $87B6 JP $8820      ;

; Routine at 87B9
;
; Used by the routines at #R$864F, #R$8787 and #R$8807.
c$87B9 LD A,C        ; #REGa=#REGc.
 $87BA AND A         ; {If #REGa is zero, jump to #R$8807.
 $87BB JR Z,$8807    ; }
 $87BD DEC C         ; Decrease #REGc by one.
 $87BE PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $87BF PUSH HL       ; }
*$87C0 LD A,(DE)     ; #REGa=#REGde.
 $87C1 INC DE        ; Increment #REGde by one.
 $87C2 XOR (HL)      ;
 $87C3 LD (HL),A     ; Write #REGa to #REGhl.
 $87C4 INC L         ; Increment #REGl by one.
 $87C5 DJNZ $87C0    ;
*$87C7 JR $87C7      ; Jump to #R$87C7.
 $87C9 INC DE        ;
 $87CA INC DE        ;
 $87CB INC DE        ;
 $87CC INC DE        ;
 $87CD INC DE        ;
 $87CE INC DE        ;
 $87CF INC DE        ;
 $87D0 INC DE        ;
 $87D1 INC DE        ;
 $87D2 INC DE        ;
 $87D3 INC DE        ;
 $87D4 INC DE        ;
 $87D5 INC DE        ;
 $87D6 INC DE        ;
 $87D7 INC DE        ;
 $87D8 INC DE        ;
 $87D9 POP HL        ;
 $87DA CALL $85F6    ;
 $87DD POP BC        ;
 $87DE EXX           ;
 $87DF LD A,C        ;
 $87E0 AND A         ;
 $87E1 JR Z,$8804    ;
; This entry point is used by the routine at #R$8807.
*$87E3 DEC C         ;
 $87E4 PUSH BC       ;
 $87E5 PUSH HL       ;
*$87E6 LD A,(DE)     ;
 $87E7 INC DE        ;
 $87E8 XOR (HL)      ;
 $87E9 LD (HL),A     ;
 $87EA INC L         ;
 $87EB DJNZ $87E6    ;
*$87ED JR $87ED      ;
 $87EF INC DE        ;
 $87F0 INC DE        ;
 $87F1 INC DE        ;
 $87F2 INC DE        ;
 $87F3 INC DE        ;
 $87F4 INC DE        ;
 $87F5 INC DE        ;
 $87F6 INC DE        ;
 $87F7 INC DE        ;
 $87F8 INC DE        ;
 $87F9 INC DE        ;
 $87FA INC DE        ;
 $87FB INC DE        ;
 $87FC INC DE        ;
 $87FD INC DE        ;
 $87FE INC DE        ;
 $87FF POP HL        ;
 $8800 CALL $85F6    ;
 $8803 POP BC        ;
*$8804 EXX           ;
 $8805 JR $87B9      ;

; Routine at 8807
;
; Used by the routine at #R$87B9.
c$8807 EXX           ;
 $8808 LD A,C        ;
 $8809 AND A         ;
 $880A JR NZ,$87E3   ;
; This entry point is used by the routine at #R$8787.
*$880C EXX           ;
; This entry point is used by the routine at #R$8787.
*$880D LD A,($5E5A)  ;
 $8810 LD C,A        ;
 $8811 LD A,($5E59)  ;
 $8814 OR C          ;
 $8815 RET Z         ;
 $8816 XOR A         ;
 $8817 LD ($5E5A),A  ;
 $881A EXX           ;
 $881B LD A,($5E59)  ;
 $881E LD C,A        ;
 $881F XOR A         ;
; This entry point is used by the routine at #R$8787.
*$8820 LD ($5E59),A  ;
 $8823 EXX           ;
 $8824 JR $87B9      ;

; Routine at 8826
;
; Used by the routine at #R$8787.
c$8826 CALL $857F    ;
 $8829 LD L,(IX+$02) ;
 $882C LD H,(IX+$03) ;
 $882F LD BC,($607A) ;
 $8833 AND A         ;
 $8834 SBC HL,BC     ;
 $8836 LD BC,$0068   ;
 $8839 ADD HL,BC     ;
 $883A LD A,H        ;
 $883B AND $1F       ;
 $883D JR Z,$88B1    ;
 $883F ADD A,$E1     ;
 $8841 JR NZ,$8891   ;
 $8843 LD A,L        ;
 $8844 SRA A         ;
 $8846 SRA A         ;
 $8848 SRA A         ;
 $884A JP P,$8891    ;
 $884D LD B,A        ;
 $884E AND $0F       ;
 $8850 LD ($87EE),A  ;
 $8853 LD (IX+$09),A ;
 $8856 LD A,(DE)     ;
 $8857 INC DE        ;
 $8858 LD C,A        ;
 $8859 ADD A,B       ;
 $885A JP M,$8891    ;
 $885D JR Z,$8891    ;
 $885F LD B,A        ;
 $8860 LD ($5E57),A  ;
 $8863 LD (IX+$0B),A ;
 $8866 LD A,(DE)     ;
 $8867 INC DE        ;
 $8868 LD ($5E59),A  ;
 $886B LD ($5E58),A  ;
 $886E LD (IX+$0A),A ;
 $8871 LD A,C        ;
 $8872 SUB B         ;
*$8873 INC DE        ;
 $8874 DEC A         ;
 $8875 JR NZ,$8873   ;
 $8877 LD L,$00      ;
; This entry point is used by the routines at #R$8891 and #R$88B1.
*$8879 LD (IX+$01),L ;
 $887C LD H,(IX+$04) ;
 $887F CALL $851E    ;
 $8882 LD (IX+$0C),E ;
 $8885 LD (IX+$0D),D ;
 $8888 LD (IX+$0E),L ;
 $888B LD (IX+$0F),H ;
 $888E LD C,$00      ;
 $8890 RET           ;

; Routine at 8891
;
; Used by the routine at #R$8826.
c$8891 XOR A         ; {Write #N$00 to:
 $8892 LD ($5E59),A  ; #LIST
 $8895 LD ($5E58),A  ; { #R$5E59 }
 $8898 LD (IX+$0A),A ; { #R$5E58 }
 $889B LD ($5E57),A  ; { #REGix+#N$0A }
 $889E LD (IX+$0B),A ; { #R$5E57 }
                     ; { #REGix+#N$0B }
                     ; LIST#}
 $88A1 JR $8879      ; Jump to #R$8879.

; Routine at 88A3
;
; Used by the routine at #R$877C.
c$88A3 CALL $857F    ; Call #R$857F.
 $88A6 LD L,(IX+$01) ; #REGl=#REGix+#N$01.
 $88A9 LD H,(IX+$04) ; #REGh=#REGix+#N$04.
 $88AC LD A,(DE)     ; #REGa=#REGde.
 $88AD INC DE        ; Increment #REGde by one.
 $88AE LD B,A        ; #REGb=#REGa.
 $88AF JR $88E2      ; Jump to #R$88E2.

; Routine at 88B1
;
; Used by the routine at #R$8826.
c$88B1 LD A,(DE)     ;
 $88B2 INC DE        ;
 $88B3 LD B,A        ;
 $88B4 RLCA          ;
 $88B5 RLCA          ;
 $88B6 RLCA          ;
 $88B7 AND $F8       ;
 $88B9 ADD A,L       ;
 $88BA JR NC,$88E2   ;
 $88BC RRCA          ;
 $88BD RRCA          ;
 $88BE RRCA          ;
 $88BF AND $0F       ;
 $88C1 LD C,A        ;
 $88C2 NEG           ;
 $88C4 ADD A,$10     ;
*$88C6 LD ($87EE),A  ;
 $88C9 LD (IX+$09),A ;
 $88CC LD A,B        ;
 $88CD SUB C         ;
 $88CE LD B,A        ;
 $88CF LD ($5E57),A  ;
 $88D2 LD (IX+$0B),A ;
 $88D5 LD A,(DE)     ;
 $88D6 INC DE        ;
 $88D7 LD ($5E58),A  ;
 $88DA LD ($5E59),A  ;
 $88DD LD (IX+$0A),A ;
 $88E0 JR $8879      ;
; This entry point is used by the routine at #R$88A3.
*$88E2 LD A,$10      ;
 $88E4 LD C,$00      ;
 $88E6 JR $88C6      ;

; Routine at 88E8
;
; Used by the routines at #R$864F, #R$877C and #R$8787.
c$88E8 LD E,(IX+$0C) ;
 $88EB LD D,(IX+$0D) ;
 $88EE LD L,(IX+$0E) ;
 $88F1 LD H,(IX+$0F) ;
 $88F4 LD A,H        ;
 $88F5 LD ($5E56),A  ;
 $88F8 LD A,(IX+$09) ;
 $88FB LD ($87C8),A  ;
 $88FE LD A,(IX+$0A) ;
 $8901 LD ($5E5A),A  ;
 $8904 LD B,(IX+$0B) ;
 $8907 LD C,$00      ;
 $8909 RET           ;

; Routine at 890A
;
; Used by the routine at #R$91E2.
c$890A LD L,(IX+$01) ;
 $890D LD H,(IX+$04) ;
 $8910 CALL $8506    ;
 $8913 LD A,(DE)     ;
 $8914 INC DE        ;
 $8915 LD B,A        ;
 $8916 LD A,(DE)     ;
 $8917 INC DE        ;
 $8918 LD C,A        ;
*$8919 PUSH BC       ;
 $891A PUSH HL       ;
*$891B LD A,(HL)     ;
 $891C AND A         ;
 $891D JR Z,$8921    ;
 $891F LD A,(DE)     ;
 $8920 LD (HL),A     ;
*$8921 INC DE        ;
 $8922 INC L         ;
 $8923 DJNZ $891B    ;
 $8925 POP HL        ;
 $8926 LD BC,$0020   ;
 $8929 AND A         ;
 $892A SBC HL,BC     ;
 $892C POP BC        ;
 $892D DEC C         ;
 $892E JR NZ,$8919   ;
 $8930 RET           ;

; Routine at 8931
;
; Used by the routine at #R$9EDC.
c$8931 PUSH BC       ;
 $8932 PUSH HL       ;
*$8933 LD A,(HL)     ;
 $8934 AND A         ;
 $8935 JR Z,$8938    ;
 $8937 LD (HL),D     ;
*$8938 INC L         ;
 $8939 DJNZ $8933    ;
 $893B POP HL        ;
 $893C LD BC,$0020   ;
 $893F AND A         ;
 $8940 SBC HL,BC     ;
 $8942 POP BC        ;
 $8943 DEC C         ;
 $8944 JR NZ,$8931   ;
 $8946 RET           ;

; Routine at 8947
;
; Used by the routines at #R$A325 and #R$AD36.
c$8947 LD A,L        ;
 $8948 CPL           ;
 $8949 LD L,A        ;
 $894A LD A,H        ;
 $894B CPL           ;
 $894C LD H,A        ;
 $894D INC HL        ;
 $894E RET           ;

; Display Lives
;
; Used by the routines at #R$9020, #R$9F6A and #R$A826.
;
; .
;
; Controller for 1UP lives.
@label=DisplayPlayerLives
c$894F LD HL,$0040   ; {Call #R$851E with #N($0040, $04, $04) (screen buffer
 $8952 CALL $851E    ; address) for 1UP lives.}
 $8955 CALL $8986    ; #REGa=1UP lives remaining (by calling #R$8986).
 $8958 AND A         ; {If 1UP lives are zero, jump to #R$8977.
 $8959 JR Z,$8977    ; }
 $895B CALL $896A    ; Else, there are lives to display so call #R$896A.
; Controller for 2UP lives.
@label=Controller2UPLives
*$895E LD HL,$00B0   ; {Call #R$851E with #N($00B0, $04, $04) (screen buffer
 $8961 CALL $851E    ; address) for 2UP lives.}
 $8964 CALL $8994    ; #REGa=2UP lives remaining (by calling #R$8994).
 $8967 AND A         ; {If 2UP lives are zero, jump to #R$897C.
 $8968 JR Z,$897C    ; }
; Handles displaying the lives count and UDG character.
@label=HandlerDisplayLives
*$896A ADD A,$30     ; Add #N$30 to convert to an ASCII character (starting at
                     ; "0" character).
 $896C CALL $89EF    ; Call #R$89EF.
 $896F LD DE,$D151   ; #REGde=#R$D151.
 $8972 PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $8973 PUSH DE       ; }
 $8974 JP $8A01      ; Jump to #R$8A01.
; 1UP has no lives.
@label=Handler1UPNoLives
*$8977 CALL $897C    ; Call #R$897C.
 $897A JR $895E      ; Jump to #R$895E.
; 2UP has no lives.
@label=Handler2UPNoLives
*$897C LD A,$20      ; #REGa=ASCII " " (SPACE).
 $897E CALL $89EF    ; Call #R$89EF.
 $8981 LD A,$20      ; #REGa=ASCII " " (SPACE).
 $8983 JP $89EF      ; Jump to #R$89EF.
; Controller for the currently active player.
@label=ControllerActiveLives
*$8986 LD A,($5E65)  ; {If #R$5E65 is not zero then jump to #R$8990.
 $8989 AND A         ;
 $898A JR NZ,$8990   ; }
; Return currently active players lives left.
@label=ActivePlayerLives
*$898C LD A,($5EA1)  ; #REGa=#R$5EA1.
 $898F RET           ; Return.
; Return inactive players lives left.
@label=InactivePlayerLives
*$8990 LD A,($5EA5)  ; #REGa=#R$5EA5.
 $8993 RET           ; Return.
; Controller for the inactive player.
@label=ControllerInactiveLives
*$8994 LD A,($5E65)  ; {If #R$5E65 is zero then jump to #R$8990.
 $8997 AND A         ;
 $8998 JR Z,$8990    ; }
 $899A JR $898C      ; Jump to #R$898C.
; View the equivalent code in;
; #LIST
; { #ATICATAC$0000 }
; { #COOKIE$7378 }
; { #JETPAC$70A4 }
; { #PSSST$7325 }
; { #SABREWULF$B7CD }
; { #TRANZAM$0000 }
; LIST#

; Add Points To Score
;
; Used by the routines at #R$9531, #R$970E, #R$AD36 and #R$B7BC.
;
; BC Points to add to score
;
; Check the active player.
@label=AddPointsToScore
c$899C LD A,($5E65)  ; {If #R$5E65 is not zero, jump to #R$89A7.
 $899F AND A         ;
 $89A0 JR NZ,$89A7   ; }
; Set the score address for 1UP.
 $89A2 LD HL,$5E61   ; #REGhl=#R$5E61.
 $89A5 JR $89AA      ; Jump to #R$89AA.
; Set the score address for 2UP.
@label=AddPointsToScore_2UP
*$89A7 LD HL,$5E64   ; #REGhl=#R$5E64.
; Process adding the points to the appropriate score.
@label=AddPointsToScore_Start
*$89AA LD A,(HL)     ; #REGa=score byte #3.
 $89AB ADD A,C       ; {Add #REGc to score byte #3 with BCD conversion.
 $89AC DAA           ; }
 $89AD LD (HL),A     ; Update score byte #3.
 $89AE DEC HL        ; Move onto the next score byte.
 $89AF LD A,(HL)     ; #REGa=score byte #2.
 $89B0 ADC A,B       ; {Add (with carry) #REGb to score byte #2 with BCD
 $89B1 DAA           ; conversion.}
 $89B2 LD (HL),A     ; Update score byte #2.
 $89B3 DEC HL        ; Move onto the next score byte.
 $89B4 LD A,(HL)     ; #REGa=score byte #1.
 $89B5 ADC A,$00     ; {Add #N$00 (i.e. just the carry flag) to score byte #1
 $89B7 DAA           ; with BCD conversion.}
 $89B8 LD (HL),A     ; Update score byte #1.
; Check the active player.
 $89B9 LD A,($5E65)  ; {If #R$5E65 is not zero, jump to #R$89C7.
 $89BC AND A         ;
 $89BD JR NZ,$89C7   ; }
; View the equivalent code in;
; #LIST
; { #COOKIE$7415 }
; { #JETPAC$70F9 }
; { #PSSST$737A }
; { #SABREWULF$B5A9 }
; { #TRANZAM$6046 }
; LIST#

; Print Scores
;
; Used by the routine at #R$84D8.
;
; .
;
; Sets up the 1UP score.
@label=Score_1UP
c$89BF LD HL,$4021   ; #REGhl=#N$4021 (screen buffer address).
 $89C2 LD DE,$5E5F   ; #REGde=#R$5E5F.
 $89C5 JR $89D5      ; Jump to #R$89D5.
; Sets up the 2UP score.
@label=Score_2UP
*$89C7 LD HL,$4039   ; #REGhl=#N$4039 (screen buffer address).
 $89CA LD DE,$5E62   ; #REGde=#R$5E62.
 $89CD JR $89D5      ; Jump to #R$89D5.
; Sets up the HI score.
@label=Score_HI
*$89CF LD HL,$402D   ; #REGhl=#N$402D (screen buffer address).
 $89D2 LD DE,$5E06   ; #REGde=#R$5E06.
; Prints the score.
@label=PrintScore
*$89D5 LD B,$03      ; #REGb=#N$03.
; This entry point is used by the routine at #R$F410.
@label=PrintScore_Loop
*$89D7 LD A,(DE)     ; #REGa=#REGde.
 $89D8 RRCA          ; {#REGa=#REGa / #N$10.
 $89D9 RRCA          ;
 $89DA RRCA          ;
 $89DB RRCA          ; }
 $89DC AND %00001111 ; Keep only bits 0-3.
 $89DE ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $89E0 CALL $89EF    ; Call #R$89EF.
 $89E3 LD A,(DE)     ; #REGa=#REGde.
 $89E4 AND %00001111 ; Keep only bits 0-3.
 $89E6 ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $89E8 CALL $89EF    ; Call #R$89EF.
 $89EB INC DE        ; Increment #REGde by one.
 $89EC DJNZ $89D7    ; Decrease counter by one and loop back to #R$89D7 until
                     ; counter is zero.
 $89EE RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$7438 }
; { #JETPAC$711C }
; { #PSSST$739D }
; { #SABREWULF$B5CC }
; { #TRANZAM$6CB6 }
; LIST#

; Print Character
;
; Used by the routines at #R$894F, #R$89BF, #R$8A11, #R$8BBB, #R$8C01, #R$F232,
; #R$F295, #R$F410, #R$F4C6 and #R$F628.
;
; A ASCII value to print
; HL Screen address
@label=PrintScreen
c$89EF PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $89F0 PUSH DE       ;
 $89F1 PUSH HL       ; }
 $89F2 SUB $20       ; {Create an offset in #REGhl.
 $89F4 LD L,A        ;
 $89F5 LD H,$00      ; }
 $89F7 ADD HL,HL     ; {#REGhl=#REGhl * 8.
 $89F8 ADD HL,HL     ;
 $89F9 ADD HL,HL     ; }
 $89FA LD DE,($5E04) ; #REGde=#R$5E04 (main font is #R$D347).
 $89FE ADD HL,DE     ; {#REGde=#REGhl + #REGde. For examples of usage;
 $89FF EX DE,HL      ; #TABLE(default,centre,centre,centre,centre,centre)
                     ; { =h Letter | =h ASCII Value | =h - #N$20 * #N08 (offset) | =h CHARS + offset }
                     ; #FOREACH($55,$4C,$54,$49,$4D,$41,$54,$45)(value,
                     ;   { #LET(result=$D347 + (value - $20) * $08) "#CHR(value)" | #N(value) | #N((value - $20) * $08) | #R({result}) }
                     ; )
                     ; TABLE#}
; Print the character to the screen.
 $8A00 POP HL        ; Restore #REGhl, containing the screen buffer location,
                     ; from the stack.
; This entry point is used by the routine at #R$894F.
*$8A01 LD B,$08      ; #REGb=#N$08 (#N$08 rows of pixels).
@label=PrintScreen_Loop
*$8A03 LD A,(DE)     ; {Copy a byte from the font data to the screen buffer.
 $8A04 LD (HL),A     ; }
 $8A05 INC DE        ; Increment the font data by one.
 $8A06 INC H         ; Move onto the next pixel line.
 $8A07 DJNZ $8A03    ; Decrease counter by one and loop back to #R$8A03 until
                     ; counter is zero.
 $8A09 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $8A0A POP BC        ; }
; Reset #REGhl and move to the next column, ready to print the next character.
 $8A0B LD A,H        ; {#REGh=#REGh - #N$08 (reset the display line).
 $8A0C SUB $08       ;
 $8A0E LD H,A        ; }
 $8A0F INC L         ; Increment screen column by one.
 $8A10 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1D3 }
; { #COOKIE$7468 }
; { #JETPAC$714C }
; { #PSSST$73CD }
; { #TRANZAM$6C96 }
; LIST#

; Print Colour String
;
; Used by the routines at #R$80D1, #R$8A37, #R$A8E3, #R$ABA9, #R$B3A3, #R$B594,
; #R$F232, #R$F410 and #R$F4C6.
;
; DE Pointer to string data
@label=PrintStringColour
c$8A11 PUSH HL       ; Stash #REGhl on the stack.
 $8A12 CALL $851E    ; Call #R$851E.
 $8A15 LD A,(DE)     ; Fetch the attribute byte.
 $8A16 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $8A17 INC DE        ; Increment #REGde by one to point to the text of the
                     ; string.
 $8A18 EXX           ; Switch to the shadow registers.
 $8A19 POP HL        ; Restore #REGhl from the stack.
 $8A1A CALL $8506    ; Call #R$8506.
; This entry point is used by the routine at #R$81AB.
@label=PrintString_Loop
*$8A1D EXX           ; Switch back to the normal registers.
 $8A1E LD A,(DE)     ; Fetch the character to print.
 $8A1F BIT 7,A       ; {If bit 7 is set (which signifies the end of the
 $8A21 JR NZ,$8A2E   ; string), jump to #R$8A2E.}
 $8A23 CALL $89EF    ; Call #R$89EF.
 $8A26 INC DE        ; Increment #REGde by one.
 $8A27 EXX           ; Switch to the shadow registers.
 $8A28 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $8A29 LD (HL),A     ; Copy the attribute byte to the screen.
 $8A2A INC L         ; Increment #REGl by one.
 $8A2B EX AF,AF'     ; Switch to the shadow #REGaf register.
 $8A2C JR $8A1D      ; Jump to #R$8A1D.
; Because the last character contains the terminator, it needs to be handled
; separately.
@label=PrintString_LastCharacter
*$8A2E AND %01111111 ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
 $8A30 CALL $89EF    ; Call #R$89EF.
 $8A33 EXX           ; Switch to the shadow registers.
 $8A34 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $8A35 LD (HL),A     ; Copy the attribute byte to the screen.
 $8A36 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$A1F3 }
; { #COOKIE$7488 }
; { #JETPAC$0000 }
; { #PSSST$73ED }
; { #TRANZAM$0000 }
; LIST#

; Print Banner
;
; Used by the routine at #R$84D8.
;
; .
;
; Handle printing "#FONT:(1UP)addr=$D347,attr=$47(1up)" messaging.
@label=PrintBanner
c$8A37 LD HL,$0018   ; #REGhl=#N($0018,$04,$04).
 $8A3A LD DE,$8A51   ; #REGde=#R$8A51.
 $8A3D CALL $8A11    ; Call #R$8A11.
; Handle printing "#FONT:(HI)addr=$D347,attr=$45(hi)" messaging.
 $8A40 LD HL,$0078   ; #REGhl=#N($0078,$04,$04).
 $8A43 LD DE,$8A59   ; #REGde=#R$8A59.
 $8A46 CALL $8A11    ; Call #R$8A11.
; Handle printing "#FONT:(2UP)addr=$D347,attr=$47(2up)" messaging.
 $8A49 LD HL,$00D8   ; #REGhl=#N($00D8,$04,$04).
 $8A4C LD DE,$8A55   ; #REGde=#R$8A55.
 $8A4F JR $8A11      ; Jump to #R$8A11.
; View the equivalent code in;
; #LIST
; { #COOKIE$74AE }
; { #JETPAC$7192 }
; { #PSSST$7413 }
; LIST#

; Messaging: Banner Text
;
; .
;
; .
;
; #FONT:(1UP)addr=$D347,attr=$47(1up)
@label=String_1UP
t$8A51 DEFM $47          ; {"1UP" (#N(#PEEK(#PC)) is the attribute).
 $8A52 DEFM "1U","P"+$80 ; }
; #FONT:(2UP)addr=$D347,attr=$47(2up)
@label=String_2UP
 $8A55 DEFM $47          ; {"2UP" (#N(#PEEK(#PC)) is the attribute).
 $8A56 DEFM "2U","P"+$80 ; }
; #FONT:(HI)addr=$D347,attr=$45(hi)
@label=String_HI
 $8A59 DEFM $45          ; {"HI" (#N(#PEEK(#PC)) is the attribute).
 $8A5A DEFM "H","I"+$80  ; }

; Routine at 8A5C
;
; Used by the routine at #R$8B73.
c$8A5C LD A,C        ;
 $8A5D AND A         ;
 $8A5E JR Z,$8A70    ;
 $8A60 DEC C         ;
 $8A61 CALL $8A93    ;
 $8A64 EXX           ;
 $8A65 LD A,C        ;
 $8A66 AND A         ;
 $8A67 JR Z,$8A6D    ;
*$8A69 DEC C         ;
 $8A6A CALL $8AC8    ;
*$8A6D EXX           ;
 $8A6E JR $8A5C      ;
*$8A70 EXX           ;
 $8A71 LD A,C        ;
 $8A72 AND A         ;
 $8A73 JR NZ,$8A69   ;
; This entry point is used by the routine at #R$8B73.
*$8A75 EXX           ;
; This entry point is used by the routine at #R$8B73.
*$8A76 LD A,($5E5A)  ;
 $8A79 LD C,A        ;
 $8A7A LD A,($5E59)  ;
 $8A7D OR C          ;
 $8A7E RET Z         ;
 $8A7F XOR A         ;
 $8A80 LD ($5E5A),A  ;
 $8A83 EXX           ;
 $8A84 LD A,($5E59)  ;
 $8A87 LD C,A        ;
 $8A88 XOR A         ;
; This entry point is used by the routine at #R$8B73.
*$8A89 LD ($5E59),A  ;
 $8A8C EXX           ;
 $8A8D JR $8A5C      ;
 $8A8F EX DE,HL      ;
 $8A90 EX (SP),HL    ;
 $8A91 JR $8AAF      ;
*$8A93 PUSH HL       ;
 $8A94 EX DE,HL      ;
 $8A95 PUSH DE       ;
 $8A96 LD D,$00      ;
 $8A98 LD E,(HL)     ;
 $8A99 INC HL        ;
 $8A9A EX DE,HL      ;
*$8A9B JR $8A9B      ;
 $8A9D ADD HL,HL     ;
 $8A9E ADD HL,HL     ;
 $8A9F ADD HL,HL     ;
 $8AA0 ADD HL,HL     ;
 $8AA1 ADD HL,HL     ;
 $8AA2 ADD HL,HL     ;
 $8AA3 ADD HL,HL     ;
 $8AA4 EX DE,HL      ;
*$8AA5 EX (SP),HL    ;
 $8AA6 LD A,D        ;
 $8AA7 XOR (HL)      ;
 $8AA8 LD (HL),A     ;
 $8AA9 INC L         ;
 $8AAA LD A,L        ;
 $8AAB AND $1F       ;
 $8AAD JR Z,$8AB2    ;
*$8AAF LD A,E        ;
 $8AB0 XOR (HL)      ;
 $8AB1 LD (HL),A     ;
*$8AB2 POP DE        ;
 $8AB3 POP HL        ;
 $8AB4 DEC H         ;
 $8AB5 LD A,H        ;
 $8AB6 CPL           ;
 $8AB7 AND $07       ;
 $8AB9 RET NZ        ;
 $8ABA LD A,L        ;
 $8ABB SUB $20       ;
 $8ABD LD L,A        ;
 $8ABE RET C         ;
 $8ABF LD A,H        ;
 $8AC0 ADD A,$08     ;
 $8AC2 LD H,A        ;
 $8AC3 RET           ;
 $8AC4 EX DE,HL      ;
 $8AC5 EX (SP),HL    ;
 $8AC6 JR $8AAF      ;
*$8AC8 PUSH HL       ;
 $8AC9 EX DE,HL      ;
 $8ACA PUSH DE       ;
 $8ACB LD D,$00      ;
 $8ACD LD E,(HL)     ;
 $8ACE INC HL        ;
 $8ACF EX DE,HL      ;
*$8AD0 JR $8AD0      ;
 $8AD2 ADD HL,HL     ;
 $8AD3 ADD HL,HL     ;
 $8AD4 ADD HL,HL     ;
 $8AD5 ADD HL,HL     ;
 $8AD6 ADD HL,HL     ;
 $8AD7 ADD HL,HL     ;
 $8AD8 ADD HL,HL     ;
 $8AD9 EX DE,HL      ;
 $8ADA JR $8AA5      ;
 $8ADC CALL $86A1    ;
 $8ADF EXX           ;
 $8AE0 XOR A         ;
 $8AE1 LD ($5E5A),A  ;
 $8AE4 LD C,A        ;
 $8AE5 JP $8A5C      ;
; This entry point is used by the routine at #R$A325.
*$8AE8 XOR A         ;
 $8AE9 LD ($5E59),A  ;
 $8AEC LD ($5E58),A  ;
 $8AEF LD C,A        ;
 $8AF0 EXX           ;
 $8AF1 CALL $8B52    ;
 $8AF4 JP $8A5C      ;
; This entry point is used by the routine at #R$8B73.
*$8AF7 LD L,(IX+$02) ;
 $8AFA LD H,(IX+$03) ;
 $8AFD LD BC,($607A) ;
 $8B01 AND A         ;
 $8B02 SBC HL,BC     ;
 $8B04 LD BC,$0078   ;
 $8B07 ADD HL,BC     ;
 $8B08 LD A,H        ;
 $8B09 AND $1F       ;
 $8B0B JP NZ,$867F   ;
 $8B0E LD (IX+$01),L ;
 $8B11 CALL $857F    ;
 $8B14 LD L,(IX+$01) ;
 $8B17 LD H,(IX+$04) ;
 $8B1A LD A,L        ;
 $8B1B DEC A         ;
 $8B1C AND $07       ;
 $8B1E CP $07        ;
 $8B20 JR NZ,$8B24   ;
 $8B22 LD A,$F2      ;
*$8B24 LD ($8AD1),A  ;
 $8B27 LD (IX+$09),A ;
 $8B2A LD A,$01      ;
 $8B2C JR Z,$8B2F    ;
 $8B2E INC A         ;
*$8B2F LD ($5E57),A  ;
 $8B32 LD (IX+$0B),H ;
 $8B35 CALL $851E    ;
 $8B38 LD A,(DE)     ;
 $8B39 INC DE        ;
 $8B3A LD ($5E59),A  ;
 $8B3D LD ($5E58),A  ;
 $8B40 LD (IX+$0A),A ;
 $8B43 LD (IX+$0C),E ;
 $8B46 LD (IX+$0D),D ;
 $8B49 LD (IX+$0E),L ;
 $8B4C LD (IX+$0F),H ;
 $8B4F LD C,$00      ;
 $8B51 RET           ;
; This entry point is used by the routine at #R$8B73.
*$8B52 LD E,(IX+$0C) ;
 $8B55 LD D,(IX+$0D) ;
 $8B58 LD L,(IX+$0E) ;
 $8B5B LD H,(IX+$0F) ;
 $8B5E LD A,(IX+$09) ;
 $8B61 LD ($8A9C),A  ;
 $8B64 LD A,(IX+$0A) ;
 $8B67 LD ($5E5A),A  ;
 $8B6A LD A,(IX+$0B) ;
 $8B6D LD ($5E56),A  ;
 $8B70 LD C,$00      ;
 $8B72 RET           ;

; Routine at 8B73
;
; Used by the routines at #R$970E, #R$A325 and #R$AD36.
c$8B73 CALL $8B52    ;
 $8B76 EXX           ;
 $8B77 CALL $8AF7    ;
 $8B7A EXX           ;
 $8B7B LD A,($5E56)  ;
 $8B7E SUB (IX+$04)  ;
 $8B81 JP Z,$8A76    ;
 $8B84 JP M,$8B96    ;
 $8B87 LD C,A        ;
 $8B88 LD A,($5E5A)  ;
 $8B8B CP C          ;
 $8B8C JP C,$8A76    ;
 $8B8F SUB C         ;
 $8B90 LD ($5E5A),A  ;
 $8B93 JP $8A5C      ;
*$8B96 EXX           ;
 $8B97 NEG           ;
 $8B99 LD C,A        ;
 $8B9A LD A,($5E59)  ;
 $8B9D CP C          ;
 $8B9E JP C,$8A75    ;
 $8BA1 SUB C         ;
 $8BA2 JP $8A89      ;

; Routine at 8BA5
;
; Used by the routines at #R$A1AA, #R$B3A3 and #R$B52E.
c$8BA5 LD HL,$57BF   ; #REGhl=#N$57BF.
 $8BA8 LD BC,$2088   ; #REGbc=#N$2088.
*$8BAB PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $8BAC PUSH HL       ; }
*$8BAD LD (HL),$00   ; Write #N$00 to #REGhl.
 $8BAF DEC HL        ; Decrease #REGhl by one.
 $8BB0 DJNZ $8BAD    ; Decrease counter by one and loop back to #R$8BAD until
                     ; counter is zero.
 $8BB2 POP HL        ; Restore #REGhl from the stack.
 $8BB3 CALL $85F6    ; Call #R$85F6.
 $8BB6 POP BC        ; Restore #REGbc from the stack.
 $8BB7 DEC C         ; Decrease #REGc by one.
 $8BB8 JR NZ,$8BAB   ; Jump back to #R$8BAB until #REGc is zero.
 $8BBA RET           ; Return.

; Draw HUD Panel
;
; Used by the routine at #R$A826.
@label=DrawHUDPanel
c$8BBB LD HL,($5E04) ; #REGhl=#R$5E04.
 $8BBE PUSH HL       ; Stash #REGhl on the stack.
 $8BBF LD HL,$DD97   ; {Write #R$DD97 to #R$5E04.
 $8BC2 LD ($5E04),HL ; }
; The panel is printed like a font.
 $8BC5 LD BC,$1E03   ; #REGbc=#N$1E03.
 $8BC8 LD DE,$DE5F   ; #REGde=#R$DE5F.
 $8BCB LD HL,$4041   ; #REGhl=#N$4041 (screen buffer location).
@label=DrawHUDPanel_Pixel_Row
*$8BCE PUSH BC       ;
 $8BCF PUSH HL       ;
@label=DrawHUDPanel_Pixel_Column
*$8BD0 LD A,(DE)     ;
 $8BD1 INC DE        ;
 $8BD2 ADD A,$20     ;
 $8BD4 CALL $89EF    ;
 $8BD7 DJNZ $8BD0    ;
 $8BD9 POP HL        ;
 $8BDA LD BC,$0020   ;
 $8BDD ADD HL,BC     ;
 $8BDE POP BC        ;
 $8BDF DEC C         ;
 $8BE0 JR NZ,$8BCE   ;
; Now write the attribute bytes.
 $8BE2 LD DE,$DEB9   ; #REGde=#R$DEB9.
 $8BE5 LD HL,$5841   ; #REGhl=#N$5841 (attribute buffer location).
 $8BE8 LD BC,$1E03   ; #REGbc=#N$1E03.
@label=DrawHUDPanel_Attribute_Row
*$8BEB PUSH BC       ;
 $8BEC PUSH HL       ;
@label=DrawHUDPanel_Attribute_Column
*$8BED LD A,(DE)     ;
 $8BEE INC DE        ;
 $8BEF LD (HL),A     ;
 $8BF0 INC L         ;
 $8BF1 DJNZ $8BED    ;
 $8BF3 POP HL        ;
 $8BF4 LD BC,$0020   ;
 $8BF7 ADD HL,BC     ;
 $8BF8 POP BC        ;
 $8BF9 DEC C         ;
 $8BFA JR NZ,$8BEB   ;
; Restore the old font pointer.
 $8BFC POP HL        ; Restore #REGhl from the stack.
 $8BFD LD ($5E04),HL ; Write #REGhl back to #R$5E04.
 $8C00 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #COOKIE$5FE1 }
; { #TRANZAM$69BC }
; LIST#

; Draw Gauge
;
; Used by the routines at #R$8C71, #R$8D06, #R$91E2 and #R$ABA9.
;
; A Lower byte of gauge
; HL Screen location
;
; Stash the lower gauge byte for later.
@label=DrawGauge
c$8C01 LD C,A        ; #REGc=#REGa.
; Stash the screen location for later, as we'll need it to gain the screen
; buffer address.
 $8C02 PUSH HL       ; Stash #REGhl on the stack.
 $8C03 CALL $8506    ; Call #R$8506.
; Restore the lower gauge byte.
 $8C06 LD A,C        ; #REGa=#REGc.
; Rotate off the INK bits.
 $8C07 RRCA          ; {Rotate the bits right three times (including the
 $8C08 RRCA          ; carry).
 $8C09 RRCA          ; }
 $8C0A AND %00011111 ; Keep only bits 0-4 (PAPER, BRIGHT and FLASH).
 $8C0C JR Z,$8C1A    ; Jump to #R$8C1A if the result is zero (i.e. empty/
                     ; blank).
 $8C0E LD B,A        ; #REGb=#REGa.
; This moves along
@label=DrawGauge_Find
*$8C0F LD A,(HL)     ; #REGa=attribute byte.
 $8C10 RLCA          ; {Rotate the bits left three times (including the carry).
 $8C11 RLCA          ;
 $8C12 RLCA          ; }
 $8C13 AND %00111000 ; Keep only bits 3-5 (INK).
 $8C15 OR (HL)       ;
 $8C16 LD (HL),A     ; Write #REGa back to #REGhl.
 $8C17 INC HL        ; Increment #REGhl by one.
 $8C18 DJNZ $8C0F    ; Decrease counter by one and loop back to #R$8C0F until
                     ; counter is zero.
; Fetch the attribute byte for where the gauge ends.
@label=DrawGauge_Draw
*$8C1A LD A,(HL)     ; #REGa=#REGhl.
; Remove the PAPER bits.
 $8C1B AND %11000111 ; Keep only bits 0-2, 6-7.
 $8C1D LD (HL),A     ; Write #REGa back to #REGhl.
; Store the attribute buffer address in #REGde.
 $8C1E EX DE,HL      ; Switch the #REGde and #REGhl registers.
; Restore the screen location for the screen buffer address call.
 $8C1F POP HL        ; Restore #REGhl from the stack.
 $8C20 CALL $851E    ; Call #R$851E.
 $8C23 LD A,E        ; #REGa=#REGe.
 $8C24 AND %00011111 ; Keep only bits 0-4.
 $8C26 LD E,A        ; #REGe=#REGa.
 $8C27 LD A,L        ; #REGa=#REGl.
 $8C28 AND %11100000 ; Keep only bits 5-7.
 $8C2A OR E          ;
 $8C2B LD L,A        ; #REGl=#REGa.
; Restore the lower gauge byte.
 $8C2C LD A,C        ; #REGa=#REGc.
; The gradient lines are stored in the font at: #R$D51F.
; #UDGTABLE(default,centre,centre)
; { #N$00 | #FONT:([)addr=$D347,attr=$47(gradient-0) }
; { #N$01 | #FONT:(\)addr=$D347,attr=$47(gradient-1) }
; { #N$02 | #FONT:(])addr=$D347,attr=$47(gradient-2) }
; { #N$03 | #FONT:(^)addr=$D347,attr=$47(gradient-3) }
; { #N$04 | #FONT:(_)addr=$D347,attr=$47(gradient-4) }
; { #N$05 | #FONT:(`)addr=$D347,attr=$47(gradient-5) }
; { #N$06 | #FONT:(a)addr=$D347,attr=$47(gradient-6) }
; { #N$07 | #FONT:(b)addr=$D347,attr=$47(gradient-7) }
; UDGTABLE#
; .
; There are 8 gradient line images, so ensure the number reference is between
; #N$00-#N$07.
 $8C2D AND %00000111 ; Keep only bits 0-2.
; The first value is #N$5B which corresponds to
; "#FONT:([)addr=$D347,attr=$47(gradient-0)" (the smallest gradient).
 $8C2F ADD A,$5B     ; #REGa=#REGa+#N$5B.
 $8C31 CALL $89EF    ; Call #R$89EF.
; Restore the lower gauge byte.
 $8C34 LD A,C        ; #REGa=#REGc.
 $8C35 CPL           ; Flip the bits.
 $8C36 AND %00000111 ; Keep only bits 0-2.
 $8C38 RET NZ        ; Return if the result is not zero.
 $8C39 LD A,$20      ; #REGa=#N$20.
 $8C3B JP $89EF      ; Jump to #R$89EF.

; Flash Score Label
;
; Used by the routine at #R$8C71.
@label=HandlerScoreLabel
c$8C3E LD A,($5E6C)    ; {If #R$5E6C is zero, jump to #R$8C49.
 $8C41 AND A           ;
 $8C42 JR Z,$8C49      ; }
 $8C44 LD (IX+$00),$00 ; Write #N$00 to #REGix+#N$00.
 $8C48 RET             ; Return.
; Controller for handling whether to action 1UP or 2UP score label.
@label=ScoreLabelFlash
*$8C49 LD A,($5E65)    ; {If #R$5E65 is not zero, jump to #R$8C6C.
 $8C4C AND A           ;
 $8C4D JR NZ,$8C6C     ; }
; Flash 1UP score label.
 $8C4F LD HL,$0018     ; #REGhl=#N($0018,$04,$04) (position of the 1UP score
                       ; label).
; Set flash state for the 3-attributes of the score label.
@label=FlashText
*$8C52 CALL $8506      ; Call #R$8506.
 $8C55 LD B,$03        ; #REGb=#N$03 (counter for the three letters in a score
                       ; label).
@label=FlashText_Loop
*$8C57 LD A,(HL)       ; Fetch the attribute byte.
 $8C58 OR %10000000    ; Ensure bit 7 is set (the flash bit).
 $8C5A LD (HL),A       ; Write the attribute byte back to #REGhl.
 $8C5B INC HL          ; Increment the attribute address pointer by one.
 $8C5C DJNZ $8C57      ; Decrease counter by one and loop back to #R$8C57 until
                       ; counter is zero.
 $8C5E RET             ; Return.
; Unset flash state for the 3-attributes of the score label.
@label=UnsetFlashText
*$8C5F CALL $8506      ; Call #R$8506.
 $8C62 LD B,$03        ; #REGb=#N$03 (counter for the three letters in a score
                       ; label).
@label=UnsetFlashText_Loop
*$8C64 LD A,(HL)       ; Fetch the attribute byte.
 $8C65 AND %01111111   ; Keep only bits 0-6 (i.e. everything except the flash
                       ; bit).
 $8C67 LD (HL),A       ; Write the attribute byte back to #REGhl.
 $8C68 INC HL          ; Increment the attribute address pointer by one.
 $8C69 DJNZ $8C64      ; Decrease counter by one and loop back to #R$8C64 until
                       ; counter is zero.
 $8C6B RET             ; Return.
; Flash 2UP score label.
@label=FlashScoreLabel2UP
*$8C6C LD HL,$00D8     ; #REGhl=#N($00D8,$04,$04) (position of the 2UP score
                       ; label).
 $8C6F JR $8C52        ; Jump to #R$8C52.
; View the equivalent code in;
; #LIST
; { #COOKIE$7020 }
; { #SABREWULF$AEA1 }
; LIST#

; Routine at 8C71
c$8C71 LD HL,$5E67   ; {If #R$5E67 is zero, jump to #R$8C99.
 $8C74 LD A,(HL)     ;
 $8C75 AND A         ;
 $8C76 JR Z,$8C99    ; }
 $8C78 DEC (HL)      ; Decrement #R$5E67 by one.
 $8C79 JR NZ,$8C3E   ; Jump to #R$8C3E if the delay timer is still active.
 $8C7B CALL $B8C9    ; Call #R$B8C9.
 $8C7E LD A,($5EA0)  ; #REGa=#R$5EA0.
 $8C81 AND %00000001 ; Keep only bit 0.
 $8C83 LD ($5EA2),A  ; Write the result to #R$5EA2.
 $8C86 LD A,($5E65)  ; {Jump to #R$8C94 if #R$5E65 is not zero.
 $8C89 AND A         ;
 $8C8A JR NZ,$8C94   ; }
 $8C8C LD HL,$0018   ; #REGhl=#N($0018,$04,$04).
*$8C8F CALL $8C5F    ; Call #R$8C5F.
 $8C92 JR $8C99      ; Jump to #R$8C99.
*$8C94 LD HL,$00D8   ; #REGhl=#N($00D8,$04,$04).
 $8C97 JR $8C8F      ; Jump to #R$8C8F.
*$8C99 LD HL,$1040   ; #REGhl=#N($1040,$04,$04).
 $8C9C LD A,($608F)  ; #REGa=#R$608F.
 $8C9F CALL $8C01    ; Call #R$8C01.
 $8CA2 CALL $8F90    ; Call #R$8F90.
 $8CA5 BIT 1,A       ;
 $8CA7 JP Z,$8CE2    ;
 $8CAA BIT 0,A       ;
 $8CAC JP Z,$8CF4    ;
 $8CAF BIT 3,A       ;
 $8CB1 LD A,$00      ; {Write #N$00 to #REGix+#N$05.
 $8CB3 LD (IX+$05),A ; }
 $8CB6 JP Z,$9005    ;
 $8CB9 JP $8CDF      ; Jump to #R$8CDF.

; Routine at 8CBC
c$8CBC LD (IX+$06),$F0 ;
 $8CC0 CALL $8F90      ;
 $8CC3 BIT 3,A         ;
 $8CC5 JP Z,$9005      ;
 $8CC8 CALL $91BB      ;
 $8CCB LD A,D          ;
 $8CCC AND A           ;
 $8CCD JP Z,$9005      ;
 $8CD0 LD A,E          ;
 $8CD1 AND A           ;
 $8CD2 JP Z,$9005      ;
 $8CD5 LD A,E          ;
 $8CD6 OR E            ;
 $8CD7 BIT 3,A         ;
 $8CD9 JP NZ,$9005     ;
 $8CDC JP $8DC5        ;
; This entry point is used by the routine at #R$8C71.
*$8CDF JP $8DD9        ;
; This entry point is used by the routine at #R$8C71.
*$8CE2 LD A,$F0        ;
 $8CE4 LD (IX+$05),A   ;
 $8CE7 LD A,(IX+$00)   ;
 $8CEA DEC A           ;
 $8CEB RES 2,A         ;
 $8CED INC A           ;
 $8CEE LD (IX+$00),A   ;
 $8CF1 JP $8CBC        ;
; This entry point is used by the routine at #R$8C71.
*$8CF4 LD A,$10        ;
 $8CF6 LD (IX+$05),A   ;
 $8CF9 LD A,(IX+$00)   ;
 $8CFC DEC A           ;
 $8CFD SET 2,A         ;
 $8CFF INC A           ;
 $8D00 LD (IX+$00),A   ;
 $8D03 JP $8CBC        ;

; Routine at 8D06
c$8D06 CALL $8F90      ; Call #R$8F90.
 $8D09 BIT 1,A         ;
 $8D0B JP Z,$8EC5      ;
 $8D0E BIT 0,A         ;
 $8D10 JP Z,$8E5A      ;
 $8D13 LD A,(IX+$05)   ;
 $8D16 AND A           ;
 $8D17 JR Z,$8D3A      ;
 $8D19 JP P,$8D2A      ;
 $8D1C ADD A,$02       ;
 $8D1E CP $D0          ;
 $8D20 JR C,$8D37      ;
 $8D22 CP $E0          ;
 $8D24 JR NC,$8D37     ;
 $8D26 ADD A,$10       ;
 $8D28 JR $8D37        ;
*$8D2A ADD A,$FE       ;
 $8D2C CP $40          ;
 $8D2E JR NC,$8D37     ;
 $8D30 CP $30          ;
 $8D32 JP C,$8D37      ;
 $8D35 SUB $10         ;
; This entry point is used by the routines at #R$8E5A and #R$8EC5.
*$8D37 LD (IX+$05),A   ;
; This entry point is used by the routines at #R$8E5A and #R$8EC5.
*$8D3A CALL $8F90      ;
 $8D3D LD B,A          ;
 $8D3E LD A,($608F)    ;
 $8D41 AND A           ;
 $8D42 JR Z,$8D4E      ;
 $8D44 BIT 3,B         ;
 $8D46 JP Z,$8F34      ;
 $8D49 BIT 2,B         ;
 $8D4B JP Z,$8F61      ;
*$8D4E LD B,$00        ;
 $8D50 LD A,(IX+$06)   ;
 $8D53 AND A           ;
 $8D54 JP M,$8D5B      ;
 $8D57 CP $40          ;
 $8D59 JR NC,$8D61     ;
*$8D5B LD C,$08        ;
; This entry point is used by the routine at #R$8F34.
*$8D5D ADD A,C         ;
 $8D5E LD (IX+$06),A   ;
; This entry point is used by the routine at #R$8F34.
*$8D61 LD A,(IX+$06)   ;
 $8D64 SRA A           ;
 $8D66 SRA A           ;
 $8D68 SRA A           ;
 $8D6A SRA A           ;
 $8D6C ADD A,(IX+$04)  ;
 $8D6F CP $40          ;
 $8D71 JP C,$8F61      ;
 $8D74 CP $B0          ;
 $8D76 JR C,$8D90      ;
 $8D78 CALL $91BB      ;
 $8D7B LD A,D          ;
 $8D7C AND A           ;
 $8D7D JR Z,$8D8A      ;
 $8D7F LD A,E          ;
 $8D80 AND A           ;
 $8D81 JR Z,$8D8A      ;
 $8D83 LD A,E          ;
 $8D84 OR D            ;
 $8D85 BIT 3,A         ;
 $8D87 JP Z,$8FF4      ;
*$8D8A LD (IX+$06),$E0 ;
 $8D8E LD A,$AF        ;
*$8D90 LD (IX+$04),A   ;
; This entry point is used by the routine at #R$8F61.
*$8D93 LD A,(IX+$05)   ;
 $8D96 AND A           ;
 $8D97 JP P,$8D9C      ;
 $8D9A NEG             ;
*$8D9C SRA A           ;
 $8D9E ADD A,B         ;
 $8D9F SLA A           ;
 $8DA1 LD C,A          ;
 $8DA2 LD B,$00        ;
 $8DA4 LD HL,($608E)   ; #REGhl=#R$608E.
 $8DA7 LD A,H          ; {If jetmans fuel has run out, jump to #R$8DBB.
 $8DA8 OR L            ;
 $8DA9 JR Z,$8DBB      ; }
 $8DAB AND A           ; Reset flags.
; Subtract the fuel expenditure from the current fuel level.
 $8DAC SBC HL,BC       ; #REGhl=#REGhl-#REGbc.
 $8DAE LD A,H          ; {If there's any fuel remaining, jump to #R$8DBB.
 $8DAF AND A           ;
 $8DB0 JR NZ,$8DBB     ; }
 $8DB2 LD DE,$BA2D     ; #REGde=#R$BA2D.
 $8DB5 CALL $B9BC      ; Call #R$B9BC.
 $8DB8 LD HL,$0000     ; {Write #N($0000,$04,$04) to #R$608E.
*$8DBB LD ($608E),HL   ; }
 $8DBE LD A,H          ; #REGa=#REGh.
 $8DBF LD HL,$1040     ; #REGhl=#N$1040.
 $8DC2 CALL $8C01      ; Call #R$8C01.
; This entry point is used by the routine at #R$8CBC.
*$8DC5 CALL $907B      ; Call #R$907B.
 $8DC8 LD A,($5E42)    ;
 $8DCB AND $03         ;
 $8DCD LD C,A          ;
 $8DCE LD A,(IX+$00)   ;
 $8DD1 DEC A           ;
 $8DD2 AND $FC         ;
 $8DD4 OR C            ;
 $8DD5 INC A           ;
 $8DD6 LD (IX+$00),A   ;
; This entry point is used by the routines at #R$8CBC, #R$8FF4 and #R$9005.
*$8DD9 CALL $8701      ;
 $8DDC CALL $8733      ;
 $8DDF CALL $8F90      ;
 $8DE2 BIT 4,A         ;
 $8DE4 CALL Z,$9DC0    ;
 $8DE7 LD A,($FF54)    ;
 $8DEA CP $51          ;
 $8DEC JR NZ,$8E07     ;
 $8DEE LD A,($5E40)    ;
 $8DF1 AND $7F         ;
 $8DF3 JR NZ,$8E07     ;
 $8DF5 LD A,($5E42)    ;
 $8DF8 AND $0E         ;
 $8DFA LD C,A          ;
 $8DFB LD B,$00        ;
 $8DFD LD HL,$9DB0     ;
 $8E00 ADD HL,BC       ;
 $8E01 LD E,(HL)       ;
 $8E02 INC HL          ;
 $8E03 LD D,(HL)       ;
 $8E04 CALL $B9BC      ;
*$8E07 LD A,(IX+$04)   ;
 $8E0A CP $A8          ;
 $8E0C RET C           ;
 $8E0D LD HL,($607A)   ;
 $8E10 LD DE,($6092)   ;
 $8E14 AND A           ;
 $8E15 SBC HL,DE       ;
 $8E17 LD DE,$000C     ;
 $8E1A ADD HL,DE       ;
 $8E1B LD A,H          ;
 $8E1C AND $1F         ;
 $8E1E RET NZ          ;
 $8E1F LD A,L          ;
 $8E20 CP $18          ;
 $8E22 RET NC          ;
 $8E23 LD HL,$9000     ;
 $8E26 LD ($608E),HL   ;
 $8E29 BIT 0,(IX+$08)  ;
 $8E2D RET NZ          ;
 $8E2E CALL $945C      ;
 $8E31 JR Z,$8E4F      ;
 $8E33 LD HL,$60F0     ;
 $8E36 LD A,(HL)       ;
 $8E37 AND A           ;
 $8E38 RET NZ          ;
 $8E39 LD (HL),$2E     ;
 $8E3B LD DE,$0007     ;
 $8E3E ADD HL,DE       ;
 $8E3F LD (HL),$43     ;
 $8E41 INC HL          ;
 $8E42 SET 0,(HL)      ;
 $8E44 INC HL          ;
 $8E45 INC HL          ;
 $8E46 LD (HL),$00     ;
 $8E48 SET 0,(IX+$08)  ;
 $8E4C JP $B8BD        ;
*$8E4F CALL $933E      ;
 $8E52 RET Z           ;
 $8E53 CALL $8634      ;
 $8E56 CALL $930C      ;
 $8E59 RET             ;

; Routine at 8E5A
;
; Used by the routine at #R$8D06.
c$8E5A LD A,(IX+$00)  ;
 $8E5D DEC A          ;
 $8E5E SET 2,A        ;
 $8E60 INC A          ;
 $8E61 LD (IX+$00),A  ;
 $8E64 BIT 0,(IX+$08) ;
 $8E68 JR NZ,$8E97    ;
 $8E6A LD A,(IX+$05)  ;
 $8E6D AND A          ;
 $8E6E JP M,$8E89     ;
 $8E71 EX AF,AF'      ;
 $8E72 LD A,($608F)   ;
 $8E75 AND A          ;
 $8E76 JR Z,$8E93     ;
 $8E78 EX AF,AF'      ;
 $8E79 CP $40         ;
 $8E7B JP NC,$8D3A    ;
 $8E7E ADD A,$08      ;
 $8E80 CP $30         ;
 $8E82 JR C,$8E86     ;
 $8E84 ADD A,$10      ;
; This entry point is used by the routine at #R$8EC5.
*$8E86 JP $8D37       ;
*$8E89 CP $D0         ;
 $8E8B JR NC,$8E8F    ;
 $8E8D ADD A,$10      ;
*$8E8F ADD A,$08      ;
 $8E91 JR $8E86       ;
*$8E93 LD A,$10       ;
 $8E95 JR $8E86       ;
*$8E97 LD A,(IX+$05)  ;
 $8E9A AND A          ;
 $8E9B JP M,$8EB0     ;
 $8E9E EX AF,AF'      ;
 $8E9F LD A,($608F)   ;
 $8EA2 AND A          ;
 $8EA3 JR Z,$8EBB     ;
 $8EA5 EX AF,AF'      ;
 $8EA6 CP $20         ;
 $8EA8 JP NC,$8EC0    ;
 $8EAB ADD A,$04      ;
 $8EAD JP $8D37       ;
*$8EB0 CP $D0         ;
 $8EB2 JR NC,$8EB6    ;
 $8EB4 ADD A,$10      ;
*$8EB6 ADD A,$08      ;
 $8EB8 JP $8D37       ;
*$8EBB LD A,$10       ;
 $8EBD JP $8D37       ;
*$8EC0 LD A,$20       ;
 $8EC2 JP $8D37       ;

; Routine at 8EC5
;
; Used by the routine at #R$8D06.
c$8EC5 LD A,(IX+$00)  ;
 $8EC8 DEC A          ;
 $8EC9 RES 2,A        ;
 $8ECB INC A          ;
 $8ECC LD (IX+$00),A  ;
 $8ECF BIT 0,(IX+$08) ;
 $8ED3 JR NZ,$8F03    ;
 $8ED5 LD A,(IX+$05)  ;
 $8ED8 AND A          ;
 $8ED9 JP P,$8EF3     ;
 $8EDC EX AF,AF'      ;
 $8EDD LD A,($608F)   ;
 $8EE0 AND A          ;
 $8EE1 JR Z,$8EFF     ;
 $8EE3 EX AF,AF'      ;
 $8EE4 CP $D0         ;
 $8EE6 JP C,$8D3A     ;
 $8EE9 SUB $08        ;
 $8EEB CP $E0         ;
 $8EED JR NC,$8E86    ;
 $8EEF SUB $10        ;
 $8EF1 JR $8E86       ;
*$8EF3 CP $30         ;
 $8EF5 JR C,$8EFB     ;
 $8EF7 SUB $10        ;
 $8EF9 JR $8E86       ;
*$8EFB SUB $08        ;
 $8EFD JR $8E86       ;
*$8EFF LD A,$F0       ;
 $8F01 JR $8E86       ;
*$8F03 LD A,(IX+$05)  ;
 $8F06 AND A          ;
 $8F07 JP P,$8F1C     ;
 $8F0A EX AF,AF'      ;
 $8F0B LD A,($608F)   ;
 $8F0E AND A          ;
 $8F0F JR Z,$8F2A     ;
 $8F11 EX AF,AF'      ;
 $8F12 CP $F0         ;
 $8F14 JP C,$8F2F     ;
 $8F17 SUB $04        ;
 $8F19 JP $8D37       ;
*$8F1C CP $30         ;
 $8F1E JR C,$8F25     ;
 $8F20 SUB $10        ;
 $8F22 JP $8D37       ;
*$8F25 SUB $08        ;
 $8F27 JP $8D37       ;
*$8F2A LD A,$F0       ;
 $8F2C JP $8D37       ;
*$8F2F LD A,$E0       ;
 $8F31 JP $8D37       ;

; Routine at 8F34
;
; Used by the routine at #R$8D06.
c$8F34 LD A,(IX+$06)   ; {#REGa=#REGix+#N$06.
 $8F37 AND A           ; }
 $8F38 LD B,A          ;
 $8F39 JP P,$8F4C      ;
 $8F3C NEG             ;
 $8F3E LD B,A          ;
 $8F3F NEG             ;
 $8F41 BIT 0,(IX+$08)  ;
 $8F45 JR NZ,$8F51     ;
 $8F47 CP $C0          ;
 $8F49 JP C,$8D61      ;
*$8F4C LD C,$F8        ; #REGc=#N$F8.
 $8F4E JP $8D5D        ;
*$8F51 CP $E0          ;
 $8F53 LD C,$FC        ; #REGc=#N$FC.
 $8F55 JP NC,$8D5D     ;
 $8F58 LD (IX+$06),$E0 ; #REGix+#N$06=#N$E0.
 $8F5C LD B,$40        ; #REGb=#N$40.
 $8F5E JP $8D61        ; Jump to #R$8D61.

; Routine at 8F61
;
; Used by the routine at #R$8D06.
c$8F61 LD (IX+$06),$00 ; Write #N$00 to #REGix+#N$06.
 $8F65 LD B,$10        ; #REGb=#N$10.
 $8F67 JP $8D93        ; Jump to #R$8D93.

; Controls: Cursor Joystick
;
; Used by the routine at #R$8F90.
;
; O:A Controls
@label=ReadCursorJoystick
c$8F6A LD A,$EF      ; {Read from the keyboard;
 $8F6C OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8F6E IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
 $8F70 LD C,A        ; Store this value in #REGc temporarily.
; Handle "up".
 $8F71 AND %00001000 ; Keep only bit 3 ("7").
 $8F73 LD E,A        ; Store this value in #REGe.
 $8F74 LD A,C        ; {Retrieve #REGc and rotate the bits right twice.
 $8F75 RRCA          ;
 $8F76 RRCA          ; }
; Handle "down", "right" and "fire".
 $8F77 AND %01000101 ; Keep only bits 0 ("8"), 2 ("6") and 6 ("0").
 $8F79 OR E          ; Set the bits from #REGe.
 $8F7A LD E,A        ; Store this value back in #REGe.
; Handle relocating the "fire" bit.
 $8F7B RRCA          ; {Rotate the bits right twice.
 $8F7C RRCA          ; }
 $8F7D AND %00010000 ; Keep only bit 4 ("0").
 $8F7F OR E          ; Set the bits from #REGe.
; Filter out the unused bits.
 $8F80 AND %00011111 ; Keep only bits 0-4.
 $8F82 LD E,A        ; Store this value back in #REGe.
; Handle reading "left" from a different port.
 $8F83 LD A,$F7      ; {Read from the keyboard;
 $8F85 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8F87 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
; Handle relocating the "left" bit.
 $8F89 RRA           ; {Rotate the bits right three times.
 $8F8A RRA           ;
 $8F8B RRA           ; }
 $8F8C AND %00000010 ; Keep only bit 1 ("5").
 $8F8E OR E          ; Set the bits from #REGe resulting in;
                     ; #TABLE(default,centre,centre,centre)
                     ; { =h Key | =h Direction | =h Bit }
                     ; { "8" | Right | 0 }
                     ; { "5" | Left | 1 }
                     ; { "6" | Down | 2 }
                     ; { "7" | Up | 3 }
                     ; { "0" | Fire | 4 }
                     ; TABLE#
                     ; This matches the Kempston Joystick inputs.
 $8F8F RET           ; Return.
; View the equivalent code in;
; #LIST
; { #SABREWULF$B103 }
; LIST#

; Handler: Controls
;
; Used by the routines at #R$8C71, #R$8CBC, #R$8D06, #R$91E2, #R$A325 and
; #R$F295.
@label=HandlerControls
c$8F90 LD A,($5E00)  ; {Jump to #R$8F9F if #R$5E00 is set for keyboard
 $8F93 AND %00000110 ; controls.
 $8F95 JR Z,$8F9F    ; }
 $8F97 CP $04        ; {Jump to #R$8F6A if #R$5E00 is set for cursor joystick
 $8F99 JR Z,$8F6A    ; controls.}
; Continue on to #R$8F9B.
; .
; View the equivalent code in;
; #LIST
; { #SABREWULF$B0A3 }
; LIST#

; Controls: Kempston Joystick
;
; .
;
; O:A Controls
;
; Read from the Kempston Joystick.
@label=ReadKempstonJoystick
c$8F9B IN A,($1F)    ; #REGa=controls.
 $8F9D CPL           ; Flip the bits.
 $8F9E RET           ; Return.
; View the equivalent code in;
; #LIST
; { #SABREWULF$B0D9 }
; LIST#

; Controls: Keyboard
;
; Used by the routine at #R$8F90.
;
; O:A Controls
@label=ReadKeyboard
c$8F9F LD C,$FF      ; #REGc=#N$FF.
 $8FA1 LD A,$E7      ; {Read from the keyboard;
 $8FA3 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8FA5 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$E7 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 }
                     ; TABLE#}
 $8FA7 CPL           ; Flip the bits.
 $8FA8 AND %00011111 ; Keep only bits 0-4.
 $8FAA JR Z,$8FAE    ;
 $8FAC RES 2,C       ;
*$8FAE LD A,$DB      ; {Read from the keyboard;
 $8FB0 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8FB2 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$DB | Q | W | E | R | T | Y | U | I | O | P }
                     ; TABLE#}
 $8FB4 CPL           ; Flip the bits.
 $8FB5 AND %00011111 ; Keep only bits 0-4.
 $8FB7 JR Z,$8FBB    ;
 $8FB9 RES 3,C       ;
*$8FBB LD A,$BD      ; {Read from the keyboard;
 $8FBD OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8FBF IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$BD | A | S | D | F | G | H | J | K | L | ENTER }
                     ; TABLE#}
 $8FC1 CPL           ; Flip the bits.
 $8FC2 AND %00011111 ; Keep only bits 0-4.
 $8FC4 JR Z,$8FC8    ;
 $8FC6 RES 4,C       ;
*$8FC8 LD A,$FE      ; {Read from the keyboard;
 $8FCA OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8FCC IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#}
 $8FCE CPL           ; Flip the bits.
 $8FCF LD B,A        ;
 $8FD0 AND %00010100 ; Keep only bits 2 and 4.
 $8FD2 JR Z,$8FD6    ;
 $8FD4 RES 1,C       ;
*$8FD6 LD A,B        ;
 $8FD7 AND %00001000 ; Keep only bit 3.
 $8FD9 JR Z,$8FDD    ;
 $8FDB RES 0,C       ;
*$8FDD LD A,$7F      ; {Read from the keyboard;
 $8FDF OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $8FE1 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#}
 $8FE3 CPL           ; Flip the bits.
 $8FE4 LD B,A        ;
 $8FE5 AND %00001000 ; Keep only bit 3.
 $8FE7 JR Z,$8FEB    ;
 $8FE9 RES 1,C       ;
*$8FEB LD A,B        ;
 $8FEC AND %00010100 ; Keep only bits 2 and 4.
 $8FEE JR Z,$8FF2    ;
 $8FF0 RES 0,C       ;
*$8FF2 LD A,C        ;
 $8FF3 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #SABREWULF$B0FA }
; LIST#

; Routine at 8FF4
;
; Used by the routine at #R$8D06.
c$8FF4 LD A,(IX+$00)   ; #REGa=#REGix+#N$00.
 $8FF7 DEC A           ;
 $8FF8 SET 3,A         ;
 $8FFA INC A           ;
 $8FFB LD (IX+$00),A   ;
 $8FFE LD (IX+$04),$AF ;
 $9002 JP $8DD9        ; Jump to #R$8DD9.

; Routine at 9005
;
; Used by the routines at #R$8C71 and #R$8CBC.
c$9005 LD A,(IX+$00) ; #REGa=#REGix+#N$00.
 $9008 DEC A         ;
 $9009 RES 3,A       ;
 $900B INC A         ;
 $900C LD (IX+$00),A ;
 $900F LD A,$F0      ; {Write #N$F0 to #REGix+#N$06.
 $9011 LD (IX+$06),A ; }
 $9014 DEC (IX+$04)  ;
 $9017 DEC (IX+$04)  ;
 $901A DEC (IX+$04)  ;
 $901D JP $8DD9      ; Jump to #R$8DD9.

; Routine at 9020
;
; Used by the routine at #R$A826.
c$9020 LD A,($5E6C)  ; #REGa=#R$5E6C.
 $9023 AND A         ;
 $9024 RET NZ        ;
 $9025 LD A,($6090)  ;
 $9028 SUB $1A       ;
 $902A CP $10        ;
 $902C RET NC        ;
 $902D LD HL,$9D5A   ; #REGhl=#R$9D5A.
 $9030 LD DE,$6078   ; #REGde=#N$6078.
 $9033 LD BC,$0018   ; #REGbc=#N($0018,$04,$04).
 $9036 LDIR          ;
 $9038 LD HL,($6092) ;
 $903B LD BC,($6182) ;
 $903F CALL $AD3F    ; Call #R$AD3F.
 $9042 LD HL,($6092) ;
 $9045 JR NC,$9076   ;
 $9047 LD BC,$0040   ; #REGbc=#N($0040,$04,$04).
*$904A CALL $A002    ; Call #R$A002.
 $904D LD A,L        ;
 $904E AND $F8       ;
 $9050 LD L,A        ;
 $9051 LD ($607A),HL ;
 $9054 LD A,$40      ;
 $9056 LD HL,$5E00   ;
 $9059 BIT 0,(HL)    ;
 $905B JR Z,$905F    ;
 $905D ADD A,$3F     ;
*$905F LD ($5E67),A  ;
 $9062 LD A,($5EA1)  ;
 $9065 DEC A         ;
 $9066 LD ($5EA1),A  ;
 $9069 LD HL,$9000   ;
 $906C LD ($608E),HL ;
 $906F XOR A         ;
 $9070 LD ($5E6C),A  ;
 $9073 JP $894F      ; Jump to #R$894F.
*$9076 LD BC,$FFC0   ; #REGbc=#N$FFC0.
 $9079 JR $904A      ; Jump to #R$904A.

; Routine at 907B
;
; Used by the routines at #R$8D06, #R$91E2 and #R$B33D.
c$907B LD A,(IX+$05) ; #REGa=#REGix+#N$05.
 $907E SRA A         ;
 $9080 SRA A         ;
 $9082 SRA A         ;
 $9084 SRA A         ;
 $9086 LD E,A        ;
 $9087 LD D,$00      ;
 $9089 JP P,$908E    ;
 $908C LD D,$FF      ;
*$908E LD H,(IX+$03) ;
 $9091 LD L,(IX+$02) ;
 $9094 LD A,L        ;
 $9095 AND $07       ;
 $9097 PUSH HL       ;
 $9098 PUSH DE       ;
 $9099 CALL Z,$915C  ;
 $909C POP DE        ;
 $909D CALL $90AC    ;
 $90A0 POP HL        ;
 $90A1 ADD HL,DE     ;
 $90A2 LD A,H        ;
 $90A3 AND $1F       ;
 $90A5 LD (IX+$03),A ;
 $90A8 LD (IX+$02),L ;
 $90AB RET           ;
*$90AC LD HL,$50C0   ;
 $90AF LD C,$08      ;
 $90B1 LD A,E        ;
 $90B2 AND A         ;
 $90B3 RET Z         ;
 $90B4 JP P,$9109    ;
 $90B7 NEG           ;
 $90B9 DEC A         ;
 $90BA JR Z,$90D8    ;
 $90BC DEC A         ;
 $90BD JR Z,$90EA    ;
 $90BF LD A,(IX+$02) ;
 $90C2 AND $03       ;
 $90C4 JR NZ,$90EA   ;
*$90C6 XOR A         ;
 $90C7 LD B,$20      ;
 $90C9 PUSH HL       ;
*$90CA RRD           ;
 $90CC INC HL        ;
 $90CD DJNZ $90CA    ;
 $90CF POP HL        ;
 $90D0 INC H         ;
 $90D1 DEC C         ;
 $90D2 JR NZ,$90C6   ;
 $90D4 LD DE,$FFFC   ;
 $90D7 RET           ;
*$90D8 XOR A         ;
 $90D9 LD B,$20      ;
 $90DB PUSH HL       ;
*$90DC RR (HL)       ;
 $90DE INC HL        ;
 $90DF DJNZ $90DC    ;
 $90E1 POP HL        ;
 $90E2 INC H         ;
 $90E3 DEC C         ;
 $90E4 JR NZ,$90D8   ;
 $90E6 LD DE,$FFFF   ;
 $90E9 RET           ;
*$90EA LD A,(IX+$02) ;
 $90ED AND $01       ;
 $90EF JR NZ,$90D8   ;
*$90F1 XOR A         ;
 $90F2 EX AF,AF'     ;
 $90F3 XOR A         ;
 $90F4 PUSH HL       ;
 $90F5 LD B,$20      ;
*$90F7 RR (HL)       ;
 $90F9 EX AF,AF'     ;
 $90FA RR (HL)       ;
 $90FC EX AF,AF'     ;
 $90FD INC L         ;
 $90FE DJNZ $90F7    ;
 $9100 POP HL        ;
 $9101 INC H         ;
 $9102 DEC C         ;
 $9103 JR NZ,$90F1   ;
 $9105 LD DE,$FFFE   ;
 $9108 RET           ;
*$9109 LD HL,$50DF   ;
 $910C DEC A         ;
 $910D JR Z,$912B    ;
 $910F DEC A         ;
 $9110 JR Z,$913D    ;
 $9112 LD A,(IX+$02) ;
 $9115 AND $03       ;
 $9117 JR NZ,$913D   ;
*$9119 XOR A         ;
 $911A LD B,$20      ;
 $911C PUSH HL       ;
*$911D RLD           ;
 $911F DEC L         ;
 $9120 DJNZ $911D    ;
 $9122 POP HL        ;
 $9123 INC H         ;
 $9124 DEC C         ;
 $9125 JR NZ,$9119   ;
 $9127 LD DE,$0004   ;
 $912A RET           ;
*$912B XOR A         ;
 $912C LD B,$20      ;
 $912E PUSH HL       ;
*$912F RL (HL)       ;
 $9131 DEC L         ;
 $9132 DJNZ $912F    ;
 $9134 POP HL        ;
 $9135 INC H         ;
 $9136 DEC C         ;
 $9137 JR NZ,$912B   ;
 $9139 LD DE,$0001   ;
 $913C RET           ;
*$913D LD A,(IX+$02) ;
 $9140 AND $01       ;
 $9142 JR NZ,$912B   ;
*$9144 XOR A         ;
 $9145 EX AF,AF'     ;
 $9146 XOR A         ;
 $9147 PUSH HL       ;
 $9148 LD B,$20      ;
*$914A RL (HL)       ;
 $914C EX AF,AF'     ;
 $914D RL (HL)       ;
 $914F EX AF,AF'     ;
 $9150 DEC L         ;
 $9151 DJNZ $914A    ;
 $9153 POP HL        ;
 $9154 INC H         ;
 $9155 DEC C         ;
 $9156 JR NZ,$9144   ;
 $9158 LD DE,$0002   ;
 $915B RET           ;
*$915C LD A,E        ;
 $915D AND A         ;
 $915E JP M,$919E    ;
 $9161 LD DE,$0080   ;
 $9164 ADD HL,DE     ;
 $9165 LD A,H        ;
 $9166 AND $1F       ;
 $9168 LD H,A        ;
 $9169 LD DE,$7000   ;
 $916C SRA H         ;
 $916E RR L          ;
 $9170 SRA H         ;
 $9172 RR L          ;
 $9174 SRA H         ;
 $9176 RR L          ;
 $9178 ADD HL,DE     ;
 $9179 LD DE,$50DF   ;

; Routine at 917C
;
; Used by the routines at #R$919E and #R$9356.
;
; HL Terrain Buffer?
c$917C PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $917D PUSH DE       ; }
 $917E LD L,(HL)     ;
 $917F LD H,$00      ; #REGh=#N$00.
 $9181 ADD HL,HL     ; {#REGhl=#REGhl^#N$03.
 $9182 ADD HL,HL     ;
 $9183 ADD HL,HL     ; }
 $9184 LD DE,$F66E   ; #REGde=#R$F66E.
 $9187 ADD HL,DE     ; #REGhl=#REGhl+#REGde.
 $9188 LD B,$08      ; #REGb=#N$08.
 $918A POP DE        ; {Restore #REGde from the stack, but stash a copy of it
 $918B PUSH DE       ; again.}
*$918C LD A,(HL)     ;
 $918D LD (DE),A     ;
 $918E INC HL        ; Increment #REGhl by one.
 $918F INC D         ; Increment #REGd by one.
 $9190 DJNZ $918C    ;
 $9192 POP DE        ;
 $9193 LD A,E        ;
 $9194 ADD A,$20     ;
 $9196 LD E,A        ;
 $9197 LD A,D        ;
 $9198 ADC A,$00     ;
 $919A LD D,A        ;
 $919B POP HL        ;
 $919C INC HL        ;
 $919D RET           ; Return.

; Routine at 919E
;
; Used by the routine at #R$907B.
c$919E LD DE,$FF88   ; #REGde=#N$FF88.
 $91A1 ADD HL,DE     ;
 $91A2 LD A,H        ;
 $91A3 AND %00011111 ; Keep only bits 0-5.
 $91A5 LD H,A        ;
 $91A6 LD DE,$7000   ;
 $91A9 SRA H         ;
 $91AB RR L          ;
 $91AD SRA H         ;
 $91AF RR L          ;
 $91B1 SRA H         ;
 $91B3 RR L          ;
 $91B5 ADD HL,DE     ;
 $91B6 LD DE,$50C0   ; #REGde=#N$50C0.
 $91B9 JR $917C      ; Jump to #R$917C.

; Routine at 91BB
;
; Used by the routines at #R$8CBC, #R$8D06, #R$93A6, #R$95B6, #R$970E and
; #R$A325.
c$91BB LD H,(IX+$03) ; #REGh=#REGix+#N$03.
 $91BE LD L,(IX+$02) ; #REGl=#REGix+#N$02.
 $91C1 LD A,H        ; #REGa=#REGh.
 $91C2 AND %00011111 ; Keep only bits 0-4.
 $91C4 LD H,A        ; #REGh=#REGa.
 $91C5 SRA H         ;
 $91C7 RR L          ;
 $91C9 SRA H         ;
 $91CB RR L          ;
 $91CD SRA H         ;
 $91CF RR L          ;
 $91D1 PUSH HL       ; Stash #REGhl on the stack.
 $91D2 LD BC,$7000   ; #REGbc=#R$7000.
 $91D5 ADD HL,BC     ;
 $91D6 LD D,(HL)     ;
 $91D7 POP HL        ;
 $91D8 PUSH HL       ;
 $91D9 INC HL        ;
 $91DA LD A,H        ; #REGa=#REGh.
 $91DB AND %00000011 ; Keep only bits 0-1.
 $91DD LD H,A        ; #REGh=#REGa.
 $91DE ADD HL,BC     ;
 $91DF LD E,(HL)     ;
 $91E0 POP HL        ; Restore #REGhl from the stack.
 $91E1 RET           ; Return.

; Routine at 91E2
c$91E2 LD A,($5E6C)    ; {If #R$5E6C is not zero, jump to #R$9267.
 $91E5 AND A           ;
 $91E6 JR NZ,$9267     ; }
 $91E8 LD HL,$9000     ; {Write #N$9000 to #N$608E.
 $91EB LD ($608E),HL   ; }
 $91EE LD A,H          ; #REGa=#REGh.
 $91EF LD HL,$1040     ; #REGhl=#N$1040.
 $91F2 CALL $8C01      ; Call #R$8C01.
 $91F5 CALL $8F90      ; Call #R$8F90.
 $91F8 BIT 0,A         ;
 $91FA JP Z,$92CB      ;
 $91FD BIT 1,A         ;
 $91FF JP Z,$92BA      ;
 $9202 LD A,(IX+$05)   ;
 $9205 AND A           ;
 $9206 JR Z,$9211      ;
 $9208 JP P,$920F      ;
 $920B ADD A,$01       ;
 $920D JR $9211        ; Jump to #R$9211.
*$920F SUB $01         ;
*$9211 LD (IX+$05),A   ;
 $9214 LD HL,($607A)   ;
 $9217 BIT 7,(IX+$05)  ;
 $921B JP NZ,$92B4     ;
 $921E LD DE,$FFF8     ; #REGde=#N$FFF8.
*$9221 ADD HL,DE       ;
 $9222 SRA H           ;
 $9224 RR L            ;
 $9226 SRA H           ;
 $9228 RR L            ;
 $922A SRA H           ;
 $922C RR L            ;
 $922E LD A,H          ;
 $922F AND %00000011   ; Keep only bits 0-1.
 $9231 LD H,A          ;
 $9232 LD B,$06        ;
 $9234 EX DE,HL        ;
*$9235 LD HL,$7000     ; #REGhl=#R$7000.
 $9238 ADD HL,DE       ;
 $9239 LD A,(HL)       ;
 $923A AND A           ;
 $923B JR Z,$924A      ;
 $923D AND %00001000   ; Keep only bit 3.
 $923F JR NZ,$924A     ;
 $9241 INC DE          ;
 $9242 LD A,D          ;
 $9243 AND $03         ;
 $9245 LD D,A          ;
 $9246 DJNZ $9235      ;
 $9248 JR $9250        ; Jump to #R$9250.
*$924A LD (IX+$05),$00 ;
 $924E JR $9264        ;
*$9250 LD A,(IX+$05)   ;
 $9253 AND A           ;
 $9254 JR Z,$9264      ;
 $9256 JP M,$92A7      ;
 $9259 LD A,(IX+$02)   ;
 $925C RRA             ;
 $925D AND $03         ;
 $925F ADD A,$16       ;
 $9261 LD (IX+$00),A   ;
*$9264 CALL $907B      ;
*$9267 CALL $877C      ;
 $926A LD A,($5E6C)    ;
 $926D AND A           ;
 $926E JR Z,$9277      ;
 $9270 INC A           ;
 $9271 LD ($5E6C),A    ;
 $9274 JP $9F3F        ;
*$9277 CALL $B87E      ;
 $927A LD DE,$BC9E     ;
 $927D CALL $890A      ;
 $9280 CALL $AD22      ;
 $9283 CALL $933E      ;
 $9286 CALL NZ,$92DC   ;
 $9289 LD A,($FF54)    ;
 $928C CP $51          ;
 $928E RET NZ          ;
 $928F LD A,($5E40)    ;
 $9292 AND $7F         ;
 $9294 RET NZ          ;
 $9295 LD A,($5E42)    ;
 $9298 AND $0E         ;
 $929A LD C,A          ;
 $929B LD B,$00        ;
 $929D LD HL,$9DB0     ;
 $92A0 ADD HL,BC       ;
 $92A1 LD E,(HL)       ;
 $92A2 INC HL          ;
 $92A3 LD D,(HL)       ;
 $92A4 JP $B9BC        ;
*$92A7 LD A,(IX+$02)   ;
 $92AA RRA             ;
 $92AB AND $03         ;
 $92AD ADD A,$12       ;
 $92AF LD (IX+$00),A   ;
 $92B2 JR $9264        ;
*$92B4 LD DE,$FFF0     ;
 $92B7 JP $9221        ;
*$92BA LD A,(IX+$05)   ;
 $92BD AND A           ;
 $92BE JP P,$92C6      ;
 $92C1 CP $E8          ;
 $92C3 JP C,$9211      ;
*$92C6 SUB $02         ;
 $92C8 JP $9211        ;
*$92CB LD A,(IX+$05)   ;
 $92CE AND A           ;
 $92CF JP M,$92D7      ;
 $92D2 CP $28          ;
 $92D4 JP NC,$9211     ;
*$92D7 ADD A,$02       ;
 $92D9 JP $9211        ;
*$92DC CALL $B8C3      ;
 $92DF LD HL,$607A     ;
 $92E2 LD DE,$6092     ;
 $92E5 LD BC,$000E     ;
 $92E8 LDIR            ;
 $92EA LD (IX+$01),$78 ;
 $92EE LD A,(IX+$00)   ;
 $92F1 CP $16          ;
 $92F3 JR NC,$9304     ;
 $92F5 LD (IX+$00),$09 ;
 $92F9 LD A,$1A        ;
*$92FB LD ($6090),A    ;
 $92FE CALL $8634      ;
 $9301 JP $AD33        ;
*$9304 LD (IX+$00),$0D ;
 $9308 LD A,$22        ;
 $930A JR $92FB        ;

; Routine at 930C
;
; Used by the routine at #R$8D06.
c$930C LD HL,$6097     ; #REGhl=#N$6097.
 $930F LD DE,$607F     ; #REGde=#N$607F.
 $9312 LD BC,$0009     ; #REGbc=#N($0009,$04,$04).
 $9315 LDIR            ;
 $9317 LD (IX+$01),$68 ;
 $931B LD (IX+$04),$AF ;
 $931F LD A,(IX+$00)   ;
 $9322 DEC A           ;
 $9323 AND %00000100   ; Keep only bit 3.
 $9325 JR NZ,$9338     ;
 $9327 LD (IX+$00),$12 ;
*$932B XOR A           ; {Write #N$00 to #N$6090.
 $932C LD ($6090),A    ; }
 $932F LD (IX+$05),A   ;
 $9332 LD (IX+$06),A   ;
 $9335 JP $B8BD        ; Jump to #R$B8BD.
*$9338 LD (IX+$00),$16 ;
 $933C JR $932B        ; Jump to #R$932B.

; Routine at 933E
;
; Used by the routines at #R$8D06, #R$91E2 and #R$A1AA.
c$933E LD A,$7E      ; {Read from the keyboard;
 $9340 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $9342 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7E | SPACE | FULL-STOP | M | N | B | Shift | Z | X | C | V }
                     ; TABLE#}
 $9344 CPL           ; Flip the bits.
 $9345 AND %00000001 ; Keep only bit 0.
 $9347 JR Z,$9350    ; If the result is zero jump to #R$9350.
 $9349 LD A,($5E5D)  ; #REGa=#R$5E5D.
 $934C AND A         ; {If #REGa is not zero then jump to #R$9354.
 $934D JR NZ,$9354   ; }
 $934F INC A         ; Increment #REGa by one.
*$9350 LD ($5E5D),A  ; Write #REGa to #R$5E5D.
 $9353 RET           ; Return.
*$9354 XOR A         ; #REGa=#N$00.
 $9355 RET           ; Return.

; Draw Terrain?
;
; Used by the routines at #R$A1AA and #R$A826.
c$9356 LD HL,($607A) ; #REGhl=#R$607A.
 $9359 LD DE,$FF88   ; #REGde=#N$FF88.
 $935C ADD HL,DE     ;
 $935D LD A,H        ;
 $935E AND %00011111 ; Keep only bits 0-4.
 $9360 LD H,A        ;
 $9361 SRA H         ;
 $9363 RR L          ;
 $9365 SRA H         ;
 $9367 RR L          ;
 $9369 SRA H         ;
 $936B RR L          ;
 $936D LD DE,$50C0   ; #REGde=#N$50C0.
 $9370 LD BC,$7000   ; #REGbc=#R$7000.
 $9373 LD A,$20      ; #REGa=#N$20.
*$9375 PUSH AF       ;
 $9376 PUSH HL       ;
 $9377 ADD HL,BC     ;
 $9378 PUSH BC       ;
 $9379 PUSH DE       ;
 $937A CALL $917C    ; Call #R$917C.
 $937D POP DE        ;
 $937E INC E         ;
 $937F POP BC        ;
 $9380 POP HL        ;
 $9381 INC HL        ;
 $9382 LD A,H        ;
 $9383 AND %00000011 ; Keep only bits 0-1.
 $9385 LD H,A        ;
 $9386 POP AF        ;
 $9387 DEC A         ;
 $9388 JR NZ,$9375   ;
 $938A LD HL,$5AE1   ; #REGhl=#N$5AE1.
 $938D LD BC,$1E5B   ; #REGbc=#N$1E5B.
*$9390 LD (HL),C     ; Write #REGc to #REGhl.
 $9391 INC HL        ; Increment #REGhl by one.
 $9392 DJNZ $9390    ; Decrease counter by one and loop back to #R$9390 until
                     ; counter is zero.
 $9394 RET           ; Return.

; Find Unused Alien Slot
;
; Used by the routines at #R$9466 and #R$970E.
;
; O:F Z: slot available
; O:F NZ: no available slots
; O:HL The alien slot address
@label=FindSlotAlien
c$9395 LD HL,$61B0   ; #REGhl=#R$61B0.
; There are a maximum of 6 aliens on screen at a time.
 $9398 LD B,$06      ; #REGb=#N$06 (alien counter).
 $939A LD DE,$0018   ; #REGde=#N($0018,$04,$04) (the length of each slot).
@label=FindSlotAlien_Loop
*$939D LD A,(HL)     ; #REGa=#REGhl.
 $939E AND A         ; {Jump to #R$93A5 if #REGa is zero.
 $939F JR Z,$93A5    ; }
 $93A1 ADD HL,DE     ; #REGhl=#REGhl+#REGde.
 $93A2 DJNZ $939D    ; Decrease alien slot counter by one and loop back to
                     ; #R$939D until counter is zero.
 $93A4 AND A         ; If no available slot was found, ensure the Z flag is
                     ; unset (so NZ is true).
@label=FindSlotAlien_Return
*$93A5 RET           ; Return.

; Routine at 93A6
c$93A6 LD HL,($607A)   ; #REGhl=#R$607A.
 $93A9 LD (IX+$03),H   ;
 $93AC LD (IX+$02),L   ;
 $93AF LD A,($607C)    ; {#REGa=#R$607C+#N$08.
 $93B2 ADD A,$08       ; }
 $93B4 CP $AF          ;
 $93B6 JR C,$93BA      ;
 $93B8 LD A,$AF        ; {Write #N$AF to #REGix+#N$04.
*$93BA LD (IX+$04),A   ; }
 $93BD CALL $8701      ; Call #R$8701.
 $93C0 CALL $8733      ; Call #R$8733.
 $93C3 CALL $945C      ; Call #R$945C.
 $93C6 JR Z,$93E3      ;
 $93C8 BIT 0,(IX+$08)  ;
 $93CC RET NZ          ;
 $93CD LD (IX+$00),$2F ; Write #N$2F to #REGix+#N$00.
 $93D1 LD HL,$6080     ; #REGhl=#R$6080.
 $93D4 RES 0,(HL)      ;
 $93D6 LD A,($607D)    ;
 $93D9 LD (IX+$05),A   ;
 $93DC LD (IX+$06),$10 ;
 $93E0 JP $B8C3        ; Jump to #R$B8C3.
*$93E3 RES 0,(IX+$08)  ; Reset bit 0 of #REGix+#N$08.
 $93E7 RET             ; Return.
 $93E8 LD A,(IX+$06)   ;
 $93EB CP $30          ;
 $93ED JR NC,$93F5     ;
 $93EF INC (IX+$06)    ;
 $93F2 INC (IX+$06)    ;
*$93F5 SRA A           ;
 $93F7 SRA A           ;
 $93F9 SRA A           ;
 $93FB SRA A           ;
 $93FD ADD A,(IX+$04)  ;
 $9400 LD (IX+$04),A   ;
 $9403 CP $B0          ;
 $9405 JR C,$9435      ;
 $9407 CALL $91BB      ;
 $940A LD A,$B7        ;
 $940C LD (IX+$04),A   ;
 $940F LD DE,$7000     ;
 $9412 EX DE,HL        ;
 $9413 ADD HL,DE       ;
 $9414 LD (HL),$03     ;
 $9416 INC DE          ;
 $9417 LD A,D          ;
 $9418 AND $03         ;
 $941A LD D,A          ;
 $941B LD HL,$7000     ;
 $941E ADD HL,DE       ;
 $941F LD (HL),$03     ;
 $9421 LD A,(IX+$02)   ;
 $9424 AND $F8         ;
 $9426 LD L,A          ;
 $9427 LD (IX+$02),L   ;
 $942A CALL $98AE      ;
 $942D CALL $8701      ;
 $9430 LD (IX+$00),$00 ;
 $9434 RET             ;
*$9435 LD A,(IX+$05)   ;
 $9438 SRA A           ;
 $943A SRA A           ;
 $943C SRA A           ;
 $943E SRA A           ;
 $9440 LD C,A          ;
 $9441 LD B,$00        ;
 $9443 JP P,$9448      ;
 $9446 LD B,$FF        ;
*$9448 LD L,(IX+$02)   ;
 $944B LD H,(IX+$03)   ;
 $944E ADD HL,BC       ;
 $944F LD (IX+$03),H   ;
 $9452 LD (IX+$02),L   ;
 $9455 CALL $8701      ;
 $9458 CALL $8733      ;
 $945B RET             ;

; Routine at 945C
;
; Used by the routines at #R$8D06, #R$93A6, #R$A0F8, #R$A1AA, #R$A325, #R$B6CF,
; #R$B785 and #R$B7BC.
c$945C LD A,$7E      ; {Read from the keyboard;
 $945E OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $9460 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { =r2 #N$7E | SPACE | FULL-STOP | M | N | B }
                     ; { Shift | Z | X | C | V }
                     ; TABLE#}
 $9462 CPL           ; Flip the bits.
 $9463 AND %00000010 ; Keep only bit 1.
 $9465 RET           ; Return.

; Routine at 9466
;
; Used by the routine at #R$8258.
c$9466 LD A,R        ; #REGa=random number.
 $9468 AND %00000011 ; Keep only bits 0-1.
 $946A RET NZ        ; Return if the value is not zero.
 $946B LD A,($5E67)  ; #REGa=#R$5E67.
 $946E AND A         ; {Return if the value is not zero.
 $946F RET NZ        ; }
 $9470 CALL $9395    ; Call #R$9395.
 $9473 RET NZ        ; Return if there were no available alien slots.
 $9474 PUSH HL       ; Stash #REGhl (the free alien slot) on the stack.
 $9475 EX DE,HL      ; Switch the #REGde and #REGhl registers.
 $9476 LD A,($5E40)  ; #REGa=#R$5E40.
 $9479 RLA           ;
 $947A AND %00001110 ; Keep only bits 1-3.
 $947C LD C,A        ;
 $947D LD B,$00      ;
 $947F LD A,($5EA0)  ; #REGa=#R$5EA0.
 $9482 CP $0C        ;
 $9484 JR C,$9488    ;
 $9486 LD A,$0C      ; #REGa=#N$0C.
*$9488 AND %00001110 ; Keep only bits 1-3.
 $948A LD L,A        ;
 $948B LD H,$00      ;
 $948D LD DE,$9D72   ; {#REGhl=#REGhl+#R$9D72.
 $9490 ADD HL,DE     ; }
 $9491 LD A,(HL)     ;
 $9492 INC HL        ;
 $9493 LD H,(HL)     ;
 $9494 LD L,A        ;
 $9495 ADD HL,BC     ;
 $9496 LD A,(HL)     ;
 $9497 INC HL        ;
 $9498 LD H,(HL)     ;
 $9499 LD L,A        ;
 $949A LD BC,$0018   ;
 $949D POP DE        ;
 $949E PUSH DE       ;
 $949F LDIR          ;
 $94A1 POP HL        ;
 $94A2 LD A,(HL)     ;
 $94A3 INC HL        ;
 $94A4 INC HL        ;
 $94A5 PUSH HL       ;
 $94A6 LD HL,($607A) ;
 $94A9 CP $88        ;
 $94AB JR Z,$94DB    ;
 $94AD CP $B8        ;
 $94AF JP Z,$9506    ;
 $94B2 LD A,($5E40)  ;
 $94B5 LD C,A        ;
 $94B6 LD B,$00      ;
 $94B8 LD DE,$0080   ;
 $94BB AND $02       ;
 $94BD JR Z,$94C5    ;
 $94BF SBC HL,BC     ;
 $94C1 SBC HL,DE     ;
 $94C3 JR $94C7      ;
*$94C5 ADD HL,BC     ;
 $94C6 ADD HL,DE     ;
*$94C7 LD A,H        ;
 $94C8 AND $1F       ;
 $94CA LD H,A        ;
 $94CB EX DE,HL      ;
 $94CC POP HL        ;
 $94CD LD (HL),E     ;
 $94CE INC HL        ;
 $94CF LD (HL),D     ;
 $94D0 INC HL        ;
 $94D1 INC HL        ;
 $94D2 LD A,C        ;
 $94D3 AND $80       ;
 $94D5 RET Z         ;
 $94D6 LD A,(HL)     ;
 $94D7 NEG           ;
 $94D9 LD (HL),A     ;
 $94DA RET           ;
*$94DB LD A,($5E40)  ;
 $94DE LD B,A        ;
 $94DF AND $80       ;
 $94E1 SUB $40       ;
 $94E3 LD C,A        ;
 $94E4 JP P,$94EC    ;
 $94E7 LD DE,$0090   ;
 $94EA JR $94EF      ;
*$94EC LD DE,$FF70   ;
*$94EF ADD HL,DE     ;
 $94F0 LD A,H        ;
 $94F1 AND $1F       ;
 $94F3 LD H,A        ;
 $94F4 EX DE,HL      ;
 $94F5 POP HL        ;
 $94F6 LD (HL),E     ;
 $94F7 INC HL        ;
 $94F8 LD (HL),D     ;
 $94F9 INC HL        ;
 $94FA LD A,B        ;
 $94FB AND $78       ;
 $94FD JR NZ,$9500   ;
 $94FF INC A         ;
*$9500 ADD A,$37     ;
 $9502 LD (HL),A     ;
 $9503 INC HL        ;
 $9504 LD (HL),C     ;
 $9505 RET           ;
*$9506 LD A,($5E40)  ;
 $9509 LD B,A        ;
 $950A AND $80       ;
 $950C SUB $40       ;
 $950E LD C,A        ;
 $950F JP P,$9517    ;
 $9512 LD DE,$0090   ;
 $9515 JR $951A      ;
*$9517 LD DE,$FF70   ;
*$951A ADD HL,DE     ;
 $951B LD A,H        ;
 $951C AND $1F       ;
 $951E LD H,A        ;
 $951F EX DE,HL      ;
 $9520 POP HL        ;
 $9521 LD (HL),E     ;
 $9522 INC HL        ;
 $9523 LD (HL),D     ;
 $9524 INC HL        ;
 $9525 LD A,B        ;
 $9526 AND $78       ;
 $9528 JR NZ,$952B   ;
 $952A INC A         ;
*$952B ADD A,$37     ;
 $952D LD (HL),A     ;
 $952E INC HL        ;
 $952F LD (HL),C     ;
 $9530 RET           ;

; Routine at 9531
c$9531 LD HL,$5E5E     ; #REGhl=#R$5E5E.
 $9534 INC (HL)        ;
 $9535 LD A,(IX+$04)   ;
 $9538 ADD A,$02       ;
 $953A CP $B0          ;
 $953C JR NC,$95B3     ;
 $953E LD (IX+$04),A   ;
 $9541 LD A,($5E42)    ;
 $9544 AND $07         ;
 $9546 ADD A,$50       ;
 $9548 LD (IX+$00),A   ;
; This entry point is used by the routines at #R$9654 and #R$970E.
*$954B LD A,(IX+$0A)   ;
 $954E AND A           ;
 $954F JR NZ,$955F     ;
 $9551 BIT 0,(IX+$08)  ;
 $9555 JR NZ,$955F     ;
 $9557 INC (IX+$17)    ;
 $955A JR NZ,$9563     ;
 $955C JP $9937        ; Jump to #R$9937.
*$955F LD (IX+$17),$00 ;
*$9563 LD H,(IX+$03)   ;
 $9566 LD L,(IX+$02)   ;
 $9569 LD A,(IX+$05)   ;
 $956C LD D,$00        ;
 $956E SRA A           ;
 $9570 SRA A           ;
 $9572 SRA A           ;
 $9574 SRA A           ;
 $9576 JP P,$957B      ;
 $9579 LD D,$FF        ;
*$957B LD E,A          ;
 $957C ADD HL,DE       ;
 $957D LD A,H          ;
 $957E AND $1F         ;
 $9580 LD (IX+$03),A   ;
 $9583 LD (IX+$02),L   ;
 $9586 CALL $8701      ;
 $9589 CALL $8733      ;
 $958C BIT 0,(IX+$10)  ;
 $9590 JR Z,$95A9      ;
 $9592 LD A,(IX+$00)   ;
 $9595 RRA             ;
 $9596 RRA             ;
 $9597 RRA             ;
 $9598 AND $1F         ;
 $959A ADD A,$01       ;
 $959C DAA             ;
 $959D LD L,A          ;
 $959E LD H,$00        ;
 $95A0 ADD HL,HL       ;
 $95A1 ADD HL,HL       ;
 $95A2 ADD HL,HL       ;
 $95A3 ADD HL,HL       ;
 $95A4 LD B,H          ;
 $95A5 LD C,L          ;
 $95A6 CALL $899C      ;
*$95A9 CALL $A766      ;
 $95AC CALL $B2A2      ;
 $95AF RET NC          ;
 $95B0 CALL $B2D7      ;
*$95B3 JP $A76B        ;

; Routine at 95B6
;
; Used by the routine at #R$AD36.
c$95B6 CALL $91BB    ; Call #R$91BB.
 $95B9 PUSH HL       ; Stash #REGhl on the stack.
 $95BA LD DE,$7000   ; #REGde=#R$7000.
 $95BD EX DE,HL      ; Switch the #REGde and #REGhl registers.
 $95BE ADD HL,DE     ; #REGhl=#REGhl+#REGde.
 $95BF BIT 3,(HL)    ;
 $95C1 JR Z,$95C7    ;
 $95C3 LD (HL),$0A   ; Write #N$0A to #REGhl. #UDG($F66E+$0A*$08,attr=$43)
 $95C5 JR $95C9      ; Jump to #R$95C9.
*$95C7 LD (HL),$08   ; Write #N$08 to #REGhl. #UDG($F66E+$08*$08,attr=$43)
*$95C9 INC DE        ;
 $95CA LD A,D        ;
 $95CB AND %00000011 ; Keep only bits 0-1.
 $95CD LD D,A        ;
 $95CE LD HL,$7000   ; #REGhl=#R$7000.
 $95D1 ADD HL,DE     ; #REGhl=#REGhl+#REGde.
 $95D2 BIT 3,(HL)    ;
 $95D4 JR Z,$95DA    ;
 $95D6 LD (HL),$0A   ; Write #N$0A to #REGhl. #UDG($F66E+$0A*$08,attr=$43)
 $95D8 JR $95DC      ; Jump to #R$95DC.
*$95DA LD (HL),$09   ; Write #N$09 to #REGhl. #UDG($F66E+$09*$08,attr=$43)
*$95DC CALL $98AE    ;
 $95DF JP NZ,$9652   ;
 $95E2 LD A,H        ;
 $95E3 SUB $08       ;
 $95E5 LD H,A        ;
 $95E6 EX (SP),HL    ;
 $95E7 LD A,H        ;
 $95E8 AND %00011111 ; Keep only bits 0-4.
 $95EA LD H,A        ;
 $95EB LD DE,$7000   ; #REGde=#R$7000.
 $95EE EX DE,HL      ;
 $95EF ADD HL,DE     ;
 $95F0 EX DE,HL      ;
 $95F1 EX (SP),HL    ;
 $95F2 LD A,($607A)  ;
 $95F5 AND $07       ;
 $95F7 JR NZ,$95FA   ;
 $95F9 INC HL        ;
*$95FA PUSH HL       ;
 $95FB LD A,(DE)     ;
 $95FC LD L,A        ;
 $95FD LD H,$00      ;
 $95FF LD DE,$F66E   ;
 $9602 ADD HL,HL     ;
 $9603 ADD HL,HL     ;
 $9604 ADD HL,HL     ;
 $9605 ADD HL,DE     ;
 $9606 EX DE,HL      ;
 $9607 EXX           ;
 $9608 LD A,($607A)  ;
 $960B NEG           ;
 $960D AND $07       ;
 $960F LD C,A        ;
 $9610 EXX           ;
 $9611 POP HL        ;
 $9612 PUSH HL       ;
 $9613 LD B,$08      ;
 $9615 CALL $9632    ;
 $9618 POP HL        ;
 $9619 EX (SP),HL    ;
 $961A INC HL        ;
 $961B LD A,H        ;
 $961C AND $03       ;
 $961E LD H,A        ;
 $961F LD DE,$7000   ;
 $9622 ADD HL,DE     ;
 $9623 LD L,(HL)     ;
 $9624 LD H,$00      ;
 $9626 ADD HL,HL     ;
 $9627 ADD HL,HL     ;
 $9628 ADD HL,HL     ;
 $9629 LD DE,$F66E   ;
 $962C ADD HL,DE     ;
 $962D EX DE,HL      ;
 $962E POP HL        ;
 $962F INC L         ;
 $9630 LD B,$08      ; #REGb=#N$08 (counter).
*$9632 LD A,(DE)     ; #REGa=#REGde.
 $9633 EXX           ;
 $9634 LD H,A        ;
 $9635 LD L,$00      ;
 $9637 LD B,C        ;
 $9638 LD A,C        ;
 $9639 AND A         ;
 $963A JR Z,$9642    ;
*$963C SRL H         ;
 $963E RR L          ;
 $9640 DJNZ $963C    ;
*$9642 LD A,L        ;
 $9643 EX AF,AF'     ;
 $9644 LD A,H        ;
 $9645 EXX           ;
 $9646 OR (HL)       ;
 $9647 LD (HL),A     ;
 $9648 INC L         ;
 $9649 EX AF,AF'     ;
 $964A OR (HL)       ;
 $964B LD (HL),A     ;
 $964C INC DE        ;
 $964D DEC L         ;
 $964E INC H         ;
 $964F DJNZ $9632    ;
 $9651 RET           ; Return.
*$9652 POP HL        ; Restore #REGhl from the stack.
 $9653 RET           ; Return.

; Routine at 9654
c$9654 LD HL,$5E5E    ;
 $9657 INC (HL)       ;
 $9658 LD H,(IX+$03)  ;
 $965B LD L,(IX+$02)  ;
 $965E LD DE,($607A)  ;
 $9662 AND A          ;
 $9663 SBC HL,DE      ;
 $9665 BIT 4,H        ;
 $9667 JP NZ,$96D7    ;
 $966A LD C,$00       ;
 $966C LD A,(IX+$05)  ;
 $966F AND A          ;
 $9670 JP P,$9677     ;
 $9673 CP $D1         ;
 $9675 JR C,$9679     ;
*$9677 SUB $02        ;
*$9679 LD (IX+$05),A  ;
 $967C LD A,($6078)   ;
 $967F CP $11         ;
 $9681 JR C,$9687     ;
 $9683 LD A,$68       ;
 $9685 JR $968A       ;
*$9687 LD A,($607C)   ;
*$968A SUB (IX+$04)   ;
 $968D JP M,$96E8     ;
 $9690 LD A,(IX+$06)  ;
 $9693 AND A          ;
 $9694 JP M,$969B     ;
 $9697 CP $30         ;
 $9699 JR NC,$969D    ;
*$969B ADD A,$02      ;
*$969D LD (IX+$06),A  ;
 $96A0 SRA A          ;
 $96A2 SRA A          ;
 $96A4 SRA A          ;
 $96A6 SRA A          ;
 $96A8 ADD A,(IX+$04) ;
 $96AB CP $38         ;
 $96AD JR C,$96F7     ;
 $96AF CP $B0         ;
 $96B1 JR NC,$9705    ;
 $96B3 LD (IX+$04),A  ;
*$96B6 INC (IX+$11)   ;
 $96B9 LD A,(IX+$11)  ;
 $96BC AND $07        ;
 $96BE BIT 7,C        ;
 $96C0 JR NZ,$96C4    ;
 $96C2 XOR $07        ;
*$96C4 ADD A,$48      ;
 $96C6 LD (IX+$00),A  ;
 $96C9 LD A,($5E42)   ;
 $96CC RLA            ;
 $96CD AND $02        ;
 $96CF ADD A,$44      ;
 $96D1 LD (IX+$07),A  ;
 $96D4 JP $954B       ;
*$96D7 LD C,$80       ;
 $96D9 LD A,(IX+$05)  ;
 $96DC AND A          ;
 $96DD JP M,$96E4     ;
 $96E0 CP $30         ;
 $96E2 JR NC,$9679    ;
*$96E4 ADD A,$02      ;
 $96E6 JR $9679       ;
*$96E8 LD A,(IX+$06)  ;
 $96EB AND A          ;
 $96EC JP P,$96F3     ;
 $96EF CP $D1         ;
 $96F1 JR C,$969D     ;
*$96F3 SUB $02        ;
 $96F5 JR $969D       ;
*$96F7 LD A,(IX+$06)  ;
 $96FA AND A          ;
 $96FB JP P,$96B6     ;
*$96FE NEG            ;
 $9700 LD (IX+$06),A  ;
 $9703 JR $96B6       ;
*$9705 LD A,(IX+$06)  ;
 $9708 AND A          ;
 $9709 JP M,$96B6     ;
 $970C JR $96FE       ;

; Routine at 970E
c$970E LD HL,$5E5E     ;
 $9711 INC (HL)        ;
 $9712 BIT 0,(IX+$08)  ;
 $9716 JP NZ,$97F4     ;
 $9719 LD A,($60B0)    ;
 $971C AND A           ;
 $971D JR NZ,$974C     ;
 $971F LD H,(IX+$03)   ;
 $9722 LD L,(IX+$02)   ;
 $9725 LD DE,($60AA)   ;
 $9729 LD BC,$0008     ;
 $972C ADD HL,BC       ;
 $972D SBC HL,DE       ;
 $972F LD A,H          ;
 $9730 AND $1F         ;
 $9732 JR NZ,$974C     ;
 $9734 LD A,L          ;
 $9735 CP $10          ;
 $9737 JR NC,$974C     ;
 $9739 LD A,($60AC)    ;
 $973C SUB (IX+$04)    ;
 $973F CP $10          ;
 $9741 JR NC,$974C     ;
 $9743 SET 0,(IX+$08)  ;
 $9747 LD HL,$60B0     ;
 $974A SET 0,(HL)      ;
*$974C CALL $9884      ;
 $974F JR NZ,$9761     ;
 $9751 LD DE,($60AA)   ;
 $9755 LD (IX+$03),D   ;
 $9758 LD (IX+$02),E   ;
 $975B LD A,($60AC)    ;
 $975E LD (IX+$04),A   ;
*$9761 LD A,(IX+$06)   ;
 $9764 AND A           ;
 $9765 JP M,$976C      ;
 $9768 CP $30          ;
 $976A JR NC,$9771     ;
*$976C ADD A,$02       ;
 $976E LD (IX+$06),A   ;
*$9771 SRA A           ;
 $9773 SRA A           ;
 $9775 SRA A           ;
 $9777 SRA A           ;
 $9779 ADD A,(IX+$04)  ;
 $977C CP $B0          ;
 $977E JR NC,$97E6     ;
*$9780 LD (IX+$04),A   ;
*$9783 LD H,(IX+$03)   ;
 $9786 LD L,(IX+$02)   ;
 $9789 PUSH HL         ;
 $978A LD DE,($607A)   ;
 $978E SBC HL,DE       ;
 $9790 LD C,$00        ;
 $9792 LD A,H          ;
 $9793 AND $1F         ;
 $9795 JR Z,$97A8      ;
 $9797 OR $E0          ;
 $9799 CPL             ;
 $979A AND A           ;
 $979B JR Z,$97A8      ;
 $979D BIT 4,H         ;
 $979F LD A,$30        ;
 $97A1 JR NZ,$97A5     ;
 $97A3 LD A,$D0        ;
*$97A5 LD (IX+$05),A   ;
*$97A8 POP HL          ;
 $97A9 BIT 0,(IX+$08)  ;
 $97AD JP Z,$97C1      ;
 $97B0 LD ($60AA),HL   ;
 $97B3 LD A,(IX+$04)   ;
 $97B6 ADD A,$1A       ;
 $97B8 CP $B0          ;
 $97BA JR C,$97BE      ;
 $97BC LD A,$AF        ;
*$97BE LD ($60AC),A    ;
*$97C1 INC (IX+$11)    ;
 $97C4 LD A,(IX+$11)   ;
 $97C7 AND $07         ;
 $97C9 ADD A,$40       ;
 $97CB LD (IX+$00),A   ;
 $97CE BIT 0,(IX+$10)  ;
 $97D2 JR Z,$97DF      ;
 $97D4 BIT 0,(IX+$08)  ;
 $97D8 JR Z,$97DF      ;
 $97DA LD A,$80        ;
 $97DC LD ($60B0),A    ;
*$97DF LD (IX+$07),$45 ;
 $97E3 JP $954B        ;
*$97E6 LD A,(IX+$06)   ;
 $97E9 AND A           ;
 $97EA JP M,$9780      ;
 $97ED NEG             ;
 $97EF LD (IX+$06),A   ;
 $97F2 JR $9783        ;
*$97F4 INC (IX+$11)    ;
 $97F7 LD A,(IX+$04)   ;
 $97FA CP $70          ;
 $97FC LD A,(IX+$06)   ;
 $97FF JR NC,$985A     ;
 $9801 AND A           ;
 $9802 JP M,$9809      ;
 $9805 CP $30          ;
 $9807 JR NC,$980B     ;
*$9809 ADD A,$02       ;
*$980B LD (IX+$06),A   ;
 $980E SRA A           ;
 $9810 SRA A           ;
 $9812 SRA A           ;
 $9814 SRA A           ;
 $9816 ADD A,(IX+$04)  ;
 $9819 CP $B0          ;
 $981B JR C,$981F      ;
 $981D LD A,$AF        ;
*$981F LD (IX+$04),A   ;
 $9822 LD A,($5E40)    ;
 $9825 LD C,A          ;
 $9826 AND A           ;
 $9827 JR Z,$9872      ;
 $9829 AND $7F         ;
 $982B JR NZ,$983A     ;
 $982D LD A,C          ;
 $982E AND $80         ;
 $9830 LD C,A          ;
 $9831 LD A,(IX+$08)   ;
 $9834 AND $7F         ;
 $9836 OR C            ;
 $9837 LD (IX+$08),A   ;
*$983A BIT 7,(IX+$08)  ;
 $983E LD A,(IX+$05)   ;
 $9841 JR NZ,$9866     ;
 $9843 AND A           ;
 $9844 JP M,$984B      ;
 $9847 CP $30          ;
 $9849 JR NC,$984D     ;
*$984B ADD A,$02       ;
*$984D LD (IX+$05),A   ;
*$9850 LD H,(IX+$03)   ;
 $9853 LD L,(IX+$02)   ;
 $9856 PUSH HL         ;
 $9857 JP $97A8        ;
*$985A AND A           ;
 $985B JP P,$9862      ;
 $985E CP $D1          ;
 $9860 JR C,$980B      ;
*$9862 SUB $02         ;
 $9864 JR $980B        ;
*$9866 AND A           ;
 $9867 JP P,$986E      ;
 $986A CP $D1          ;
 $986C JR C,$984D      ;
*$986E SUB $02         ;
 $9870 JR $984D        ;
*$9872 CALL $91BB      ;
 $9875 LD A,D          ;
 $9876 AND A           ;
 $9877 JR Z,$983A      ;
 $9879 LD A,$80        ;
 $987B LD ($60B0),A    ;
 $987E LD (IX+$08),$00 ;
 $9882 JR $9850        ;
*$9884 LD H,(IX+$03)   ;
 $9887 LD L,(IX+$02)   ;
 $988A LD DE,($60C2)   ;
 $988E LD BC,$0008     ;
 $9891 ADD HL,BC       ;
 $9892 SBC HL,DE       ;
 $9894 LD A,H          ;
 $9895 AND $1F         ;
 $9897 JR NZ,$98AA     ;
 $9899 LD A,L          ;
 $989A CP $10          ;
 $989C JR NC,$98AA     ;
 $989E LD A,($60C4)    ;
 $98A1 SUB (IX+$04)    ;
 $98A4 CP $10          ;
 $98A6 JR NC,$98AA     ;
 $98A8 XOR A           ;
 $98A9 RET             ;
*$98AA LD A,$01        ;
 $98AC AND A           ;
 $98AD RET             ;
; This entry point is used by the routines at #R$93A6 and #R$95B6.
*$98AE LD H,(IX+$03)   ;
 $98B1 LD L,(IX+$02)   ;
 $98B4 LD DE,($607A)   ;
 $98B8 AND A           ;
 $98B9 SBC HL,DE       ;
 $98BB LD DE,$0078     ;
 $98BE ADD HL,DE       ;
 $98BF LD A,H          ;
 $98C0 AND $1F         ;
 $98C2 RET NZ          ;
 $98C3 EX DE,HL        ;
 $98C4 LD A,($607A)    ;
 $98C7 AND $07         ;
 $98C9 LD B,A          ;
 $98CA LD A,$00        ;
 $98CC LD HL,$00FF     ;
 $98CF JR Z,$98D5      ;
*$98D1 ADD HL,HL       ;
 $98D2 RLA             ;
 $98D3 DJNZ $98D1      ;
*$98D5 EX DE,HL        ;
 $98D6 LD C,A          ;
 $98D7 LD A,($607A)    ;
 $98DA RRA             ;
 $98DB RRA             ;
 $98DC RRA             ;
 $98DD AND $1F         ;
 $98DF LD L,A          ;
 $98E0 LD A,(IX+$02)   ;
 $98E3 RRA             ;
 $98E4 RRA             ;
 $98E5 RRA             ;
 $98E6 AND $1F         ;
 $98E8 SUB L           ;
 $98E9 ADD A,$0E       ;
 $98EB AND $1F         ;
 $98ED LD HL,$50C0     ;
 $98F0 ADD A,L         ;
 $98F1 LD L,A          ;
 $98F2 LD B,$08        ;
*$98F4 PUSH HL         ;
 $98F5 LD A,E          ;
 $98F6 AND (HL)        ;
 $98F7 LD (HL),A       ;
 $98F8 INC L           ;
 $98F9 LD A,C          ;
 $98FA AND (HL)        ;
 $98FB LD (HL),A       ;
 $98FC INC L           ;
 $98FD LD A,D          ;
 $98FE AND (HL)        ;
 $98FF LD (HL),A       ;
 $9900 POP HL          ;
 $9901 INC H           ;
 $9902 DJNZ $98F4      ;
 $9904 XOR A           ;
 $9905 RET             ;
 $9906 LD H,(IX+$03)   ;
 $9909 LD L,(IX+$02)   ;
 $990C LD DE,($607A)   ;
 $9910 AND A           ;
 $9911 SBC HL,DE       ;
 $9913 BIT 7,(IX+$05)  ;
 $9917 JR NZ,$9930     ;
 $9919 LD A,H          ;
 $991A AND $1F         ;
 $991C CP $01          ;
 $991E JR Z,$9937      ;
*$9920 INC (IX+$11)    ;
 $9923 LD A,(IX+$11)   ;
 $9926 AND $07         ;
 $9928 ADD A,$88       ;
 $992A LD (IX+$00),A   ;
 $992D JP $954B        ;
*$9930 LD A,H          ;
 $9931 OR $E0          ;
 $9933 CP $FE          ;
 $9935 JR NZ,$9920     ;
; This entry point is used by the routine at #R$9531.
*$9937 LD (IX+$00),$00 ;
 $993B RET             ;
 $993C LD H,(IX+$03)   ;
 $993F LD L,(IX+$02)   ;
 $9942 LD DE,($607A)   ;
 $9946 AND A           ;
 $9947 SBC HL,DE       ;
 $9949 LD C,$00        ;
 $994B LD A,H          ;
 $994C AND $1F         ;
 $994E JR Z,$9961      ;
 $9950 OR $E0          ;
 $9952 CPL             ;
 $9953 AND A           ;
 $9954 JR Z,$9961      ;
 $9956 BIT 4,H         ;
 $9958 LD A,$30        ;
 $995A JR NZ,$995E     ;
 $995C LD A,$D0        ;
*$995E LD (IX+$05),A   ;
*$9961 LD A,(IX+$04)   ;
 $9964 ADD A,(IX+$06)  ;
 $9967 CP $38          ;
 $9969 JR C,$9988      ;
 $996B CP $B0          ;
 $996D JR NC,$998E     ;
 $996F LD (IX+$04),A   ;
*$9972 INC (IX+$11)    ;
 $9975 LD A,(IX+$11)   ;
 $9978 CP $06          ;
 $997A JR C,$9980      ;
 $997C XOR A           ;
 $997D LD (IX+$11),A   ;
*$9980 ADD A,$A8       ;
 $9982 LD (IX+$00),A   ;
 $9985 JP $954B        ;
*$9988 LD (IX+$06),$03 ;
 $998C JR $9972        ;
*$998E LD (IX+$06),$FD ;
 $9992 JR $9972        ;
 $9994 LD A,(IX+$12)   ;
 $9997 AND A           ;
 $9998 JP P,$999F      ;
 $999B LD A,$02        ;
 $999D JR $99A1        ;
*$999F LD A,$FE        ;
*$99A1 ADD A,(IX+$13)  ;
 $99A4 LD (IX+$13),A   ;
 $99A7 ADD A,(IX+$12)  ;
 $99AA LD (IX+$12),A   ;
 $99AD LD A,(IX+$14)   ;
 $99B0 AND A           ;
 $99B1 JP P,$99B8      ;
 $99B4 LD A,$02        ;
 $99B6 JR $99BA        ;
*$99B8 LD A,$FE        ;
*$99BA ADD A,(IX+$15)  ;
 $99BD LD (IX+$15),A   ;
 $99C0 ADD A,(IX+$14)  ;
 $99C3 LD (IX+$14),A   ;
 $99C6 ADD A,(IX+$06)  ;
 $99C9 SRA A           ;
 $99CB SRA A           ;
 $99CD SRA A           ;
 $99CF SRA A           ;
 $99D1 ADD A,(IX+$04)  ;
 $99D4 CP $3A          ;
 $99D6 JR C,$9A23      ;
 $99D8 CP $B0          ;
 $99DA JR NC,$9A29     ;
 $99DC LD (IX+$04),A   ;
*$99DF LD H,(IX+$03)   ;
 $99E2 LD L,(IX+$02)   ;
 $99E5 LD DE,($607A)   ;
 $99E9 AND A           ;
 $99EA SBC HL,DE       ;
 $99EC LD C,$00        ;
 $99EE LD A,H          ;
 $99EF AND $1F         ;
 $99F1 JR Z,$9A04      ;
 $99F3 OR $E0          ;
 $99F5 CPL             ;
 $99F6 AND A           ;
 $99F7 JR Z,$9A04      ;
 $99F9 BIT 4,H         ;
 $99FB LD A,$20        ;
 $99FD JR NZ,$9A01     ;
 $99FF LD A,$E0        ;
*$9A01 LD (IX+$16),A   ;
*$9A04 LD A,(IX+$16)   ;
 $9A07 ADD A,(IX+$12)  ;
 $9A0A LD (IX+$05),A   ;
 $9A0D INC (IX+$11)    ;
 $9A10 LD A,(IX+$11)   ;
 $9A13 CP $06          ;
 $9A15 JR C,$9A1B      ;
 $9A17 XOR A           ;
 $9A18 LD (IX+$11),A   ;
*$9A1B ADD A,$B0       ;
 $9A1D LD (IX+$00),A   ;
 $9A20 JP $954B        ;
*$9A23 LD (IX+$06),$20 ;
 $9A27 JR $99DF        ;
*$9A29 LD (IX+$06),$E0 ;
 $9A2D JR $99DF        ;
 $9A2F LD HL,$5E5E     ;
 $9A32 INC (HL)        ;
 $9A33 LD H,(IX+$03)   ;
 $9A36 LD L,(IX+$02)   ;
 $9A39 LD DE,($607A)   ;
 $9A3D AND A           ;
 $9A3E SBC HL,DE       ;
 $9A40 BIT 4,H         ;
 $9A42 JP NZ,$9AAB     ;
 $9A45 LD C,$00        ;
 $9A47 LD A,(IX+$05)   ;
 $9A4A AND A           ;
 $9A4B JP P,$9A52      ;
 $9A4E CP $B1          ;
 $9A50 JR C,$9A54      ;
*$9A52 SUB $02         ;
*$9A54 LD (IX+$05),A   ;
 $9A57 LD A,($6078)    ;
 $9A5A CP $11          ;
 $9A5C JR C,$9A62      ;
 $9A5E LD A,$68        ;
 $9A60 JR $9A65        ;
*$9A62 LD A,($607C)    ;
*$9A65 SUB (IX+$04)    ;
 $9A68 JP M,$9ABC      ;
 $9A6B LD A,(IX+$06)   ;
 $9A6E AND A           ;
 $9A6F JP M,$9A76      ;
 $9A72 CP $40          ;
 $9A74 JR NC,$9A78     ;
*$9A76 ADD A,$02       ;
*$9A78 LD (IX+$06),A   ;
 $9A7B SRA A           ;
 $9A7D SRA A           ;
 $9A7F SRA A           ;
 $9A81 SRA A           ;
 $9A83 ADD A,(IX+$04)  ;
 $9A86 CP $38          ;
 $9A88 JR C,$9ACB      ;
 $9A8A CP $B0          ;
 $9A8C JR NC,$9AD9     ;
 $9A8E LD (IX+$04),A   ;
*$9A91 INC (IX+$11)    ;
 $9A94 LD A,(IX+$11)   ;
 $9A97 AND $0F         ;
 $9A99 ADD A,$CC       ;
 $9A9B LD (IX+$00),A   ;
 $9A9E LD A,($5E42)    ;
 $9AA1 AND $01         ;
 $9AA3 ADD A,$45       ;
 $9AA5 LD (IX+$07),A   ;
 $9AA8 JP $954B        ;
*$9AAB LD C,$80        ;
 $9AAD LD A,(IX+$05)   ;
 $9AB0 AND A           ;
 $9AB1 JP M,$9AB8      ;
 $9AB4 CP $50          ;
 $9AB6 JR NC,$9A54     ;
*$9AB8 ADD A,$02       ;
 $9ABA JR $9A54        ;
*$9ABC LD A,(IX+$06)   ;
 $9ABF AND A           ;
 $9AC0 JP P,$9AC7      ;
 $9AC3 CP $C1          ;
 $9AC5 JR C,$9A78      ;
*$9AC7 SUB $02         ;
 $9AC9 JR $9A78        ;
*$9ACB LD A,(IX+$06)   ;
 $9ACE AND A           ;
 $9ACF JP P,$9A91      ;
*$9AD2 NEG             ;
 $9AD4 LD (IX+$06),A   ;
 $9AD7 JR $9A91        ;
*$9AD9 LD A,(IX+$06)   ;
 $9ADC AND A           ;
 $9ADD JP M,$9A91      ;
 $9AE0 JR $9AD2        ;
 $9AE2 LD H,(IX+$03)   ;
 $9AE5 LD L,(IX+$02)   ;
 $9AE8 PUSH HL         ;
 $9AE9 LD DE,($607A)   ;
 $9AED AND A           ;
 $9AEE SBC HL,DE       ;
 $9AF0 BIT 7,(IX+$05)  ;
 $9AF4 JP NZ,$9B9E     ;
 $9AF7 LD A,H          ;
 $9AF8 AND $1F         ;
 $9AFA CP $01          ;
 $9AFC JP Z,$9BA6      ;
*$9AFF LD DE,$0078     ;
 $9B02 ADD HL,DE       ;
 $9B03 LD A,H          ;
 $9B04 POP DE          ;
 $9B05 AND A           ;
 $9B06 JR NZ,$9B59     ;
 $9B08 PUSH DE         ;
 $9B09 LD A,(IX+$01)   ;
 $9B0C XOR (IX+$05)    ;
 $9B0F AND $80         ;
 $9B11 JR Z,$9B24      ;
 $9B13 LD A,(IX+$05)   ;
 $9B16 AND A           ;
 $9B17 JP M,$9B20      ;
 $9B1A LD (IX+$05),$50 ;
 $9B1E JR $9B24        ;
*$9B20 LD (IX+$05),$B0 ;
*$9B24 CALL $9395      ;
 $9B27 POP DE          ;
 $9B28 JR NZ,$9B59     ;
 $9B2A LD (HL),$B6     ;
 $9B2C BIT 7,(IX+$05)  ;
 $9B30 JR NZ,$9B34     ;
 $9B32 LD (HL),$B7     ;
*$9B34 INC HL          ;
 $9B35 INC HL          ;
 $9B36 LD (HL),E       ;
 $9B37 INC HL          ;
 $9B38 LD (HL),D       ;
 $9B39 INC HL          ;
 $9B3A LD A,(IX+$04)   ;
 $9B3D LD (HL),A       ;
 $9B3E INC HL          ;
 $9B3F LD A,(IX+$05)   ;
 $9B42 AND A           ;
 $9B43 JP M,$9B4A      ;
 $9B46 LD (HL),$70     ;
 $9B48 JR $9B4C        ;
*$9B4A LD (HL),$90     ;
*$9B4C INC HL          ;
 $9B4D LD (HL),$00     ;
 $9B4F INC HL          ;
 $9B50 LD (HL),$47     ;
 $9B52 LD B,$0F        ;
*$9B54 INC HL          ;
 $9B55 LD (HL),$00     ;
 $9B57 DJNZ $9B54      ;
*$9B59 LD A,($607C)    ;
 $9B5C SUB (IX+$04)    ;
 $9B5F JP P,$9BAC      ;
 $9B62 LD A,(IX+$06)   ;
 $9B65 AND A           ;
 $9B66 JP P,$9B6D      ;
 $9B69 CP $EF          ;
 $9B6B JR C,$9B6F      ;
*$9B6D SUB $02         ;
*$9B6F LD (IX+$06),A   ;
 $9B72 SRA A           ;
 $9B74 SRA A           ;
 $9B76 SRA A           ;
 $9B78 SRA A           ;
 $9B7A ADD A,(IX+$04)  ;
 $9B7D CP $38          ;
 $9B7F JR C,$9B88      ;
 $9B81 CP $B0          ;
 $9B83 JR NC,$9B88     ;
 $9B85 LD (IX+$04),A   ;
*$9B88 INC (IX+$11)    ;
 $9B8B LD A,(IX+$11)   ;
 $9B8E CP $07          ;
 $9B90 JR C,$9B96      ;
 $9B92 XOR A           ;
 $9B93 LD (IX+$11),A   ;
*$9B96 ADD A,$B8       ;
 $9B98 LD (IX+$00),A   ;
 $9B9B JP $954B        ;
*$9B9E LD A,H          ;
 $9B9F OR $E0          ;
 $9BA1 CP $FE          ;
 $9BA3 JP NZ,$9AFF     ;
*$9BA6 LD (IX+$00),$00 ;
 $9BAA POP HL          ;
 $9BAB RET             ;
*$9BAC LD A,(IX+$06)   ;
 $9BAF AND A           ;
 $9BB0 JP M,$9BB7      ;
 $9BB3 CP $20          ;
 $9BB5 JR NC,$9B6F     ;
*$9BB7 ADD A,$02       ;
 $9BB9 JR $9B6F        ;
 $9BBB LD H,(IX+$03)   ;
 $9BBE LD L,(IX+$02)   ;
 $9BC1 LD DE,($607A)   ;
 $9BC5 AND A           ;
 $9BC6 SBC HL,DE       ;
 $9BC8 BIT 7,(IX+$05)  ;
 $9BCC JR NZ,$9C17     ;
 $9BCE LD A,H          ;
 $9BCF AND $1F         ;
 $9BD1 CP $01          ;
 $9BD3 JR Z,$9C1E      ;
*$9BD5 LD H,(IX+$03)   ;
 $9BD8 LD L,(IX+$02)   ;
 $9BDB LD A,(IX+$05)   ;
 $9BDE LD D,$00        ;
 $9BE0 SRA A           ;
 $9BE2 SRA A           ;
 $9BE4 SRA A           ;
 $9BE6 SRA A           ;
 $9BE8 JP P,$9BED      ;
 $9BEB LD D,$FF        ;
*$9BED LD E,A          ;
 $9BEE ADD HL,DE       ;
 $9BEF LD A,H          ;
 $9BF0 AND $1F         ;
 $9BF2 LD (IX+$03),A   ;
 $9BF5 LD (IX+$02),L   ;
 $9BF8 CALL $8B73      ;
 $9BFB CALL $8733      ;
 $9BFE BIT 0,(IX+$10)  ;
 $9C02 JR Z,$9C0D      ;
 $9C04 LD BC,$0050     ;
 $9C07 CALL $899C      ;
 $9C0A CALL $A73C      ;
*$9C0D CALL $B2A2      ;
 $9C10 RET NC          ;
 $9C11 CALL $A73C      ;
 $9C14 JP $B2D7        ;
*$9C17 LD A,H          ;
 $9C18 OR $E0          ;
 $9C1A CP $FE          ;
 $9C1C JR NZ,$9BD5     ;
*$9C1E LD (IX+$00),$00 ;
 $9C22 RET             ;

; Routine at 9C23
;
; Used by the routine at #R$800A.
c$9C23 LD HL,$9D80   ; {Copy #N$0018 bytes from #R$9D80 to #N$5E20.
 $9C26 LD DE,$5E20   ;
 $9C29 LD BC,$0018   ;
 $9C2C LDIR          ; }
 $9C2E LD HL,$9D98   ; {Copy #N$0018 bytes from #R$9D98 to #N$5E06.
 $9C31 LD DE,$5E06   ;
 $9C34 LD BC,$0018   ;
 $9C37 LDIR          ; }
 $9C39 RET           ; Return.

; Data block at 9C3A
b$9C3A DEFB $50,$00,$00,$00,$38,$60,$00,$42
 $9C42 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C4A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C52 DEFB $40,$00,$00,$00,$38,$30,$00,$45
 $9C5A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C62 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C6A DEFB $48,$00,$00,$00,$38,$30,$00,$00
 $9C72 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C7A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C82 DEFB $88,$00,$00,$00,$00,$00,$00,$44
 $9C8A DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C92 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9C9A DEFB $A8,$00,$00,$00,$38,$30,$03,$42
 $9CA2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CAA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CB2 DEFB $B0,$00,$00,$00,$38,$20,$20,$43
 $9CBA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CC2 DEFB $00,$00,$20,$FC,$FC,$F4,$20,$00
 $9CCA DEFB $CC,$00,$00,$00,$38,$30,$20,$41
 $9CD2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CDA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CE2 DEFB $B8,$00,$00,$00,$00,$00,$00,$42
 $9CEA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9CF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Data block at 9CFA
w$9CFA DEFW $9C3A
 $9CFC DEFW $9C3A
 $9CFE DEFW $9C9A
 $9D00 DEFW $9C82
 $9D02 DEFW $9C3A
 $9D04 DEFW $9C82
 $9D06 DEFW $9C9A
 $9D08 DEFW $9C82
 $9D0A DEFW $9C3A
 $9D0C DEFW $9CB2
 $9D0E DEFW $9C9A
 $9D10 DEFW $9C82
 $9D12 DEFW $9CB2
 $9D14 DEFW $9C9A
 $9D16 DEFW $9C3A
 $9D18 DEFW $9C82
 $9D1A DEFW $9C3A
 $9D1C DEFW $9C3A
 $9D1E DEFW $9C9A
 $9D20 DEFW $9C82
 $9D22 DEFW $9CB2
 $9D24 DEFW $9C6A
 $9D26 DEFW $9C9A
 $9D28 DEFW $9C82
 $9D2A DEFW $9C3A
 $9D2C DEFW $9C9A
 $9D2E DEFW $9C82
 $9D30 DEFW $9C52
 $9D32 DEFW $9CB2
 $9D34 DEFW $9C6A
 $9D36 DEFW $9C3A
 $9D38 DEFW $9C82
 $9D3A DEFW $9C3A
 $9D3C DEFW $9C9A
 $9D3E DEFW $9C82
 $9D40 DEFW $9C52
 $9D42 DEFW $9CB2
 $9D44 DEFW $9C6A
 $9D46 DEFW $9CE2
 $9D48 DEFW $9C3A
 $9D4A DEFW $9C3A
 $9D4C DEFW $9C52
 $9D4E DEFW $9C9A
 $9D50 DEFW $9C82
 $9D52 DEFW $9CB2
 $9D54 DEFW $9C6A
 $9D56 DEFW $9CE2
 $9D58 DEFW $9CCA
 $9D5A DEFW $7809
 $9D5C DEFW $0030
 $9D5E DEFW $00AF
 $9D60 DEFW $4700
 $9D62 DEFW $0000
 $9D64 DEFW $0000
 $9D66 DEFW $0000
 $9D68 DEFW $0000
 $9D6A DEFW $0000
 $9D6C DEFW $0000
 $9D6E DEFW $0000
 $9D70 DEFW $0000

; Data block at 9D72
w$9D72 DEFW $9CFA
 $9D74 DEFW $9D0A
 $9D76 DEFW $9D1A
 $9D78 DEFW $9D2A
 $9D7A DEFW $9D3A
 $9D7C DEFW $9D4A
 $9D7E DEFW $9D4A

; Data block at 9D80
b$9D80 DEFB $41,$43,$47,$55,$50,$47,$4A,$53
 $9D88 DEFB $4C,$43,$54,$53,$54,$44,$53,$43
 $9D90 DEFB $4C,$57,$49,$43,$4C,$49,$42,$4D

; Data block at 9D98
b$9D98 DEFB $10,$51,$40,$08,$53,$10,$06,$37
 $9DA0 DEFB $80,$05,$23,$40,$04,$28,$90,$03
 $9DA8 DEFB $45,$10,$02,$15,$60,$01,$05,$30

; Data block at 9DB0
b$9DB0 DEFB $88,$BA,$3E,$BA,$53,$BA,$5E,$BA
 $9DB8 DEFB $6F,$BA,$7A,$BA,$83,$BA,$88,$BA

; Handler: Laser Beam
;
; Used by the routine at #R$8D06.
;
; .
;
; Only handle the laser beam on every 4th frame.
@label=Handler_LaserBeam
c$9DC0 LD A,($5E42)         ;
 $9DC3 AND %00000001        ; Keep only bit 0.
 $9DC5 RET NZ               ;
; Search for a "free" laser beam slot.
 $9DC6 LD HL,$6000          ; #REGhl=#R$6000.
 $9DC9 LD DE,$0018          ; #REGde=#N($0018, $04, $04) (each slot is #N$18
                            ; bytes).
 $9DCC LD B,$04             ; #REGb=#N$04 (counter; there are 4 "slots").
@label=LaserBeam_Slot
*$9DCE LD A,(HL)            ; {If the slot is not in use, jump to #R$9DDE.
 $9DCF AND A                ;
 $9DD0 JR Z,$9DDE           ; }
 $9DD2 ADD HL,DE            ; #REGhl=#REGhl+#REGde (move onto the next slot).
 $9DD3 DJNZ $9DCE           ; Decrease counter by one and loop back to #R$9DCE
                            ; until counter is zero.
; All laser beam slots are in use so just return...
 $9DD5 RET                  ; Return.
; Possibly the "shoot right" code?
*$9DD6 ADD A,$10            ; #REGa=#REGa+#N$10.
 $9DD8 OR %00000100         ; Set bit 2.
 $9DDA AND %11111110        ; Keep only bits 1-7.
 $9DDC JR $9DFA             ; Jump to #R$9DFA.
; Initialise a new laser beam.
@label=Init_LaserBeam
*$9DDE LD (HL),$11          ; Mark the laser beam slot as "in-use".
 $9DE0 INC HL               ; #REGhl=Laser beam Y position.
 $9DE1 LD DE,$6078          ; #REGde=#R$6078.
 $9DE4 LD B,$0D             ;
 $9DE6 LD A,(DE)            ;
 $9DE7 INC DE               ;
 $9DE8 DEC A                ;
 $9DE9 BIT 3,A              ;
 $9DEB JR Z,$9DEF           ;
 $9DED DEC B                ;
 $9DEE DEC B                ;
*$9DEF AND $04              ;
 $9DF1 LD A,(DE)            ;
 $9DF2 JR NZ,$9DD6          ;
 $9DF4 SUB $08              ;
 $9DF6 AND $F8              ;
 $9DF8 OR $05               ;
*$9DFA LD C,A               ;
 $9DFB INC DE               ;
 $9DFC INC DE               ;
 $9DFD INC DE               ;
 $9DFE LD A,(DE)            ;
 $9DFF SUB B                ;
 $9E00 LD (HL),A            ;
 $9E01 INC HL               ;
 $9E02 LD B,$03             ;
 $9E04 LD (HL),C            ;
 $9E05 LD A,C               ;
 $9E06 AND $FB              ;
*$9E08 INC HL               ;
 $9E09 LD (HL),A            ;
 $9E0A DJNZ $9E08           ;
 $9E0C INC HL               ;
 $9E0D LD A,($5E40)         ;
 $9E10 AND $18              ;
 $9E12 ADD A,$60            ;
 $9E14 LD (HL),A            ;
 $9E15 INC HL               ;
 $9E16 EX DE,HL             ;
 $9E17 LD HL,$9E28          ;
 $9E1A LD A,($5E40)         ;
 $9E1D AND $03              ;
 $9E1F LD C,A               ;
 $9E20 LD B,$00             ;
 $9E22 ADD HL,BC            ;
 $9E23 LD A,(HL)            ;
 $9E24 LD (DE),A            ;
 $9E25 JP $B8A8             ; Jump to #R$B8A8.
; All the attributes a laser beam can be.
 $9E28 DEFB $47,$43,$43,$45 ;
; View the equivalent code in;
; #LIST
; { #JETPAC$6F91 }
; LIST#

; Animate: Laser Beam
@label=LaserBeam_Animate
c$9E2C CALL $A796      ; Call #R$A796.
 $9E2F LD D,(IX+$01)   ; Laser Y position.
 $9E32 LD A,(IX+$02)   ; Laser X position: pulse #1.
 $9E35 BIT 2,A         ; {Jump to #R$9E68 if bit 2 is reset.
 $9E37 JR Z,$9E68      ; }
 $9E39 LD L,A          ; #REGl=X position: pulse #1.
 $9E3A LD A,$08        ;
 $9E3C BIT 0,L         ;
 $9E3E JR Z,$9E42      ;
 $9E40 NEG             ;
*$9E42 ADD A,L         ;
 $9E43 LD E,A          ;
 $9E44 LD H,D          ;
 $9E45 PUSH HL         ;
 $9E46 CALL $851E      ; Call #R$851E.
 $9E49 LD (IX+$02),E   ;
 $9E4C LD A,$FF        ;
 $9E4E XOR (HL)        ;
 $9E4F LD (HL),A       ;
 $9E50 POP HL          ;
 $9E51 CALL $8506      ; Call #R$8506.
 $9E54 LD A,(IX+$07)   ;
 $9E57 LD (HL),A       ;
 $9E58 LD A,(IX+$06)   ;
 $9E5B SUB $08         ;
 $9E5D LD (IX+$06),A   ;
 $9E60 AND %11111000   ; Keep only bits 3-7.
 $9E62 JR NZ,$9E68     ;
 $9E64 RES 2,(IX+$02)  ;
*$9E68 EXX             ;
 $9E69 LD BC,$031C     ; #REGbc=#N$031C.
 $9E6C LD E,$E0        ; #REGe=#N$E0.
 $9E6E EXX             ;
; Loop counter (to process pulses #2, #3, #4).
 $9E6F LD E,$03        ; #REGe=#N$03.
 $9E71 PUSH IX         ;
 $9E73 POP BC          ;
 $9E74 INC BC          ;
 $9E75 INC BC          ;
 $9E76 INC BC          ;
*$9E77 LD A,(BC)       ;
 $9E78 XOR (IX+$02)    ;
 $9E7B AND %11111000   ; Keep only bits 3-7.
 $9E7D JR NZ,$9E8D     ;
 $9E7F EXX             ;
 $9E80 LD A,B          ;
 $9E81 LD B,C          ;
 $9E82 LD C,E          ;
 $9E83 EXX             ;
 $9E84 INC BC          ;
 $9E85 DEC E           ;
 $9E86 JR NZ,$9E77     ;
 $9E88 LD (IX+$00),$00 ;
 $9E8C RET             ; Return.
*$9E8D LD A,(BC)       ;
 $9E8E BIT 2,A         ;
 $9E90 JR NZ,$9EAD     ;
 $9E92 DEC (IX+$06)    ;
 $9E95 LD A,(IX+$06)   ;
 $9E98 AND %00000111   ; Keep only bits 0-2.
 $9E9A RET NZ          ;
 $9E9B LD A,($5E40)    ; #REGa=#R$5E40.
 $9E9E AND %00000011   ; Keep only bits 0-1.
 $9EA0 OR %00000100    ; Set bit 2.
 $9EA2 OR (IX+$06)     ;
 $9EA5 LD (IX+$06),A   ;
 $9EA8 LD A,(BC)       ;
 $9EA9 OR %00000100    ; Set bit 2.
 $9EAB LD (BC),A       ;
 $9EAC RET             ; Return.
*$9EAD LD A,(BC)       ;
 $9EAE LD L,A          ;
 $9EAF LD A,$08        ;
 $9EB1 BIT 0,L         ;
 $9EB3 JR Z,$9EB7      ;
 $9EB5 NEG             ;
*$9EB7 ADD A,L         ;
 $9EB8 LD (BC),A       ;
 $9EB9 LD H,D          ;
 $9EBA CALL $851E      ;
 $9EBD EXX             ;
 $9EBE LD A,B          ;
 $9EBF LD B,C          ;
 $9EC0 LD C,E          ;
 $9EC1 EXX             ;
 $9EC2 XOR (HL)        ;
 $9EC3 LD (HL),A       ;
 $9EC4 INC BC          ;
 $9EC5 DEC E           ;
 $9EC6 JP NZ,$9E77     ;
 $9EC9 RET             ; Return.

; Routine at 9ECA
c$9ECA LD A,($607A)  ; #REGa=#R$607A.
 $9ECD SUB (IX+$02)  ;
 $9ED0 AND %00000111 ; Keep only bits 0-2.
 $9ED2 ADD A,$1A     ;
 $9ED4 LD (IX+$00),A ;
 $9ED7 CALL $8787    ; Call #R$8787.
 $9EDA JR $9EEE      ; Jump to #R$9EEE.

; Routine at 9EDC
c$9EDC LD A,($607A)  ;
 $9EDF SUB (IX+$02)  ;
 $9EE2 NEG           ;
 $9EE4 AND $07       ;
 $9EE6 ADD A,$22     ;
 $9EE8 LD (IX+$00),A ;
 $9EEB CALL $8787    ;
; This entry point is used by the routine at #R$9ECA.
*$9EEE LD A,($5E6C)  ;
 $9EF1 AND A         ;
 $9EF2 JR Z,$9EFA    ;
 $9EF4 INC A         ;
 $9EF5 LD ($5E6C),A  ;
 $9EF8 JR $9F3F      ;
*$9EFA LD L,(IX+$01) ;
 $9EFD LD H,(IX+$04) ;
 $9F00 CALL $8506    ;
 $9F03 LD A,($5E57)  ;
 $9F06 AND A         ;
 $9F07 JR Z,$9F18    ;
 $9F09 LD B,A        ;
 $9F0A LD C,$02      ;
 $9F0C LD D,$47      ;
 $9F0E CALL $8931    ;
 $9F11 LD D,$45      ;
 $9F13 LD C,$02      ;
 $9F15 CALL $8931    ;
*$9F18 CALL $AD36    ;
 $9F1B JR NC,$9F2E   ;
 $9F1D CALL $AD0B    ;
 $9F20 LD HL,$5861   ;
 $9F23 CALL $AD00    ;
 $9F26 LD HL,$5863   ;
 $9F29 LD A,$42      ;
 $9F2B JP $AD00      ;
*$9F2E CALL $AD0B    ;
 $9F31 LD HL,$5863   ;
 $9F34 CALL $AD00    ;
 $9F37 LD HL,$5861   ;
 $9F3A LD A,$42      ;
 $9F3C JP $AD00      ;
; This entry point is used by the routine at #R$91E2.
*$9F3F CP $30        ;
 $9F41 JP NC,$B03B   ;
 $9F44 RRCA          ;
 $9F45 AND $07       ;
 $9F47 JR NZ,$9F4A   ;
 $9F49 INC A         ;
*$9F4A OR $40        ;
 $9F4C LD (IX+$07),A ;
 $9F4F CALL $8733    ;
 $9F52 LD A,(IX+$07) ;
 $9F55 CPL           ;
 $9F56 AND $7F       ;
 $9F58 LD C,A        ;
 $9F59 LD D,$20      ;
 $9F5B JP $B918      ;

; Routine at 9F5E
;
; Used by the routine at #R$A84C.
c$9F5E LD HL,$A008   ; #REGhl=#R$A008.
 $9F61 LD DE,$6090   ; #REGde=#R$6090.
 $9F64 LD BC,$0060   ; #REGbc=#N($0060,$04,$04).
 $9F67 LDIR          ;
 $9F69 RET           ; Return.

; Routine at 9F6A
c$9F6A LD A,H        ;
 $9F6B ADD A,$10     ;
 $9F6D LD H,A        ;
 $9F6E JR $9F87      ;
; This entry point is used by the routine at #R$8258.
*$9F70 CALL $B1E2    ;
 $9F73 RET NZ        ;
 $9F74 LD HL,$A068   ;
 $9F77 LD DE,$6108   ;
 $9F7A LD BC,$0090   ;
 $9F7D LDIR          ;
 $9F7F LD A,($5E42)  ;
 $9F82 LD H,A        ;
 $9F83 LD A,($5E40)  ;
 $9F86 LD L,A        ;
*$9F87 LD A,($607B)  ;
 $9F8A ADD A,A       ;
 $9F8B ADD A,A       ;
 $9F8C ADD A,A       ;
 $9F8D SUB H         ;
 $9F8E JP P,$9F93    ;
 $9F91 NEG           ;
*$9F93 CP $10        ;
 $9F95 JR C,$9F6A    ;
 $9F97 LD A,($6093)  ;
 $9F9A ADD A,A       ;
 $9F9B ADD A,A       ;
 $9F9C ADD A,A       ;
 $9F9D SUB H         ;
 $9F9E JP P,$9FA3    ;
 $9FA1 NEG           ;
*$9FA3 CP $10        ;
 $9FA5 JR C,$9F6A    ;
 $9FA7 SRL H         ;
 $9FA9 SRL H         ;
 $9FAB SRL H         ;
 $9FAD LD ($610A),HL ;
 $9FB0 LD BC,$0040   ;
 $9FB3 CALL $A002    ;
 $9FB6 LD ($616A),HL ;
 $9FB9 LD BC,$0008   ;
 $9FBC CALL $A002    ;
 $9FBF LD ($6182),HL ;
 $9FC2 LD BC,$0040   ;
 $9FC5 CALL $A002    ;
 $9FC8 LD ($613A),HL ;
 $9FCB LD A,($5EA0)  ;
 $9FCE CP $63        ;
 $9FD0 JR Z,$9FD3    ;
 $9FD2 INC A         ;
*$9FD3 LD ($5EA0),A  ;
 $9FD6 AND A         ;
 $9FD7 JR Z,$9FEA    ;
 $9FD9 AND $03       ;
 $9FDB JR NZ,$9FEA   ;
 $9FDD LD HL,$5EA1   ;
 $9FE0 INC (HL)      ;
 $9FE1 LD DE,$BAB4   ;
 $9FE4 CALL $B9BC    ;
 $9FE7 CALL $894F    ;
*$9FEA LD A,($5EA0)  ;
 $9FED CP $10        ;
 $9FEF CALL NC,$9FFF ;
 $9FF2 RLCA          ;
 $9FF3 RLCA          ;
 $9FF4 CPL           ;
 $9FF5 AND $3C       ;
 $9FF7 ADD A,$51     ;
 $9FF9 LD ($617F),A  ;
 $9FFC JP $F5EC      ;
*$9FFF LD A,$FF      ;
 $A001 RET           ;
; This entry point is used by the routines at #R$9020, #R$AD36, #R$B3E8,
; #R$B6AE and #R$B731.
*$A002 ADD HL,BC     ;
 $A003 LD A,H        ;
 $A004 AND $1F       ;
 $A006 LD H,A        ;
 $A007 RET           ;

; Data block at A008
b$A008 DEFB $1A,$00,$00,$00,$AF,$00,$00,$47,$00,$00,$00,$00,$00,$00,$00,$00
 $A018 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$2A,$00,$00,$01,$AF,$00,$00,$46
 $A028 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$06,$00,$00,$00,$00,$00
 $A038 DEFB $2A,$00,$00,$04,$AF,$00,$00,$46,$00,$00,$00,$00,$00,$00,$00,$00
 $A048 DEFB $00,$06,$06,$00,$00,$00,$00,$00,$30,$00,$00,$02,$AF,$00,$00,$45
 $A058 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$06,$00,$00,$00,$00,$00

; Data block at A068
b$A068 DEFB $90,$00,$00,$00,$AF,$00,$00,$45,$00,$00,$00,$00,$00,$00,$00,$00
 $A078 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A088 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A098 DEFB $90,$00,$00,$00,$AF,$00,$00,$45,$00,$00,$00,$00,$00,$00,$00,$00
 $A0A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A0B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $A0C8 DEFB $70,$00,$00,$00,$9F,$00,$00,$46,$00,$00,$00,$00,$00,$00,$00,$00
 $A0D8 DEFB $00,$00,$00,$00,$00,$00,$00,$90,$68,$00,$00,$00,$AF,$00,$00,$47
 $A0E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Routine at A0F8
;
; Used by the routine at #R$A1AA.
c$A0F8 CALL $945C      ;
 $A0FB JR NZ,$A101     ;
 $A0FD RES 1,(IX+$08)  ;
*$A101 LD A,($6090)    ;
 $A104 SUB $1A         ;
 $A106 CP $10          ;
 $A108 JR NC,$A10F     ;
 $A10A CALL $A431      ;
 $A10D JR $A126        ;
*$A10F LD A,($6078)    ;
 $A112 CP $16          ;
 $A114 JR C,$A121      ;
 $A116 LD BC,$FFF4     ;
*$A119 LD HL,($607A)   ;
 $A11C CALL $A43E      ;
 $A11F JR $A12C        ;
*$A121 LD BC,$0012     ;
 $A124 JR $A119        ;
*$A126 CALL $945C      ;
 $A129 JP Z,$A212      ;
; This entry point is used by the routine at #R$A1AA.
*$A12C LD A,($6080)    ;
 $A12F AND $01         ;
 $A131 JP NZ,$A212     ;
 $A134 LD A,(IX+$08)   ;
 $A137 AND $77         ;
 $A139 JP NZ,$A212     ;
 $A13C CALL $A4FC      ;
 $A13F JP NC,$A212     ;
 $A142 BIT 3,(IX+$08)  ;
 $A146 JR Z,$A14C      ;
 $A148 XOR A           ;
 $A149 LD ($5EA3),A    ;
*$A14C LD A,($6080)    ;
 $A14F OR $01          ;
 $A151 LD ($6080),A    ;
 $A154 LD (IX+$08),$06 ;
 $A158 JP $B8BD        ;
; This entry point is used by the routine at #R$A1AA.
*$A15B LD HL,($607A)   ;
 $A15E LD (IX+$02),L   ;
 $A161 LD (IX+$03),H   ;
 $A164 LD A,($607C)    ;
 $A167 ADD A,$12       ;
 $A169 CP $AF          ;
 $A16B JR C,$A16F      ;
 $A16D LD A,$AF        ;
*$A16F LD (IX+$04),A   ;
 $A172 CALL $945C      ;
 $A175 JR NZ,$A17C     ;
 $A177 RES 1,(IX+$08)  ;
 $A17B RET             ;
*$A17C BIT 1,(IX+$08)  ;
 $A180 RET NZ          ;
 $A181 RES 2,(IX+$08)  ;
 $A185 LD A,($6080)    ;
 $A188 AND $FE         ;
 $A18A LD ($6080),A    ;
 $A18D SET 1,(IX+$08)  ;
 $A191 SET 7,(IX+$08)  ;
 $A195 LD A,($607D)    ;
 $A198 SRA A           ;
 $A19A SRA A           ;
 $A19C SRA A           ;
 $A19E SRA A           ;
 $A1A0 LD (IX+$05),A   ;
 $A1A3 LD (IX+$06),$01 ;
 $A1A7 JP $B8C3        ;

; Routine at A1AA
c$A1AA LD A,($5E42)   ;
 $A1AD RRCA           ;
 $A1AE LD C,A         ;
 $A1AF AND $03        ;
 $A1B1 ADD A,$2A      ;
 $A1B3 LD (IX+$00),A  ;
 $A1B6 LD B,$00       ;
 $A1B8 LD HL,$A313    ;
 $A1BB LD A,C         ;
 $A1BC RRCA           ;
 $A1BD RRCA           ;
 $A1BE AND $03        ;
 $A1C0 LD C,A         ;
 $A1C1 ADD HL,BC      ;
 $A1C2 LD A,(HL)      ;
 $A1C3 LD (IX+$07),A  ;
 $A1C6 BIT 3,(IX+$08) ;
 $A1CA JP NZ,$A0F8    ;
 $A1CD BIT 7,(IX+$08) ;
 $A1D1 JR Z,$A1F8     ;
 $A1D3 CALL $A522     ;
 $A1D6 JR C,$A1E0     ;
 $A1D8 LD A,(IX+$08)  ;
 $A1DB AND $02        ;
 $A1DD LD (IX+$08),A  ;
*$A1E0 LD A,($5EA3)   ;
 $A1E3 AND A          ;
 $A1E4 JR NZ,$A1F8    ;
 $A1E6 CALL $A4BA     ;
 $A1E9 JR NC,$A1F8    ;
 $A1EB LD A,$01       ;
 $A1ED LD ($5EA3),A   ;
 $A1F0 SET 3,(IX+$08) ;
 $A1F4 RES 2,(IX+$08) ;
*$A1F8 CALL $ABB4     ;
 $A1FB LD A,($6078)   ;
 $A1FE CP $11         ;
 $A200 RET NC         ;
 $A201 BIT 2,(IX+$08) ;
 $A205 JP NZ,$A15B    ;
 $A208 CALL $945C     ;
 $A20B JP NZ,$A12C    ;
 $A20E RES 1,(IX+$08) ;
; This entry point is used by the routine at #R$A0F8.
*$A212 LD A,($6078)   ;
 $A215 CP $11         ;
 $A217 RET NC         ;
 $A218 CALL $A4FC     ;
 $A21B RET NC         ;
 $A21C CALL $933E     ;
 $A21F RET Z          ;
 $A220 PUSH IX        ;
 $A222 POP HL         ;
 $A223 LD BC,$60A8    ;
 $A226 AND A          ;
 $A227 SBC HL,BC      ;
 $A229 JP Z,$A30A     ;
 $A22C LD A,($60AC)   ;
 $A22F LD HL,($60AA)  ;
*$A232 LD DE,($607C)  ;
 $A236 LD ($607C),A   ;
 $A239 LD A,L         ;
 $A23A AND $F8        ;
 $A23C LD L,A         ;
 $A23D LD ($607A),HL  ;
 $A240 LD A,E         ;
 $A241 SUB $0C        ;
 $A243 LD ($5E6A),A   ;
 $A246 LD A,($6078)   ;
 $A249 DEC A          ;
 $A24A AND $F7        ;
 $A24C INC A          ;
 $A24D LD ($6078),A   ;
 $A250 JP $A299       ;
*$A253 LD DE,$AA1B    ;
 $A256 LD HL,$AA4B    ;
 $A259 LD B,$10       ;
*$A25B LD (HL),$80    ;
 $A25D INC HL         ;
 $A25E LD A,($5E6A)   ;
 $A261 LD (HL),A      ;
 $A262 INC HL         ;
 $A263 LD A,(DE)      ;
 $A264 INC DE         ;
 $A265 LD (HL),A      ;
 $A266 INC HL         ;
 $A267 LD A,(DE)      ;
 $A268 INC DE         ;
 $A269 LD (HL),A      ;
 $A26A INC HL         ;
 $A26B LD A,(DE)      ;
 $A26C INC DE         ;
 $A26D LD (HL),A      ;
 $A26E INC HL         ;
 $A26F DJNZ $A25B     ;
 $A271 RET            ;
*$A272 XOR A          ;
 $A273 LD ($5E69),A   ;
 $A276 LD A,($5E7B)   ;
 $A279 DEC A          ;
 $A27A LD ($5E7B),A   ;
 $A27D CALL $B8F2     ;
 $A280 LD IX,$AA4B    ;
 $A284 LD B,$10       ;
*$A286 PUSH BC        ;
 $A287 CALL $A993     ;
 $A28A LD BC,$0005    ;
 $A28D ADD IX,BC      ;
 $A28F POP BC         ;
 $A290 DJNZ $A286     ;
 $A292 LD A,($5E69)   ;
 $A295 AND A          ;
 $A296 JR NZ,$A272    ;
 $A298 RET            ;
*$A299 DI             ;
 $A29A LD DE,$BA2A    ;
 $A29D CALL $B9BC     ;
 $A2A0 RST $38        ;
 $A2A1 XOR A          ;
 $A2A2 LD ($5E7B),A   ;
 $A2A5 CALL $A253     ;
 $A2A8 CALL $A272     ;
 $A2AB LD IX,$6078    ;
 $A2AF CALL $8640     ;
 $A2B2 CALL $A253     ;
 $A2B5 CALL $A272     ;
 $A2B8 CALL $A317     ;
 $A2BB LD A,$01       ;
 $A2BD LD ($5E68),A   ;
 $A2C0 CALL $A2F5     ;
 $A2C3 CALL $B3A3     ;
 $A2C6 CALL $8BA5     ;
 $A2C9 CALL $9356     ;
 $A2CC JP $81E1       ;
; This entry point is used by the routine at #R$81BB.
*$A2CF LD A,($607C)   ;
 $A2D2 SUB $0C        ;
 $A2D4 LD ($5E6A),A   ;
 $A2D7 CALL $A253     ;
 $A2DA CALL $AA9B     ;
 $A2DD CALL $AB2F     ;
 $A2E0 XOR A          ;
 $A2E1 LD ($5E7B),A   ;
 $A2E4 CALL $AB9D     ;
 $A2E7 CALL $AB48     ;
 $A2EA CALL $AB9D     ;
 $A2ED CALL $AB48     ;
 $A2F0 XOR A          ;
 $A2F1 LD ($5E68),A   ;
 $A2F4 RET            ;
; This entry point is used by the routines at #R$A826 and #R$B52E.
*$A2F5 LD HL,$6009    ;
 $A2F8 LD BC,$0718    ;
 $A2FB LD DE,$0011    ;
*$A2FE PUSH BC        ;
*$A2FF LD (HL),$00    ;
 $A301 INC HL         ;
 $A302 DJNZ $A2FF     ;
 $A304 ADD HL,DE      ;
 $A305 POP BC         ;
 $A306 DEC C          ;
 $A307 JR NZ,$A2FE    ;
 $A309 RET            ;
*$A30A LD HL,($60C2)  ;
 $A30D LD A,($60C4)   ;
 $A310 JP $A232       ;
 $A313 LD B,A         ;
 $A314 LD B,H         ;
 $A315 LD B,L         ;
 $A316 LD B,(HL)      ;
; This entry point is used by the routines at #R$A826 and #R$B52E.
*$A317 LD HL,$6000    ;
 $A31A LD DE,$0018    ;
 $A31D LD B,$04       ;
*$A31F LD (HL),$00    ;
 $A321 ADD HL,DE      ;
 $A322 DJNZ $A31F     ;
 $A324 RET            ;

; Routine at A325
c$A325 CALL $945C      ;
 $A328 JR NZ,$A32E     ;
 $A32A RES 1,(IX+$08)  ;
*$A32E BIT 2,(IX+$08)  ;
 $A332 JP NZ,$A3FF     ;
 $A335 BIT 0,(IX+$08)  ;
 $A339 JP NZ,$A3C1     ;
 $A33C CALL $A522      ;
 $A33F LD A,($5EA3)    ;
 $A342 AND A           ;
 $A343 JR NZ,$A34A     ;
 $A345 CALL $A4BA      ;
 $A348 JR C,$A39C      ;
*$A34A BIT 1,(IX+$08)  ;
 $A34E JR NZ,$A375     ;
 $A350 CALL $945C      ;
 $A353 JR Z,$A375      ;
 $A355 LD A,($6078)    ;
 $A358 CP $11          ;
 $A35A JR NC,$A375     ;
 $A35C CALL $A4FC      ;
 $A35F JR NC,$A375     ;
 $A361 LD HL,$6080     ;
 $A364 BIT 0,(HL)      ;
 $A366 JR NZ,$A375     ;
 $A368 SET 0,(HL)      ;
 $A36A SET 0,(IX+$08)  ;
 $A36E SET 1,(IX+$08)  ;
 $A372 CALL $B8BD      ;
*$A375 JP $ABB4        ;
*$A378 RES 0,(IX+$08)  ;
 $A37C SET 1,(IX+$08)  ;
 $A380 LD HL,$6080     ;
 $A383 RES 0,(HL)      ;
 $A385 LD A,($607D)    ;
 $A388 SRA A           ;
 $A38A SRA A           ;
 $A38C SRA A           ;
 $A38E SRA A           ;
 $A390 LD (IX+$05),A   ;
 $A393 LD (IX+$06),$01 ;
 $A397 CALL $B8C3      ;
 $A39A JR $A375        ;
*$A39C SET 2,(IX+$08)  ;
 $A3A0 LD A,$01        ;
 $A3A2 LD ($5EA3),A    ;
 $A3A5 LD A,($6090)    ;
 $A3A8 CP $22          ;
 $A3AA LD A,$00        ;
 $A3AC JR C,$A3B0      ;
 $A3AE ADD A,$08       ;
*$A3B0 XOR (IX+$00)    ;
 $A3B3 AND $08         ;
 $A3B5 LD C,A          ;
 $A3B6 LD A,(IX+$08)   ;
 $A3B9 AND $F7         ;
 $A3BB OR C            ;
 $A3BC LD (IX+$08),A   ;
 $A3BF JR $A375        ;
*$A3C1 CALL $945C      ;
 $A3C4 JR Z,$A3D3      ;
 $A3C6 BIT 1,(IX+$08)  ;
 $A3CA JR NZ,$A3D3     ;
 $A3CC CALL $91BB      ;
 $A3CF LD A,D          ;
 $A3D0 AND A           ;
 $A3D1 JR NZ,$A378     ;
*$A3D3 LD A,($6078)    ;
 $A3D6 DEC A           ;
 $A3D7 AND $04         ;
 $A3D9 JR NZ,$A3F9     ;
 $A3DB RES 3,(IX+$00)  ;
*$A3DF LD HL,($607A)   ;
 $A3E2 LD (IX+$02),L   ;
 $A3E5 LD (IX+$03),H   ;
 $A3E8 LD A,($607C)    ;
 $A3EB ADD A,$08       ;
 $A3ED CP $AF          ;
 $A3EF JR C,$A3F3      ;
 $A3F1 LD A,$AF        ;
*$A3F3 LD (IX+$04),A   ;
 $A3F6 JP $A375        ;
*$A3F9 SET 3,(IX+$00)  ;
 $A3FD JR $A3DF        ;
*$A3FF LD A,($6090)    ;
 $A402 SUB $1A         ;
 $A404 CP $10          ;
 $A406 JR NC,$A45A     ;
 $A408 BIT 1,(IX+$08)  ;
 $A40C JR NZ,$A431     ;
 $A40E CALL $945C      ;
 $A411 JR Z,$A431      ;
 $A413 CALL $A4FC      ;
 $A416 JR NC,$A431     ;
 $A418 XOR A           ;
 $A419 LD ($5EA3),A    ;
 $A41C LD A,($6080)    ;
 $A41F OR $01          ;
 $A421 LD ($6080),A    ;
 $A424 LD A,(IX+$08)   ;
 $A427 AND $F0         ;
 $A429 OR $03          ;
 $A42B LD (IX+$08),A   ;
 $A42E CALL $B8BD      ;
; This entry point is used by the routines at #R$A0F8 and #R$B6CF.
*$A431 LD A,($6090)    ;
 $A434 CP $22          ;
 $A436 JR C,$A450      ;
 $A438 LD BC,$FFF4     ;
*$A43B LD HL,($6092)   ;
; This entry point is used by the routines at #R$A0F8 and #R$B6CF.
*$A43E ADD HL,BC       ;
 $A43F LD (IX+$02),L   ;
 $A442 LD (IX+$03),H   ;
 $A445 LD A,($6094)    ;
 $A448 SUB $16         ;
 $A44A LD (IX+$04),A   ;
 $A44D JP $ABB4        ;
*$A450 LD BC,$0012     ;
 $A453 JR $A43B        ;
*$A455 CALL $A48D      ;
 $A458 JR $A46F        ;
*$A45A CALL $A579      ;
 $A45D LD A,($5E42)    ;
 $A460 AND $01         ;
 $A462 JR NZ,$A46F     ;
 $A464 CALL $8F90      ;
 $A467 LD D,A          ;
 $A468 BIT 3,D         ;
 $A46A JR Z,$A455      ;
 $A46C CALL $A4A0      ;
*$A46F LD A,($6078)    ;
 $A472 CP $16          ;
 $A474 JR C,$A483      ;
 $A476 LD A,$08        ;
 $A478 CALL $A4AA      ;
 $A47B LD BC,$FFF4     ;
*$A47E LD HL,($607A)   ;
 $A481 JR $A43E        ;
*$A483 LD A,$00        ;
 $A485 CALL $A4AA      ;
 $A488 LD BC,$0012     ;
 $A48B JR $A47E        ;
*$A48D LD A,(IX+$00)   ;
 $A490 LD C,A          ;
 $A491 AND $07         ;
 $A493 CP $07          ;
 $A495 RET Z           ;
 $A496 INC A           ;
*$A497 LD B,A          ;
 $A498 LD A,C          ;
 $A499 AND $F8         ;
 $A49B OR B            ;
 $A49C LD (IX+$00),A   ;
 $A49F RET             ;
*$A4A0 LD A,(IX+$00)   ;
 $A4A3 LD C,A          ;
 $A4A4 AND $07         ;
 $A4A6 RET Z           ;
 $A4A7 DEC A           ;
 $A4A8 JR $A497        ;
*$A4AA XOR (IX+$08)    ;
 $A4AD AND $08         ;
 $A4AF LD C,A          ;
 $A4B0 LD A,(IX+$00)   ;
 $A4B3 AND $F7         ;
 $A4B5 OR C            ;
 $A4B6 LD (IX+$00),A   ;
 $A4B9 RET             ;
; This entry point is used by the routines at #R$A1AA and #R$B7BC.
*$A4BA LD L,(IX+$02)   ;
 $A4BD LD H,(IX+$03)   ;
 $A4C0 ADD HL,HL       ;
 $A4C1 ADD HL,HL       ;
 $A4C2 ADD HL,HL       ;
 $A4C3 LD C,L          ;
 $A4C4 LD B,H          ;
 $A4C5 LD HL,($6092)   ;
 $A4C8 ADD HL,HL       ;
 $A4C9 ADD HL,HL       ;
 $A4CA ADD HL,HL       ;
 $A4CB AND A           ;
 $A4CC SBC HL,BC       ;
 $A4CE LD A,H          ;
 $A4CF AND A           ;
 $A4D0 JP P,$A4D6      ;
 $A4D3 CALL $8947      ;
*$A4D6 LD BC,$00C0     ;
 $A4D9 AND A           ;
 $A4DA SBC HL,BC       ;
 $A4DC RET NC          ;
 $A4DD LD A,($6094)    ;
 $A4E0 DEC A           ;
 $A4E1 SUB (IX+$04)    ;
 $A4E4 CP $16          ;
 $A4E6 RET             ;
; This entry point is used by the routines at #R$B6CF and #R$B785.
*$A4E7 LD A,($6078)    ;
 $A4EA CP $11          ;
 $A4EC RET NC          ;
 $A4ED CALL $945C      ;
 $A4F0 RET Z           ;
 $A4F1 LD A,($6080)    ;
 $A4F4 AND $01         ;
 $A4F6 RET NZ          ;
 $A4F7 BIT 7,(IX+$08)  ;
 $A4FB RET NZ          ;
; This entry point is used by the routines at #R$A0F8 and #R$A1AA.
*$A4FC LD L,(IX+$02)   ;
 $A4FF LD H,(IX+$03)   ;
 $A502 LD BC,$0008     ;
 $A505 ADD HL,BC       ;
 $A506 LD BC,($607A)   ;
 $A50A AND A           ;
 $A50B SBC HL,BC       ;
 $A50D LD A,H          ;
 $A50E AND $1F         ;
 $A510 RET NZ          ;
 $A511 LD A,L          ;
 $A512 CP $10          ;
 $A514 RET NC          ;
 $A515 LD A,($607C)    ;
 $A518 SUB $08         ;
 $A51A SUB (IX+$04)    ;
 $A51D NEG             ;
 $A51F CP $18          ;
 $A521 RET             ;
; This entry point is used by the routine at #R$A1AA.
*$A522 CALL $B89A      ;
 $A525 CALL $B6AE      ;
 $A528 CP $AF          ;
 $A52A JR C,$A536      ;
 $A52C LD (IX+$06),$00 ;
 $A530 LD (IX+$05),$00 ;
 $A534 LD A,$AF        ;
*$A536 LD (IX+$04),A   ;
 $A539 RET             ;
; This entry point is used by the routine at #R$AD36.
*$A53A PUSH IX         ;
 $A53C POP HL          ;
 $A53D LD DE,$0018     ;
 $A540 ADD HL,DE       ;
 $A541 LD A,(HL)       ;
 $A542 AND A           ;
 $A543 RET NZ          ;
 $A544 LD (HL),$C8     ;
 $A546 INC HL          ;
 $A547 INC HL          ;
 $A548 EX DE,HL        ;
 $A549 LD A,($5E42)    ;
 $A54C LD C,A          ;
 $A54D LD A,($5E40)    ;
 $A550 ADD A,C         ;
 $A551 LD ($5E40),A    ;
 $A554 LD A,($5E40)    ;
 $A557 AND $3C         ;
 $A559 LD C,A          ;
 $A55A LD B,$00        ;
 $A55C LD HL,$A68B     ;
 $A55F ADD HL,BC       ;
 $A560 INC HL          ;
 $A561 INC HL          ;
 $A562 LD A,(IX+$02)   ;
 $A565 ADD A,$08       ;
 $A567 LD (DE),A       ;
 $A568 INC DE          ;
 $A569 LD A,(IX+$03)   ;
 $A56C ADC A,$00       ;
 $A56E AND $1F         ;
 $A570 LD (DE),A       ;
 $A571 INC DE          ;
 $A572 LD A,(IX+$04)   ;
 $A575 SUB $10         ;
 $A577 JR $A5C8        ;
*$A579 LD A,($5E42)    ;
 $A57C AND $03         ;
 $A57E RET NZ          ;
 $A57F CALL $8F90      ;
 $A582 BIT 4,A         ;
 $A584 RET NZ          ;
 $A585 LD HL,$6000     ;
 $A588 LD DE,$0018     ;
 $A58B LD B,$02        ;
*$A58D LD A,(HL)       ;
 $A58E AND A           ;
 $A58F JR Z,$A595      ;
 $A591 ADD HL,DE       ;
 $A592 DJNZ $A58D      ;
 $A594 RET             ;
*$A595 PUSH HL         ;
 $A596 CALL $B960      ;
 $A599 POP HL          ;
 $A59A LD (HL),$58     ;
 $A59C INC HL          ;
 $A59D INC HL          ;
 $A59E EX DE,HL        ;
 $A59F LD A,(IX+$00)   ;
 $A5A2 RLCA            ;
 $A5A3 RLCA            ;
 $A5A4 AND $3C         ;
 $A5A6 LD C,A          ;
 $A5A7 LD B,$00        ;
 $A5A9 LD HL,$A68B     ;
 $A5AC ADD HL,BC       ;
 $A5AD LD A,(HL)       ;
 $A5AE LD B,$00        ;
 $A5B0 AND A           ;
 $A5B1 JP P,$A5B5      ;
 $A5B4 DEC B           ;
*$A5B5 ADD A,(IX+$02)  ;
 $A5B8 INC HL          ;
 $A5B9 LD (DE),A       ;
 $A5BA INC DE          ;
 $A5BB LD A,(IX+$03)   ;
 $A5BE ADC A,B         ;
 $A5BF AND $1F         ;
 $A5C1 LD (DE),A       ;
 $A5C2 INC DE          ;
 $A5C3 LD A,(IX+$04)   ;
 $A5C6 ADD A,(HL)      ;
 $A5C7 INC HL          ;
*$A5C8 LD (DE),A       ;
 $A5C9 INC DE          ;
 $A5CA LD A,(HL)       ;
 $A5CB INC HL          ;
 $A5CC LD (DE),A       ;
 $A5CD INC DE          ;
 $A5CE LD A,(HL)       ;
 $A5CF INC HL          ;
 $A5D0 LD (DE),A       ;
 $A5D1 INC DE          ;
 $A5D2 LD A,($5E40)    ;
 $A5D5 AND $03         ;
 $A5D7 LD BC,$A5EF     ;
 $A5DA ADD A,C         ;
 $A5DB LD C,A          ;
 $A5DC LD A,B          ;
 $A5DD ADC A,$00       ;
 $A5DF LD B,A          ;
 $A5E0 LD A,(BC)       ;
 $A5E1 LD (DE),A       ;
 $A5E2 INC DE          ;
 $A5E3 LD A,$20        ;
 $A5E5 LD (DE),A       ;
 $A5E6 INC DE          ;
 $A5E7 LD B,$0F        ;
 $A5E9 XOR A           ;
*$A5EA LD (DE),A       ;
 $A5EB INC DE          ;
 $A5EC DJNZ $A5EA      ;
 $A5EE RET             ;
 $A5EF LD B,H          ;
 $A5F0 LD B,L          ;
 $A5F1 LD B,(HL)       ;
 $A5F2 LD B,A          ;
*$A5F3 ADD A,(IX+$10)  ;
 $A5F6 LD C,A          ;
 $A5F7 AND $0F         ;
 $A5F9 LD (IX+$10),A   ;
 $A5FC LD A,C          ;
 $A5FD RRCA            ;
 $A5FE RRCA            ;
 $A5FF RRCA            ;
 $A600 RRCA            ;
 $A601 AND $0F         ;
 $A603 LD B,$00        ;
 $A605 JR $A63E        ;
*$A607 ADD A,(IX+$11)  ;
 $A60A LD C,A          ;
 $A60B AND $0F         ;
 $A60D LD (IX+$11),A   ;
 $A610 LD A,C          ;
 $A611 RRCA            ;
 $A612 RRCA            ;
 $A613 RRCA            ;
 $A614 RRCA            ;
 $A615 AND $0F         ;
 $A617 JR $A66A        ;
 $A619 DEC (IX+$08)    ;
 $A61C JP Z,$A73C      ;
 $A61F LD A,(IX+$05)   ;
 $A622 AND A           ;
 $A623 JP P,$A5F3      ;
 $A626 ADD A,(IX+$10)  ;
 $A629 LD C,A          ;
 $A62A AND $0F         ;
 $A62C NEG             ;
 $A62E LD (IX+$10),A   ;
 $A631 LD A,C          ;
 $A632 NEG             ;
 $A634 RRCA            ;
 $A635 RRCA            ;
 $A636 RRCA            ;
 $A637 RRCA            ;
 $A638 AND $0F         ;
 $A63A NEG             ;
 $A63C LD B,$FF        ;
*$A63E ADD A,(IX+$02)  ;
 $A641 LD (IX+$02),A   ;
 $A644 LD A,(IX+$03)   ;
 $A647 ADC A,B         ;
 $A648 AND $1F         ;
 $A64A LD (IX+$03),A   ;
 $A64D LD A,(IX+$06)   ;
 $A650 AND A           ;
 $A651 JP P,$A607      ;
 $A654 ADD A,(IX+$11)  ;
 $A657 LD C,A          ;
 $A658 AND $0F         ;
 $A65A NEG             ;
 $A65C LD (IX+$11),A   ;
 $A65F LD A,C          ;
 $A660 NEG             ;
 $A662 RRCA            ;
 $A663 RRCA            ;
 $A664 RRCA            ;
 $A665 RRCA            ;
 $A666 AND $0F         ;
 $A668 NEG             ;
*$A66A ADD A,(IX+$04)  ;
 $A66D CP $AF          ;
 $A66F JP NC,$A73C     ;
 $A672 CP $30          ;
 $A674 JP C,$A73C      ;
 $A677 LD (IX+$04),A   ;
 $A67A LD A,(IX+$00)   ;
 $A67D XOR $01         ;
 $A67F LD (IX+$00),A   ;
 $A682 CALL $8B73      ;
 $A685 CALL $8733      ;
 $A688 JP $A6CB        ;
 $A68B RET M           ;
 $A68C CALL M,$00C0    ;
 $A68F RET M           ;
 $A690 LD SP,HL        ;
 $A691 CALL NZ,$F9FA   ;
 $A694 OR $C7          ;
 $A696 EX (SP),HL      ;
 $A697 LD SP,HL        ;
 $A698 CALL P,$DECA    ;
 $A69B CALL M,$D3F2    ;
 $A69E OUT ($FF),A     ;
 $A6A0 RET P           ;
 $A6A1 IN A,($CC)      ;
 $A6A3 LD BC,$E3F0     ;
 $A6A6 RST $00         ;
 $A6A7 INC BC          ;
 $A6A8 XOR $EA         ;
*$A6AA CALL NZ,$FC10   ;
 $A6AD LD B,B          ;
 $A6AE NOP             ;
 $A6AF DJNZ $A6AA      ;
 $A6B1 INC A           ;
 $A6B2 JP M,$F510      ;
 $A6B5 ADD HL,SP       ;
 $A6B6 EX (SP),HL      ;
 $A6B7 RRCA            ;
 $A6B8 DI              ;
 $A6B9 LD (HL),$DE     ;
 $A6BB INC C           ;
 $A6BC JP P,$D32D      ;
 $A6BF ADD HL,BC       ;
 $A6C0 RET P           ;
 $A6C1 DEC H           ;
 $A6C2 CALL Z,$EF08    ;
 $A6C5 DEC E           ;
 $A6C6 RST $00         ;
 $A6C7 DEC B           ;
 $A6C8 DEFB $ED,$16    ;
 $A6CA CALL NZ,$183E   ;
 $A6CD LD ($A726),A    ;
 $A6D0 LD HL,$61B0     ;
 $A6D3 LD DE,$0018     ;
 $A6D6 LD B,$06        ;
 $A6D8 CALL $A6F2      ;
 $A6DB LD A,$0C        ;
 $A6DD LD ($A726),A    ;
 $A6E0 LD HL,$6108     ;
 $A6E3 LD B,$01        ;
 $A6E5 CALL $A6F2      ;
 $A6E8 LD A,$18        ;
 $A6EA LD ($A726),A    ;
 $A6ED LD HL,$6138     ;
 $A6F0 LD B,$01        ;
*$A6F2 LD A,(HL)       ;
 $A6F3 AND A           ;
 $A6F4 PUSH BC         ;
 $A6F5 PUSH DE         ;
 $A6F6 PUSH HL         ;
 $A6F7 CALL NZ,$A701   ;
 $A6FA POP HL          ;
 $A6FB POP DE          ;
 $A6FC POP BC          ;
 $A6FD ADD HL,DE       ;
 $A6FE DJNZ $A6F2      ;
 $A700 RET             ;
*$A701 INC HL          ;
 $A702 INC HL          ;
 $A703 EX DE,HL        ;
 $A704 LD A,(DE)       ;
 $A705 INC DE          ;
 $A706 LD C,A          ;
 $A707 LD A,(DE)       ;
 $A708 INC DE          ;
 $A709 LD B,A          ;
 $A70A LD HL,$0008     ;
 $A70D ADD HL,BC       ;
 $A70E LD C,(IX+$02)   ;
 $A711 LD B,(IX+$03)   ;
 $A714 AND A           ;
 $A715 SBC HL,BC       ;
 $A717 LD A,H          ;
 $A718 AND $1F         ;
 $A71A RET NZ          ;
 $A71B LD A,L          ;
 $A71C CP $10          ;
 $A71E RET NC          ;
 $A71F LD A,(DE)       ;
 $A720 ADD A,$04       ;
 $A722 SUB (IX+$04)    ;
 $A725 CP $18          ;
 $A727 RET NC          ;
 $A728 EX DE,HL        ;
 $A729 LD BC,$000C     ;
 $A72C ADD HL,BC       ;
 $A72D SET 0,(HL)      ;
 $A72F CALL $8AE8      ;
 $A732 LD (IX+$00),$00 ;
 $A736 POP HL          ;
 $A737 POP HL          ;
 $A738 POP HL          ;
 $A739 POP HL          ;
 $A73A POP HL          ;
 $A73B RET             ;
; This entry point is used by the routines at #R$970E and #R$AD36.
*$A73C LD (IX+$00),$64 ;
 $A740 JR $A772        ;
 $A742 CALL $8B73      ;
 $A745 CALL $8733      ;
 $A748 INC (IX+$00)    ;
 $A74B RET             ;
 $A74C LD A,(IX+$0A)   ;
 $A74F AND A           ;
 $A750 JR Z,$A755      ;
 $A752 CALL $B8FF      ;
*$A755 CALL $8AE8      ;
 $A758 LD (IX+$00),$00 ;
 $A75C RET             ;
; This entry point is used by the routine at #R$B37B.
*$A75D CALL $B973      ;
 $A760 LD (IX+$00),$C0 ;
 $A764 JR $A772        ;
; This entry point is used by the routine at #R$9531.
*$A766 BIT 0,(IX+$10)  ;
 $A76A RET Z           ;
; This entry point is used by the routines at #R$9531 and #R$AD36.
*$A76B LD (IX+$00),$5C ;
 $A76F CALL $B9A1      ;
*$A772 LD A,($5E40)    ;
 $A775 AND $03         ;
 $A777 LD C,A          ;
 $A778 LD B,$00        ;
 $A77A LD HL,$A792     ;
 $A77D ADD HL,BC       ;
 $A77E LD A,(HL)       ;
 $A77F LD (IX+$07),A   ;
 $A782 RET             ;
 $A783 CALL $ABB4      ;
 $A786 INC (IX+$00)    ;
 $A789 RET             ;
 $A78A CALL $8640      ;
 $A78D LD (IX+$00),$00 ;
 $A791 RET             ;
 $A792 LD B,L          ;
 $A793 LD B,(HL)       ;
 $A794 LD B,A          ;
 $A795 LD B,(HL)       ;
; This entry point is used by the routine at #R$9E2C.
*$A796 LD HL,$61B0     ;
 $A799 LD DE,$0018     ;
 $A79C LD B,$06        ;
 $A79E CALL $A7CB      ;
 $A7A1 LD HL,$6108     ;
 $A7A4 LD B,$01        ;
 $A7A6 CALL $A7CB      ;
 $A7A9 LD HL,$6138     ;
 $A7AC LD B,$01        ;
 $A7AE CALL $A7CB      ;
 $A7B1 LD HL,$6120     ;
 $A7B4 LD A,(HL)       ;
 $A7B5 SUB $C8         ;
 $A7B7 CP $04          ;
 $A7B9 JR NC,$A7C0     ;
 $A7BB LD B,$01        ;
 $A7BD CALL $A7CB      ;
*$A7C0 LD HL,$6150     ;
 $A7C3 LD A,(HL)       ;
 $A7C4 SUB $C8         ;
 $A7C6 CP $04          ;
 $A7C8 RET NC          ;
 $A7C9 LD B,$01        ;
*$A7CB LD A,(HL)       ;
 $A7CC AND A           ;
 $A7CD JR Z,$A7DE      ;
 $A7CF BIT 2,(IX+$02)  ;
 $A7D3 JR Z,$A7DE      ;
 $A7D5 PUSH BC         ;
 $A7D6 PUSH DE         ;
 $A7D7 PUSH HL         ;
 $A7D8 CALL $A7E2      ;
 $A7DB POP HL          ;
 $A7DC POP DE          ;
 $A7DD POP BC          ;
*$A7DE ADD HL,DE       ;
 $A7DF DJNZ $A7CB      ;
 $A7E1 RET             ;
*$A7E2 INC HL          ;
 $A7E3 INC HL          ;
 $A7E4 EX DE,HL        ;
 $A7E5 LD A,(DE)       ;
 $A7E6 INC DE          ;
 $A7E7 LD C,A          ;
 $A7E8 LD A,(DE)       ;
 $A7E9 INC DE          ;
 $A7EA LD B,A          ;
 $A7EB LD HL,$0090     ;
 $A7EE ADD HL,BC       ;
 $A7EF LD BC,($607A)   ;
 $A7F3 LD A,C          ;
 $A7F4 ADD A,(IX+$02)  ;
 $A7F7 LD C,A          ;
 $A7F8 LD A,B          ;
 $A7F9 ADC A,$00       ;
 $A7FB LD B,A          ;
 $A7FC AND A           ;
 $A7FD SBC HL,BC       ;
 $A7FF LD A,H          ;
 $A800 AND $1F         ;
 $A802 RET NZ          ;
 $A803 LD A,L          ;
 $A804 CP $20          ;
 $A806 RET NC          ;
 $A807 LD A,(DE)       ;
 $A808 ADD A,$04       ;
 $A80A SUB (IX+$01)    ;
 $A80D CP $18          ;
 $A80F RET NC          ;
 $A810 EX DE,HL        ;
 $A811 LD BC,$000C     ;
 $A814 ADD HL,BC       ;
 $A815 SET 0,(HL)      ;
 $A817 RES 2,(IX+$02)  ;
 $A81B RET             ;
 $A81C CALL $8B73      ;
 $A81F CALL $8733      ;
 $A822 INC (IX+$00)    ;
 $A825 RET             ;

; Initialise New Level
;
; Used by the routine at #R$81BB.
@label=LevelNew
c$A826 LD HL,$5EA1   ; {Increase the lives counter #R$5EA1 by one.
 $A829 INC (HL)      ; }
; This entry point is used by the routine at #R$A8B5.
@label=LevelInitialisation
*$A82A CALL $B385    ; Call #R$B385.
 $A82D CALL $9020    ; Call #R$9020.
 $A830 CALL $84D8    ; Call #R$84D8.
 $A833 CALL $A2F5    ; Call #R$A2F5.
 $A836 CALL $A317    ; Call #R$A317.
 $A839 CALL $894F    ; Call #R$894F.
 $A83C CALL $9356    ; Call #R$9356.
 $A83F CALL $8BBB    ; Call #R$8BBB.
 $A842 CALL $B2F9    ; Call #R$B2F9.
 $A845 LD A,($5C78)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $A848 LD ($5E53),A  ; Write #REGa to #R$5E53.
 $A84B RET           ; Return.

; Initialise New Game
;
; Used by the routine at #R$81BB.
@label=NewGame
c$A84C LD B,$02      ; #REGb=#N$02 (counter for our two players).
@label=NewGame_Loop
*$A84E PUSH BC       ; Stash the counter in #REGbc on the stack.
; Handle setting up 1UP player.
 $A84F LD A,$FF      ; {Write 1UP starting fuel to #R$5EA0.
 $A851 LD ($5EA0),A  ; }
 $A854 LD A,$04      ; {Write 1UP starting lives to #R$5EA1.
 $A856 LD ($5EA1),A  ; }
 $A859 XOR A         ; {Write #N$00 to; #LIST { #R$5EA2 } { #R$5EA3 } LIST#
 $A85A LD ($5EA2),A  ;
 $A85D LD ($5EA3),A  ; }
 $A860 CALL $B3DC    ; Call #R$B3DC.
 $A863 CALL $9F5E    ; Call #R$9F5E.
 $A866 CALL $A880    ; Call #R$A880.
 $A869 POP BC        ; Restore #REGbc from the stack.
 $A86A DJNZ $A84E    ; Decrease counter by one and loop back to #R$A84E until
                     ; counter is zero.
; Handle setting up 2UP player.
 $A86C LD A,$05      ; {Write 2UP starting lives to #R$5EA5.
 $A86E LD ($5EA5),A  ; }
 $A871 LD A,$FF      ; {Write 2UP starting fuel to #R$5EA4.
 $A873 LD ($5EA4),A  ; }
 $A876 LD A,($5E00)  ; #REGa=#R$5E00.
 $A879 AND %00000001 ; Keep only bit 0.
 $A87B RET NZ        ; Return if #R$5E00 indicates this is a 1 player only
                     ; game.
 $A87C LD ($5EA5),A  ; Write #REGa to #R$5EA5.
 $A87F RET           ; Return.

; Routine at A880
;
; Used by the routines at #R$A84C and #R$A8B5.
c$A880 LD HL,$5EA0   ; #REGhl=#R$5EA0.
 $A883 LD DE,$5EA4   ; #REGde=#R$5EA4.
 $A886 LD B,$04      ; #REGb=#N$04.
*$A888 LD A,(DE)     ;
 $A889 LD C,(HL)     ;
 $A88A LD (HL),A     ;
 $A88B LD A,C        ;
 $A88C LD (DE),A     ;
 $A88D INC HL        ;
 $A88E INC DE        ;
 $A88F DJNZ $A888    ;
 $A891 LD HL,$7000   ; #REGhl=#R$7000.
 $A894 LD DE,$7400   ; #REGde=#R$7400.
 $A897 LD BC,$0400   ; #REGbc=#N$0400.
 $A89A CALL $A8A6    ; Call #R$A8A6.
 $A89D LD HL,$6090   ; #REGhl=#R$6090.
 $A8A0 LD DE,$6240   ; #REGde=#R$6240.
 $A8A3 LD BC,$0120   ; #REGbc=#N$0120.
*$A8A6 PUSH BC       ; Stash #REGbc on the stack.
 $A8A7 LD A,(DE)     ; #REGa=fetch byte from #REGde.
 $A8A8 LD C,(HL)     ; #REGc=fetch byte from #REGhl.
 $A8A9 LD (HL),A     ; {Write the byte from #REGde to #REGhl, and the byte from
 $A8AA LD A,C        ; #REGhl to #REGde.
 $A8AB LD (DE),A     ; }
 $A8AC INC HL        ; Increment #REGhl by one.
 $A8AD INC DE        ; Increment #REGde by one.
 $A8AE POP BC        ; Restore #REGbc from the stack.
 $A8AF DEC BC        ; Decrease #REGbc by one.
 $A8B0 LD A,B        ; {Jump back to #R$A8A6 until #REGbc is zero.
 $A8B1 OR C          ;
 $A8B2 JR NZ,$A8A6   ; }
 $A8B4 RET           ; Return.

; Routine at A8B5
;
; Used by the routine at #R$B390.
c$A8B5 LD A,($5E00)  ; #REGa=#R$5E00.
 $A8B8 AND %00000001 ; Keep only bit 0.
 $A8BA JR NZ,$A8C5   ;
*$A8BC LD A,($5EA1)  ; {Jump to #R$A939 if #R$5EA1 is zero.
 $A8BF AND A         ;
 $A8C0 JR Z,$A939    ; }
 $A8C2 JP $A82A      ; Jump to #R$A82A.
*$A8C5 LD A,($5EA5)  ; {Jump to #R$A8BC if #R$5EA5 is zero.
 $A8C8 AND A         ;
 $A8C9 JR Z,$A8BC    ; }
 $A8CB LD A,($5EA1)  ; {Call #R$A931 if #R$5EA1 is zero.
 $A8CE AND A         ;
 $A8CF CALL Z,$A931  ; }
 $A8D2 CALL $A880    ; Call #R$A880.
 $A8D5 XOR A         ; {Write #N$00 to #R$5E6C.
 $A8D6 LD ($5E6C),A  ; }
 $A8D9 LD A,($5E65)  ; #REGa=#R$5E65.
 $A8DC CPL           ; Flip the bits.
 $A8DD LD ($5E65),A  ; Write the result back to #R$5E65.
 $A8E0 JP $A82A      ; Jump to #R$A82A.

; Game Over
;
; .
;
; .
;
; #HTML(Set up altering the "#FONT:(GAME OVER PLAYER
; 0)addr=$D347,attr=$47(game-over-0up)" message for 1UP.)
@label=GameOver_1UP_Messaging
c$A8E3 LD A,"1"+$80  ; #REGa="1" + #N$80 (escape character).
; Print the altered messaging and pause to show it for a period of time.
@label=GameOver_Write
*$A8E5 LD ($A95D),A  ; Write ASCII player number to #R$A94C(#N$A95D).
 $A8E8 CALL $84D8    ; Call #R$84D8.
; Handle printing "#FONT:(GAME OVER PLAYER X)addr=$D347,attr=$47(game-over)"
; messaging.
 $A8EB LD DE,$A94B   ; #REGde=#R$A94B.
 $A8EE LD HL,$7038   ; #REGhl=#N$7038 (screen location).
 $A8F1 CALL $8A11    ; Call #R$8A11.
 $A8F4 LD DE,$B9D2   ; #REGde=#R$B9D2.
 $A8F7 CALL $B9BC    ; Call #R$B9BC.
; Set a lower delay period for the following test.
 $A8FA LD B,$04      ; #REGb=#N$04 (delay loop counter).
 $A8FC LD A,($6090)  ; {#REGa=#R$6090-#N$1A.
 $A8FF SUB $1A       ; }
 $A901 CP $10        ; {If the lunar rover was not destroyed, jump straight to
 $A903 JR C,$A922    ; #R$A922.}
; Handle printing "#FONT:(YOUR LUNAR ROVER HAS
; BEEN)addr=$D347,attr=$45(lunar-rover)" messaging.
 $A905 LD DE,$A95E   ; #REGde=#R$A95E.
 $A908 LD HL,$3818   ; #REGhl=#N$3818 (screen location).
 $A90B CALL $8A11    ; Call #R$8A11.
; Handle printing "#FONT:(DESTROYED.)addr=$D347,attr=$45(destroyed)" messaging.
 $A90E LD DE,$A979   ; #REGde=#R$A979.
 $A911 LD HL,$4858   ; #REGhl=#N$4858 (screen location).
 $A914 CALL $8A11    ; Call #R$8A11.
; Handle printing "#FONT:(ALL IS LOST.)addr=$D347,attr=$45(all-lost)"
; messaging.
 $A917 LD DE,$A985   ; #REGde=#R$A985.
 $A91A LD HL,$5850   ; #REGhl=#N$5850 (screen location).
 $A91D CALL $8A11    ; Call #R$8A11.
; Provide a pause for us to reflect that the game has now ended.
 $A920 LD B,$08      ; #REGb=#N$08 (delay loop counter).
@label=GameOverDelay
*$A922 LD HL,$0000   ; #REGhl=#N($0000,$04,$04).
; From #REGhl being set above, note that decrementing #N($0000,$04,$04) by one
; gives #N$FFFF.
@label=GameOverDelay_Loop
*$A925 DEC HL        ; Decrease #REGhl by one.
 $A926 LD A,H        ; {Jump back to #R$A925 until #REGhl is zero.
 $A927 OR L          ;
 $A928 JR NZ,$A925   ; }
 $A92A DJNZ $A925    ; Decrease delay loop counter by one and loop back to
                     ; #R$A925 until the counter is zero.
 $A92C RET           ; Return.
; #HTML(Set up altering the "#FONT:(GAME OVER PLAYER
; 0)addr=$D347,attr=$47(game-over-0up)" message for 2UP.)
@label=GameOver_2UP_Messaging
*$A92D LD A,"2"+$80  ; #REGa="2" + #N$80 (escape character).
 $A92F JR $A8E5      ; Jump to #R$A8E5.
; Handles checking if this is a 1UP or 2UP game.
@label=GameOver_Check_Player_1UP
*$A931 LD A,($5E65)  ; {If #R$5E65 is zero, jump to #R$A8E3.
 $A934 AND A         ;
 $A935 JR Z,$A8E3    ; }
 $A937 JR $A92D      ; Jump to #R$A92D.
; Handles checking if this is a 2UP or 1UP game.
@label=GameOver_Check_Player_2UP
*$A939 LD A,($5E65)  ; {If #R$5E65 is not zero, jump to #R$A945.
 $A93C AND A         ;
 $A93D JR NZ,$A945   ; }
 $A93F CALL $A8E3    ; Call #R$A8E3.
 $A942 JP $F56E      ; Jump to #R$F56E.
; Handle 2UP, and then check if this is a new high score.
@label=GameOver_2UP
*$A945 CALL $A92D    ; Call #R$A92D.
 $A948 JP $F56E      ; Jump to #R$F56E.
; View the equivalent code in;
; #LIST
; { #ATICATAC$8C35 }
; { #COOKIE$6BE0 }
; LIST#

; Messaging: Game Over
;
; .
;
; .
;
; #FONT:(GAME OVER PLAYER X)addr=$D347,attr=$47(game-over)
@label=String_GameOver
t$A94B DEFM $47                                 ; {Attribute: #N(#PEEK(#PC)) +
 $A94C DEFM "GAME OVER PLAYER ","0"+$80         ; "GAME OVER PLAYER X".}
; #FONT:(YOUR LUNAR ROVER HAS BEEN)addr=$D347,attr=$45(lunar-rover)
@label=String_Lunar_Rover
 $A95E DEFM $45                                 ; {Attribute: #N(#PEEK(#PC)) +
 $A95F DEFM "YOUR LUNAR ROVER HAS BEEN"," "+$80 ; "YOUR LUNAR ROVER HAS BEEN".}
; #FONT:(DESTROYED.)addr=$D347,attr=$45(destroyed)
@label=String_Destroyed
 $A979 DEFM $45                                 ; {Attribute: #N(#PEEK(#PC)) +
 $A97A DEFM "DESTROYED."," "+$80                ; "DESTROYED.".}
; #FONT:(ALL IS LOST.)addr=$D347,attr=$45(all-lost)
@label=String_All_Lost
 $A985 DEFM $45                                 ; {Attribute: #N(#PEEK(#PC)) +
 $A986 DEFM "ALL IS LOST."," "+$80              ; "ALL IS LOST.".}

; Routine at A993
;
; Used by the routine at #R$A1AA.
c$A993 LD A,(IX+$00)                        ;
 $A996 ADD A,(IX+$02)                       ;
 $A999 LD L,A                               ;
 $A99A LD A,(IX+$01)                        ;
 $A99D ADD A,(IX+$03)                       ;
 $A9A0 LD H,A                               ;
*$A9A1 LD A,L                               ;
 $A9A2 CP $08                               ;
 $A9A4 RET C                                ;
 $A9A5 CP $F8                               ;
 $A9A7 RET NC                               ;
 $A9A8 LD A,H                               ;
 $A9A9 CP $30                               ;
 $A9AB RET C                                ;
 $A9AC CP $A8                               ;
 $A9AE RET NC                               ;
 $A9AF LD (IX+$00),L                        ;
 $A9B2 LD (IX+$01),H                        ;
 $A9B5 LD A,($5E69)                         ;
 $A9B8 INC A                                ;
 $A9B9 LD ($5E69),A                         ;
 $A9BC LD BC,$0202                          ;
 $A9BF PUSH HL                              ;
 $A9C0 EXX                                  ;
 $A9C1 POP DE                               ;
 $A9C2 LD L,E                               ;
 $A9C3 LD H,D                               ;
 $A9C4 CALL $8506                           ;
 $A9C7 LD A,(HL)                            ;
 $A9C8 AND A                                ;
 $A9C9 JR Z,$A9CF                           ;
 $A9CB LD A,(IX+$04)                        ;
 $A9CE LD (HL),A                            ;
*$A9CF EXX                                  ;
 $A9D0 CALL $851E                           ;
*$A9D3 PUSH BC                              ;
 $A9D4 PUSH HL                              ;
 $A9D5 LD A,(IX+$00)                        ;
*$A9D8 AND $07                              ;
 $A9DA LD E,A                               ;
 $A9DB EX AF,AF'                            ;
 $A9DC LD A,E                               ;
 $A9DD LD DE,$AA13                          ;
 $A9E0 ADD A,E                              ;
 $A9E1 LD E,A                               ;
 $A9E2 LD A,D                               ;
 $A9E3 ADC A,$00                            ;
 $A9E5 LD D,A                               ;
 $A9E6 LD A,(DE)                            ;
 $A9E7 XOR (HL)                             ;
 $A9E8 LD (HL),A                            ;
 $A9E9 EX AF,AF'                            ;
 $A9EA INC A                                ;
 $A9EB AND $07                              ;
 $A9ED JR NZ,$AA10                          ;
 $A9EF INC L                                ;
 $A9F0 EXX                                  ;
 $A9F1 INC E                                ;
*$A9F2 LD L,E                               ;
 $A9F3 LD H,D                               ;
 $A9F4 EX AF,AF'                            ;
 $A9F5 CALL $8506                           ;
 $A9F8 LD A,(HL)                            ;
 $A9F9 AND A                                ;
 $A9FA JR Z,$AA00                           ;
 $A9FC LD A,(IX+$04)                        ;
 $A9FF LD (HL),A                            ;
*$AA00 EXX                                  ;
 $AA01 EX AF,AF'                            ;
 $AA02 DJNZ $A9D8                           ;
 $AA04 POP HL                               ;
 $AA05 CALL $85F6                           ;
 $AA08 EXX                                  ;
 $AA09 DEC D                                ;
 $AA0A EXX                                  ;
 $AA0B POP BC                               ;
 $AA0C DEC C                                ;
 $AA0D JR NZ,$A9D3                          ;
 $AA0F RET                                  ;
*$AA10 EXX                                  ;
 $AA11 JR $A9F2                             ;
 $AA13 ADD A,B                              ;
 $AA14 LD B,B                               ;
 $AA15 JR NZ,$AA27                          ;
 $AA17 EX AF,AF'                            ;
 $AA18 INC B                                ;
 $AA19 LD (BC),A                            ;
 $AA1A LD BC,$FE00                          ;
 $AA1D LD B,C                               ;
 $AA1E LD BC,$42FE                          ;
 $AA21 LD (BC),A                            ;
 $AA22 CP $43                               ;
 $AA24 LD (BC),A                            ;
 $AA25 RST $38                              ;
 $AA26 LD B,H                               ;
*$AA27 LD (BC),A                            ;
 $AA28 NOP                                  ;
 $AA29 LD B,L                               ;
 $AA2A LD (BC),A                            ;
 $AA2B LD BC,$0246                          ;
 $AA2E LD (BC),A                            ;
 $AA2F LD B,A                               ;
 $AA30 LD BC,$4602                          ;
 $AA33 NOP                                  ;
 $AA34 LD (BC),A                            ;
 $AA35 LD B,L                               ;
 $AA36 RST $38                              ;
 $AA37 LD (BC),A                            ;
 $AA38 LD B,H                               ;
 $AA39 CP $02                               ;
 $AA3B LD B,E                               ;
 $AA3C CP $01                               ;
 $AA3E LD B,D                               ;
 $AA3F CP $00                               ;
 $AA41 LD B,C                               ;
 $AA42 CP $FF                               ;
 $AA44 LD B,D                               ;
 $AA45 CP $FE                               ;
 $AA47 LD B,E                               ;
 $AA48 RST $38                              ;
 $AA49 CP $44                               ;
 $AA4B NOP                                  ;
 $AA4C NOP                                  ;
 $AA4D NOP                                  ;
 $AA4E NOP                                  ;
 $AA4F NOP                                  ;
 $AA50 NOP                                  ;
 $AA51 NOP                                  ;
 $AA52 NOP                                  ;
 $AA53 NOP                                  ;
 $AA54 NOP                                  ;
 $AA55 NOP                                  ;
 $AA56 NOP                                  ;
 $AA57 NOP                                  ;
 $AA58 NOP                                  ;
 $AA59 NOP                                  ;
 $AA5A NOP                                  ;
 $AA5B NOP                                  ;
 $AA5C NOP                                  ;
 $AA5D NOP                                  ;
 $AA5E NOP                                  ;
 $AA5F NOP                                  ;
 $AA60 NOP                                  ;
 $AA61 NOP                                  ;
 $AA62 NOP                                  ;
 $AA63 NOP                                  ;
 $AA64 NOP                                  ;
 $AA65 NOP                                  ;
 $AA66 NOP                                  ;
 $AA67 NOP                                  ;
 $AA68 NOP                                  ;
 $AA69 NOP                                  ;
 $AA6A NOP                                  ;
 $AA6B NOP                                  ;
 $AA6C NOP                                  ;
 $AA6D NOP                                  ;
 $AA6E NOP                                  ;
 $AA6F NOP                                  ;
 $AA70 NOP                                  ;
 $AA71 NOP                                  ;
 $AA72 NOP                                  ;
 $AA73 NOP                                  ;
 $AA74 NOP                                  ;
 $AA75 NOP                                  ;
 $AA76 NOP                                  ;
 $AA77 NOP                                  ;
 $AA78 NOP                                  ;
 $AA79 NOP                                  ;
 $AA7A NOP                                  ;
 $AA7B NOP                                  ;
 $AA7C NOP                                  ;
 $AA7D NOP                                  ;
 $AA7E NOP                                  ;
 $AA7F NOP                                  ;
 $AA80 NOP                                  ;
 $AA81 NOP                                  ;
 $AA82 NOP                                  ;
 $AA83 NOP                                  ;
 $AA84 NOP                                  ;
 $AA85 NOP                                  ;
 $AA86 NOP                                  ;
 $AA87 NOP                                  ;
 $AA88 NOP                                  ;
 $AA89 NOP                                  ;
 $AA8A NOP                                  ;
 $AA8B NOP                                  ;
 $AA8C NOP                                  ;
 $AA8D NOP                                  ;
 $AA8E NOP                                  ;
 $AA8F NOP                                  ;
 $AA90 NOP                                  ;
 $AA91 NOP                                  ;
 $AA92 NOP                                  ;
 $AA93 NOP                                  ;
 $AA94 NOP                                  ;
 $AA95 NOP                                  ;
 $AA96 NOP                                  ;
 $AA97 NOP                                  ;
 $AA98 NOP                                  ;
 $AA99 NOP                                  ;
 $AA9A NOP                                  ;
; This entry point is used by the routine at #R$A1AA.
*$AA9B XOR A                                ;
 $AA9C LD ($5E69),A                         ;
 $AA9F LD IX,$AA4B                          ;
 $AAA3 LD B,$10                             ;
*$AAA5 PUSH BC                              ;
 $AAA6 CALL $AAB8                           ;
 $AAA9 LD BC,$0005                          ;
 $AAAC ADD IX,BC                            ;
 $AAAE POP BC                               ;
 $AAAF DJNZ $AAA5                           ;
 $AAB1 LD A,($5E69)                         ;
 $AAB4 AND A                                ;
 $AAB5 JR NZ,$AA9B                          ;
 $AAB7 RET                                  ;
*$AAB8 LD A,(IX+$00)                        ;
 $AABB ADD A,(IX+$02)                       ;
 $AABE LD L,A                               ;
 $AABF LD A,(IX+$01)                        ;
 $AAC2 ADD A,(IX+$03)                       ;
 $AAC5 LD H,A                               ;
 $AAC6 LD A,L                               ;
 $AAC7 CP $08                               ;
 $AAC9 RET C                                ;
 $AACA CP $F8                               ;
 $AACC RET NC                               ;
 $AACD LD A,H                               ;
 $AACE CP $30                               ;
 $AAD0 RET C                                ;
 $AAD1 CP $A8                               ;
 $AAD3 RET NC                               ;
 $AAD4 LD (IX+$00),L                        ;
 $AAD7 LD (IX+$01),H                        ;
 $AADA LD HL,$5E69                          ;
 $AADD INC (HL)                             ;
 $AADE RET                                  ;
 $AADF DEFB $00,$00,$00,$02,$47,$00,$00,$FF ;
 $AAE7 DEFB $02,$42,$00,$00,$FE,$02,$44,$00 ;
 $AAEF DEFB $00,$FE,$01,$43,$00,$00,$FE,$00 ;
 $AAF7 DEFB $45,$00,$00,$FE,$FF,$43,$00,$00 ;
 $AAFF DEFB $FE,$FE,$44,$00,$00,$FF,$FE,$42 ;
 $AB07 DEFB $00,$00,$00,$FE,$47,$00,$00,$01 ;
 $AB0F DEFB $FE,$42,$00,$00,$02,$FE,$44,$00 ;
 $AB17 DEFB $00,$02,$FF,$43,$00,$00,$02,$00 ;
 $AB1F DEFB $45,$00,$00,$02,$01,$43,$00,$00 ;
 $AB27 DEFB $02,$02,$44,$00,$00,$01,$02,$42 ;
; This entry point is used by the routine at #R$A1AA.
*$AB2F LD HL,$AA4B                          ;
 $AB32 LD DE,$AADF                          ;
 $AB35 LD B,$10                             ;
*$AB37 LD A,(HL)                            ;
 $AB38 INC HL                               ;
 $AB39 LD (DE),A                            ;
 $AB3A INC DE                               ;
 $AB3B LD A,(HL)                            ;
 $AB3C INC HL                               ;
 $AB3D LD (DE),A                            ;
 $AB3E INC DE                               ;
 $AB3F INC HL                               ;
 $AB40 INC HL                               ;
 $AB41 INC HL                               ;
 $AB42 INC DE                               ;
 $AB43 INC DE                               ;
 $AB44 INC DE                               ;
 $AB45 DJNZ $AB37                           ;
 $AB47 RET                                  ;
; This entry point is used by the routine at #R$A1AA.
*$AB48 XOR A                                ;
 $AB49 LD ($5E69),A                         ;
 $AB4C LD A,($5E7B)                         ;
 $AB4F INC A                                ;
 $AB50 LD ($5E7B),A                         ;
 $AB53 CALL $B8F2                           ;
 $AB56 LD IX,$AA4B                          ;
 $AB5A LD B,$10                             ;
*$AB5C PUSH BC                              ;
 $AB5D CALL $AB78                           ;
 $AB60 LD BC,$0005                          ;
 $AB63 ADD IX,BC                            ;
 $AB65 POP BC                               ;
 $AB66 DJNZ $AB5C                           ;
 $AB68 LD A,($5E69)                         ;
 $AB6B AND A                                ;
 $AB6C JR NZ,$AB48                          ;
 $AB6E RET                                  ;
*$AB6F LD A,($5E6A)                         ;
 $AB72 CP (IX+$01)                          ;
 $AB75 RET Z                                ;
 $AB76 JR $AB7F                             ;
*$AB78 LD A,(IX+$00)                        ;
 $AB7B CP $80                               ;
 $AB7D JR Z,$AB6F                           ;
*$AB7F LD A,(IX+$00)                        ;
 $AB82 ADD A,(IX+$02)                       ;
 $AB85 LD L,A                               ;
 $AB86 LD A,(IX+$01)                        ;
 $AB89 ADD A,(IX+$03)                       ;
 $AB8C LD H,A                               ;
 $AB8D LD A,L                               ;
 $AB8E CP $80                               ;
 $AB90 JR Z,$AB95                           ;
 $AB92 JP $A9A1                             ;
*$AB95 LD A,($5E6A)                         ;
 $AB98 CP H                                 ;
 $AB99 RET Z                                ;
 $AB9A JP $A9A1                             ;

; Routine at AB9D
;
; Used by the routine at #R$A1AA.
c$AB9D LD HL,$AADF   ; #REGhl=#R$AADF.
 $ABA0 LD DE,$AA4B   ; #REGde=#R$AA4B.
 $ABA3 LD BC,$0050   ; #REGbc=#N($0050,$04,$04).
 $ABA6 LDIR          ;
 $ABA8 RET           ; Return.

; Routine at ABA9
;
; Used by the routine at #R$AC39.
c$ABA9 LD A,(IX+$00)       ; #REGa=#REGix+#N$00.
 $ABAC INC A               ;
 $ABAD AND %00001111       ; Keep only bits 0-3.
 $ABAF ADD A,$70           ;
 $ABB1 LD (IX+$00),A       ;
; This entry point is used by the routines at #R$A1AA, #R$A325, #R$AC39,
; #R$AD36, #R$B33D, #R$B37B, #R$B460, #R$B785 and #R$B7BC.
*$ABB4 CALL $8701          ; Call #R$8701.
 $ABB7 JP $8733            ; Jump to #R$8733.
 $ABBA LD E,$18            ; #REGe=#N$18.
 $ABBC CALL $B2A4          ; Call #R$B2A4.
 $ABBF CALL C,$B2D7        ;
 $ABC2 LD A,(IX+$17)       ; {If #REGix+#N$17 is zero, jump to #R$AC3E.
 $ABC5 AND A               ;
 $ABC6 JR Z,$AC3E          ; }
 $ABC8 CALL $ABA9          ; Call #R$ABA9.
 $ABCB LD A,($5E42)        ; #REGa=#R$5E42.
 $ABCE CPL                 ; Flip the bits.
 $ABCF AND %00001111       ; Keep only bits 0-3.
 $ABD1 RET NZ              ;
 $ABD2 LD A,($5E67)        ; {If #R$5E67 is not zero, jump to #R$ABE5.
 $ABD5 AND A               ;
 $ABD6 JR NZ,$ABE5         ; }
 $ABD8 LD A,($6078)        ; {If #R$6078 is #N$81, jump to #R$ABE5.
 $ABDB CP $81              ;
 $ABDD JR Z,$ABE5          ; }
 $ABDF DEC (IX+$17)        ;
 $ABE2 CALL Z,$B16F        ;
*$ABE5 LD A,(IX+$17)       ;
 $ABE8 LD HL,$2040         ; #REGhl=#N$2040.
 $ABEB CALL $8C01          ; Call #R$8C01.
 $ABEE CALL $AD36          ; Call #R$AD36.
 $ABF1 JR NC,$AC29         ;
 $ABF3 CALL $AD0B          ; Call #R$AD0B.
 $ABF6 LD HL,$587B         ; #REGhl=#N$587B (attribute buffer location).
 $ABF9 CALL $AD00          ; Call #R$AD00.
 $ABFC LD HL,$587D         ; #REGhl=#N$587D (attribute buffer location).
 $ABFF LD A,$42            ; #REGa=#N$42 (attribute value).
*$AC01 CALL $AD00          ; Call #R$AD00.
 $AC04 LD A,($5E42)        ; #REGa=#R$5E42.
 $AC07 AND %00111111       ; Keep only bits 0-5.
 $AC09 CP $0F              ;
 $AC0B JR Z,$AC1A          ; If so, jump to #R$AC1A.
 $AC0D CP $2F              ;
 $AC0F RET NZ              ;
; Handle printing the "#FONT:(ghij)addr=$D347,attr=$45(alien)" messaging.
 $AC10 LD DE,$AC24         ; #REGde=#R$AC24.
@label=BannerMessaging_Print
*$AC13 LD HL,$10D8         ; #REGhl=#N$10D8 (screen location).
 $AC16 CALL $8A11          ; Call #R$8A11.
 $AC19 RET                 ; Return.
; Handle printing the "#FONT:(cdef)addr=$D347,attr=$45(base)" messaging.
*$AC1A LD DE,$AC1F         ; #REGde=#R$AC1F.
 $AC1D JR $AC13            ; Jump to #R$AC13.
@label=BannerMessaging_Base
 $AC1F DEFM "Ecde","f"+$80 ; Attribute: #N(#PEEK(#PC)) +
                           ; "#FONT:(cdef)addr=$D347,attr=$45(base)".
@label=BannerMessaging_Alien
 $AC24 DEFM "Eghi","j"+$80 ; Attribute: #N(#PEEK(#PC)) +
                           ; "#FONT:(ghij)addr=$D347,attr=$45(alien)".
*$AC29 CALL $AD0B          ; Call #R$AD0B.
 $AC2C LD HL,$587D         ; #REGhl=#N$587D (attribute buffer location).
 $AC2F CALL $AD00          ; Call #R$AD00.
 $AC32 LD HL,$587B         ; #REGhl=#N$587B (attribute buffer location).
 $AC35 LD A,$42            ; #REGa=#N$42 (attribute byte).
 $AC37 JR $AC01            ; Jump to #R$AC01.

; Routine at AC39
c$AC39 LD HL,($607A)                        ;
 $AC3C JR $AC4A                             ;
; This entry point is used by the routine at #R$ABA9.
*$AC3E LD A,($6090)                         ;
 $AC41 SUB $1A                              ;
 $AC43 CP $10                               ;
 $AC45 JR NC,$AC39                          ;
 $AC47 LD HL,($6092)                        ;
*$AC4A CALL $AD39                           ;
 $AC4D LD A,(IX+$00)                        ;
 $AC50 JR C,$AC59                           ;
 $AC52 CP $78                               ;
 $AC54 JR Z,$AC60                           ;
 $AC56 JP $ABA9                             ;
*$AC59 CP $70                               ;
 $AC5B JR Z,$AC6F                           ;
 $AC5D JP $ABA9                             ;
*$AC60 CALL $ABB4                           ;
 $AC63 CALL $B1D3                           ;
 $AC66 RET NZ                               ;
 $AC67 CALL $AC7E                           ;
 $AC6A LD (IX+$00),$98                      ;
 $AC6E RET                                  ;
*$AC6F CALL $ABB4                           ;
 $AC72 CALL $B1D3                           ;
 $AC75 RET NZ                               ;
 $AC76 CALL $AC83                           ;
 $AC79 LD (IX+$00),$9C                      ;
 $AC7D RET                                  ;
*$AC7E LD HL,$ACD0                          ;
 $AC81 JR $AC86                             ;
*$AC83 LD HL,$ACA0                          ;
*$AC86 LD DE,$6138                          ;
 $AC89 LD BC,$0030                          ;
 $AC8C LDIR                                 ;
 $AC8E LD L,(IX+$02)                        ;
 $AC91 LD H,(IX+$03)                        ;
 $AC94 LD ($613A),HL                        ;
 $AC97 LD A,(IX+$04)                        ;
 $AC9A SUB $10                              ;
 $AC9C LD ($613C),A                         ;
 $AC9F RET                                  ;
 $ACA0 DEFB $84,$00,$00,$00,$00,$01,$FF,$46 ;
 $ACA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACB8 DEFB $86,$00,$00,$00,$00,$00,$00,$42 ;
 $ACC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACD0 DEFB $80,$00,$00,$00,$00,$FF,$FF,$46 ;
 $ACD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACE8 DEFB $82,$00,$00,$00,$00,$00,$00,$42 ;
 $ACF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $ACF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;

; Handler: Colourise 2x2
;
; Used by the routines at #R$9EDC, #R$ABA9, #R$AD22 and #R$AD36.
;
; A The attribute value to write
; HL The address in the attribute buffer to begin writing to
;
; This routine writes an attribute value to four attribute buffer locations.
@label=Handler_Colour2x2
c$AD00 LD (HL),A     ; Write #REGa to #REGhl.
; Move one byte to the right.
 $AD01 INC L         ; Increment #REGl by one.
 $AD02 LD (HL),A     ; Write #REGa to #REGhl.
; Moves down to the next line, but less one byte - so under the first attribute
; buffer location.
 $AD03 LD BC,$001F   ; {#REGhl=#REGhl+#N($001F,$04,$04).
 $AD06 ADD HL,BC     ; }
 $AD07 LD (HL),A     ; Write #REGa to #REGhl.
; Move one byte to the right.
 $AD08 INC L         ; Increment #REGl by one.
 $AD09 LD (HL),A     ; Write #REGa to #REGhl.
 $AD0A RET           ; Return.

; Routine at AD0B
;
; Used by the routines at #R$9EDC, #R$ABA9 and #R$AD22.
c$AD0B LD A,($5E42)  ;
 $AD0E AND $10       ;
 $AD10 JR Z,$AD14    ;
 $AD12 LD A,$30      ;
*$AD14 OR $42        ;
 $AD16 RET           ;
; This entry point is used by the routine at #R$AD36.
*$AD17 LD A,($5E42)  ;
 $AD1A AND $10       ;
 $AD1C JR Z,$AD14    ;
 $AD1E LD A,$38      ;
 $AD20 JR $AD14      ;

; Routine at AD22
;
; Used by the routine at #R$91E2.
c$AD22 CALL $AD0B    ; Call #R$AD0B.
; This entry point is used by the routine at #R$AD33.
*$AD25 LD HL,$5861   ; #REGhl=#N$5861 (attribute buffer location).
 $AD28 PUSH AF       ; Stash #REGaf on the stack.
 $AD29 CALL $AD00    ; Call #R$AD00.
 $AD2C POP AF        ; Restore #REGaf from the stack.
 $AD2D LD HL,$5863   ; #REGhl=#N$5863 (attribute buffer location).
 $AD30 JP $AD00      ; Jump to #R$AD00.

; Routine at AD33
;
; Used by the routine at #R$91E2.
c$AD33 XOR A         ; #REGa=#N$00.
 $AD34 JR $AD25      ; Jump to #R$AD25.

; Routine at AD36
;
; Used by the routines at #R$9EDC and #R$ABA9.
c$AD36 LD HL,($607A)                        ; #REGhl=#R$607A.
; This entry point is used by the routine at #R$AC39.
*$AD39 LD C,(IX+$02)                        ;
 $AD3C LD B,(IX+$03)                        ;
; This entry point is used by the routines at #R$9020 and #R$B731.
*$AD3F AND A                                ;
 $AD40 SBC HL,BC                            ;
 $AD42 LD A,H                               ;
 $AD43 AND A                                ;
 $AD44 JP M,$AD4E                           ;
 $AD47 LD BC,$1000                          ;
 $AD4A AND A                                ;
 $AD4B SBC HL,BC                            ;
 $AD4D RET                                  ;
*$AD4E CALL $8947                           ;
 $AD51 LD BC,$1000                          ;
 $AD54 AND A                                ;
 $AD55 SBC HL,BC                            ;
 $AD57 CCF                                  ;
 $AD58 RET                                  ;
 $AD59 LD E,$14                             ;
 $AD5B CALL $B2A4                           ;
 $AD5E CALL C,$B2D7                         ;
 $AD61 LD A,($607A)                         ;
 $AD64 SUB (IX+$02)                         ;
 $AD67 NEG                                  ;
 $AD69 AND $07                              ;
 $AD6B ADD A,$68                            ;
 $AD6D LD (IX+$00),A                        ;
 $AD70 CALL $8787                           ;
 $AD73 LD A,($5E58)                         ;
 $AD76 SUB $08                              ;
 $AD78 LD ($5E58),A                         ;
 $AD7B CALL $8733                           ;
 $AD7E LD A,($5E6C)                         ;
 $AD81 AND A                                ;
 $AD82 JR NZ,$AD89                          ;
 $AD84 LD A,(IX+$15)                        ;
 $AD87 AND A                                ;
 $AD88 RET Z                                ;
*$AD89 CALL $864F                           ;
 $AD8C LD A,$C0                             ;
 $AD8E LD ($6168),A                         ;
 $AD91 LD ($6180),A                         ;
 $AD94 LD HL,($6182)                        ;
 $AD97 LD BC,$FFF8                          ;
 $AD9A CALL $A002                           ;
 $AD9D LD ($6182),HL                        ;
 $ADA0 LD HL,$6188                          ;
 $ADA3 LD B,$08                             ;
*$ADA5 LD (HL),$00                          ;
 $ADA7 INC HL                               ;
 $ADA8 DJNZ $ADA5                           ;
 $ADAA RET                                  ;
 $ADAB CALL $B2A2                           ;
 $ADAE JR C,$ADDE                           ;
 $ADB0 BIT 0,(IX+$10)                       ;
 $ADB4 JR NZ,$ADE1                          ;
 $ADB6 LD L,(IX+$02)                        ;
 $ADB9 LD H,(IX+$03)                        ;
 $ADBC LD B,$00                             ;
 $ADBE LD A,(IX+$05)                        ;
 $ADC1 LD C,A                               ;
 $ADC2 AND A                                ;
 $ADC3 JP P,$ADC7                           ;
 $ADC6 DEC B                                ;
*$ADC7 ADD HL,BC                            ;
 $ADC8 LD (IX+$02),L                        ;
 $ADCB LD (IX+$03),H                        ;
 $ADCE LD A,(IX+$04)                        ;
 $ADD1 ADD A,(IX+$06)                       ;
 $ADD4 LD (IX+$04),A                        ;
 $ADD7 CP $3C                               ;
 $ADD9 JR C,$ADE7                           ;
 $ADDB JP $ABB4                             ;
*$ADDE CALL $B2D7                           ; Call #R$B2D7.
; Destroying the missile adds #N$0500 points. TBC is this the decoy missile?
*$ADE1 LD BC,$0500                          ; #REGbc=#N$0500.
 $ADE4 CALL $899C                           ; Call #R$899C.
*$ADE7 JP $A76B                             ; Jump to #R$A76B.
 $ADEA LD A,($6138)                         ;
 $ADED CP $80                               ;
 $ADEF JR NZ,$AE2F                          ;
 $ADF1 LD HL,($613A)                        ;
 $ADF4 LD BC,$0014                          ;
 $ADF7 ADD HL,BC                            ;
*$ADF8 LD A,H                               ;
 $ADF9 AND $1F                              ;
 $ADFB LD H,A                               ;
 $ADFC LD (IX+$02),L                        ;
 $ADFF LD (IX+$03),H                        ;
 $AE02 LD A,($613C)                         ;
 $AE05 ADD A,$10                            ;
 $AE07 LD (IX+$04),A                        ;
 $AE0A LD A,(IX+$00)                        ;
 $AE0D XOR $01                              ;
 $AE0F LD (IX+$00),A                        ;
 $AE12 LD A,(IX+$07)                        ;
 $AE15 XOR $04                              ;
 $AE17 LD (IX+$07),A                        ;
 $AE1A JP $ABB4                             ;
 $AE1D LD A,($6138)                         ;
 $AE20 CP $84                               ;
 $AE22 JR NZ,$AE2F                          ;
 $AE24 LD HL,($613A)                        ;
 $AE27 LD BC,$0010                          ;
 $AE2A AND A                                ;
 $AE2B SBC HL,BC                            ;
 $AE2D JR $ADF8                             ;
*$AE2F CALL $8640                           ;
 $AE32 LD (IX+$00),$00                      ;
 $AE36 RET                                  ;
 $AE37 JP $ABB4                             ;
 $AE3A LD E,$18                             ;
 $AE3C CALL $B2A4                           ;
 $AE3F CALL C,$B2D7                         ;
 $AE42 CALL $ABB4                           ;
 $AE45 LD A,($5E42)                         ;
 $AE48 AND $07                              ;
 $AE4A RET NZ                               ;
 $AE4B INC (IX+$00)                         ;
 $AE4E LD A,(IX+$00)                        ;
 $AE51 AND $03                              ;
 $AE53 CP $03                               ;
 $AE55 CALL Z,$AE78                         ;
 $AE58 RET                                  ;
 $AE59 LD E,$18                             ;
 $AE5B CALL $B2A4                           ;
 $AE5E CALL C,$B2D7                         ;
 $AE61 CALL $ABB4                           ;
 $AE64 LD A,($5E42)                         ;
 $AE67 AND $03                              ;
 $AE69 RET NZ                               ;
 $AE6A INC (IX+$00)                         ;
 $AE6D LD A,(IX+$00)                        ;
 $AE70 AND $03                              ;
 $AE72 CP $03                               ;
 $AE74 CALL Z,$AEB7                         ;
 $AE77 RET                                  ;
*$AE78 LD HL,$AEBC                          ;
*$AE7B LD DE,$6108                          ;
 $AE7E LD BC,$0030                          ;
 $AE81 LDIR                                 ;
 $AE83 LD L,(IX+$02)                        ;
 $AE86 LD H,(IX+$03)                        ;
 $AE89 LD ($610A),HL                        ;
 $AE8C LD A,(IX+$04)                        ;
 $AE8F SUB $0C                              ;
 $AE91 LD ($610C),A                         ;
 $AE94 LD A,($5EA0)                         ;
 $AE97 ADD A,$08                            ;
 $AE99 CP $63                               ;
 $AE9B JR C,$AE9F                           ;
 $AE9D LD A,$63                             ;
*$AE9F LD ($611E),A                         ;
 $AEA2 LD A,($6172)                         ;
 $AEA5 AND A                                ;
 $AEA6 RET NZ                               ;
 $AEA7 LD A,($5EA1)                         ;
 $AEAA AND A                                ;
 $AEAB JP NZ,$B52E                          ;
 $AEAE LD A,($6078)                         ;
 $AEB1 CP $2A                               ;
 $AEB3 RET NC                               ;
 $AEB4 JP $B52E                             ;
*$AEB7 LD HL,$AEEC                          ;
 $AEBA JR $AE7B                             ;
 $AEBC DEFB $A0,$00,$00,$00,$00,$FD,$00,$46 ;
 $AEC4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AECC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AED4 DEFB $A2,$00,$00,$00,$00,$00,$00,$42 ;
 $AEDC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AEE4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AEEC DEFB $A4,$00,$00,$00,$00,$03,$00,$46 ;
 $AEF4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AEFC DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF04 DEFB $A6,$00,$00,$00,$00,$00,$00,$42 ;
 $AF0C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF14 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $AF1C CALL $B2A2                           ;
 $AF1F JP C,$AFAE                           ;
 $AF22 CALL $AD36                           ;
 $AF25 JR NC,$AF35                          ;
 $AF27 CALL $AD17                           ;
 $AF2A LD HL,$587B                          ;
 $AF2D CALL $AD00                           ;
 $AF30 LD HL,$587D                          ;
 $AF33 JR $AF41                             ;
*$AF35 CALL $AD17                           ;
 $AF38 LD HL,$587D                          ;
 $AF3B CALL $AD00                           ;
 $AF3E LD HL,$587B                          ;
*$AF41 LD A,$42                             ;
 $AF43 CALL $AD00                           ;
 $AF46 LD A,($5E42)                         ;
 $AF49 AND $01                              ;
 $AF4B JR NZ,$AF61                          ;
 $AF4D LD A,(IX+$07)                        ;
 $AF50 CP $46                               ;
 $AF52 JR Z,$AF61                           ;
 $AF54 LD A,($5E40)                         ;
 $AF57 AND $07                              ;
 $AF59 JR NZ,$AF5C                          ;
 $AF5B INC A                                ;
*$AF5C OR $40                               ;
 $AF5E LD (IX+$07),A                        ;
*$AF61 BIT 0,(IX+$10)                       ;
 $AF65 JR Z,$AF7D                           ;
; Take one hit off the missile hit count total.
 $AF67 DEC (IX+$16)                         ; Decrease #REGix+#N16 by one.
 $AF6A JR Z,$AFB1                           ; Jump to #R$AFB1 if the missile
                                            ; has been destroyed.
 $AF6C CALL $B8B4                           ; Call #R$B8B4.
; Each missile hit adds #N$0100 points.
 $AF6F LD BC,$0100                          ; #REGbc=#N$0100.
 $AF72 CALL $899C                           ; Call #R$899C.
 $AF75 LD (IX+$07),$42                      ;
 $AF79 LD (IX+$10),$00                      ;
*$AF7D LD L,(IX+$02)                        ;
 $AF80 LD H,(IX+$03)                        ;
 $AF83 LD C,(IX+$05)                        ;
 $AF86 LD B,$00                             ;
 $AF88 LD A,C                               ;
 $AF89 AND A                                ;
 $AF8A JP P,$AF8E                           ;
 $AF8D DEC B                                ;
*$AF8E ADD HL,BC                            ;
 $AF8F LD A,H                               ;
 $AF90 AND $1F                              ;
 $AF92 LD H,A                               ;
 $AF93 LD (IX+$02),L                        ;
 $AF96 LD (IX+$03),H                        ;
 $AF99 CALL $B0D1                           ;
 $AF9C JR C,$AFE9                           ;
 $AF9E LD A,H                               ;
 $AF9F CP $02                               ;
 $AFA1 JR C,$AFDD                           ;
 $AFA3 CP $10                               ;
 $AFA5 JR C,$AFD6                           ;
 $AFA7 CP $20                               ;
 $AFA9 JR C,$AFC5                           ;
*$AFAB JP $ABB4                             ;
*$AFAE CALL $B2D7                           ; Call #R$B2D7.
*$AFB1 LD A,$01                             ; {Write #N$01 to #R$6195.
 $AFB3 LD ($6195),A                         ; }
; Destroying the missile adds #N$0500 points. TBC is this the decoy missile?
 $AFB6 LD BC,$0500                          ; #REGbc=#N$0500.
 $AFB9 CALL $899C                           ; Call #R$899C.
 $AFBC LD DE,$BAA8                          ;
 $AFBF CALL $B9BC                           ;
 $AFC2 JP $A76B                             ;
*$AFC5 LD A,(IX+$04)                        ;
 $AFC8 CP $50                               ;
*$AFCA JR Z,$AFAB                           ;
 $AFCC JR NC,$AFD0                          ;
 $AFCE INC A                                ;
 $AFCF INC A                                ;
*$AFD0 DEC A                                ;
 $AFD1 LD (IX+$04),A                        ;
 $AFD4 JR $AFAB                             ;
*$AFD6 LD A,(IX+$04)                        ;
 $AFD9 CP $80                               ;
 $AFDB JR $AFCA                             ;
*$AFDD LD A,(IX+$04)                        ;
 $AFE0 CP $A7                               ;
 $AFE2 JR Z,$AFAB                           ;
 $AFE4 INC A                                ;
 $AFE5 CP $A7                               ;
 $AFE7 JR $AFCA                             ;
*$AFE9 LD A,$01                             ;
 $AFEB LD ($5E6C),A                         ;
 $AFEE LD A,$C0                             ;
 $AFF0 LD ($60D8),A                         ;
 $AFF3 LD ($60A8),A                         ;
 $AFF6 LD ($60C0),A                         ;
 $AFF9 LD A,($60F0)                         ;
 $AFFC AND A                                ;
 $AFFD JR Z,$B004                           ;
 $AFFF LD A,$5C                             ;
 $B001 LD ($60F0),A                         ;
*$B004 LD A,($6198)                         ;
 $B007 AND A                                ;
 $B008 JR Z,$B00F                           ;
 $B00A LD A,$C0                             ;
 $B00C LD ($6198),A                         ;
*$B00F LD HL,$61B0                          ;
 $B012 LD DE,$0018                          ;
 $B015 LD B,$06                             ;
*$B017 LD A,(HL)                            ;
 $B018 AND A                                ;
 $B019 JR Z,$B031                           ;
 $B01B AND $FE                              ;
 $B01D CP $5A                               ;
 $B01F JR Z,$B037                           ;
 $B021 CP $B6                               ;
 $B023 JR Z,$B037                           ;
 $B025 AND $FC                              ;
 $B027 CP $64                               ;
 $B029 JR Z,$B031                           ;
 $B02B CP $C8                               ;
 $B02D JR Z,$B037                           ;
 $B02F LD (HL),$5C                          ;
*$B031 ADD HL,DE                            ;
 $B032 DJNZ $B017                           ;
 $B034 JP $A76B                             ;
*$B037 LD (HL),$64                          ;
 $B039 JR $B031                             ;
; This entry point is used by the routine at #R$9EDC.
*$B03B LD A,($6078)                         ;
 $B03E SUB $12                              ;
 $B040 CP $08                               ;
 $B042 LD BC,$E004                          ;
 $B045 JR C,$B056                           ;
 $B047 LD A,B                               ;
 $B048 LD ($6090),A                         ;
 $B04B LD A,C                               ;
 $B04C LD ($6098),A                         ;
 $B04F LD DE,$6092                          ;
 $B052 CALL $B4C2                           ;
 $B055 RET                                  ;
*$B056 LD A,B                               ;
 $B057 LD ($6078),A                         ;
 $B05A LD A,C                               ;
 $B05B LD ($6080),A                         ;
 $B05E LD DE,$607A                          ;
 $B061 CALL $B4C2                           ;
 $B064 RET                                  ;
 $B065 LD A,($6108)                         ;
 $B068 CP $A4                               ;
 $B06A JR NZ,$B0C9                          ;
 $B06C LD A,(IX+$00)                        ;
 $B06F XOR $01                              ;
 $B071 LD (IX+$00),A                        ;
 $B074 LD A,(IX+$07)                        ;
 $B077 XOR $04                              ;
 $B079 LD (IX+$07),A                        ;
 $B07C LD A,($610C)                         ;
 $B07F LD (IX+$04),A                        ;
 $B082 LD HL,($610A)                        ;
 $B085 LD BC,$0018                          ;
 $B088 AND A                                ;
 $B089 SBC HL,BC                            ;
 $B08B LD A,H                               ;
 $B08C AND $1F                              ;
 $B08E LD H,A                               ;
 $B08F LD (IX+$02),L                        ;
 $B092 LD (IX+$03),H                        ;
 $B095 JP $ABB4                             ;
 $B098 LD A,($6108)                         ;
 $B09B CP $A0                               ;
 $B09D JR NZ,$B0C9                          ;
 $B09F LD A,(IX+$00)                        ;
 $B0A2 XOR $01                              ;
 $B0A4 LD (IX+$00),A                        ;
 $B0A7 LD A,(IX+$07)                        ;
 $B0AA XOR $04                              ;
 $B0AC LD (IX+$07),A                        ;
 $B0AF LD A,($610C)                         ;
 $B0B2 LD (IX+$04),A                        ;
 $B0B5 LD HL,($610A)                        ;
 $B0B8 LD BC,$0014                          ;
 $B0BB ADD HL,BC                            ;
 $B0BC LD A,H                               ;
 $B0BD AND $1F                              ;
 $B0BF LD H,A                               ;
 $B0C0 LD (IX+$02),L                        ;
 $B0C3 LD (IX+$03),H                        ;
 $B0C6 JP $ABB4                             ;
*$B0C9 CALL $8640                           ;
 $B0CC LD (IX+$00),$00                      ;
 $B0D0 RET                                  ;
*$B0D1 LD A,($6078)                         ;
 $B0D4 SUB $12                              ;
 $B0D6 CP $08                               ;
 $B0D8 JR C,$B112                           ;
 $B0DA LD A,($6090)                         ;
 $B0DD SUB $1A                              ;
 $B0DF CP $10                               ;
 $B0E1 JR NC,$B11B                          ;
 $B0E3 LD HL,($6092)                        ;
 $B0E6 LD A,($6094)                         ;
 $B0E9 LD C,A                               ;
*$B0EA ADD HL,HL                            ;
 $B0EB ADD HL,HL                            ;
 $B0EC ADD HL,HL                            ;
 $B0ED LD E,(IX+$02)                        ;
 $B0F0 LD D,(IX+$03)                        ;
 $B0F3 EX DE,HL                             ;
 $B0F4 ADD HL,HL                            ;
 $B0F5 ADD HL,HL                            ;
 $B0F6 ADD HL,HL                            ;
 $B0F7 AND A                                ;
 $B0F8 SBC HL,DE                            ;
 $B0FA LD A,H                               ;
 $B0FB AND A                                ;
 $B0FC JP P,$B102                           ;
 $B0FF CALL $8947                           ;
*$B102 LD DE,$00C0                          ;
 $B105 AND A                                ;
 $B106 SBC HL,DE                            ;
 $B108 RET NC                               ;
 $B109 LD A,(IX+$04)                        ;
 $B10C SUB C                                ;
 $B10D NEG                                  ;
 $B10F CP $20                               ;
 $B111 RET                                  ;
*$B112 LD HL,($607A)                        ;
 $B115 LD A,($607C)                         ;
 $B118 LD C,A                               ;
 $B119 JR $B0EA                             ;
*$B11B AND A                                ;
 $B11C RET                                  ;
*$B11D LD A,$5C                             ;
 $B11F LD ($6108),A                         ;
 $B122 LD ($6138),A                         ;
 $B125 JP $AFE9                             ;
 $B128 CALL $B0D1                           ;
 $B12B JP C,$B11D                           ;
 $B12E CALL $B2A2                           ;
 $B131 CALL C,$B2D7                         ;
 $B134 CALL $A53A                           ;
 $B137 LD A,(IX+$00)                        ;
 $B13A INC A                                ;
 $B13B AND $07                              ;
 $B13D ADD A,$90                            ;
 $B13F LD (IX+$00),A                        ;
 $B142 CALL $8701                           ;
 $B145 LD L,(IX+$01)                        ;
 $B148 LD H,(IX+$04)                        ;
 $B14B CALL $8506                           ;
 $B14E LD D,(IX+$07)                        ;
 $B151 LD C,$02                             ;
 $B153 LD A,($5E57)                         ;
 $B156 AND A                                ;
 $B157 RET Z                                ;
 $B158 LD B,A                               ;
 $B159 CALL $8750                           ;
 $B15C LD A,($5E42)                         ;
 $B15F RRCA                                 ;
 $B160 RRCA                                 ;
 $B161 RRCA                                 ;
 $B162 AND $07                              ;
 $B164 JR NZ,$B167                          ;
 $B166 INC A                                ;
*$B167 OR $40                               ;
 $B169 LD D,A                               ;
 $B16A LD C,$01                             ;
 $B16C JP $8750                             ;
; This entry point is used by the routines at #R$ABA9 and #R$B7BC.
*$B16F LD A,($6108)                         ;
 $B172 AND A                                ;
 $B173 JR Z,$B17A                           ;
 $B175 LD A,$C0                             ;
 $B177 LD ($6108),A                         ;
*$B17A LD A,($6138)                         ;
 $B17D AND A                                ;
 $B17E JR Z,$B185                           ;
 $B180 LD A,$C0                             ;
 $B182 LD ($6138),A                         ;
*$B185 LD A,($6120)                         ;
 $B188 SUB $C8                              ;
 $B18A CP $04                               ;
 $B18C JR NC,$B193                          ;
 $B18E LD A,$64                             ;
 $B190 LD ($6120),A                         ;
*$B193 LD A,($6150)                         ;
 $B196 SUB $C8                              ;
 $B198 CP $04                               ;
 $B19A JR NC,$B1A1                          ;
 $B19C LD A,$64                             ;
 $B19E LD ($6150),A                         ;
*$B1A1 JP $B960                             ;
 $B1A4 CALL $ABB4                           ;
 $B1A7 LD A,($5E42)                         ;
 $B1AA AND $01                              ;
 $B1AC RET NZ                               ;
 $B1AD INC (IX+$00)                         ;
 $B1B0 LD A,(IX+$00)                        ;
 $B1B3 CP $C8                               ;
 $B1B5 RET NZ                               ;
 $B1B6 CALL $95B6                           ;
 $B1B9 LD (IX+$00),$63                      ;
 $B1BD PUSH IX                              ;
 $B1BF POP HL                               ;
 $B1C0 LD BC,$6078                          ;
 $B1C3 AND A                                ;
 $B1C4 SBC HL,BC                            ;
 $B1C6 RET NZ                               ;
 $B1C7 CALL $8640                           ;
 $B1CA LD (IX+$00),$81                      ;
 $B1CE LD (IX+$05),$40                      ;
 $B1D2 RET                                  ;
; This entry point is used by the routine at #R$AC39.
*$B1D3 LD HL,$6108                          ;
 $B1D6 LD B,$04                             ;
*$B1D8 LD DE,$0018                          ;
 $B1DB XOR A                                ;
*$B1DC OR (HL)                              ;
 $B1DD ADD HL,DE                            ;
 $B1DE DJNZ $B1DC                           ;
 $B1E0 OR A                                 ;
 $B1E1 RET                                  ;
; This entry point is used by the routine at #R$9F6A.
*$B1E2 LD HL,$6108                          ;
 $B1E5 LD B,$06                             ;
 $B1E7 JR $B1D8                             ;
*$B1E9 ADD A,(IX+$10)                       ;
 $B1EC LD C,A                               ;
 $B1ED AND $0E                              ;
 $B1EF LD (IX+$10),A                        ;
 $B1F2 LD A,C                               ;
 $B1F3 RRCA                                 ;
 $B1F4 RRCA                                 ;
 $B1F5 RRCA                                 ;
 $B1F6 RRCA                                 ;
 $B1F7 AND $0F                              ;
 $B1F9 LD B,$00                             ;
 $B1FB JR $B246                             ;
*$B1FD ADD A,(IX+$11)                       ;
 $B200 LD C,A                               ;
 $B201 AND $0F                              ;
 $B203 LD (IX+$11),A                        ;
 $B206 LD A,C                               ;
 $B207 RRCA                                 ;
 $B208 RRCA                                 ;
 $B209 RRCA                                 ;
 $B20A RRCA                                 ;
 $B20B AND $0F                              ;
 $B20D JR $B272                             ;
*$B20F LD BC,$0025                          ;
 $B212 CALL $899C                           ;
 $B215 JP $A73C                             ;
 $B218 BIT 0,(IX+$10)                       ;
 $B21C JP NZ,$B20F                          ;
 $B21F DEC (IX+$08)                         ;
 $B222 JP Z,$A73C                           ;
 $B225 LD A,(IX+$05)                        ;
 $B228 AND A                                ;
 $B229 JP P,$B1E9                           ;
 $B22C ADD A,(IX+$10)                       ;
 $B22F LD C,A                               ;
 $B230 AND $0F                              ;
 $B232 NEG                                  ;
 $B234 AND $FE                              ;
 $B236 LD (IX+$10),A                        ;
 $B239 LD A,C                               ;
 $B23A NEG                                  ;
 $B23C RRCA                                 ;
 $B23D RRCA                                 ;
 $B23E RRCA                                 ;
 $B23F RRCA                                 ;
 $B240 AND $0F                              ;
 $B242 NEG                                  ;
 $B244 LD B,$FF                             ;
*$B246 ADD A,(IX+$02)                       ;
 $B249 LD (IX+$02),A                        ;
 $B24C LD A,(IX+$03)                        ;
 $B24F ADC A,B                              ;
 $B250 AND $1F                              ;
 $B252 LD (IX+$03),A                        ;
 $B255 LD A,(IX+$06)                        ;
 $B258 AND A                                ;
 $B259 JP P,$B1FD                           ;
 $B25C ADD A,(IX+$11)                       ;
 $B25F LD C,A                               ;
 $B260 AND $0F                              ;
 $B262 NEG                                  ;
 $B264 LD (IX+$11),A                        ;
 $B267 LD A,C                               ;
 $B268 NEG                                  ;
 $B26A RRCA                                 ;
 $B26B RRCA                                 ;
 $B26C RRCA                                 ;
 $B26D RRCA                                 ;
 $B26E AND $0F                              ;
 $B270 NEG                                  ;
*$B272 ADD A,(IX+$04)                       ;
 $B275 CP $AF                               ;
 $B277 JP NC,$A73C                          ;
 $B27A CP $30                               ;
 $B27C JP C,$A73C                           ;
 $B27F LD (IX+$04),A                        ;
 $B282 LD A,(IX+$00)                        ;
 $B285 AND $FC                              ;
 $B287 LD C,A                               ;
 $B288 LD A,(IX+$00)                        ;
 $B28B INC A                                ;
 $B28C AND $03                              ;
 $B28E OR C                                 ;
 $B28F LD (IX+$00),A                        ;
 $B292 CALL $8B73                           ;
 $B295 CALL $8733                           ;
 $B298 CALL $B2A2                           ;
 $B29B RET NC                               ;
 $B29C CALL $B2D7                           ;
 $B29F JP $A73C                             ;
; This entry point is used by the routines at #R$9531 and #R$970E.
*$B2A2 LD E,$0E                             ;
; This entry point is used by the routine at #R$ABA9.
*$B2A4 LD A,($5E67)                         ;
 $B2A7 AND A                                ;
 $B2A8 RET NZ                               ;
 $B2A9 LD A,($6078)                         ;
 $B2AC CP $11                               ;
 $B2AE RET NC                               ;
 $B2AF LD L,(IX+$02)                        ;
 $B2B2 LD H,(IX+$03)                        ;
 $B2B5 LD BC,$0008                          ;
 $B2B8 ADD HL,BC                            ;
 $B2B9 LD BC,($607A)                        ;
 $B2BD AND A                                ;
 $B2BE SBC HL,BC                            ;
 $B2C0 LD A,H                               ;
 $B2C1 AND $1F                              ;
 $B2C3 RET NZ                               ;
 $B2C4 LD A,L                               ;
 $B2C5 CP $10                               ;
 $B2C7 RET NC                               ;
 $B2C8 LD A,($607C)                         ;
 $B2CB SUB $04                              ;
 $B2CD SUB (IX+$04)                         ;
 $B2D0 JP P,$B2D5                           ;
 $B2D3 NEG                                  ;
*$B2D5 CP E                                 ;
 $B2D6 RET                                  ;
; This entry point is used by the routines at #R$9531, #R$970E and #R$ABA9.
*$B2D7 LD DE,$B9E7                          ;
 $B2DA CALL $B9BC                           ;
 $B2DD LD HL,$6078                          ;
 $B2E0 LD (HL),$DC                          ;
 $B2E2 LD HL,$607D                          ;
 $B2E5 LD A,(IX+$01)                        ;
 $B2E8 CP $78                               ;
 $B2EA JR C,$B339                           ;
 $B2EC LD (HL),$C0                          ;
; This entry point is used by the routine at #R$B339.
*$B2EE INC HL                               ;
 $B2EF LD (HL),$01                          ;
 $B2F1 LD HL,$608A                          ;
 $B2F4 LD (HL),$06                          ;
 $B2F6 INC HL                               ;
 $B2F7 LD (HL),$06                          ;

; Routine at B2F9
;
; Used by the routine at #R$A826.
c$B2F9 LD A,($60B0)  ; #REGa=#N$60B0.
 $B2FC BIT 3,A       ;
 $B2FE JR NZ,$B305   ;
 $B300 OR %10000000  ; Set bit 7.
 $B302 LD ($60B0),A  ;
*$B305 LD A,($60C8)  ; #REGa=#N$60C8.
 $B308 BIT 3,A       ;
 $B30A JR NZ,$B311   ;
 $B30C OR %10000000  ; Set bit 7.
 $B30E LD ($60C8),A  ;
*$B311 LD A,($60E0)  ; #REGa=#N$60E0.
 $B314 AND %11111100 ; Keep only bits 2-7.
 $B316 LD ($60E0),A  ;
 $B319 LD A,($61A0)  ;
 $B31C BIT 2,A       ;
 $B31E JR NZ,$B32B   ;
 $B320 LD A,($619C)  ;
 $B323 CP $AF        ;
 $B325 LD A,$00      ;
 $B327 JR Z,$B32B    ;
 $B329 OR %00000010  ; Set bit 1.
*$B32B LD ($61A0),A  ;
 $B32E LD A,($60F0)  ;
 $B331 AND A         ;
 $B332 RET Z         ;
 $B333 LD A,$2F      ;
 $B335 LD ($60F0),A  ;
 $B338 RET           ; Return.

; Routine at B339
;
; Used by the routine at #R$AD36.
c$B339 LD (HL),$40   ; Write #N$40 to #REGhl.
 $B33B JR $B2EE      ; Jump to #R$B2EE.

; Routine at B33D
c$B33D DEC (IX+$12)   ; Decrease #REGix+#N$12 by one.
 $B340 JR NZ,$B357    ;
 $B342 LD A,(IX+$13)  ;
 $B345 LD (IX+$12),A  ;
 $B348 INC (IX+$06)   ;
 $B34B LD A,(IX+$05)  ;
 $B34E AND A          ;
 $B34F JR Z,$B357     ;
 $B351 JP P,$B356     ;
 $B354 INC A          ;
 $B355 INC A          ;
*$B356 DEC A          ;
*$B357 CALL $907B     ; Call #R$907B.
 $B35A LD A,(IX+$04)  ;
 $B35D ADD A,(IX+$06) ;
 $B360 CP $AF         ;
 $B362 JR NC,$B37B    ;
 $B364 LD (IX+$04),A  ;
 $B367 LD C,A         ;
 $B368 LD D,$03       ;
 $B36A CALL $B8CD     ; Call #R$B8CD.
 $B36D LD A,($5E42)   ;
 $B370 RRCA           ;
 $B371 AND $03        ;
 $B373 ADD A,$DC      ;
 $B375 LD (IX+$00),A  ;
 $B378 JP $ABB4       ; Jump to #R$ABB4.

; Routine at B37B
;
; Used by the routine at #R$B33D.
c$B37B LD (IX+$04),$AF ; Write #N$AF to #REGix+#N$04.
 $B37F CALL $A75D      ; Call #R$A75D.
 $B382 JP $ABB4        ; Jump to #R$ABB4.

; Routine at B385
;
; Used by the routines at #R$A826 and #R$B52E.
c$B385 LD HL,$61B0   ; #REGhl=#R$61B0.
 $B388 LD B,$90      ; #REGb=#N$90.
*$B38A LD (HL),$00   ; Write #N$00 to #REGhl.
 $B38C INC HL        ; Increment #REGhl by one.
 $B38D DJNZ $B38A    ; Decrease counter by one and loop back to #R$B38A until
                     ; counter is zero.
 $B38F RET           ; Return.

; Routine at B390
c$B390 LD A,($5E6C)  ; {Return if #R$5E6C is not zero.
 $B393 AND A         ;
 $B394 RET NZ        ; }
 $B395 DEC (IX+$05)  ; Decrease #REGix+#N$05 by one.
 $B398 RET NZ        ; Return if the result is above zero.
 $B399 JP $A8B5      ; Jump to #R$A8B5.
 $B39C DEC (IX+$05)  ; Decrease #REGix+#N$05 by one.
 $B39F RET NZ        ; Return if the result is above zero.
 $B3A0 JP $A8B5      ; Jump to #R$A8B5.

; Message: Teleporting
;
; Used by the routine at #R$A1AA.
@label=MessageTeleporting
c$B3A3 DI            ; Disable interrupts.
 $B3A4 CALL $8BA5    ; Call #R$8BA5.
 $B3A7 LD B,$10      ; #REGb=#N$10 (colour cycling counter).
@label=MessageTeleporting_Loop
*$B3A9 PUSH BC       ; Stash #REGbc (the colour cycling counter) on the stack.
; Handle printing "#FONT:(TELEPORTING)addr=$D347,attr=$41(teleporting)"
; messaging.
 $B3AA LD HL,$7058   ; #REGhl=#N$7058 (screen buffer location).
 $B3AD LD DE,$B3D0   ; #REGde=#R$B3D0.
 $B3B0 CALL $8A11    ; Call #R$8A11.
; Create a small pause so the player can read the messaging. This is an inner loop, as it's called for each time
;       the INK is changed - hence it's #N($2000, $04, $04) * #N$10.
 $B3B3 LD HL,$2000   ; #REGhl=#N($2000, $04, $04) (counter).
@label=Teleporting_Pause
*$B3B6 DEC HL        ; Decrease #REGhl by one.
 $B3B7 LD A,L        ; {Jump back to #R$B3B6 until #REGhl is zero.
 $B3B8 OR H          ;
 $B3B9 JR NZ,$B3B6   ; }
; Handle cycling the text INK colour.
 $B3BB LD A,($B3D0)  ; #REGa=the attribute byte of #R$B3D0.
 $B3BE INC A         ; Increment #REGa by one.
 $B3BF AND %00000111 ; Keep only bits 0-2 (INK).
 $B3C1 JR NZ,$B3C4   ; Jump to #R$B3C4 if #REGa was not zero.
 $B3C3 INC A         ; Increment #REGa by one.
@label=MsgTeleporting_Skip
*$B3C4 OR %01000000  ; Set bit 6 (BRIGHT).
 $B3C6 LD ($B3D0),A  ; Store #REGa at #R$B3D0 to overwrite the attribute byte.
 $B3C9 POP BC        ; Restore #REGbc (the colour cycling counter) from the
                     ; stack.
 $B3CA CALL $B8E8    ; Call #R$B8E8.
 $B3CD DJNZ $B3A9    ; Decrease colour cycling counter by one and loop back to
                     ; #R$B3A9 until the counter is zero.
 $B3CF RET           ; Return.

; Messaging: Teleporting
;
; .
;
; .
;
; #FONT:(TELEPORTING)addr=$D347,attr=$41(teleporting)
@label=String_Teleporting
t$B3D0 DEFM $41                  ; {Attribute: #N(#PEEK(#PC)) + "TELEPORTING".
 $B3D1 DEFM "TELEPORTIN","G"+$80 ; }

; Initialise Terrain
;
; Used by the routine at #R$A84C.
@label=Terrain_Initialise
c$B3DC LD HL,$F6CE   ; #REGhl=#R$F6CE.
 $B3DF LD DE,$7000   ; #REGde=#R$7000.
 $B3E2 LD BC,$0400   ; #REGbc=#N$0400.
 $B3E5 LDIR          ; Copies the default terrain data to the terrain buffer.
 $B3E7 RET           ; Return.

; Routine at B3E8
c$B3E8 LD A,($5E42)                         ; #REGa=#R$5E42.
 $B3EB CPL                                  ; Flip the bits.
 $B3EC AND %00000001                        ; Keep only bit 0.
 $B3EE JR Z,$B3F5                           ;
 $B3F0 DEC (IX+$08)                         ; Decrease #REGix+#N$08 by one.
 $B3F3 JR Z,$B441                           ;
*$B3F5 LD A,(IX+$08)                        ;
 $B3F8 LD C,A                               ;
 $B3F9 ADD A,A                              ;
 $B3FA ADD A,C                              ;
 $B3FB LD L,A                               ;
 $B3FC LD H,$00                             ;
 $B3FE LD BC,$B451                          ;
 $B401 ADD HL,BC                            ;
 $B402 EX DE,HL                             ;
 $B403 LD A,(DE)                            ;
 $B404 INC DE                               ;
 $B405 ADD A,$E0                            ;
 $B407 LD (IX+$00),A                        ;
 $B40A LD L,(IX+$02)                        ;
 $B40D LD H,(IX+$03)                        ;
 $B410 PUSH HL                              ;
 $B411 LD A,(DE)                            ;
 $B412 INC DE                               ;
 $B413 LD C,A                               ;
 $B414 LD B,$00                             ;
 $B416 AND A                                ;
 $B417 JP P,$B41B                           ;
 $B41A DEC B                                ;
*$B41B CALL $A002                           ; Call #R$A002.
 $B41E LD (IX+$02),L                        ;
 $B421 LD (IX+$03),H                        ;
 $B424 LD A,(IX+$04)                        ;
 $B427 PUSH AF                              ;
 $B428 LD A,(DE)                            ;
 $B429 ADD A,(IX+$04)                       ;
 $B42C LD (IX+$04),A                        ;
 $B42F CALL $8787                           ; Call #R$8787.
 $B432 CALL $8733                           ; Call #R$8733.
 $B435 POP AF                               ;
 $B436 LD (IX+$04),A                        ;
 $B439 POP HL                               ;
 $B43A LD (IX+$02),L                        ;
 $B43D LD (IX+$03),H                        ;
 $B440 RET                                  ; Return.
*$B441 CALL $864F                           ; Call #R$864F.
 $B444 XOR A                                ; {Write #N$00 to #R$5EA1.
 $B445 LD ($5EA1),A                         ; }
 $B448 LD (IX+$00),$85                      ; Write #N$85 to #REGix+#N00.
 $B44C LD (IX+$05),$40                      ; Write #N$40 to #REGix+#N05.
 $B450 RET                                  ; Return.
 $B451 DEFB $00,$00,$00,$00,$18,$FC,$01,$10 ;
 $B459 DEFB $FA,$02,$08,$FE,$03,$00,$00     ;

; Routine at B460
c$B460 DEC (IX+$10)    ;
 $B463 JR NZ,$B475     ;
 $B465 LD A,(IX+$11)   ;
 $B468 LD (IX+$10),A   ;
 $B46B INC (IX+$06)    ;
 $B46E LD A,(IX+$06)   ;
 $B471 CP $01          ;
 $B473 JR Z,$B48B      ;
*$B475 LD A,(IX+$00)   ;
 $B478 INC A           ;
 $B479 CP $E7          ;
 $B47B JR NC,$B47F     ;
 $B47D LD A,$E4        ;
*$B47F LD (IX+$00),A   ;
 $B482 CALL $B6AE      ;
 $B485 LD (IX+$04),A   ;
 $B488 JP $ABB4        ;
*$B48B LD C,(IX+$04)   ;
 $B48E LD D,$04        ;
 $B490 CALL $B8CD      ;
 $B493 LD (IX+$00),$E7 ;
 $B497 JP $ABB4        ;
 $B49A INC (IX+$00)    ;
 $B49D JP $ABB4        ;
 $B4A0 LD A,($5E42)    ;
 $B4A3 AND $07         ;
 $B4A5 JR NZ,$B4AF     ;
 $B4A7 LD A,(IX+$00)   ;
 $B4AA XOR $01         ;
 $B4AC LD (IX+$00),A   ;
*$B4AF INC (IX+$04)    ;
 $B4B2 LD A,(IX+$04)   ;
 $B4B5 CP $AF          ;
 $B4B7 JP C,$ABB4      ;
 $B4BA CALL $8640      ;
 $B4BD LD (IX+$00),$00 ;
 $B4C1 RET             ; Return.

; Routine at B4C2
;
; Used by the routine at #R$AD36.
c$B4C2 LD HL,$60A8   ; #REGhl=#N$60A8.
 $B4C5 LD BC,$0711   ; #REGbc=#N$0711.
 $B4C8 EXX           ;
 $B4C9 LD A,($5E40)  ;
 $B4CC LD L,A        ;
 $B4CD LD H,$00      ;
 $B4CF EXX           ;
*$B4D0 PUSH BC       ;
 $B4D1 LD (HL),$E4   ;
 $B4D3 INC HL        ;
 $B4D4 INC HL        ;
 $B4D5 LD A,(DE)     ;
 $B4D6 LD (HL),A     ;
 $B4D7 INC DE        ;
 $B4D8 INC HL        ;
 $B4D9 LD A,(DE)     ;
 $B4DA LD (HL),A     ;
 $B4DB INC HL        ;
 $B4DC INC DE        ;
 $B4DD LD A,(DE)     ;
 $B4DE LD (HL),A     ;
 $B4DF DEC DE        ;
 $B4E0 DEC DE        ;
 $B4E1 INC HL        ;
 $B4E2 EXX           ;
 $B4E3 LD A,(HL)     ;
 $B4E4 INC HL        ;
 $B4E5 AND A         ;
 $B4E6 JP P,$B529    ;
 $B4E9 OR $FC        ;
*$B4EB EXX           ;
 $B4EC LD (HL),A     ;
 $B4ED INC HL        ;
 $B4EE EXX           ;
 $B4EF LD A,(HL)     ;
 $B4F0 INC HL        ;
 $B4F1 AND $03       ;
 $B4F3 OR $FC        ;
 $B4F5 SUB $01       ;
 $B4F7 EXX           ;
 $B4F8 LD (HL),A     ;
 $B4F9 INC HL        ;
 $B4FA EXX           ;
 $B4FB LD A,(HL)     ;
 $B4FC INC HL        ;
 $B4FD AND $07       ;
 $B4FF CP $02        ;
 $B501 JR NC,$B505   ;
 $B503 LD A,$07      ;
*$B505 OR $40        ;
 $B507 EXX           ;
 $B508 LD (HL),A     ;
 $B509 INC HL        ;
 $B50A INC HL        ;
*$B50B LD (HL),$00   ;
 $B50D INC HL        ;
 $B50E DJNZ $B50B    ;
 $B510 EXX           ;
 $B511 LD A,(HL)     ;
 $B512 INC HL        ;
 $B513 AND $07       ;
 $B515 INC A         ;
 $B516 EXX           ;
 $B517 LD (HL),A     ;
 $B518 INC HL        ;
 $B519 LD (HL),A     ;
 $B51A LD A,L        ;
 $B51B ADD A,$07     ;
 $B51D LD L,A        ;
 $B51E LD A,H        ;
 $B51F ADC A,$00     ;
 $B521 LD H,A        ;
 $B522 POP BC        ;
 $B523 DEC C         ;
 $B524 JR NZ,$B4D0   ;
 $B526 JP $B986      ;
*$B529 AND $03       ;
 $B52B INC A         ;
 $B52C JR $B4EB      ;

; Routine at B52E
;
; Used by the routine at #R$AD36.
c$B52E DI            ; Disable interrupts.
 $B52F LD DE,$BA2A   ; #REGde=#R$BA2A.
 $B532 CALL $B9BC    ; Call #R$B9BC.
 $B535 RST $38       ;
 $B536 LD A,($611E)  ;
 $B539 CALL $B699    ; Call #R$B699.
; Here we alter "#FONT:(IT IS ESTIMATED THAT XX
; LASER)addr=$D347,attr=$47(hits)" to update with the number of hits.
 $B53C LD HL,$B660   ; #REGhl=#R$B64B(#N$B660).
 $B53F LD C,A        ;
 $B540 RRCA          ;
 $B541 RRCA          ;
 $B542 RRCA          ;
 $B543 RRCA          ;
 $B544 AND %00001111 ; Keep only bits 0-3.
 $B546 JR NZ,$B54A   ;
 $B548 LD A,$F0      ;
*$B54A ADD A,$30     ;
 $B54C LD (HL),A     ;
 $B54D INC HL        ;
 $B54E LD A,C        ;
 $B54F AND %00001111 ; Keep only bits 0-3.
 $B551 ADD A,$30     ;
 $B553 LD (HL),A     ;
 $B554 CALL $8BA5    ; Call #R$8BA5.
 $B557 LD B,$0C      ; #REGb=#N$0C.
*$B559 PUSH BC       ; Stash #REGbc on the stack.
 $B55A CALL $8298    ; Call #R$8298.
 $B55D CALL $B594    ; Call #R$B594.
 $B560 LD C,$80      ; #REGc=#N$80 (pitch).
 $B562 LD D,$80      ; #REGd=#N$80 (duration).
*$B564 CALL $B8DA    ; Call #R$B8DA.
 $B567 DEC D         ;
 $B568 JR NZ,$B564   ;
 $B56A LD A,$42      ;
 $B56C LD ($B5DC),A  ;
 $B56F CALL $B594    ;
 $B572 LD A,$56      ;
 $B574 LD ($B5DC),A  ;
 $B577 LD HL,$8000   ; #REGhl=#R$8000.
*$B57A DEC HL        ;
 $B57B LD A,L        ;
 $B57C OR H          ;
 $B57D JR NZ,$B57A   ;
 $B57F POP BC        ; Restore #REGbc from the stack.
 $B580 DJNZ $B559    ;
 $B582 LD DE,$B9DA   ; #REGde=#R$B9DA.
 $B585 CALL $B9BC    ; Call #R$B9BC.
 $B588 CALL $8BA5    ; Call #R$8BA5.
 $B58B CALL $A317    ; Call #R$A317.
 $B58E CALL $B385    ; Call #R$B385.
 $B591 JP $A2F5      ; Jump to #R$A2F5.

; Messaging: Missile Launch
;
; Used by the routine at #R$B52E.
;
; .
;
; Handle displaying "WARNING" messaging.
@label=Message_MissileLaunch
c$B594 LD DE,$B5DC   ; #REGde=#R$B5DC.
 $B597 LD HL,$2860   ; #REGhl=#N($2860, $04, $04) (screen location).
 $B59A CALL $8A11    ; Call #R$8A11.
; Handle displaying "A MISSILE HAS BEEN LAUNCHED" messaging.
 $B59D LD DE,$B5E4   ; #REGde=#R$B5E4.
 $B5A0 LD HL,$3808   ; #REGhl=#N($3808, $04, $04) (screen location).
 $B5A3 CALL $8A11    ; Call #R$8A11.
; Handle displaying "FROM THE ENEMY BASE" messaging.
 $B5A6 LD DE,$B601   ; #REGde=#R$B601.
 $B5A9 LD HL,$4808   ; #REGhl=#N($4808, $04, $04) (screen location).
 $B5AC CALL $8A11    ; Call #R$8A11.
; Handle displaying "YOUR LUNAR ROVER IS IN DANGER" messaging.
 $B5AF LD DE,$B617   ; #REGde=#R$B617.
 $B5B2 LD HL,$5808   ; #REGhl=#N($5808, $04, $04) (screen location).
 $B5B5 CALL $8A11    ; Call #R$8A11.
; Handle displaying "OF BEING DESTROYED" messaging.
 $B5B8 LD DE,$B636   ; #REGde=#R$B636.
 $B5BB LD HL,$6808   ; #REGhl=#N($6808, $04, $04) (screen location).
 $B5BE CALL $8A11    ; Call #R$8A11.
; Handle displaying "IT IS ESTIMATED THAT    LASER" messaging.
 $B5C1 LD DE,$B64A   ; #REGde=#R$B64A.
 $B5C4 LD HL,$8008   ; #REGhl=#N($8008, $04, $04) (screen location).
 $B5C7 CALL $8A11    ; Call #R$8A11.
; Handle displaying "HITS WILL BE REQUIRED TO" messaging.
 $B5CA LD DE,$B669   ; #REGde=#R$B669.
 $B5CD LD HL,$9008   ; #REGhl=#N($9008, $04, $04) (screen location).
 $B5D0 CALL $8A11    ; Call #R$8A11.
; Handle displaying "DESTROY THE MISSILE." messaging.
 $B5D3 LD DE,$B683   ; #REGde=#R$B683.
 $B5D6 LD HL,$A008   ; #REGhl=#N($A008, $04, $04) (screen location).
 $B5D9 JP $8A11      ; Jump to #R$8A11.

; Messaging: Missile Launch
;
; .
;
; .
;
; #FONT:(WARNING)addr=$D347,attr=$56(warning)
@label=String_Warning
t$B5DC DEFM $56                                     ; {"WARNING".
 $B5DD DEFM "WARNIN","G"+$80                        ; }
; #FONT:(A MISSILE HAS BEEN LAUNCHED)addr=$D347,attr=$46(launched)
@label=String_Launched
 $B5E4 DEFM $46                                     ; {"A MISSILE HAS BEEN
 $B5E5 DEFM "A MISSILE HAS BEEN LAUNCHED"," "+$80   ; LAUNCHED "}
; #FONT:(FROM THE ENEMY BASE)addr=$D347,attr=$46(enemy-base)
@label=String_EnemyBase
 $B601 DEFM $46                                     ; {"FROM THE ENEMY BASE "
 $B602 DEFM "FROM THE ENEMY BASE."," "+$80          ; }
; #FONT:(YOUR LUNAR ROVER IS IN DANGER)addr=$D347,attr=$44(danger)
@label=String_Danger
 $B617 DEFM $44                                     ; {"YOUR LUNAR ROVER IS IN
 $B618 DEFM "YOUR LUNAR ROVER IS IN DANGER"," "+$80 ; DANGER ".}
; #FONT:(OF BEING DESTROYED)addr=$D347,attr=$44(being-destroyed)
@label=String_BeingDestroyed
 $B636 DEFM $44                                     ; {"OF BEING DESTROYED ".
 $B637 DEFM "OF BEING DESTROYED"," "+$80            ; }
; #FONT:(IT IS ESTIMATED THAT    LASER)addr=$D347,attr=$47(estimated)
@label=String_Estimated
 $B64A DEFM $47                                     ; {"IT IS ESTIMATED THAT
 $B64B DEFM "IT IS ESTIMATED THAT    LASER"," "+$80 ; LASER ".}
; #FONT:(HITS WILL BE REQUIRED TO)addr=$D347,attr=$47(required)
@label=String_Required
 $B669 DEFM $47                                     ; {"HITS WILL BE REQUIRED
 $B66A DEFM "HITS WILL BE REQUIRED TO"," "+$80      ; TO ".}
; #FONT:(DESTROY THE MISSILE.)addr=$D347,attr=$47(missile)
@label=String_DestroyMissile
 $B683 DEFM $47                                     ; {"DESTROY THE MISSILE. ".
 $B684 DEFM "DESTROY THE MISSILE."," "+$80          ; }

; Routine at B699
;
; Used by the routines at #R$B52E and #R$F641.
c$B699 LD BC,$000A   ; #REGbc=#N($000A,$04,$04).
*$B69C INC B         ;
 $B69D SUB C         ;
 $B69E JR NC,$B69C   ;
 $B6A0 ADD A,C       ;
 $B6A1 DEC B         ;
 $B6A2 SLA B         ;
 $B6A4 SLA B         ;
 $B6A6 SLA B         ;
 $B6A8 SLA B         ;
 $B6AA AND %00001111 ; Keep only bits 0-2.
 $B6AC OR B          ;
 $B6AD RET           ; Return.

; Routine at B6AE
;
; Used by the routines at #R$A325, #R$B460 and #R$B7BC.
c$B6AE LD A,(IX+$05)  ; {#REGc=#REGix+#N$05.
 $B6B1 LD C,A         ; }
 $B6B2 LD B,$00       ;
 $B6B4 AND A          ;
 $B6B5 JP P,$B6B9     ;
 $B6B8 DEC B          ;
*$B6B9 LD L,(IX+$02)  ; #REGl=#REGix+#N$02.
 $B6BC LD H,(IX+$03)  ; #REGh=#REGix+#N$03.
 $B6BF CALL $A002     ; Call #R$A002.
 $B6C2 LD (IX+$02),L  ;
 $B6C5 LD (IX+$03),H  ;
 $B6C8 LD A,(IX+$04)  ;
 $B6CB ADD A,(IX+$06) ;
 $B6CE RET            ; Return.

; Routine at B6CF
c$B6CF LD BC,$B6DB     ; #REGbc=#R$B6DB.
 $B6D2 LD A,(IX+$08)   ; #REGa=#REGix+#N$08.
 $B6D5 AND %00001111   ; Keep only bits 0-3.
 $B6D7 LD L,A          ; #REGl=#REGa.
 $B6D8 JP $81FE        ; Jump to #R$81FE.
 $B6DB DEFW $B785      ;
 $B6DD DEFW $B7BC      ;
 $B6DF DEFW $B810      ;
 $B6E1 DEFW $B6EB      ;
 $B6E3 DEFW $B6EC      ;
 $B6E5 DEFW $B6EC      ;
 $B6E7 DEFW $B6EC      ;
 $B6E9 DEFW $B6EC      ;
 $B6EB RET             ; Return.
 $B6EC CALL $B7A8      ; Call #R$B7A8.
 $B6EF CALL $945C      ; Call #R$945C.
 $B6F2 JR NZ,$B6F8     ;
 $B6F4 RES 7,(IX+$08)  ;
*$B6F8 LD A,($6090)    ;
 $B6FB SUB $1A         ;
 $B6FD CP $10          ;
 $B6FF JR NC,$B71C     ;
 $B701 CALL $A4E7      ;
 $B704 JR NC,$B719     ;
 $B706 LD (IX+$08),$81 ; Write #N$81 to #REGix+#N$08.
 $B70A LD A,($6080)    ;
 $B70D OR $01          ;
 $B70F LD ($6080),A    ;
 $B712 XOR A           ;
 $B713 LD ($5EA3),A    ;
 $B716 CALL $B8BD      ; Call #R$B8BD.
*$B719 JP $A431        ; Jump to #R$A431.
*$B71C LD A,($6078)    ;
 $B71F CP $16          ;
 $B721 JR C,$B72C      ;
 $B723 LD BC,$FFF4     ; #REGbc=#N$FFF4.
*$B726 LD HL,($607A)   ;
 $B729 JP $A43E        ; Jump to #R$A43E.
*$B72C LD BC,$0012     ; #REGbc=#N($0012,$04,$04).
 $B72F JR $B726        ; Jump to #R$B726.

; Routine at B731
;
; Used by the routine at #R$8258.
c$B731 LD DE,$6198                          ;
 $B734 LD A,(DE)                            ;
 $B735 AND A                                ;
 $B736 RET NZ                               ;
 $B737 LD HL,$B76D                          ;
 $B73A LD BC,$0018                          ;
 $B73D LDIR                                 ;
 $B73F LD A,($6090)                         ;
 $B742 SUB $1A                              ;
 $B744 CP $10                               ;
 $B746 JR C,$B763                           ;
 $B748 LD HL,($607A)                        ;
*$B74B PUSH HL                              ;
 $B74C LD HL,($6092)                        ;
 $B74F LD BC,($6182)                        ;
 $B753 CALL $AD3F                           ;
 $B756 JR NC,$B768                          ;
 $B758 LD BC,$0030                          ;
*$B75B POP HL                               ;
 $B75C CALL $A002                           ;
 $B75F LD ($619A),HL                        ;
 $B762 RET                                  ;
*$B763 LD HL,($6092)                        ;
 $B766 JR $B74B                             ;
*$B768 LD BC,$FFD0                          ;
 $B76B JR $B75B                             ;
 $B76D DEFB $EC,$00,$00,$00,$AF,$00,$01,$44 ;
 $B775 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $B77D DEFB $00,$06,$06,$00,$00,$00,$00,$00 ;

; Routine at B785
c$B785 CALL $945C      ; Call #R$945C.
 $B788 JR NZ,$B78E     ;
 $B78A RES 7,(IX+$08)  ;
*$B78E CALL $A4E7      ; Call #R$A4E7.
 $B791 JR NC,$B7A2     ;
 $B793 LD (IX+$08),$81 ; Write #N$81 to #REGix+#N$08.
 $B797 LD A,($6080)    ; #REGa=#R$6080.
 $B79A OR %00000001    ; Set bit 0.
 $B79C LD ($6080),A    ; Write #REGa to #R$6080.
 $B79F CALL $B8BD      ; Call #R$B8BD.
; This entry point is used by the routine at #R$B7BC.
*$B7A2 CALL $B7A8      ; Call #R$B7A8.
 $B7A5 JP $ABB4        ; Jump to #R$ABB4.

; Handler: Bomb
;
; Used by the routines at #R$B6CF and #R$B785.
;
; IX Animation object
;
; Animate the sprite.
@label=Handler_Bomb
c$B7A8 LD A,(IX+$00) ; #REGa=#REGix+#N$00.
 $B7AB INC A         ; Increment #REGa by one.
; The bomb has four frames of animation.
 $B7AC AND %00000011 ; Keep only bits 0-1.
; With sprite IDs beginning from #N$EC.
 $B7AE ADD A,$EC     ; #REGa=#REGa+#N$EC.
 $B7B0 LD (IX+$00),A ; Write #REGa back to #REGix+#N$00.
 $B7B3 LD A,(IX+$07) ; #REGa=#REGix+#N$07.
 $B7B6 XOR %00000001 ;
 $B7B8 LD (IX+$07),A ; Write #REGa back to #REGix+#N$07.
 $B7BB RET           ; Return.

; Routine at B7BC
c$B7BC CALL $945C      ; Call #R$945C.
 $B7BF JR NZ,$B7DE     ;
 $B7C1 RES 7,(IX+$08)  ;
*$B7C5 LD HL,($607A)   ;
 $B7C8 LD (IX+$02),L   ;
 $B7CB LD (IX+$03),H   ;
 $B7CE LD A,($607C)    ;
 $B7D1 ADD A,$10       ;
 $B7D3 CP $AF          ;
 $B7D5 JR C,$B7D9      ;
 $B7D7 LD A,$AF        ;
*$B7D9 LD (IX+$04),A   ;
 $B7DC JR $B7A2        ;
*$B7DE BIT 7,(IX+$08)  ;
 $B7E2 JR NZ,$B7C5     ;
 $B7E4 LD A,(IX+$04)   ;
 $B7E7 CP $AF          ;
 $B7E9 JR Z,$B80A      ;
 $B7EB LD (IX+$08),$82 ;
 $B7EF LD A,($607D)    ;
 $B7F2 SRA A           ;
 $B7F4 SRA A           ;
 $B7F6 SRA A           ;
 $B7F8 SRA A           ;
 $B7FA LD (IX+$05),A   ;
*$B7FD LD A,($6080)    ;
 $B800 AND $FE         ;
 $B802 LD ($6080),A    ;
 $B805 CALL $B8C3      ;
 $B808 JR $B7A2        ;
*$B80A LD (IX+$08),$80 ;
 $B80E JR $B7FD        ;
 $B810 CALL $B89A      ;
 $B813 LD A,($5EA3)    ;
 $B816 AND A           ;
 $B817 JR NZ,$B81E     ;
 $B819 CALL $A4BA      ;
 $B81C JR C,$B848      ;
*$B81E CALL $B6AE      ; Call #R$B6AE.
 $B821 CP $AF          ;
 $B823 JR NC,$B83C     ;
 $B825 LD (IX+$04),A   ;
 $B828 CALL $B854      ; Call #R$B854.
 $B82B JP NC,$B7A2     ;
 $B82E CALL $B16F      ; Call #R$B16F.
 $B831 LD A,$01        ; {Write #N$01 to #R$6195.
 $B833 LD ($6195),A    ; }
; Destroying the alien base adds #N$3000 points.
 $B836 LD BC,$3000     ; #REGbc=#N$3000.
 $B839 CALL $899C      ; Call #R$899C.
*$B83C LD (IX+$04),$AF ;
 $B840 CALL $ABB4      ;
 $B843 LD (IX+$00),$C0 ;
 $B847 RET             ;
*$B848 SET 2,(IX+$08)  ;
 $B84C LD A,$01        ;
 $B84E LD ($5EA3),A    ;
 $B851 JP $ABB4        ;
*$B854 LD E,$18        ;
 $B856 LD L,(IX+$02)   ;
 $B859 LD H,(IX+$03)   ;
 $B85C LD BC,$0018     ;
 $B85F ADD HL,BC       ;
 $B860 LD BC,($6182)   ;
 $B864 AND A           ;
 $B865 SBC HL,BC       ;
 $B867 LD A,H          ;
 $B868 AND $1F         ;
 $B86A RET NZ          ;
 $B86B LD A,L          ;
 $B86C CP $20          ;
 $B86E RET NC          ;
 $B86F LD A,($6184)    ;
 $B872 SUB $04         ;
 $B874 SUB (IX+$04)    ;
 $B877 JP P,$B87C      ;
 $B87A NEG             ;
*$B87C CP E            ;
 $B87D RET             ; Return.

; Routine at B87E
;
; Used by the routine at #R$91E2.
c$B87E LD A,($6078)  ; #REGa=#R$6078.
 $B881 CP $16        ;
 $B883 LD HL,$BCA9   ; #REGhl=#R$BCA9.
 $B886 JR C,$B891    ;
 $B888 LD A,$57      ; #REGa=#N$57.
 $B88A LD (HL),A     ; Write #REGa to #REGhl.
 $B88B INC HL        ; Increment #REGhl by one.
 $B88C LD (HL),A     ; Write #REGa to #REGhl.
 $B88D INC HL        ; Increment #REGhl by one.
 $B88E LD (HL),$47   ; Write #N$47 to #REGhl.
 $B890 RET           ; Return.
*$B891 LD A,$57      ; #REGa=#N$57.
 $B893 LD (HL),$47   ; Write #N$47 to #REGhl.
 $B895 INC HL        ; Increment #REGhl by one.
 $B896 LD (HL),A     ; Write #REGa to #REGhl.
 $B897 INC HL        ; Increment #REGhl by one.
 $B898 LD (HL),A     ; Write #REGa to #REGhl.
 $B899 RET           ; Return.

; Routine at B89A
;
; Used by the routines at #R$A325 and #R$B7BC.
c$B89A DEC (IX+$11)  ; Decrease #REGix+#N$11 by one.
 $B89D RET NZ        ; Return if the result is not zero.
 $B89E LD A,(IX+$12) ; #REGa=#REGix+#N$12.
 $B8A1 LD (IX+$11),A ; Write #REGa to #REGix+#N$11.
 $B8A4 INC (IX+$06)  ; Increment #REGix+#N$06 by one.
 $B8A7 RET           ; Return.

; Sounds: Laser Beam
;
; Used by the routine at #R$9DC0.
@label=SoundsLaserBeam
c$B8A8 LD C,$08      ;
*$B8AA CALL $B8DA    ;
 $B8AD INC C         ;
 $B8AE LD A,C        ;
 $B8AF CP $38        ;
 $B8B1 JR NZ,$B8AA   ;
 $B8B3 RET           ; Return.

; Sounds: Laser Missile Hit
;
; Used by the routine at #R$AD36.
@label=SoundsLaserMissileHit
c$B8B4 LD C,$38      ; #REGc=#N$38 (pitch).
@label=SoundsLaserMissileHit_Loop
*$B8B6 CALL $B8DA    ; Call #R$B8DA.
 $B8B9 DEC C         ; {Decrease duration by one and loop back to #R$B8B6 until
 $B8BA JR NZ,$B8B6   ; duration is zero.}
 $B8BC RET           ; Return.

; Routine at B8BD
;
; Used by the routines at #R$8D06, #R$930C, #R$A0F8, #R$A325, #R$B6CF, #R$B785
; and #R$F295.
c$B8BD LD D,$20      ; #REGd=#N$20 (duration).
 $B8BF LD C,$50      ; #REGc=#N$50 (pitch).
 $B8C1 JR $B8CD      ; Jump to #R$B8CD.

; Routine at B8C3
;
; Used by the routines at #R$91E2, #R$93A6, #R$A0F8, #R$A325, #R$B7BC and
; #R$F295.
c$B8C3 LD D,$30      ; #REGd=#N$30 (duration).
 $B8C5 LD C,$40      ; #REGc=#N$40 (pitch).
 $B8C7 JR $B8CD      ; Jump to #R$B8CD.

; Sounds: Pickup Item
;
; Used by the routine at #R$8C71.
@label=SoundsPickupItem
c$B8C9 LD D,$40      ; #REGd=#N$40 (duration).
 $B8CB LD C,$30      ; #REGc=#N$30 (pitch).
; This entry point is used by the routines at #R$B33D, #R$B460, #R$B8BD,
; #R$B8C3 and #R$B8D4.
@label=SquareWave_Loop
*$B8CD CALL $B8DA    ; Call #R$B8DA.
 $B8D0 DEC D         ; {Decrease duration by one and loop back to #R$B8CD until
 $B8D1 JR NZ,$B8CD   ; duration is zero.}
 $B8D3 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$6809 }
; LIST#

; Routine at B8D4
c$B8D4 LD D,$10      ; #REGd=#N$10 (duration).
 $B8D6 LD C,$60      ; #REGc=#N$60 (pitch).
 $B8D8 JR $B8CD      ; Jump to #R$B8CD.

; Play square wave sound
;
; Used by the routines at #R$B52E, #R$B8A8, #R$B8B4, #R$B8C9, #R$B8E8, #R$B8F2,
; #R$B8FF, #R$B918 and #R$B92D.
;
; C Duration of wave
@label=PlaySquareWave
c$B8DA LD B,C        ; {Decrease duration by one and loop back to #R$B8DB until
@label=Silence_Loop
*$B8DB DJNZ $B8DB    ; duration is zero.}
 $B8DD LD A,$10      ; {#REGa=#N$10 (speaker on = bit 4).
 $B8DF OUT ($FE),A   ; }
 $B8E1 LD B,C        ; {Decrease duration by one and loop back to #R$B8E2 until
@label=PlaySquareWave_Loop
*$B8E2 DJNZ $B8E2    ; duration is zero.}
 $B8E4 XOR A         ; {Speaker off.
 $B8E5 OUT ($FE),A   ; }
 $B8E7 RET           ; Return.

; Routine at B8E8
;
; Used by the routine at #R$B3A3.
c$B8E8 LD D,B        ;
 $B8E9 PUSH BC       ;
*$B8EA CALL $B8DA    ;
 $B8ED DEC D         ;
 $B8EE JR NZ,$B8EA   ;
 $B8F0 POP BC        ;
 $B8F1 RET           ;

; Routine at B8F2
;
; Used by the routines at #R$A1AA and #R$A993.
c$B8F2 LD A,($5E7B)  ;
 $B8F5 LD C,A        ;
 $B8F6 LD D,$03      ;
*$B8F8 CALL $B8DA    ;
 $B8FB DEC D         ;
 $B8FC JR NZ,$B8F8   ;
 $B8FE RET           ;

; Routine at B8FF
;
; Used by the routine at #R$A325.
c$B8FF LD D,$07      ;
*$B901 LD A,D        ;
 $B902 DAA           ;
 $B903 XOR $F0       ;
 $B905 RLCA          ;
 $B906 LD C,A        ;
 $B907 LD A,($5E42)  ;
 $B90A RRCA          ;
 $B90B RRCA          ;
 $B90C RRCA          ;
 $B90D AND $60       ;
 $B90F XOR C         ;
 $B910 LD C,A        ;
 $B911 CALL $B8DA    ;
 $B914 DEC D         ;
 $B915 JR NZ,$B901   ;
 $B917 RET           ;

; Routine at B918
;
; Used by the routine at #R$9EDC.
c$B918 CALL $B8DA    ;
 $B91B LD A,C        ;
 $B91C CPL           ;
 $B91D LD C,A        ;
 $B91E DEC D         ;
 $B91F JR NZ,$B918   ;
 $B921 RET           ;

; Routine at B922
c$B922 DEC (IX+$03)  ; Decrease #REGix+#N$03 by one.
 $B925 JR Z,$B94B    ; Jump to #R$B94B if zero.
 $B927 LD C,(IX+$03) ; #REGc=#REGix+#N$03 (duration).
 $B92A LD D,(IX+$02) ; #REGd=#REGix+#N$02 (pitch).
; Continue on to #R$B92D.

; Play Wave Sequence
;
; Used by the routine at #R$B934.
;
; C Duration of wave
; D Number of times to repeat
@label=PlayWaveSequence
c$B92D CALL $B8DA    ; Call #R$B8DA.
 $B930 DEC D         ; Decrease #REGd by one.
 $B931 JR NZ,$B92D   ; Jump to #R$B92D until #REGd is zero.
 $B933 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #SABREWULF$BF6D }
; LIST#

; Routine at B934
c$B934 DEC (IX+$01)  ; Decrease #REGix+#N$01 by one.
 $B937 JR Z,$B94B    ; Jump to #R$B94B if zero.
; Create an offset in #REGbc.
 $B939 LD C,(IX+$01) ; #REGc=#REGix+#N$01.
 $B93C LD B,$00      ; #REGb=#N$00.
 $B93E LD L,(IX+$02) ; #REGl=#REGix+#N$02.
 $B941 LD H,(IX+$03) ; #REGh=#REGix+#N$03.
 $B944 ADD HL,BC     ; #REGhl=#REGhl+#REGbc.
 $B945 LD C,(HL)     ; #REGc=#REGhl (duration).
 $B946 LD D,(IX+$04) ; #REGd=#REGix+#N$04 (pitch).
 $B949 JR $B92D      ; Jump to #R$B92D.

; Sound: Finish Effect
;
; Used by the routines at #R$B922 and #R$B934.
;
; .
;
; Set frequency to zero.
@label=SoundEffect_Finish
c$B94B LD (IX+$00),$00 ; Write #N$00 to #REGix+#N$00.
 $B94F RET             ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$6839 }
; LIST#

; Routine at B950
;
; .
;
; HL Source address
; DE Destination address
; BC Number of bytes to copy
c$B950 LD HL,$B95C                          ; #REGhl=#R$B95C.
*$B953 LD DE,$6060                          ; #REGde=#R$6060.
 $B956 LD BC,$0008                          ; #REGbc=#N($0008,$04,$04).
 $B959 LDIR                                 ; Copy #N$08 bytes from #REGhl to
                                            ; #REGde.
 $B95B RET                                  ; Return.
 $B95C DEFB $A5,$20,$08,$28,$21,$65,$B9,$18 ;
 $B964 DEFB $EE,$A1,$08,$6A,$B9,$08,$00,$78 ;
 $B96C DEFB $70,$68,$60,$58,$50,$48,$40     ;
*$B973 LD HL,$B978                          ; #REGhl=#R$B978.
 $B976 JR $B953                             ; Jump to #R$B953.
 $B978 DEFB $A1,$08,$7D,$B9,$10,$00,$40,$48 ;
 $B980 DEFB $50,$58,$60,$60,$68,$70         ;
*$B986 LD HL,$B98B                          ; #REGhl=#R$B98B.
 $B989 JR $B953                             ; Jump to #R$B953.
 $B98B DEFB $A1,$10,$90,$B9,$06,$00,$40,$40 ;
 $B993 DEFB $40,$40,$50,$50,$50,$50,$40,$40 ;
 $B99B DEFB $40,$40,$50,$50,$50,$50         ;
*$B9A1 LD HL,$B9A6                          ; #REGhl=#R$B9A6.
 $B9A4 JR $B953                             ; Jump to #R$B953.
 $B9A6 DEFB $A1,$10,$AB,$B9,$06,$00,$50,$4E ;
 $B9AE DEFB $4C,$4A,$48,$46,$44,$42,$40,$3E ;
 $B9B6 DEFB $3C,$3A,$38,$36,$34,$32         ;

; Routine at B9BC
;
; Used by the routines at #R$800A, #R$80FD, #R$81BB, #R$8D06, #R$91E2, #R$9F6A,
; #R$A1AA, #R$A8E3, #R$AD36 and #R$B52E.
c$B9BC DI            ; Disable interrupts.
 $B9BD LD HL,$FF51   ; #REGhl=#R$FF51.
*$B9C0 LD A,(DE)     ;
 $B9C1 INC DE        ;
 $B9C2 BIT 7,A       ;
 $B9C4 JR NZ,$B9CA   ;
 $B9C6 LD (HL),A     ;
 $B9C7 DEC HL        ;
 $B9C8 JR $B9C0      ; Jump to #R$B9C0.
*$B9CA AND %01111111 ; Keep only bits 0-6.
 $B9CC LD (HL),A     ;
 $B9CD LD ($FF54),HL ;
 $B9D0 EI            ; Enable interrupts.
 $B9D1 RET           ; Return.

; Data block at B9D2
b$B9D2 DEFB $44,$14,$10,$03,$35,$28,$33,$83
 $B9DA DEFB $10,$0C,$37,$06,$2D,$03,$28,$46
 $B9E2 DEFB $31,$34,$15,$11,$83,$3D,$17,$11
 $B9EA DEFB $03,$19,$1F,$83
 $B9EE DEFB $6E,$17,$0B,$03,$09,$2D,$14,$31
 $B9F6 DEFB $33,$03,$3D,$14,$10,$83
 $B9FC DEFB $51,$1F,$03,$09,$2D,$14,$31,$33
 $BA04 DEFB $03,$3D,$14,$10,$83
 $BA09 DEFB $6A,$13,$5C,$3A,$55,$83
 $BA0F DEFB $6A,$07,$10,$37,$11,$0B,$03,$4A
 $BA17 DEFB $05,$37,$11,$0C,$41,$83
 $BA1D DEFB $48,$33,$37,$37,$33,$03,$4A,$05
 $BA25 DEFB $37,$11,$0C,$41,$83
 $BA2A DEFB $03,$00,$83
 $BA2D DEFB $78,$35,$03,$68,$19,$2E,$3E,$83
 $BA35 DEFB $77,$11,$3B,$11,$03,$3D,$14,$10
 $BA3D DEFB $83,$49,$1E,$3E,$03,$59,$3A,$03
 $BA45 DEFB $77,$37,$07,$2D,$28,$03,$4D,$16
 $BA4D DEFB $62,$47,$15,$1B,$33,$83,$77,$09
 $BA55 DEFB $14,$37,$03,$48,$0F,$21,$07,$11
 $BA5D DEFB $83,$06,$2D,$03,$64,$07,$11,$03
 $BA65 DEFB $19,$16,$03,$4A,$07,$0D,$10,$18
 $BA6D DEFB $4B,$83,$07,$48,$37,$11,$33,$10
 $BA75 DEFB $0C,$0B,$14,$11,$83,$67,$07,$55
 $BA7D DEFB $03,$18,$2D,$33,$11,$83,$75,$03
 $BA85 DEFB $78,$75,$83,$61,$0C,$37,$11,$27
 $BA8D DEFB $05,$03,$07,$0B,$0C,$10,$13,$10
 $BA95 DEFB $0C,$37,$06,$2D,$03,$3F,$14,$37
 $BA9D DEFB $83

; Data block at BA9E
w$BA9E DEFW $BA09
 $BAA0 DEFW $BA0F
 $BAA2 DEFW $BA1D

; Data block at BAA4
w$BAA4 DEFW $B9EE
 $BAA6 DEFW $B9FC

; Data block at BAA8
b$BAA8 DEFB $4A,$17,$2D,$13,$03,$3D,$1E,$15
 $BAB0 DEFB $03,$25,$35,$83,$47,$08,$37,$11
 $BAB8 DEFB $27,$58,$03,$10,$18,$18

; Data block at BABE
w$BABE DEFW $834B

; Jetman Sprite Table
@label=JetmanSpritesTable
w$BAC0 DEFW $BDCC    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAC2 DEFW $BDFD    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAC4 DEFW $BDCC    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAC6 DEFW $BDFD    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAC8 DEFW $BE2E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BACA DEFW $BE5F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BACC DEFW $BE2E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BACE DEFW $BE5F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAD0 DEFW $BCBE    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAD2 DEFW $BCEB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAD4 DEFW $BD18    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAD6 DEFW $BCEB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAD8 DEFW $BD45    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BADA DEFW $BD72    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BADC DEFW $BD9F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BADE DEFW $BD72    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAE0 DEFW $BCBC    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #COOKIE$7702 }
; { #JETPAC$0000 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Rover Graphics Table
@label=RoverGraphicsTable
w$BAE2 DEFW $C9BF    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAE4 DEFW $C900    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAE6 DEFW $C841    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAE8 DEFW $C782    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAEA DEFW $BE90    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAEC DEFW $BF4F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAEE DEFW $C00E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAF0 DEFW $C0CD    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAF2 DEFW $C782    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAF4 DEFW $CA7E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAF6 DEFW $CB58    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAF8 DEFW $CC32    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAFA DEFW $CD0C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAFC DEFW $CDE6    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BAFE DEFW $CEC0    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB00 DEFW $CF9A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB02 DEFW $BE90    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB04 DEFW $C18C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB06 DEFW $C266    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB08 DEFW $C340    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB0A DEFW $C41A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB0C DEFW $C4F4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB0E DEFW $C5CE    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB10 DEFW $C6A8    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).

; Sprite Table
@label=SpritesTable
w$BB12 DEFW $D074    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB14 DEFW $D0AB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB16 DEFW $D0E2    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB18 DEFW $D119    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB1A DEFW $D976    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB1C DEFW $D976    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB1E DEFW $D167    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB20 DEFW $D17E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB22 DEFW $D195    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB24 DEFW $D1AE    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB26 DEFW $D1CB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB28 DEFW $D1EA    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB2A DEFW $D20D    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB2C DEFW $D232    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB2E DEFW $D257    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB30 DEFW $D26E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB32 DEFW $D285    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB34 DEFW $D29E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB36 DEFW $D2BB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB38 DEFW $D2DA    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB3A DEFW $D2FD    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB3C DEFW $D322    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB3E DEFW $D894    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB40 DEFW $D8B5    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB42 DEFW $D8D4    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB44 DEFW $D8F1    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB46 DEFW $D90C    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB48 DEFW $D925    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB4A DEFW $D93C    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB4C DEFW $D957    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB4E DEFW $D59F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB50 DEFW $D5C0    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB52 DEFW $D5E1    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB54 DEFW $D602    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB56 DEFW $D61F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB58 DEFW $D638    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB5A DEFW $D655    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB5C DEFW $D676    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB5E DEFW $D697    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB60 DEFW $D6B8    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB62 DEFW $D6D9    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB64 DEFW $D6FA    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB66 DEFW $D71B    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB68 DEFW $D73C    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB6A DEFW $D75D    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB6C DEFW $D77E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB6E DEFW $D870    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB70 DEFW $D876    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB72 DEFW $D159    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB74 DEFW $D160    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB76 DEFW $D79F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB78 DEFW $D7B2    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB7A DEFW $D7CB    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB7C DEFW $D7EC    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB7E DEFW $D80D    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB80 DEFW $D82E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB82 DEFW $D84F    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB84 DEFW $BCBC    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB86 DEFW $D87E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB88 DEFW $D888    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB8A DEFW $D87E    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).

; Graphics Table
@label=GraphicsTable
w$BB8C DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB8E DEFW $DF13    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB90 DEFW $DF55    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB92 DEFW $DFA7    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB94 DEFW $DFF9    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB96 DEFW $E04B    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB98 DEFW $E09D    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB9A DEFW $E0EF    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB9C DEFW $E141    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BB9E DEFW $D987    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBA0 DEFW $D9C8    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBA2 DEFW $DA09    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBA4 DEFW $DA4A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBA6 DEFW $DA8B    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBA8 DEFW $DACC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBAA DEFW $DB0D    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBAC DEFW $DB4E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBAE DEFW $DB8F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBB0 DEFW $DBD0    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBB2 DEFW $DC11    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBB4 DEFW $DC52    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBB6 DEFW $DC93    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBB8 DEFW $DCD4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBBA DEFW $DD15    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBBC DEFW $DD56    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBBE DEFW $E193    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBC0 DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBC2 DEFW $E23B    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBC4 DEFW $E256    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBC6 DEFW $E1B4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBC8 DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBCA DEFW $E271    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBCC DEFW $E28C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBCE DEFW $E2A7    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBD0 DEFW $E2C8    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBD2 DEFW $E2E9    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBD4 DEFW $E306    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBD6 DEFW $E31F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBD8 DEFW $E338    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBDA DEFW $E351    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBDC DEFW $E36E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBDE DEFW $E533    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBE0 DEFW $E533    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBE2 DEFW $E55E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBE4 DEFW $E589    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBE6 DEFW $E5B4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBE8 DEFW $E5B4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBEA DEFW $E589    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBEC DEFW $E55E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBEE DEFW $E401    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBF0 DEFW $E434    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBF2 DEFW $E467    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBF4 DEFW $E1D5    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBF6 DEFW $E49A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBF8 DEFW $E4CD    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBFA DEFW $E500    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBFC DEFW $E1D5    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BBFE DEFW $E38F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC00 DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC02 DEFW $E3B5    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC04 DEFW $E3CA    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC06 DEFW $E3A2    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC08 DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC0A DEFW $E3DB    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC0C DEFW $E3F0    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC0E DEFW $ED51    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC10 DEFW $ED72    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC12 DEFW $ED93    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC14 DEFW $EDB4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC16 DEFW $EDD5    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC18 DEFW $EDF6    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC1A DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC1C DEFW $BCBC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC1E DEFW $E848    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC20 DEFW $E86F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC22 DEFW $E896    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC24 DEFW $E8BB    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC26 DEFW $E8DA    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC28 DEFW $E8F1    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC2A DEFW $EA83    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC2C DEFW $EA88    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC2E DEFW $E99C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC30 DEFW $E9BD    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC32 DEFW $E9DE    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC34 DEFW $E9FF    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC36 DEFW $EA20    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC38 DEFW $EA41    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC3A DEFW $EA62    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC3C DEFW $E36E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC3E DEFW $E5DF    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC40 DEFW $E5F8    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC42 DEFW $E619    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC44 DEFW $E63A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC46 DEFW $E65B    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC48 DEFW $E67C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC4A DEFW $E67C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC4C DEFW $E6BE    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC4E DEFW $E6DF    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC50 DEFW $E6E8    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC52 DEFW $E6F1    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC54 DEFW $E6FA    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC56 DEFW $E703    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC58 DEFW $E71C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC5A DEFW $E735    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC5C DEFW $E74E    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC5E DEFW $E767    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC60 DEFW $E780    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC62 DEFW $E799    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC64 DEFW $E71C    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC66 DEFW $E703    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC68 DEFW $E7B2    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC6A DEFW $E7CB    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC6C DEFW $E7E4    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC6E DEFW $E7FD    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC70 DEFW $E816    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC72 DEFW $E82F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC74 DEFW $E7B2    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC76 DEFW $E910    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC78 DEFW $E933    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC7A DEFW $E956    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC7C DEFW $E979    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC7E DEFW $EA8D    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC80 DEFW $EAAB    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC82 DEFW $EAED    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC84 DEFW $EB67    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC86 DEFW $EC49    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC88 DEFW $EC6A    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC8A DEFW $EC8B    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC8C DEFW $ECAC    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC8E DEFW $ECCD    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC90 DEFW $ECEE    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC92 DEFW $ED0F    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC94 DEFW $ED30    ; Graphic ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).

; Sprite Table 2
w$BC96 DEFW $EE17    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC98 DEFW $EE38    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC9A DEFW $EE59    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).
 $BC9C DEFW $EE38    ; Sprite ID:
                     ; #R(#PEEK(#PC)+#PEEK(#PC+$01)*$100)(#N((#PC-$BAC0)/$02))
                     ; #SPRITENAME((#PC-$BAC0)/$02).

; Data block at BC9E
b$BC9E DEFB $07,$04,$47,$47,$47,$47,$47,$47
 $BCA6 DEFB $47,$47,$47

; Data block at BCA9
b$BCA9 DEFB $47,$47,$47,$47,$47,$45,$45,$45
 $BCB1 DEFB $45,$45,$45,$45,$45,$45,$45,$45
 $BCB9 DEFB $45,$45,$45

; Sprite: None
b$BCBC DEFB $00      ; Width = #N(#PEEK(#PC)) bytes.
 $BCBD DEFB $00      ; Height = #N(#PEEK(#PC)) pixels.

; Sprite: Jetman Walking
;
; .
;
; .
;
; Walking left frame 1.
b$BCBE DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BCBF DEFB $07,$80  ; {#JETMAN$08(jetman-walk-left-01)
 $BCC1 DEFB $03,$80  ;
 $BCC3 DEFB $01,$80  ;
 $BCC5 DEFB $00,$00  ;
 $BCC7 DEFB $01,$80  ;
 $BCC9 DEFB $03,$BE  ;
 $BCCB DEFB $03,$AA  ;
 $BCCD DEFB $03,$D4  ;
 $BCCF DEFB $03,$FC  ;
 $BCD1 DEFB $03,$DE  ;
 $BCD3 DEFB $03,$DA  ;
 $BCD5 DEFB $7C,$2E  ;
 $BCD7 DEFB $0B,$2A  ;
 $BCD9 DEFB $0B,$2E  ;
 $BCDB DEFB $01,$EA  ;
 $BCDD DEFB $00,$06  ;
 $BCDF DEFB $03,$E6  ;
 $BCE1 DEFB $07,$74  ;
 $BCE3 DEFB $07,$74  ;
 $BCE5 DEFB $07,$B4  ;
 $BCE7 DEFB $00,$70  ;
 $BCE9 DEFB $01,$E0  ; }
; Walking left frame 2.
 $BCEB DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BCEC DEFB $1F,$E0  ; {#JETMAN$09(jetman-walk-left-02)
 $BCEE DEFB $0E,$E0  ;
 $BCF0 DEFB $06,$60  ;
 $BCF2 DEFB $02,$C0  ;
 $BCF4 DEFB $05,$C0  ;
 $BCF6 DEFB $03,$BE  ;
 $BCF8 DEFB $03,$AA  ;
 $BCFA DEFB $03,$D4  ;
 $BCFC DEFB $03,$FC  ;
 $BCFE DEFB $03,$DE  ;
 $BD00 DEFB $03,$DA  ;
 $BD02 DEFB $7C,$2E  ;
 $BD04 DEFB $0B,$2A  ;
 $BD06 DEFB $0B,$2E  ;
 $BD08 DEFB $01,$EA  ;
 $BD0A DEFB $00,$06  ;
 $BD0C DEFB $03,$E6  ;
 $BD0E DEFB $07,$74  ;
 $BD10 DEFB $07,$72  ;
 $BD12 DEFB $07,$B2  ;
 $BD14 DEFB $00,$70  ;
 $BD16 DEFB $01,$E0  ; }
; Walking left frame 3.
 $BD18 DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BD19 DEFB $78,$70  ; {#JETMAN$0A(jetman-walk-left-03)
 $BD1B DEFB $38,$38  ;
 $BD1D DEFB $18,$58  ;
 $BD1F DEFB $0C,$E0  ;
 $BD21 DEFB $0D,$C0  ;
 $BD23 DEFB $07,$FE  ;
 $BD25 DEFB $07,$EA  ;
 $BD27 DEFB $03,$D4  ;
 $BD29 DEFB $03,$FC  ;
 $BD2B DEFB $03,$DE  ;
 $BD2D DEFB $03,$DA  ;
 $BD2F DEFB $7C,$2E  ;
 $BD31 DEFB $0B,$2A  ;
 $BD33 DEFB $0B,$2E  ;
 $BD35 DEFB $01,$EA  ;
 $BD37 DEFB $00,$06  ;
 $BD39 DEFB $03,$E6  ;
 $BD3B DEFB $07,$74  ;
 $BD3D DEFB $07,$74  ;
 $BD3F DEFB $07,$B4  ;
 $BD41 DEFB $00,$70  ;
 $BD43 DEFB $01,$E0  ; }
; Walking right frame 1.
 $BD45 DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BD46 DEFB $0E,$1E  ; {#JETMAN$0C(jetman-walk-right-01)
 $BD48 DEFB $1C,$1C  ;
 $BD4A DEFB $1A,$18  ;
 $BD4C DEFB $07,$30  ;
 $BD4E DEFB $03,$B0  ;
 $BD50 DEFB $7F,$E0  ;
 $BD52 DEFB $57,$E0  ;
 $BD54 DEFB $2B,$C0  ;
 $BD56 DEFB $3F,$C0  ;
 $BD58 DEFB $7B,$C0  ;
 $BD5A DEFB $5B,$C0  ;
 $BD5C DEFB $74,$3E  ;
 $BD5E DEFB $54,$D0  ;
 $BD60 DEFB $74,$D0  ;
 $BD62 DEFB $57,$80  ;
 $BD64 DEFB $60,$00  ;
 $BD66 DEFB $67,$C0  ;
 $BD68 DEFB $2E,$E0  ;
 $BD6A DEFB $2E,$E0  ;
 $BD6C DEFB $2D,$E0  ;
 $BD6E DEFB $0E,$00  ;
 $BD70 DEFB $07,$80  ; }
; Walking right frame 2.
 $BD72 DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BD73 DEFB $07,$F8  ; {#JETMAN$0D(jetman-walk-right-02)
 $BD75 DEFB $07,$70  ;
 $BD77 DEFB $06,$60  ;
 $BD79 DEFB $03,$40  ;
 $BD7B DEFB $03,$A0  ;
 $BD7D DEFB $7D,$C0  ;
 $BD7F DEFB $55,$C0  ;
 $BD81 DEFB $2B,$C0  ;
 $BD83 DEFB $3F,$C0  ;
 $BD85 DEFB $7B,$C0  ;
 $BD87 DEFB $5B,$C0  ;
 $BD89 DEFB $74,$3E  ;
 $BD8B DEFB $54,$D0  ;
 $BD8D DEFB $74,$D0  ;
 $BD8F DEFB $57,$80  ;
 $BD91 DEFB $60,$00  ;
 $BD93 DEFB $67,$C0  ;
 $BD95 DEFB $2E,$E0  ;
 $BD97 DEFB $4E,$E0  ;
 $BD99 DEFB $4D,$E0  ;
 $BD9B DEFB $0E,$00  ;
 $BD9D DEFB $07,$80  ; }
; Walking right frame 3.
 $BD9F DEFB $16      ; Height = #N(#PEEK(#PC)) pixels.
 $BDA0 DEFB $01,$E0  ; {#JETMAN$0E(jetman-walk-right-03)
 $BDA2 DEFB $01,$C0  ;
 $BDA4 DEFB $01,$80  ;
 $BDA6 DEFB $00,$00  ;
 $BDA8 DEFB $01,$80  ;
 $BDAA DEFB $7D,$C0  ;
 $BDAC DEFB $55,$C0  ;
 $BDAE DEFB $2B,$C0  ;
 $BDB0 DEFB $3F,$C0  ;
 $BDB2 DEFB $7B,$C0  ;
 $BDB4 DEFB $5B,$C0  ;
 $BDB6 DEFB $74,$3E  ;
 $BDB8 DEFB $54,$D0  ;
 $BDBA DEFB $74,$D0  ;
 $BDBC DEFB $57,$80  ;
 $BDBE DEFB $60,$00  ;
 $BDC0 DEFB $67,$C0  ;
 $BDC2 DEFB $2E,$E0  ;
 $BDC4 DEFB $2E,$E0  ;
 $BDC6 DEFB $2D,$E0  ;
 $BDC8 DEFB $0E,$00  ;
 $BDCA DEFB $07,$80  ; }

; Sprite: Jetman Flying
;
; .
;
; .
;
; Flying left frame 1.
b$BDCC DEFB $18      ; Height = #N(#PEEK(#PC)) pixels.
 $BDCD DEFB $00,$14  ; {#JETMAN$00(jetman-fly-left-01)
 $BDCF DEFB $00,$28  ;
 $BDD1 DEFB $00,$16  ;
 $BDD3 DEFB $00,$40  ;
 $BDD5 DEFB $00,$28  ;
 $BDD7 DEFB $F0,$54  ;
 $BDD9 DEFB $70,$00  ;
 $BDDB DEFB $00,$7C  ;
 $BDDD DEFB $30,$54  ;
 $BDDF DEFB $3F,$28  ;
 $BDE1 DEFB $3F,$78  ;
 $BDE3 DEFB $03,$BC  ;
 $BDE5 DEFB $07,$B4  ;
 $BDE7 DEFB $F8,$5C  ;
 $BDE9 DEFB $16,$54  ;
 $BDEB DEFB $16,$5C  ;
 $BDED DEFB $03,$D4  ;
 $BDEF DEFB $00,$0C  ;
 $BDF1 DEFB $07,$CC  ;
 $BDF3 DEFB $0E,$E8  ;
 $BDF5 DEFB $0E,$E8  ;
 $BDF7 DEFB $0F,$68  ;
 $BDF9 DEFB $00,$E0  ;
 $BDFB DEFB $03,$C0  ; }
; Flying left frame 2.
 $BDFD DEFB $18      ; Height = #N(#PEEK(#PC)) pixels.
 $BDFE DEFB $00,$13  ; {#JETMAN$01(jetman-fly-left-02)
 $BE00 DEFB $00,$48  ;
 $BE02 DEFB $00,$22  ;
 $BE04 DEFB $00,$44  ;
 $BE06 DEFB $00,$11  ;
 $BE08 DEFB $F0,$AC  ;
 $BE0A DEFB $70,$00  ;
 $BE0C DEFB $00,$7C  ;
 $BE0E DEFB $30,$54  ;
 $BE10 DEFB $3F,$28  ;
 $BE12 DEFB $3F,$78  ;
 $BE14 DEFB $03,$BC  ;
 $BE16 DEFB $07,$B4  ;
 $BE18 DEFB $F8,$5C  ;
 $BE1A DEFB $16,$54  ;
 $BE1C DEFB $16,$5C  ;
 $BE1E DEFB $03,$D4  ;
 $BE20 DEFB $00,$0C  ;
 $BE22 DEFB $07,$CC  ;
 $BE24 DEFB $0E,$E8  ;
 $BE26 DEFB $0E,$E8  ;
 $BE28 DEFB $0F,$68  ;
 $BE2A DEFB $00,$E0  ;
 $BE2C DEFB $03,$C0  ; }
; Flying right frame 1.
 $BE2E DEFB $18      ; Height = #N(#PEEK(#PC)) pixels.
 $BE2F DEFB $C8,$00  ; {#JETMAN$04(jetman-fly-right-01)
 $BE31 DEFB $12,$00  ;
 $BE33 DEFB $44,$00  ;
 $BE35 DEFB $22,$00  ;
 $BE37 DEFB $88,$00  ;
 $BE39 DEFB $35,$0F  ;
 $BE3B DEFB $00,$0E  ;
 $BE3D DEFB $3E,$00  ;
 $BE3F DEFB $2A,$0C  ;
 $BE41 DEFB $14,$FC  ;
 $BE43 DEFB $1E,$FC  ;
 $BE45 DEFB $3D,$C0  ;
 $BE47 DEFB $2D,$E0  ;
 $BE49 DEFB $3A,$1F  ;
 $BE4B DEFB $2A,$68  ;
 $BE4D DEFB $3A,$68  ;
 $BE4F DEFB $2B,$C0  ;
 $BE51 DEFB $30,$00  ;
 $BE53 DEFB $33,$E0  ;
 $BE55 DEFB $17,$70  ;
 $BE57 DEFB $17,$70  ;
 $BE59 DEFB $16,$F0  ;
 $BE5B DEFB $07,$00  ;
 $BE5D DEFB $03,$C0  ; }
; Flying right frame 2.
 $BE5F DEFB $18      ; Height = #N(#PEEK(#PC)) pixels.
 $BE60 DEFB $28,$00  ; {#JETMAN$05(jetman-fly-right-02)
 $BE62 DEFB $14,$00  ;
 $BE64 DEFB $68,$00  ;
 $BE66 DEFB $02,$00  ;
 $BE68 DEFB $14,$00  ;
 $BE6A DEFB $2A,$0F  ;
 $BE6C DEFB $00,$0E  ;
 $BE6E DEFB $3E,$00  ;
 $BE70 DEFB $2A,$0C  ;
 $BE72 DEFB $14,$FC  ;
 $BE74 DEFB $1E,$FC  ;
 $BE76 DEFB $3D,$C0  ;
 $BE78 DEFB $2D,$E0  ;
 $BE7A DEFB $3A,$1F  ;
 $BE7C DEFB $2A,$68  ;
 $BE7E DEFB $3A,$68  ;
 $BE80 DEFB $2B,$C0  ;
 $BE82 DEFB $30,$00  ;
 $BE84 DEFB $33,$E0  ;
 $BE86 DEFB $17,$70  ;
 $BE88 DEFB $17,$70  ;
 $BE8A DEFB $16,$F0  ;
 $BE8C DEFB $07,$00  ;
 $BE8E DEFB $03,$C0  ; }

; Graphic: Moon Rover
;
; .
;
; .
;
; Right frame 1.
b$BE90 DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $BE91 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $BE92 DEFB $04,$28,$00,$00,$01,$94,$00     ; {#ROVER$04(rover-right-01)
 $BE99 DEFB $30,$0C,$00,$00,$08,$06,$00     ;
 $BEA0 DEFB $43,$E4,$00,$00,$14,$F2,$00     ;
 $BEA7 DEFB $25,$70,$80,$00,$49,$98,$00     ;
 $BEAE DEFB $61,$3A,$C0,$00,$DA,$9D,$00     ;
 $BEB5 DEFB $69,$58,$E0,$01,$98,$24,$80     ;
 $BEBC DEFB $A2,$89,$70,$03,$AA,$84,$80     ;
 $BEC3 DEFB $B2,$79,$7F,$FF,$A8,$5D,$00     ;
 $BECA DEFB $71,$88,$7F,$FF,$9C,$09,$00     ;
 $BED1 DEFB $70,$12,$00,$00,$0E,$30,$00     ;
 $BED8 DEFB $38,$44,$7F,$FF,$CF,$01,$00     ;
 $BEDF DEFB $1E,$1A,$E0,$DF,$AB,$FA,$40     ;
 $BEE6 DEFB $2F,$FD,$EE,$DE,$35,$90,$20     ;
 $BEED DEFB $16,$63,$E6,$D9,$B8,$61,$38     ;
 $BEF4 DEFB $41,$87,$E0,$C7,$BC,$07,$9E     ;
 $BEFB DEFB $F0,$0F,$FF,$FF,$FE,$FF,$9F     ;
 $BF02 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $BF09 DEFB $6A,$FF,$FF,$FF,$FF,$FF,$FF     ;
 $BF10 DEFB $35,$7F,$FF,$F8,$03,$FF,$FC     ;
 $BF17 DEFB $1A,$BC,$07,$F9,$FF,$FF,$F0     ;
 $BF1E DEFB $0F,$FF,$FB,$F3,$E0,$00,$00     ;
 $BF25 DEFB $00,$00,$0B,$F3,$DF,$F9,$80     ;
 $BF2C DEFB $00,$00,$03,$E7,$BF,$86,$00     ;
 $BF33 DEFB $00,$00,$03,$E7,$70,$18,$00     ;
 $BF3A DEFB $00,$00,$01,$CE,$81,$E0,$00     ;
 $BF41 DEFB $00,$00,$01,$CD,$1F,$00,$00     ;
 $BF48 DEFB $00,$00,$00,$FB,$F0,$00,$00     ; }
; Right frame 2.
 $BF4F DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $BF50 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $BF51 DEFB $04,$28,$00,$00,$03,$1C,$00     ; {#ROVER$05(rover-right-02)
 $BF58 DEFB $18,$08,$00,$00,$04,$04,$00     ;
 $BF5F DEFB $33,$E4,$00,$00,$10,$F2,$00     ;
 $BF66 DEFB $46,$70,$80,$00,$59,$18,$80     ;
 $BF6D DEFB $62,$5B,$C0,$00,$CB,$AD,$80     ;
 $BF74 DEFB $69,$99,$E0,$01,$9A,$45,$00     ;
 $BF7B DEFB $62,$B8,$70,$03,$98,$9C,$00     ;
 $BF82 DEFB $72,$48,$7F,$FF,$98,$45,$00     ;
 $BF89 DEFB $B1,$8A,$7F,$FF,$BC,$08,$00     ;
 $BF90 DEFB $B0,$32,$00,$00,$2E,$51,$00     ;
 $BF97 DEFB $38,$42,$7F,$FF,$CF,$01,$00     ;
 $BF9E DEFB $3E,$1C,$E0,$C7,$A3,$FC,$40     ;
 $BFA5 DEFB $17,$F9,$EE,$DF,$B6,$F0,$20     ;
 $BFAC DEFB $0F,$83,$E6,$DE,$38,$19,$38     ;
 $BFB3 DEFB $40,$67,$E0,$D9,$BC,$07,$9E     ;
 $BFBA DEFB $F0,$0F,$FF,$FF,$FE,$FF,$9F     ;
 $BFC1 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $BFC8 DEFB $6A,$FF,$FF,$FF,$FF,$FF,$FF     ;
 $BFCF DEFB $35,$7F,$FF,$F8,$03,$FF,$FC     ;
 $BFD6 DEFB $1A,$BC,$07,$F9,$FF,$FF,$F0     ;
 $BFDD DEFB $0F,$FF,$FB,$F3,$E0,$00,$00     ;
 $BFE4 DEFB $00,$00,$0B,$F3,$DF,$F9,$80     ;
 $BFEB DEFB $00,$00,$03,$E7,$BF,$86,$00     ;
 $BFF2 DEFB $00,$00,$03,$E7,$70,$18,$00     ;
 $BFF9 DEFB $00,$00,$01,$CE,$81,$E0,$00     ;
 $C000 DEFB $00,$00,$01,$CD,$1F,$00,$00     ;
 $C007 DEFB $00,$00,$00,$FB,$F0,$00,$00     ; }
; Right frame 3.
 $C00E DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C00F DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C010 DEFB $08,$30,$00,$00,$01,$10,$00     ; {#ROVER$06(rover-right-03)
 $C017 DEFB $18,$08,$00,$00,$04,$04,$00     ;
 $C01E DEFB $33,$E4,$00,$00,$00,$F1,$00     ;
 $C025 DEFB $44,$72,$80,$00,$69,$39,$00     ;
 $C02C DEFB $A3,$99,$C0,$00,$EA,$2C,$00     ;
 $C033 DEFB $68,$B8,$E0,$01,$9B,$4D,$00     ;
 $C03A DEFB $62,$58,$70,$03,$98,$B5,$00     ;
 $C041 DEFB $72,$08,$7F,$FF,$98,$45,$00     ;
 $C048 DEFB $F1,$AA,$7F,$FF,$8C,$19,$80     ;
 $C04F DEFB $B0,$11,$00,$00,$1E,$50,$80     ;
 $C056 DEFB $78,$42,$7F,$FF,$DF,$02,$00     ;
 $C05D DEFB $3E,$1C,$E0,$D9,$A7,$FC,$40     ;
 $C064 DEFB $1F,$F9,$EE,$C7,$B0,$EC,$20     ;
 $C06B DEFB $0B,$D3,$E6,$DF,$B3,$01,$38     ;
 $C072 DEFB $44,$67,$E0,$DE,$3C,$07,$9E     ;
 $C079 DEFB $F0,$0F,$FF,$FF,$FE,$FF,$9F     ;
 $C080 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $C087 DEFB $6A,$FF,$FF,$FF,$FF,$FF,$FF     ;
 $C08E DEFB $35,$7F,$FF,$F8,$03,$FF,$FC     ;
 $C095 DEFB $1A,$BC,$07,$F9,$FF,$FF,$F0     ;
 $C09C DEFB $0F,$FF,$FB,$F3,$E0,$00,$00     ;
 $C0A3 DEFB $00,$00,$0B,$F3,$DF,$F9,$80     ;
 $C0AA DEFB $00,$00,$03,$E7,$BF,$86,$00     ;
 $C0B1 DEFB $00,$00,$03,$E7,$70,$18,$00     ;
 $C0B8 DEFB $00,$00,$01,$CE,$81,$E0,$00     ;
 $C0BF DEFB $00,$00,$01,$CD,$1F,$00,$00     ;
 $C0C6 DEFB $00,$00,$00,$FB,$F0,$00,$00     ; }
; Right frame 4.
 $C0CD DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C0CE DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C0CF DEFB $1C,$20,$00,$00,$05,$10,$00     ; {#ROVER$07(rover-right-04)
 $C0D6 DEFB $28,$04,$00,$00,$08,$06,$00     ;
 $C0DD DEFB $33,$E2,$00,$00,$00,$F8,$00     ;
 $C0E4 DEFB $44,$F0,$80,$00,$49,$5A,$00     ;
 $C0EB DEFB $20,$BA,$C0,$00,$DA,$4D,$00     ;
 $C0F2 DEFB $AD,$3A,$E0,$01,$AA,$55,$00     ;
 $C0F9 DEFB $A2,$4A,$70,$03,$A8,$A4,$80     ;
 $C100 DEFB $72,$49,$7F,$FF,$98,$74,$80     ;
 $C107 DEFB $71,$B9,$7F,$FF,$8C,$09,$00     ;
 $C10E DEFB $30,$12,$00,$00,$E0,$50,$00     ;
 $C115 DEFB $38,$44,$7F,$FF,$D7,$04,$00     ;
 $C11C DEFB $5E,$1C,$E0,$DE,$2F,$FA,$40     ;
 $C123 DEFB $3F,$F5,$EE,$D9,$B1,$34,$20     ;
 $C12A DEFB $04,$EB,$E6,$C7,$B8,$C1,$38     ;
 $C131 DEFB $43,$07,$E0,$DF,$BC,$07,$9E     ;
 $C138 DEFB $F0,$0F,$FF,$FF,$FE,$FF,$9F     ;
 $C13F DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $C146 DEFB $6A,$FF,$FF,$FF,$FF,$FF,$FF     ;
 $C14D DEFB $35,$7F,$FF,$F8,$03,$FF,$FC     ;
 $C154 DEFB $1A,$BC,$07,$F9,$FF,$FF,$F0     ;
 $C15B DEFB $0F,$FF,$FB,$F3,$E0,$00,$00     ;
 $C162 DEFB $00,$00,$0B,$F3,$DF,$F9,$80     ;
 $C169 DEFB $00,$00,$03,$E7,$BF,$86,$00     ;
 $C170 DEFB $00,$00,$03,$E7,$70,$18,$00     ;
 $C177 DEFB $00,$00,$01,$CE,$81,$E0,$00     ;
 $C17E DEFB $00,$00,$01,$CD,$1F,$00,$00     ;
 $C185 DEFB $00,$00,$00,$FB,$F0,$00,$00     ; }
; Right frame 5.
 $C18C DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C18D DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C18E DEFB $02,$14,$00,$00,$00,$CA,$00,$00 ; {#ROVER$11(rover-right-05)
 $C196 DEFB $18,$06,$00,$00,$04,$03,$00,$00 ;
 $C19E DEFB $21,$F2,$00,$00,$0A,$79,$00,$00 ;
 $C1A6 DEFB $12,$B8,$40,$00,$24,$CC,$00,$00 ;
 $C1AE DEFB $30,$9D,$60,$00,$6D,$4E,$80,$00 ;
 $C1B6 DEFB $34,$AC,$70,$00,$CC,$12,$40,$00 ;
 $C1BE DEFB $51,$44,$B8,$01,$D5,$42,$40,$00 ;
 $C1C6 DEFB $59,$3C,$BF,$FF,$D4,$2E,$80,$00 ;
 $C1CE DEFB $38,$C4,$3F,$FF,$CE,$04,$80,$00 ;
 $C1D6 DEFB $38,$09,$00,$00,$07,$18,$00,$00 ;
 $C1DE DEFB $1C,$22,$3F,$FF,$E7,$80,$80,$00 ;
 $C1E6 DEFB $0F,$0D,$70,$6F,$D5,$FD,$20,$00 ;
 $C1EE DEFB $17,$FE,$F7,$6F,$1A,$C8,$10,$00 ;
 $C1F6 DEFB $0B,$31,$F3,$6C,$DC,$30,$9C,$00 ;
 $C1FE DEFB $20,$C3,$F0,$63,$DE,$03,$CF,$00 ;
 $C206 DEFB $78,$07,$FF,$FF,$FF,$7F,$CF,$80 ;
 $C20E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C216 DEFB $35,$7F,$FF,$FF,$FF,$FF,$FF,$80 ;
 $C21E DEFB $1A,$BF,$FF,$FC,$01,$FF,$FE,$00 ;
 $C226 DEFB $0D,$5E,$03,$FC,$FF,$FF,$F8,$00 ;
 $C22E DEFB $07,$FF,$FD,$F9,$F0,$00,$00,$00 ;
 $C236 DEFB $00,$00,$05,$F9,$EF,$FC,$C0,$00 ;
 $C23E DEFB $00,$00,$01,$F3,$DF,$C3,$00,$00 ;
 $C246 DEFB $00,$00,$01,$F3,$B8,$0C,$00,$00 ;
 $C24E DEFB $00,$00,$00,$E7,$40,$F0,$00,$00 ;
 $C256 DEFB $00,$00,$00,$E6,$8F,$80,$00,$00 ;
 $C25E DEFB $00,$00,$00,$7D,$F8,$00,$00,$00 ; }
; Right frame 6.
 $C266 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C267 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C268 DEFB $01,$0A,$00,$00,$00,$65,$00,$00 ; {#ROVER$12(rover-right-06)
 $C270 DEFB $0C,$03,$00,$00,$02,$01,$80,$00 ;
 $C278 DEFB $10,$F9,$00,$00,$05,$3C,$80,$00 ;
 $C280 DEFB $09,$5C,$20,$00,$12,$66,$00,$00 ;
 $C288 DEFB $18,$4E,$B0,$00,$36,$A7,$40,$00 ;
 $C290 DEFB $1A,$56,$38,$00,$66,$09,$20,$00 ;
 $C298 DEFB $28,$A2,$5C,$00,$EA,$A1,$20,$00 ;
 $C2A0 DEFB $2C,$9E,$5F,$FF,$EA,$17,$40,$00 ;
 $C2A8 DEFB $1C,$62,$1F,$FF,$E7,$02,$40,$00 ;
 $C2B0 DEFB $1C,$04,$80,$00,$03,$8C,$00,$00 ;
 $C2B8 DEFB $0E,$11,$1F,$FF,$F3,$C0,$40,$00 ;
 $C2C0 DEFB $07,$86,$B8,$37,$EA,$FE,$90,$00 ;
 $C2C8 DEFB $0B,$FF,$7B,$B7,$8D,$64,$08,$00 ;
 $C2D0 DEFB $05,$98,$F9,$B6,$6E,$18,$4E,$00 ;
 $C2D8 DEFB $10,$61,$F8,$31,$EF,$01,$E7,$80 ;
 $C2E0 DEFB $3C,$03,$FF,$FF,$FF,$BF,$E7,$C0 ;
 $C2E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C2F0 DEFB $1A,$BF,$FF,$FF,$FF,$FF,$FF,$C0 ;
 $C2F8 DEFB $0D,$5F,$FF,$FE,$00,$FF,$FF,$00 ;
 $C300 DEFB $06,$AF,$01,$FE,$7F,$FF,$FC,$00 ;
 $C308 DEFB $03,$FF,$FE,$FC,$F8,$00,$00,$00 ;
 $C310 DEFB $00,$00,$02,$FC,$F7,$FE,$60,$00 ;
 $C318 DEFB $00,$00,$00,$F9,$EF,$E1,$80,$00 ;
 $C320 DEFB $00,$00,$00,$F9,$DC,$06,$00,$00 ;
 $C328 DEFB $00,$00,$00,$73,$A0,$78,$00,$00 ;
 $C330 DEFB $00,$00,$00,$73,$47,$C0,$00,$00 ;
 $C338 DEFB $00,$00,$00,$3E,$FC,$00,$00,$00 ; }
; Right frame 7.
 $C340 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C341 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C342 DEFB $00,$85,$00,$00,$00,$32,$80,$00 ; {#ROVER$13(rover-right-07)
 $C34A DEFB $06,$01,$80,$00,$01,$00,$C0,$00 ;
 $C352 DEFB $08,$7C,$80,$00,$02,$9E,$40,$00 ;
 $C35A DEFB $04,$AE,$10,$00,$09,$33,$00,$00 ;
 $C362 DEFB $0C,$27,$58,$00,$1B,$53,$A0,$00 ;
 $C36A DEFB $0D,$2B,$1C,$00,$33,$04,$90,$00 ;
 $C372 DEFB $14,$51,$2E,$00,$75,$50,$90,$00 ;
 $C37A DEFB $16,$4F,$2F,$FF,$F5,$0B,$A0,$00 ;
 $C382 DEFB $0E,$31,$0F,$FF,$F3,$81,$20,$00 ;
 $C38A DEFB $0E,$02,$40,$00,$01,$C6,$00,$00 ;
 $C392 DEFB $07,$08,$8F,$FF,$F9,$E0,$20,$00 ;
 $C39A DEFB $03,$C3,$5C,$1B,$F5,$7F,$48,$00 ;
 $C3A2 DEFB $05,$FF,$BD,$DB,$C6,$B2,$04,$00 ;
 $C3AA DEFB $02,$CC,$7C,$DB,$37,$0C,$27,$00 ;
 $C3B2 DEFB $08,$30,$FC,$18,$F7,$80,$F3,$C0 ;
 $C3BA DEFB $1E,$01,$FF,$FF,$FF,$DF,$F3,$E0 ;
 $C3C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C3CA DEFB $0D,$5F,$FF,$FF,$FF,$FF,$FF,$E0 ;
 $C3D2 DEFB $06,$AF,$FF,$FF,$00,$7F,$FF,$80 ;
 $C3DA DEFB $03,$57,$80,$FF,$3F,$FF,$FE,$00 ;
 $C3E2 DEFB $01,$FF,$FF,$7E,$7C,$00,$00,$00 ;
 $C3EA DEFB $00,$00,$01,$7E,$7B,$FF,$30,$00 ;
 $C3F2 DEFB $00,$00,$00,$7C,$F7,$F0,$C0,$00 ;
 $C3FA DEFB $00,$00,$00,$7C,$EE,$03,$00,$00 ;
 $C402 DEFB $00,$00,$00,$39,$D0,$3C,$00,$00 ;
 $C40A DEFB $00,$00,$00,$39,$A3,$E0,$00,$00 ;
 $C412 DEFB $00,$00,$00,$1F,$7E,$00,$00,$00 ; }
; Right frame 8.
 $C41A DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C41B DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C41C DEFB $00,$42,$80,$00,$00,$19,$40,$00 ; {#ROVER$14(rover-right-08)
 $C424 DEFB $03,$00,$C0,$00,$00,$80,$60,$00 ;
 $C42C DEFB $04,$3E,$40,$00,$01,$4F,$20,$00 ;
 $C434 DEFB $02,$57,$08,$00,$04,$99,$80,$00 ;
 $C43C DEFB $06,$13,$AC,$00,$0D,$A9,$D0,$00 ;
 $C444 DEFB $06,$95,$8E,$00,$19,$82,$48,$00 ;
 $C44C DEFB $0A,$28,$97,$00,$3A,$A8,$48,$00 ;
 $C454 DEFB $0B,$27,$97,$FF,$FA,$85,$D0,$00 ;
 $C45C DEFB $07,$18,$87,$FF,$F9,$C0,$90,$00 ;
 $C464 DEFB $07,$01,$20,$00,$00,$E3,$00,$00 ;
 $C46C DEFB $03,$84,$47,$FF,$FC,$F0,$10,$00 ;
 $C474 DEFB $01,$E1,$AE,$0D,$FA,$BF,$A4,$00 ;
 $C47C DEFB $02,$FF,$DE,$ED,$E3,$59,$02,$00 ;
 $C484 DEFB $01,$66,$3E,$6D,$9B,$86,$13,$80 ;
 $C48C DEFB $04,$18,$7E,$0C,$7B,$C0,$79,$E0 ;
 $C494 DEFB $0F,$00,$FF,$FF,$FF,$EF,$F9,$F0 ;
 $C49C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C4A4 DEFB $06,$AF,$FF,$FF,$FF,$FF,$FF,$F0 ;
 $C4AC DEFB $03,$57,$FF,$FF,$80,$3F,$FF,$C0 ;
 $C4B4 DEFB $01,$AB,$C0,$7F,$9F,$FF,$FF,$00 ;
 $C4BC DEFB $00,$FF,$FF,$BF,$3E,$00,$00,$00 ;
 $C4C4 DEFB $00,$00,$00,$BF,$3D,$FF,$98,$00 ;
 $C4CC DEFB $00,$00,$00,$3E,$7B,$F8,$60,$00 ;
 $C4D4 DEFB $00,$00,$00,$3E,$77,$01,$80,$00 ;
 $C4DC DEFB $00,$00,$00,$1C,$E8,$1E,$00,$00 ;
 $C4E4 DEFB $00,$00,$00,$1C,$D1,$F0,$00,$00 ;
 $C4EC DEFB $00,$00,$00,$0F,$BF,$00,$00,$00 ; }
; Right frame 9.
 $C4F4 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C4F5 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C4F6 DEFB $00,$21,$40,$00,$00,$0C,$A0,$00 ; {#ROVER$15(rover-right-09)
 $C4FE DEFB $01,$80,$60,$00,$00,$40,$30,$00 ;
 $C506 DEFB $02,$1F,$20,$00,$00,$A7,$90,$00 ;
 $C50E DEFB $01,$2B,$84,$00,$02,$4C,$C0,$00 ;
 $C516 DEFB $03,$09,$D6,$00,$06,$D4,$E8,$00 ;
 $C51E DEFB $03,$4A,$C7,$00,$0C,$C1,$24,$00 ;
 $C526 DEFB $05,$14,$4B,$80,$1D,$54,$24,$00 ;
 $C52E DEFB $05,$93,$CB,$FF,$FD,$42,$E8,$00 ;
 $C536 DEFB $03,$8C,$43,$FF,$FC,$E0,$48,$00 ;
 $C53E DEFB $03,$80,$90,$00,$00,$71,$80,$00 ;
 $C546 DEFB $01,$C2,$23,$FF,$FE,$78,$08,$00 ;
 $C54E DEFB $00,$F0,$D7,$06,$FD,$5F,$D2,$00 ;
 $C556 DEFB $01,$7F,$EF,$76,$F1,$AC,$81,$00 ;
 $C55E DEFB $00,$B3,$1F,$36,$CD,$C3,$09,$C0 ;
 $C566 DEFB $02,$0C,$3F,$06,$3D,$E0,$3C,$F0 ;
 $C56E DEFB $07,$80,$7F,$FF,$FF,$F7,$FC,$F8 ;
 $C576 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C57E DEFB $03,$57,$FF,$FF,$FF,$FF,$FF,$F8 ;
 $C586 DEFB $01,$AB,$FF,$FF,$C0,$1F,$FF,$E0 ;
 $C58E DEFB $00,$D5,$E0,$3F,$CF,$FF,$FF,$80 ;
 $C596 DEFB $00,$7F,$FF,$DF,$9F,$00,$00,$00 ;
 $C59E DEFB $00,$00,$00,$5F,$9E,$FF,$CC,$00 ;
 $C5A6 DEFB $00,$00,$00,$1F,$3D,$FC,$30,$00 ;
 $C5AE DEFB $00,$00,$00,$1F,$3B,$80,$C0,$00 ;
 $C5B6 DEFB $00,$00,$00,$0E,$74,$0F,$00,$00 ;
 $C5BE DEFB $00,$00,$00,$0E,$68,$F8,$00,$00 ;
 $C5C6 DEFB $00,$00,$00,$07,$DF,$80,$00,$00 ; }
; Right frame 10.
 $C5CE DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C5CF DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C5D0 DEFB $00,$10,$A0,$00,$00,$06,$50,$00 ; {#ROVER$16(rover-right-0A)
 $C5D8 DEFB $00,$C0,$30,$00,$00,$20,$18,$00 ;
 $C5E0 DEFB $01,$0F,$90,$00,$00,$53,$C8,$00 ;
 $C5E8 DEFB $00,$95,$C2,$00,$01,$26,$60,$00 ;
 $C5F0 DEFB $01,$84,$EB,$00,$03,$6A,$74,$00 ;
 $C5F8 DEFB $01,$A5,$63,$80,$06,$60,$92,$00 ;
 $C600 DEFB $02,$8A,$25,$C0,$0E,$AA,$12,$00 ;
 $C608 DEFB $02,$C9,$E5,$FF,$FE,$A1,$74,$00 ;
 $C610 DEFB $01,$C6,$21,$FF,$FE,$70,$24,$00 ;
 $C618 DEFB $01,$C0,$48,$00,$00,$38,$C0,$00 ;
 $C620 DEFB $00,$E1,$11,$FF,$FF,$3C,$04,$00 ;
 $C628 DEFB $00,$78,$6B,$83,$7E,$AF,$E9,$00 ;
 $C630 DEFB $00,$BF,$F7,$BB,$78,$D6,$40,$80 ;
 $C638 DEFB $00,$59,$8F,$9B,$66,$E1,$84,$E0 ;
 $C640 DEFB $01,$06,$1F,$83,$1E,$F0,$1E,$78 ;
 $C648 DEFB $03,$C0,$3F,$FF,$FF,$FB,$FE,$7C ;
 $C650 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C658 DEFB $01,$AB,$FF,$FF,$FF,$FF,$FF,$FC ;
 $C660 DEFB $00,$D5,$FF,$FF,$E0,$0F,$FF,$F0 ;
 $C668 DEFB $00,$6A,$F0,$1F,$E7,$FF,$FF,$C0 ;
 $C670 DEFB $00,$3F,$FF,$EF,$CF,$80,$00,$00 ;
 $C678 DEFB $00,$00,$00,$2F,$CF,$7F,$E6,$00 ;
 $C680 DEFB $00,$00,$00,$0F,$9E,$FE,$18,$00 ;
 $C688 DEFB $00,$00,$00,$0F,$9D,$C0,$60,$00 ;
 $C690 DEFB $00,$00,$00,$07,$3A,$07,$80,$00 ;
 $C698 DEFB $00,$00,$00,$07,$34,$7C,$00,$00 ;
 $C6A0 DEFB $00,$00,$00,$03,$EF,$C0,$00,$00 ; }
; Right frame 11.
 $C6A8 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C6A9 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C6AA DEFB $00,$08,$50,$00,$00,$03,$28,$00 ; {#ROVER$17(rover-right-0B)
 $C6B2 DEFB $00,$60,$18,$00,$00,$10,$0C,$00 ;
 $C6BA DEFB $00,$87,$C8,$00,$00,$29,$E4,$00 ;
 $C6C2 DEFB $00,$4A,$E1,$00,$00,$93,$30,$00 ;
 $C6CA DEFB $00,$C2,$75,$80,$01,$B5,$3A,$00 ;
 $C6D2 DEFB $00,$D2,$B1,$C0,$03,$30,$49,$00 ;
 $C6DA DEFB $01,$45,$12,$E0,$07,$55,$09,$00 ;
 $C6E2 DEFB $01,$64,$F2,$FF,$FF,$50,$BA,$00 ;
 $C6EA DEFB $00,$E3,$10,$FF,$FF,$38,$12,$00 ;
 $C6F2 DEFB $00,$E0,$24,$00,$00,$1C,$60,$00 ;
 $C6FA DEFB $00,$70,$88,$FF,$FF,$9E,$02,$00 ;
 $C702 DEFB $00,$3C,$35,$C1,$BF,$57,$F4,$80 ;
 $C70A DEFB $00,$5F,$FB,$DD,$BC,$6B,$20,$40 ;
 $C712 DEFB $00,$2C,$C7,$CD,$B3,$70,$C2,$70 ;
 $C71A DEFB $00,$83,$0F,$C1,$8F,$78,$0F,$3C ;
 $C722 DEFB $01,$E0,$1F,$FF,$FF,$FD,$FF,$3E ;
 $C72A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $C732 DEFB $00,$D5,$FF,$FF,$FF,$FF,$FF,$FE ;
 $C73A DEFB $00,$6A,$FF,$FF,$F0,$07,$FF,$F8 ;
 $C742 DEFB $00,$35,$78,$0F,$F3,$FF,$FF,$E0 ;
 $C74A DEFB $00,$1F,$FF,$F7,$E7,$C0,$00,$00 ;
 $C752 DEFB $00,$00,$00,$17,$E7,$BF,$F3,$00 ;
 $C75A DEFB $00,$00,$00,$07,$CF,$7F,$0C,$00 ;
 $C762 DEFB $00,$00,$00,$07,$CE,$E0,$30,$00 ;
 $C76A DEFB $00,$00,$00,$03,$9D,$03,$C0,$00 ;
 $C772 DEFB $00,$00,$00,$03,$9A,$3E,$00,$00 ;
 $C77A DEFB $00,$00,$00,$01,$F7,$E0,$00,$00 ; }
; Left frame 1.
 $C782 DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C783 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C784 DEFB $00,$29,$80,$00,$00,$14,$20     ; {#ROVER$03(rover-left-04*)
 $C78B DEFB $00,$60,$10,$00,$00,$30,$0C     ;
 $C792 DEFB $00,$4F,$28,$00,$00,$27,$C2     ;
 $C799 DEFB $00,$19,$92,$00,$01,$0E,$A4     ;
 $C7A0 DEFB $00,$B9,$5B,$00,$03,$5C,$86     ;
 $C7A7 DEFB $01,$24,$19,$80,$07,$1A,$96     ;
 $C7AE DEFB $01,$21,$55,$C0,$0E,$91,$45     ;
 $C7B5 DEFB $00,$BA,$15,$FF,$FE,$9E,$4D     ;
 $C7BC DEFB $00,$90,$39,$FF,$FE,$11,$8E     ;
 $C7C3 DEFB $00,$0C,$70,$00,$00,$48,$0E     ;
 $C7CA DEFB $00,$80,$F3,$FF,$FE,$22,$1C     ;
 $C7D1 DEFB $02,$5F,$D5,$FB,$07,$58,$78     ;
 $C7D8 DEFB $04,$09,$AC,$7B,$77,$BF,$F4     ;
 $C7DF DEFB $1C,$86,$1D,$9B,$67,$C6,$68     ;
 $C7E6 DEFB $79,$E0,$3D,$E3,$07,$E1,$82     ;
 $C7ED DEFB $F9,$FF,$7F,$FF,$FF,$F0,$0F     ;
 $C7F4 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $C7FB DEFB $FF,$FF,$FF,$FF,$FF,$FF,$56     ;
 $C802 DEFB $3F,$FF,$C0,$1F,$FF,$FE,$AC     ;
 $C809 DEFB $0F,$FF,$FF,$9F,$E0,$3D,$58     ;
 $C810 DEFB $00,$00,$07,$CF,$DF,$FF,$F0     ;
 $C817 DEFB $01,$9F,$FB,$CF,$D0,$00,$00     ;
 $C81E DEFB $00,$61,$FD,$E7,$C0,$00,$00     ;
 $C825 DEFB $00,$18,$0E,$E7,$C0,$00,$00     ;
 $C82C DEFB $00,$07,$81,$73,$80,$00,$00     ;
 $C833 DEFB $00,$00,$F8,$B3,$80,$00,$00     ;
 $C83A DEFB $00,$00,$0F,$DF,$00,$00,$00     ; }
; Left frame 2.
 $C841 DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C842 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C843 DEFB $00,$38,$C0,$00,$00,$14,$20     ; {#ROVER$02(rover-left-03*)
 $C84A DEFB $00,$20,$20,$00,$00,$10,$18     ;
 $C851 DEFB $00,$4F,$08,$00,$00,$27,$CC     ;
 $C858 DEFB $01,$18,$9A,$00,$01,$0E,$62     ;
 $C85F DEFB $01,$B5,$D3,$00,$03,$DA,$46     ;
 $C866 DEFB $00,$A2,$59,$80,$07,$99,$96     ;
 $C86D DEFB $00,$39,$19,$C0,$0E,$1D,$46     ;
 $C874 DEFB $00,$A2,$19,$FF,$FE,$12,$4E     ;
 $C87B DEFB $00,$10,$3D,$FF,$FE,$51,$9D     ;
 $C882 DEFB $00,$8A,$74,$00,$00,$4C,$0D     ;
 $C889 DEFB $00,$80,$F3,$FF,$FE,$42,$1C     ;
 $C890 DEFB $00,$3F,$C5,$FB,$07,$38,$7C     ;
 $C897 DEFB $04,$0F,$6D,$FB,$77,$9F,$E8     ;
 $C89E DEFB $1C,$98,$1C,$7B,$67,$C1,$F0     ;
 $C8A5 DEFB $79,$E0,$3D,$9B,$07,$E6,$02     ;
 $C8AC DEFB $F9,$FF,$7F,$FF,$FF,$F0,$0F     ;
 $C8B3 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $C8BA DEFB $FF,$FF,$FF,$FF,$FF,$FF,$56     ;
 $C8C1 DEFB $3F,$FF,$C0,$1F,$FF,$FE,$AC     ;
 $C8C8 DEFB $0F,$FF,$FF,$9F,$E0,$3D,$58     ;
 $C8CF DEFB $00,$00,$07,$CF,$DF,$FF,$F0     ;
 $C8D6 DEFB $01,$9F,$FB,$CF,$D0,$00,$00     ;
 $C8DD DEFB $00,$61,$FD,$E7,$C0,$00,$00     ;
 $C8E4 DEFB $00,$18,$0E,$E7,$C0,$00,$00     ;
 $C8EB DEFB $00,$07,$81,$73,$80,$00,$00     ;
 $C8F2 DEFB $00,$00,$F8,$B3,$80,$00,$00     ;
 $C8F9 DEFB $00,$00,$0F,$DF,$00,$00,$00     ; }
; Left frame 3.
 $C900 DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C901 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C902 DEFB $00,$08,$80,$00,$00,$04,$10     ; {#ROVER$01(rover-left-02*)
 $C909 DEFB $00,$20,$20,$00,$00,$10,$18     ;
 $C910 DEFB $00,$8F,$00,$00,$00,$27,$CC     ;
 $C917 DEFB $00,$9C,$96,$00,$01,$4E,$22     ;
 $C91E DEFB $00,$34,$57,$00,$03,$99,$25     ;
 $C925 DEFB $00,$B2,$D9,$80,$07,$1D,$16     ;
 $C92C DEFB $00,$AD,$19,$C0,$0E,$1A,$26     ;
 $C933 DEFB $00,$A2,$19,$FF,$FE,$10,$4E     ;
 $C93A DEFB $01,$98,$31,$FF,$FE,$55,$8E     ;
 $C941 DEFB $01,$05,$78,$00,$00,$88,$0D     ;
 $C948 DEFB $00,$40,$FB,$FF,$FE,$42,$1E     ;
 $C94F DEFB $00,$3F,$E5,$9B,$07,$38,$7C     ;
 $C956 DEFB $04,$37,$0D,$E3,$77,$9F,$F8     ;
 $C95D DEFB $1C,$80,$DD,$FB,$67,$CB,$D0     ;
 $C964 DEFB $79,$E0,$3C,$7B,$07,$E4,$22     ;
 $C96B DEFB $F9,$FF,$7F,$FF,$FF,$F0,$0F     ;
 $C972 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $C979 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$56     ;
 $C980 DEFB $3F,$FF,$C0,$1F,$FF,$FE,$AC     ;
 $C987 DEFB $0F,$FF,$FF,$9F,$E0,$3D,$58     ;
 $C98E DEFB $00,$00,$07,$CF,$DF,$FF,$F0     ;
 $C995 DEFB $01,$9F,$FB,$CF,$D0,$00,$00     ;
 $C99C DEFB $00,$61,$FD,$E7,$C0,$00,$00     ;
 $C9A3 DEFB $00,$18,$0E,$E7,$C0,$00,$00     ;
 $C9AA DEFB $00,$07,$81,$73,$80,$00,$00     ;
 $C9B1 DEFB $00,$00,$F8,$B3,$80,$00,$00     ;
 $C9B8 DEFB $00,$00,$0F,$DF,$00,$00,$00     ; }
; Left frame 4.
 $C9BF DEFB $07                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $C9C0 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $C9C1 DEFB $00,$08,$A0,$00,$00,$04,$28     ; {#ROVER$00(rover-left-01*)
 $C9C8 DEFB $00,$60,$10,$00,$00,$20,$14     ;
 $C9CF DEFB $00,$8F,$00,$00,$00,$47,$C4     ;
 $C9D6 DEFB $00,$5A,$92,$00,$01,$0F,$22     ;
 $C9DD DEFB $00,$B2,$5B,$00,$03,$5D,$04     ;
 $C9E4 DEFB $00,$AA,$55,$80,$07,$5C,$B5     ;
 $C9EB DEFB $01,$25,$15,$C0,$0E,$52,$45     ;
 $C9F2 DEFB $01,$2E,$19,$FF,$FE,$92,$4E     ;
 $C9F9 DEFB $00,$90,$39,$FF,$FE,$9D,$8E     ;
 $CA00 DEFB $00,$0A,$70,$00,$00,$48,$0C     ;
 $CA07 DEFB $00,$40,$EB,$FF,$FE,$22,$1C     ;
 $CA0E DEFB $00,$5F,$F4,$7B,$07,$38,$7A     ;
 $CA15 DEFB $04,$2C,$8D,$9B,$77,$AF,$FC     ;
 $CA1C DEFB $1C,$83,$1D,$E3,$67,$D7,$20     ;
 $CA23 DEFB $79,$E0,$3D,$FB,$07,$E0,$C2     ;
 $CA2A DEFB $F9,$FF,$7F,$FF,$FF,$F0,$0F     ;
 $CA31 DEFB $00,$00,$00,$00,$00,$00,$00     ;
 $CA38 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$56     ;
 $CA3F DEFB $3F,$FF,$C0,$1F,$FF,$FE,$AC     ;
 $CA46 DEFB $0F,$FF,$FF,$9F,$E0,$3D,$58     ;
 $CA4D DEFB $00,$00,$07,$CF,$DF,$FF,$F0     ;
 $CA54 DEFB $01,$9F,$FB,$CF,$D0,$00,$00     ;
 $CA5B DEFB $00,$61,$FD,$E7,$C0,$00,$00     ;
 $CA62 DEFB $00,$18,$0E,$E7,$C0,$00,$00     ;
 $CA69 DEFB $00,$07,$81,$73,$80,$00,$00     ;
 $CA70 DEFB $00,$00,$F8,$B3,$80,$00,$00     ;
 $CA77 DEFB $00,$00,$0F,$DF,$00,$00,$00     ; }
; Left frame 5.
 $CA7E DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CA7F DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CA80 DEFB $00,$00,$53,$00,$00,$00,$28,$40 ; {#ROVER$09(rover-left-05)
 $CA88 DEFB $00,$00,$C0,$20,$00,$00,$60,$18 ;
 $CA90 DEFB $00,$00,$9E,$50,$00,$00,$4F,$84 ;
 $CA98 DEFB $00,$00,$33,$24,$00,$02,$1D,$48 ;
 $CAA0 DEFB $00,$01,$72,$B6,$00,$06,$B9,$0C ;
 $CAA8 DEFB $00,$02,$48,$33,$00,$0E,$35,$2C ;
 $CAB0 DEFB $00,$02,$42,$AB,$80,$1D,$22,$8A ;
 $CAB8 DEFB $00,$01,$74,$2B,$FF,$FD,$3C,$9A ;
 $CAC0 DEFB $00,$01,$20,$73,$FF,$FC,$23,$1C ;
 $CAC8 DEFB $00,$00,$18,$E0,$00,$00,$90,$1C ;
 $CAD0 DEFB $00,$01,$01,$E7,$FF,$FC,$44,$38 ;
 $CAD8 DEFB $00,$04,$BF,$AB,$F6,$0E,$B0,$F0 ;
 $CAE0 DEFB $00,$08,$13,$58,$F6,$EF,$7F,$E8 ;
 $CAE8 DEFB $00,$39,$0C,$3B,$36,$CF,$8C,$D0 ;
 $CAF0 DEFB $00,$F3,$C0,$7B,$C6,$0F,$C3,$04 ;
 $CAF8 DEFB $01,$F3,$FE,$FF,$FF,$FF,$E0,$1E ;
 $CB00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CB08 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FE,$AC ;
 $CB10 DEFB $00,$7F,$FF,$80,$3F,$FF,$FD,$58 ;
 $CB18 DEFB $00,$1F,$FF,$FF,$3F,$C0,$7A,$B0 ;
 $CB20 DEFB $00,$00,$00,$0F,$9F,$BF,$FF,$E0 ;
 $CB28 DEFB $00,$03,$3F,$F7,$9F,$A0,$00,$00 ;
 $CB30 DEFB $00,$00,$C3,$FB,$CF,$80,$00,$00 ;
 $CB38 DEFB $00,$00,$30,$1D,$CF,$80,$00,$00 ;
 $CB40 DEFB $00,$00,$0F,$02,$E7,$00,$00,$00 ;
 $CB48 DEFB $00,$00,$01,$F1,$67,$00,$00,$00 ;
 $CB50 DEFB $00,$00,$00,$1F,$BE,$00,$00,$00 ; }
; Left frame 6.
 $CB58 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CB59 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CB5A DEFB $00,$00,$A6,$00,$00,$00,$50,$80 ; {#ROVER$0A(rover-left-06)
 $CB62 DEFB $00,$01,$80,$40,$00,$00,$C0,$30 ;
 $CB6A DEFB $00,$01,$3C,$A0,$00,$00,$9F,$08 ;
 $CB72 DEFB $00,$00,$66,$48,$00,$04,$3A,$90 ;
 $CB7A DEFB $00,$02,$E5,$6C,$00,$0D,$72,$18 ;
 $CB82 DEFB $00,$04,$90,$66,$00,$1C,$6A,$58 ;
 $CB8A DEFB $00,$04,$85,$57,$00,$3A,$45,$14 ;
 $CB92 DEFB $00,$02,$E8,$57,$FF,$FA,$79,$34 ;
 $CB9A DEFB $00,$02,$40,$E7,$FF,$F8,$46,$38 ;
 $CBA2 DEFB $00,$00,$31,$C0,$00,$01,$20,$38 ;
 $CBAA DEFB $00,$02,$03,$CF,$FF,$F8,$88,$70 ;
 $CBB2 DEFB $00,$09,$7F,$57,$EC,$1D,$61,$E0 ;
 $CBBA DEFB $00,$10,$26,$B1,$ED,$DE,$FF,$D0 ;
 $CBC2 DEFB $00,$72,$18,$76,$6D,$9F,$19,$A0 ;
 $CBCA DEFB $01,$E7,$80,$F7,$8C,$1F,$86,$08 ;
 $CBD2 DEFB $03,$E7,$FD,$FF,$FF,$FF,$C0,$3C ;
 $CBDA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CBE2 DEFB $03,$FF,$FF,$FF,$FF,$FF,$FD,$58 ;
 $CBEA DEFB $00,$FF,$FF,$00,$7F,$FF,$FA,$B0 ;
 $CBF2 DEFB $00,$3F,$FF,$FE,$7F,$80,$F5,$60 ;
 $CBFA DEFB $00,$00,$00,$1F,$3F,$7F,$FF,$C0 ;
 $CC02 DEFB $00,$06,$7F,$EF,$3F,$40,$00,$00 ;
 $CC0A DEFB $00,$01,$87,$F7,$9F,$00,$00,$00 ;
 $CC12 DEFB $00,$00,$60,$3B,$9F,$00,$00,$00 ;
 $CC1A DEFB $00,$00,$1E,$05,$CE,$00,$00,$00 ;
 $CC22 DEFB $00,$00,$03,$E2,$CE,$00,$00,$00 ;
 $CC2A DEFB $00,$00,$00,$3F,$7C,$00,$00,$00 ; }
; Left frame 7.
 $CC32 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CC33 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CC34 DEFB $00,$01,$4C,$00,$00,$00,$A1,$00 ; {#ROVER$0B(rover-left-07)
 $CC3C DEFB $00,$03,$00,$80,$00,$01,$80,$60 ;
 $CC44 DEFB $00,$02,$79,$40,$00,$01,$3E,$10 ;
 $CC4C DEFB $00,$00,$CC,$90,$00,$08,$75,$20 ;
 $CC54 DEFB $00,$05,$CA,$D8,$00,$1A,$E4,$30 ;
 $CC5C DEFB $00,$09,$20,$CC,$00,$38,$D4,$B0 ;
 $CC64 DEFB $00,$09,$0A,$AE,$00,$74,$8A,$28 ;
 $CC6C DEFB $00,$05,$D0,$AF,$FF,$F4,$F2,$68 ;
 $CC74 DEFB $00,$04,$81,$CF,$FF,$F0,$8C,$70 ;
 $CC7C DEFB $00,$00,$63,$80,$00,$02,$40,$70 ;
 $CC84 DEFB $00,$04,$07,$9F,$FF,$F1,$10,$E0 ;
 $CC8C DEFB $00,$12,$FE,$AF,$D8,$3A,$C3,$C0 ;
 $CC94 DEFB $00,$20,$4D,$63,$DB,$BD,$FF,$A0 ;
 $CC9C DEFB $00,$E4,$30,$EC,$DB,$3E,$33,$40 ;
 $CCA4 DEFB $03,$CF,$01,$EF,$18,$3F,$0C,$10 ;
 $CCAC DEFB $07,$CF,$FB,$FF,$FF,$FF,$80,$78 ;
 $CCB4 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CCBC DEFB $07,$FF,$FF,$FF,$FF,$FF,$FA,$B0 ;
 $CCC4 DEFB $01,$FF,$FE,$00,$FF,$FF,$F5,$60 ;
 $CCCC DEFB $00,$7F,$FF,$FC,$FF,$01,$EA,$C0 ;
 $CCD4 DEFB $00,$00,$00,$3E,$7E,$FF,$FF,$80 ;
 $CCDC DEFB $00,$0C,$FF,$DE,$7E,$80,$00,$00 ;
 $CCE4 DEFB $00,$03,$0F,$EF,$3E,$00,$00,$00 ;
 $CCEC DEFB $00,$00,$C0,$77,$3E,$00,$00,$00 ;
 $CCF4 DEFB $00,$00,$3C,$0B,$9C,$00,$00,$00 ;
 $CCFC DEFB $00,$00,$07,$C5,$9C,$00,$00,$00 ;
 $CD04 DEFB $00,$00,$00,$7E,$F8,$00,$00,$00 ; }
; Left frame 8.
 $CD0C DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CD0D DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CD0E DEFB $00,$02,$98,$00,$00,$01,$42,$00 ; {#ROVER$0D(rover-left-08)
 $CD16 DEFB $00,$06,$01,$00,$00,$03,$00,$C0 ;
 $CD1E DEFB $00,$04,$F2,$80,$00,$02,$7C,$20 ;
 $CD26 DEFB $00,$01,$99,$20,$00,$10,$EA,$40 ;
 $CD2E DEFB $00,$0B,$95,$B0,$00,$35,$C8,$60 ;
 $CD36 DEFB $00,$12,$41,$98,$00,$71,$A9,$60 ;
 $CD3E DEFB $00,$12,$15,$5C,$00,$E9,$14,$50 ;
 $CD46 DEFB $00,$0B,$A1,$5F,$FF,$E9,$E4,$D0 ;
 $CD4E DEFB $00,$09,$03,$9F,$FF,$E1,$18,$E0 ;
 $CD56 DEFB $00,$00,$C7,$00,$00,$04,$80,$E0 ;
 $CD5E DEFB $00,$08,$0F,$3F,$FF,$E2,$21,$C0 ;
 $CD66 DEFB $00,$25,$FD,$5F,$B0,$75,$87,$80 ;
 $CD6E DEFB $00,$40,$9A,$C7,$B7,$7B,$FF,$40 ;
 $CD76 DEFB $01,$C8,$61,$D9,$B6,$7C,$66,$80 ;
 $CD7E DEFB $07,$9E,$03,$DE,$30,$7E,$18,$20 ;
 $CD86 DEFB $0F,$9F,$F7,$FF,$FF,$FF,$00,$F0 ;
 $CD8E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CD96 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$F5,$60 ;
 $CD9E DEFB $03,$FF,$FC,$01,$FF,$FF,$EA,$C0 ;
 $CDA6 DEFB $00,$FF,$FF,$F9,$FE,$03,$D5,$80 ;
 $CDAE DEFB $00,$00,$00,$7C,$FD,$FF,$FF,$00 ;
 $CDB6 DEFB $00,$19,$FF,$BC,$FD,$00,$00,$00 ;
 $CDBE DEFB $00,$06,$1F,$DE,$7C,$00,$00,$00 ;
 $CDC6 DEFB $00,$01,$80,$EE,$7C,$00,$00,$00 ;
 $CDCE DEFB $00,$00,$78,$17,$38,$00,$00,$00 ;
 $CDD6 DEFB $00,$00,$0F,$8B,$38,$00,$00,$00 ;
 $CDDE DEFB $00,$00,$00,$FD,$F0,$00,$00,$00 ; }
; Left frame 9.
 $CDE6 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CDE7 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CDE8 DEFB $00,$05,$30,$00,$00,$02,$84,$00 ; {#ROVER$0D(rover-left-09)
 $CDF0 DEFB $00,$0C,$02,$00,$00,$06,$01,$80 ;
 $CDF8 DEFB $00,$09,$E5,$00,$00,$04,$F8,$40 ;
 $CE00 DEFB $00,$03,$32,$40,$00,$21,$D4,$80 ;
 $CE08 DEFB $00,$17,$2B,$60,$00,$6B,$90,$C0 ;
 $CE10 DEFB $00,$24,$83,$30,$00,$E3,$52,$C0 ;
 $CE18 DEFB $00,$24,$2A,$B8,$01,$D2,$28,$A0 ;
 $CE20 DEFB $00,$17,$42,$BF,$FF,$D3,$C9,$A0 ;
 $CE28 DEFB $00,$12,$07,$3F,$FF,$C2,$31,$C0 ;
 $CE30 DEFB $00,$01,$8E,$00,$00,$09,$01,$C0 ;
 $CE38 DEFB $00,$10,$1E,$7F,$FF,$C4,$43,$80 ;
 $CE40 DEFB $00,$4B,$FA,$BF,$60,$EB,$0F,$00 ;
 $CE48 DEFB $00,$81,$35,$8F,$6E,$F7,$FE,$80 ;
 $CE50 DEFB $03,$90,$C3,$B3,$6C,$F8,$CD,$00 ;
 $CE58 DEFB $0F,$3C,$07,$BC,$60,$FC,$30,$40 ;
 $CE60 DEFB $1F,$3F,$EF,$FF,$FF,$FE,$01,$E0 ;
 $CE68 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CE70 DEFB $1F,$FF,$FF,$FF,$FF,$FF,$EA,$C0 ;
 $CE78 DEFB $07,$FF,$F8,$03,$FF,$FF,$D5,$80 ;
 $CE80 DEFB $01,$FF,$FF,$F3,$FC,$07,$AB,$00 ;
 $CE88 DEFB $00,$00,$00,$F9,$FB,$FF,$FE,$00 ;
 $CE90 DEFB $00,$33,$FF,$79,$FA,$00,$00,$00 ;
 $CE98 DEFB $00,$0C,$3F,$BC,$F8,$00,$00,$00 ;
 $CEA0 DEFB $00,$03,$01,$DC,$F8,$00,$00,$00 ;
 $CEA8 DEFB $00,$00,$F0,$2E,$70,$00,$00,$00 ;
 $CEB0 DEFB $00,$00,$1F,$16,$70,$00,$00,$00 ;
 $CEB8 DEFB $00,$00,$01,$FB,$E0,$00,$00,$00 ; }
; Left frame 10.
 $CEC0 DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CEC1 DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CEC2 DEFB $00,$0A,$60,$00,$00,$05,$08,$00 ; {#ROVER$0E(rover-left-0A)
 $CECA DEFB $00,$18,$04,$00,$00,$0C,$03,$00 ;
 $CED2 DEFB $00,$13,$CA,$00,$00,$09,$F0,$80 ;
 $CEDA DEFB $00,$06,$64,$80,$00,$43,$A9,$00 ;
 $CEE2 DEFB $00,$2E,$56,$C0,$00,$D7,$21,$80 ;
 $CEEA DEFB $00,$49,$06,$60,$01,$C6,$A5,$80 ;
 $CEF2 DEFB $00,$48,$55,$70,$03,$A4,$51,$40 ;
 $CEFA DEFB $00,$2E,$85,$7F,$FF,$A7,$93,$40 ;
 $CF02 DEFB $00,$24,$0E,$7F,$FF,$84,$63,$80 ;
 $CF0A DEFB $00,$03,$1C,$00,$00,$12,$03,$80 ;
 $CF12 DEFB $00,$20,$3C,$FF,$FF,$88,$87,$00 ;
 $CF1A DEFB $00,$97,$F5,$7E,$C1,$D6,$1E,$00 ;
 $CF22 DEFB $01,$02,$6B,$1E,$DD,$EF,$FD,$00 ;
 $CF2A DEFB $07,$21,$87,$66,$D9,$F1,$9A,$00 ;
 $CF32 DEFB $1E,$78,$0F,$78,$C1,$F8,$60,$80 ;
 $CF3A DEFB $3E,$7F,$DF,$FF,$FF,$FC,$03,$C0 ;
 $CF42 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $CF4A DEFB $3F,$FF,$FF,$FF,$FF,$FF,$D5,$80 ;
 $CF52 DEFB $0F,$FF,$F0,$07,$FF,$FF,$AB,$00 ;
 $CF5A DEFB $03,$FF,$FF,$E7,$F8,$0F,$56,$00 ;
 $CF62 DEFB $00,$00,$01,$F3,$F7,$FF,$FC,$00 ;
 $CF6A DEFB $00,$67,$FE,$F3,$F4,$00,$00,$00 ;
 $CF72 DEFB $00,$18,$7F,$79,$F0,$00,$00,$00 ;
 $CF7A DEFB $00,$06,$03,$B9,$F0,$00,$00,$00 ;
 $CF82 DEFB $00,$01,$E0,$5C,$E0,$00,$00,$00 ;
 $CF8A DEFB $00,$00,$3E,$2C,$E0,$00,$00,$00 ;
 $CF92 DEFB $00,$00,$03,$F7,$C0,$00,$00,$00 ; }
; Left frame 11.
 $CF9A DEFB $08                             ; #LET(width=#PEEK(#PC)) Width =
                                            ; #N({width}) bytes.
 $CF9B DEFB $1B                             ; Height = #N(#PEEK(#PC)) pixels.
 $CF9C DEFB $00,$14,$C0,$00,$00,$0A,$10,$00 ; {#ROVER$0F(rover-left-0B)
 $CFA4 DEFB $00,$30,$08,$00,$00,$18,$06,$00 ;
 $CFAC DEFB $00,$27,$94,$00,$00,$13,$E1,$00 ;
 $CFB4 DEFB $00,$0C,$C9,$00,$00,$87,$52,$00 ;
 $CFBC DEFB $00,$5C,$AD,$80,$01,$AE,$43,$00 ;
 $CFC4 DEFB $00,$92,$0C,$C0,$03,$8D,$4B,$00 ;
 $CFCC DEFB $00,$90,$AA,$E0,$07,$48,$A2,$80 ;
 $CFD4 DEFB $00,$5D,$0A,$FF,$FF,$4F,$26,$80 ;
 $CFDC DEFB $00,$48,$1C,$FF,$FF,$08,$C7,$00 ;
 $CFE4 DEFB $00,$06,$38,$00,$00,$24,$07,$00 ;
 $CFEC DEFB $00,$40,$79,$FF,$FF,$11,$0E,$00 ;
 $CFF4 DEFB $01,$2F,$EA,$FD,$83,$AC,$3C,$00 ;
 $CFFC DEFB $02,$04,$D6,$3D,$BB,$DF,$FA,$00 ;
 $D004 DEFB $0E,$43,$0E,$CD,$B3,$E3,$34,$00 ;
 $D00C DEFB $3C,$F0,$1E,$F1,$83,$F0,$C1,$00 ;
 $D014 DEFB $7C,$FF,$BF,$FF,$FF,$F8,$07,$80 ;
 $D01C DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $D024 DEFB $7F,$FF,$FF,$FF,$FF,$FF,$AB,$00 ;
 $D02C DEFB $1F,$FF,$E0,$0F,$FF,$FF,$56,$00 ;
 $D034 DEFB $07,$FF,$FF,$CF,$F0,$1E,$AC,$00 ;
 $D03C DEFB $00,$00,$03,$E7,$EF,$FF,$F8,$00 ;
 $D044 DEFB $00,$CF,$FD,$E7,$E8,$00,$00,$00 ;
 $D04C DEFB $00,$30,$FE,$F3,$E0,$00,$00,$00 ;
 $D054 DEFB $00,$0C,$07,$73,$E0,$00,$00,$00 ;
 $D05C DEFB $00,$03,$C0,$B9,$C0,$00,$00,$00 ;
 $D064 DEFB $00,$00,$7C,$59,$C0,$00,$00,$00 ;
 $D06C DEFB $00,$00,$07,$EF,$80,$00,$00,$00 ; }

; Sprite: Teleporter
;
; .
;
; .
;
; Frame 1.
b$D074 DEFB $1B      ; Height = #N(#PEEK(#PC)) pixels.
 $D075 DEFB $FF,$FF  ; {#SPRITE$00(teleporter-01*)
 $D077 DEFB $FF,$FF  ;
 $D079 DEFB $7F,$FE  ;
 $D07B DEFB $40,$02  ;
 $D07D DEFB $60,$06  ;
 $D07F DEFB $40,$02  ;
 $D081 DEFB $60,$3E  ;
 $D083 DEFB $40,$E2  ;
 $D085 DEFB $63,$86  ;
 $D087 DEFB $4E,$02  ;
 $D089 DEFB $78,$3E  ;
 $D08B DEFB $40,$E2  ;
 $D08D DEFB $63,$86  ;
 $D08F DEFB $4E,$02  ;
 $D091 DEFB $78,$06  ;
 $D093 DEFB $40,$02  ;
 $D095 DEFB $60,$06  ;
 $D097 DEFB $40,$02  ;
 $D099 DEFB $60,$3E  ;
 $D09B DEFB $40,$E2  ;
 $D09D DEFB $63,$86  ;
 $D09F DEFB $4E,$02  ;
 $D0A1 DEFB $78,$3E  ;
 $D0A3 DEFB $40,$02  ;
 $D0A5 DEFB $FF,$FF  ;
 $D0A7 DEFB $4C,$CE  ;
 $D0A9 DEFB $3F,$FC  ; }
; Frame 2.
 $D0AB DEFB $1B      ; Height = #N(#PEEK(#PC)) pixels.
 $D0AC DEFB $FF,$FF  ; {#SPRITE$01(teleporter-02*)
 $D0AE DEFB $FF,$FF  ;
 $D0B0 DEFB $7F,$FE  ;
 $D0B2 DEFB $40,$02  ;
 $D0B4 DEFB $6E,$06  ;
 $D0B6 DEFB $58,$02  ;
 $D0B8 DEFB $60,$06  ;
 $D0BA DEFB $40,$02  ;
 $D0BC DEFB $60,$06  ;
 $D0BE DEFB $40,$3A  ;
 $D0C0 DEFB $60,$E6  ;
 $D0C2 DEFB $43,$82  ;
 $D0C4 DEFB $6E,$06  ;
 $D0C6 DEFB $58,$3A  ;
 $D0C8 DEFB $60,$E6  ;
 $D0CA DEFB $43,$82  ;
 $D0CC DEFB $6E,$06  ;
 $D0CE DEFB $58,$02  ;
 $D0D0 DEFB $60,$06  ;
 $D0D2 DEFB $40,$02  ;
 $D0D4 DEFB $60,$06  ;
 $D0D6 DEFB $40,$3A  ;
 $D0D8 DEFB $60,$E6  ;
 $D0DA DEFB $40,$02  ;
 $D0DC DEFB $FF,$FF  ;
 $D0DE DEFB $66,$66  ;
 $D0E0 DEFB $3F,$FC  ; }
; Frame 3.
 $D0E2 DEFB $1B      ; Height = #N(#PEEK(#PC)) pixels.
 $D0E3 DEFB $FF,$FF  ; {#SPRITE$02(teleporter-03*)
 $D0E5 DEFB $FF,$FF  ;
 $D0E7 DEFB $7F,$FE  ;
 $D0E9 DEFB $40,$02  ;
 $D0EB DEFB $60,$3E  ;
 $D0ED DEFB $40,$E2  ;
 $D0EF DEFB $63,$86  ;
 $D0F1 DEFB $4E,$02  ;
 $D0F3 DEFB $78,$06  ;
 $D0F5 DEFB $40,$02  ;
 $D0F7 DEFB $60,$06  ;
 $D0F9 DEFB $40,$02  ;
 $D0FB DEFB $60,$3E  ;
 $D0FD DEFB $40,$E2  ;
 $D0FF DEFB $63,$86  ;
 $D101 DEFB $4E,$02  ;
 $D103 DEFB $78,$3E  ;
 $D105 DEFB $40,$E2  ;
 $D107 DEFB $63,$86  ;
 $D109 DEFB $4E,$02  ;
 $D10B DEFB $78,$06  ;
 $D10D DEFB $40,$02  ;
 $D10F DEFB $60,$06  ;
 $D111 DEFB $40,$02  ;
 $D113 DEFB $FF,$FF  ;
 $D115 DEFB $73,$32  ;
 $D117 DEFB $3F,$FC  ; }
; Frame 4.
 $D119 DEFB $1B      ; Height = #N(#PEEK(#PC)) pixels.
 $D11A DEFB $FF,$FF  ; {#SPRITE$03(teleporter-04*)
 $D11C DEFB $FF,$FF  ;
 $D11E DEFB $7F,$FE  ;
 $D120 DEFB $40,$02  ;
 $D122 DEFB $60,$E6  ;
 $D124 DEFB $43,$82  ;
 $D126 DEFB $6E,$06  ;
 $D128 DEFB $58,$3A  ;
 $D12A DEFB $60,$E6  ;
 $D12C DEFB $43,$82  ;
 $D12E DEFB $6E,$06  ;
 $D130 DEFB $58,$02  ;
 $D132 DEFB $60,$06  ;
 $D134 DEFB $40,$02  ;
 $D136 DEFB $60,$06  ;
 $D138 DEFB $40,$3A  ;
 $D13A DEFB $60,$E6  ;
 $D13C DEFB $43,$82  ;
 $D13E DEFB $6E,$06  ;
 $D140 DEFB $58,$3A  ;
 $D142 DEFB $60,$E6  ;
 $D144 DEFB $43,$82  ;
 $D146 DEFB $6E,$06  ;
 $D148 DEFB $40,$02  ;
 $D14A DEFB $FF,$FF  ;
 $D14C DEFB $59,$9A  ;
 $D14E DEFB $3F,$FC  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*teleporter-01,15;teleporter-02;teleporter-03;teleporter-04(teleporter)
; }
; UDGTABLE#

; Data block at D150
b$D150 DEFB $08

; The UDG for the lives icon
@label=UDG_Life
b$D151 DEFB %00011000 ; {#UDGTABLE(default,centre) { #UDG#(#PC),attr=$07 }
 $D152 DEFB %00100100 ; UDGTABLE#
 $D153 DEFB %00111100 ;
 $D154 DEFB %01111110 ;
 $D155 DEFB %01011010 ;
 $D156 DEFB %00111100 ;
 $D157 DEFB %00111100 ;
 $D158 DEFB %01100110 ; }

; Data block at D159
b$D159 DEFB $06,$0C,$64,$40,$02,$26,$30

; Data block at D160
b$D160 DEFB $06,$30,$26,$02,$40,$64,$0C

; Sprite: Turret
;
; .
;
; .
;
; Left frame 1.
b$D167 DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $D168 DEFB $7F,$FF  ; {#SPRITE$06(turret-left-01)
 $D16A DEFB $00,$00  ;
 $D16C DEFB $03,$E0  ;
 $D16E DEFB $1F,$FE  ;
 $D170 DEFB $0F,$E6  ;
 $D172 DEFB $F8,$12  ;
 $D174 DEFB $FC,$1A  ;
 $D176 DEFB $01,$E6  ;
 $D178 DEFB $00,$FC  ;
 $D17A DEFB $00,$7C  ;
 $D17C DEFB $00,$38  ; }
; Left frame 2.
 $D17E DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $D17F DEFB $7F,$FF  ; {#SPRITE$07(turret-left-02)
 $D181 DEFB $00,$00  ;
 $D183 DEFB $03,$E0  ;
 $D185 DEFB $1F,$FE  ;
 $D187 DEFB $0F,$E2  ;
 $D189 DEFB $07,$D2  ;
 $D18B DEFB $02,$1A  ;
 $D18D DEFB $3E,$06  ;
 $D18F DEFB $FF,$FC  ;
 $D191 DEFB $F0,$7C  ;
 $D193 DEFB $00,$38  ; }
; Left frame 3.
 $D195 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $D196 DEFB $7F,$FF  ; {#SPRITE$08(turret-left-03)
 $D198 DEFB $00,$00  ;
 $D19A DEFB $03,$E0  ;
 $D19C DEFB $1F,$FE  ;
 $D19E DEFB $0F,$E6  ;
 $D1A0 DEFB $07,$D2  ;
 $D1A2 DEFB $03,$9A  ;
 $D1A4 DEFB $01,$06  ;
 $D1A6 DEFB $07,$BC  ;
 $D1A8 DEFB $1F,$7C  ;
 $D1AA DEFB $7C,$38  ;
 $D1AC DEFB $70,$00  ; }
; Left frame 4.
 $D1AE DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $D1AF DEFB $7F,$FF  ; {#SPRITE$09(turret-left-04)
 $D1B1 DEFB $00,$00  ;
 $D1B3 DEFB $03,$E0  ;
 $D1B5 DEFB $1F,$FE  ;
 $D1B7 DEFB $0F,$E6  ;
 $D1B9 DEFB $07,$D2  ;
 $D1BB DEFB $03,$DA  ;
 $D1BD DEFB $01,$06  ;
 $D1BF DEFB $01,$1C  ;
 $D1C1 DEFB $07,$FC  ;
 $D1C3 DEFB $0F,$38  ;
 $D1C5 DEFB $3C,$00  ;
 $D1C7 DEFB $78,$00  ;
 $D1C9 DEFB $20,$00  ; }
; Left frame 5.
 $D1CB DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $D1CC DEFB $7F,$FF  ; {#SPRITE$0A(turret-left-05)
 $D1CE DEFB $00,$00  ;
 $D1D0 DEFB $03,$E0  ;
 $D1D2 DEFB $1F,$FE  ;
 $D1D4 DEFB $0F,$E6  ;
 $D1D6 DEFB $07,$D2  ;
 $D1D8 DEFB $03,$DA  ;
 $D1DA DEFB $01,$86  ;
 $D1DC DEFB $00,$9C  ;
 $D1DE DEFB $01,$FC  ;
 $D1E0 DEFB $03,$B8  ;
 $D1E2 DEFB $07,$00  ;
 $D1E4 DEFB $0E,$00  ;
 $D1E6 DEFB $1C,$00  ;
 $D1E8 DEFB $08,$00  ; }
; Left frame 6.
 $D1EA DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $D1EB DEFB $7F,$FF  ; {#SPRITE$0B(turret-left-06)
 $D1ED DEFB $00,$00  ;
 $D1EF DEFB $03,$E0  ;
 $D1F1 DEFB $1F,$FE  ;
 $D1F3 DEFB $0F,$E6  ;
 $D1F5 DEFB $07,$D2  ;
 $D1F7 DEFB $03,$DA  ;
 $D1F9 DEFB $01,$C6  ;
 $D1FB DEFB $00,$CC  ;
 $D1FD DEFB $00,$5C  ;
 $D1FF DEFB $00,$F8  ;
 $D201 DEFB $00,$C0  ;
 $D203 DEFB $01,$80  ;
 $D205 DEFB $03,$80  ;
 $D207 DEFB $03,$00  ;
 $D209 DEFB $06,$00  ;
 $D20B DEFB $02,$00  ; }
; Left frame 7.
 $D20D DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $D20E DEFB $7F,$FF  ; {#SPRITE$0C(turret-left-07)
 $D210 DEFB $00,$00  ;
 $D212 DEFB $03,$E0  ;
 $D214 DEFB $1F,$FE  ;
 $D216 DEFB $0F,$E6  ;
 $D218 DEFB $07,$D2  ;
 $D21A DEFB $03,$DA  ;
 $D21C DEFB $01,$E6  ;
 $D21E DEFB $00,$C4  ;
 $D220 DEFB $00,$4C  ;
 $D222 DEFB $00,$78  ;
 $D224 DEFB $00,$60  ;
 $D226 DEFB $00,$E0  ;
 $D228 DEFB $00,$C0  ;
 $D22A DEFB $01,$C0  ;
 $D22C DEFB $01,$80  ;
 $D22E DEFB $03,$80  ;
 $D230 DEFB $01,$00  ; }
; Left frame 8.
 $D232 DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $D233 DEFB $7F,$FF  ; {#SPRITE$0D(turret-left-08)
 $D235 DEFB $00,$00  ;
 $D237 DEFB $03,$E0  ;
 $D239 DEFB $1F,$FE  ;
 $D23B DEFB $0F,$E6  ;
 $D23D DEFB $07,$D2  ;
 $D23F DEFB $03,$DA  ;
 $D241 DEFB $01,$E6  ;
 $D243 DEFB $00,$64  ;
 $D245 DEFB $00,$4C  ;
 $D247 DEFB $00,$28  ;
 $D249 DEFB $00,$30  ;
 $D24B DEFB $00,$70  ;
 $D24D DEFB $00,$60  ;
 $D24F DEFB $00,$60  ;
 $D251 DEFB $00,$60  ;
 $D253 DEFB $00,$C0  ;
 $D255 DEFB $00,$C0  ; }
; Right frame 1.
 $D257 DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $D258 DEFB $FF,$FE  ; {#SPRITE$0E(turret-right-01)
 $D25A DEFB $00,$00  ;
 $D25C DEFB $07,$C0  ;
 $D25E DEFB $7F,$F8  ;
 $D260 DEFB $67,$F0  ;
 $D262 DEFB $50,$1F  ;
 $D264 DEFB $58,$3F  ;
 $D266 DEFB $67,$80  ;
 $D268 DEFB $3F,$00  ;
 $D26A DEFB $3E,$00  ;
 $D26C DEFB $1C,$00  ; }
; Right frame 2.
 $D26E DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $D26F DEFB $FF,$FE  ; {#SPRITE$0F(turret-right-02)
 $D271 DEFB $00,$00  ;
 $D273 DEFB $07,$C0  ;
 $D275 DEFB $7F,$F8  ;
 $D277 DEFB $47,$F0  ;
 $D279 DEFB $53,$E0  ;
 $D27B DEFB $58,$40  ;
 $D27D DEFB $60,$7C  ;
 $D27F DEFB $3F,$FF  ;
 $D281 DEFB $3E,$0F  ;
 $D283 DEFB $1C,$00  ; }
; Right frame 3.
 $D285 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $D286 DEFB $FF,$FE  ; {#SPRITE$10(turret-right-03)
 $D288 DEFB $00,$00  ;
 $D28A DEFB $07,$C0  ;
 $D28C DEFB $7F,$F8  ;
 $D28E DEFB $67,$F0  ;
 $D290 DEFB $53,$E0  ;
 $D292 DEFB $59,$C0  ;
 $D294 DEFB $60,$80  ;
 $D296 DEFB $3D,$E0  ;
 $D298 DEFB $3E,$F8  ;
 $D29A DEFB $1C,$3E  ;
 $D29C DEFB $00,$0E  ; }
; Right frame 4.
 $D29E DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $D29F DEFB $FF,$FE  ; {#SPRITE$11(turret-right-04)
 $D2A1 DEFB $00,$00  ;
 $D2A3 DEFB $07,$C0  ;
 $D2A5 DEFB $7F,$F8  ;
 $D2A7 DEFB $67,$F0  ;
 $D2A9 DEFB $53,$E0  ;
 $D2AB DEFB $5B,$C0  ;
 $D2AD DEFB $60,$80  ;
 $D2AF DEFB $38,$80  ;
 $D2B1 DEFB $3F,$E0  ;
 $D2B3 DEFB $1C,$F0  ;
 $D2B5 DEFB $00,$3C  ;
 $D2B7 DEFB $00,$1E  ;
 $D2B9 DEFB $00,$04  ; }
; Right frame 5.
 $D2BB DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $D2BC DEFB $FF,$FE  ; {#SPRITE$12(turret-right-05)
 $D2BE DEFB $00,$00  ;
 $D2C0 DEFB $07,$C0  ;
 $D2C2 DEFB $7F,$F8  ;
 $D2C4 DEFB $67,$F0  ;
 $D2C6 DEFB $53,$E0  ;
 $D2C8 DEFB $5B,$C0  ;
 $D2CA DEFB $61,$80  ;
 $D2CC DEFB $39,$00  ;
 $D2CE DEFB $3F,$80  ;
 $D2D0 DEFB $1D,$C0  ;
 $D2D2 DEFB $00,$E0  ;
 $D2D4 DEFB $00,$70  ;
 $D2D6 DEFB $00,$38  ;
 $D2D8 DEFB $00,$10  ; }
; Right frame 6.
 $D2DA DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $D2DB DEFB $FF,$FE  ; {#SPRITE$13(turret-right-06)
 $D2DD DEFB $00,$00  ;
 $D2DF DEFB $07,$C0  ;
 $D2E1 DEFB $7F,$F8  ;
 $D2E3 DEFB $67,$F0  ;
 $D2E5 DEFB $53,$E0  ;
 $D2E7 DEFB $5B,$C0  ;
 $D2E9 DEFB $63,$80  ;
 $D2EB DEFB $33,$00  ;
 $D2ED DEFB $3A,$00  ;
 $D2EF DEFB $1F,$00  ;
 $D2F1 DEFB $03,$00  ;
 $D2F3 DEFB $01,$80  ;
 $D2F5 DEFB $01,$C0  ;
 $D2F7 DEFB $00,$C0  ;
 $D2F9 DEFB $00,$60  ;
 $D2FB DEFB $00,$40  ; }
; Right frame 7.
 $D2FD DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $D2FE DEFB $FF,$FE  ; {#SPRITE$14(turret-right-07)
 $D300 DEFB $00,$00  ;
 $D302 DEFB $07,$C0  ;
 $D304 DEFB $7F,$F8  ;
 $D306 DEFB $67,$F0  ;
 $D308 DEFB $53,$E0  ;
 $D30A DEFB $5B,$C0  ;
 $D30C DEFB $67,$80  ;
 $D30E DEFB $23,$00  ;
 $D310 DEFB $32,$00  ;
 $D312 DEFB $1E,$00  ;
 $D314 DEFB $06,$00  ;
 $D316 DEFB $07,$00  ;
 $D318 DEFB $03,$00  ;
 $D31A DEFB $03,$80  ;
 $D31C DEFB $01,$80  ;
 $D31E DEFB $01,$C0  ;
 $D320 DEFB $00,$80  ; }
; Right frame 8.
 $D322 DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $D323 DEFB $FF,$FE  ; {#SPRITE$15(turret-right-08)
 $D325 DEFB $00,$00  ;
 $D327 DEFB $07,$C0  ;
 $D329 DEFB $7F,$F8  ;
 $D32B DEFB $67,$F0  ;
*$D32D DEFB $53,$E0  ;
 $D32F DEFB $5B,$C0  ;
 $D331 DEFB $67,$80  ;
 $D333 DEFB $23,$00  ;
 $D335 DEFB $32,$00  ;
 $D337 DEFB $14,$00  ;
 $D339 DEFB $0C,$00  ;
 $D33B DEFB $0E,$00  ;
 $D33D DEFB $06,$00  ;
 $D33F DEFB $06,$00  ;
 $D341 DEFB $06,$00  ;
 $D343 DEFB $03,$00  ;
 $D345 DEFB $03,$00  ; }

; Main Font
@label=MainFont
b$D347 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D34F DEFB $18,$18,$18,$18,$18,$00,$18,$18 ; #UDG(#PC)
 $D357 DEFB $28,$28,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D35F DEFB $00,$28,$7C,$28,$7C,$28,$00,$00 ; #UDG(#PC)
 $D367 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D36F DEFB $3C,$42,$99,$A1,$A1,$99,$42,$3C ; #UDG(#PC)
 $D377 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D37F DEFB $10,$10,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D387 DEFB $08,$18,$18,$18,$18,$18,$18,$08 ; #UDG(#PC)
 $D38F DEFB $10,$18,$18,$18,$18,$18,$18,$10 ; #UDG(#PC)
 $D397 DEFB $00,$14,$58,$3E,$7C,$1A,$28,$00 ; #UDG(#PC)
 $D39F DEFB $00,$18,$18,$7E,$78,$18,$18,$00 ; #UDG(#PC)
 $D3A7 DEFB $00,$00,$00,$00,$00,$00,$20,$20 ; #UDG(#PC)
 $D3AF DEFB $00,$00,$00,$7E,$7E,$00,$00,$00 ; #UDG(#PC)
 $D3B7 DEFB $00,$00,$00,$00,$00,$00,$18,$18 ; #UDG(#PC)
 $D3BF DEFB $0C,$0C,$18,$18,$30,$30,$60,$60 ; #UDG(#PC)
 $D3C7 DEFB $7E,$42,$42,$46,$46,$46,$7E,$00 ; #UDG(#PC)
 $D3CF DEFB $08,$08,$08,$18,$18,$18,$18,$00 ; #UDG(#PC)
 $D3D7 DEFB $7E,$02,$02,$7E,$60,$60,$7E,$00 ; #UDG(#PC)
 $D3DF DEFB $7C,$44,$04,$1E,$06,$46,$7E,$00 ; #UDG(#PC)
 $D3E7 DEFB $78,$48,$48,$48,$7E,$18,$18,$00 ; #UDG(#PC)
 $D3EF DEFB $7E,$40,$40,$7E,$06,$46,$7E,$00 ; #UDG(#PC)
 $D3F7 DEFB $7E,$42,$40,$7E,$62,$62,$7E,$00 ; #UDG(#PC)
 $D3FF DEFB $7E,$02,$02,$06,$06,$06,$06,$00 ; #UDG(#PC)
 $D407 DEFB $3C,$24,$24,$7E,$46,$46,$7E,$00 ; #UDG(#PC)
 $D40F DEFB $7E,$42,$42,$7E,$06,$06,$06,$00 ; #UDG(#PC)
 $D417 DEFB $00,$00,$00,$00,$00,$18,$18,$00 ; #UDG(#PC)
 $D41F DEFB $00,$00,$7E,$7E,$00,$00,$00,$00 ; #UDG(#PC)
 $D427 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D42F DEFB $3C,$42,$99,$A1,$99,$A2,$3C,$00 ; #UDG(#PC)
 $D437 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D43F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D447 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC)
 $D44F DEFB $3C,$24,$24,$7E,$62,$62,$62,$00 ; #UDG(#PC)
 $D457 DEFB $7C,$44,$44,$7E,$62,$62,$7E,$00 ; #UDG(#PC)
 $D45F DEFB $7E,$42,$40,$60,$60,$62,$7E,$00 ; #UDG(#PC)
 $D467 DEFB $7E,$42,$42,$62,$62,$62,$7E,$00 ; #UDG(#PC)
 $D46F DEFB $7E,$40,$40,$7E,$60,$60,$7E,$00 ; #UDG(#PC)
 $D477 DEFB $7E,$40,$40,$7E,$60,$60,$60,$00 ; #UDG(#PC)
 $D47F DEFB $7E,$42,$40,$66,$62,$62,$7E,$00 ; #UDG(#PC)
 $D487 DEFB $42,$42,$42,$7E,$62,$62,$62,$00 ; #UDG(#PC)
 $D48F DEFB $10,$10,$10,$18,$18,$18,$18,$00 ; #UDG(#PC)
 $D497 DEFB $04,$04,$04,$06,$46,$46,$7E,$00 ; #UDG(#PC)
 $D49F DEFB $44,$44,$44,$7E,$62,$62,$62,$00 ; #UDG(#PC)
 $D4A7 DEFB $40,$40,$40,$60,$60,$60,$7E,$00 ; #UDG(#PC)
 $D4AF DEFB $7E,$4A,$4A,$6A,$6A,$6A,$6A,$00 ; #UDG(#PC)
 $D4B7 DEFB $7E,$42,$42,$62,$62,$62,$62,$00 ; #UDG(#PC)
 $D4BF DEFB $7E,$46,$42,$42,$42,$42,$7E,$00 ; #UDG(#PC)
 $D4C7 DEFB $7E,$42,$42,$7E,$60,$60,$60,$00 ; #UDG(#PC)
 $D4CF DEFB $7E,$42,$42,$42,$42,$4E,$7E,$00 ; #UDG(#PC)
 $D4D7 DEFB $7C,$44,$44,$7E,$62,$62,$62,$00 ; #UDG(#PC)
 $D4DF DEFB $7E,$40,$40,$7E,$06,$06,$7E,$00 ; #UDG(#PC)
 $D4E7 DEFB $7E,$10,$10,$18,$18,$18,$18,$00 ; #UDG(#PC)
 $D4EF DEFB $42,$42,$42,$62,$62,$62,$7E,$00 ; #UDG(#PC)
 $D4F7 DEFB $62,$62,$62,$62,$24,$24,$3C,$00 ; #UDG(#PC)
 $D4FF DEFB $4A,$4A,$4A,$6A,$6A,$6A,$7E,$00 ; #UDG(#PC)
 $D507 DEFB $42,$42,$42,$3C,$62,$62,$62,$00 ; #UDG(#PC)
 $D50F DEFB $42,$42,$42,$7E,$18,$18,$18,$00 ; #UDG(#PC)
 $D517 DEFB $7E,$42,$02,$7E,$60,$62,$7F,$00 ; #UDG(#PC)
 $D51F DEFB $80,$80,$80,$80,$80,$80,$80,$80 ; #UDG(#PC)
 $D527 DEFB $C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0 ; #UDG(#PC)
 $D52F DEFB $E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0 ; #UDG(#PC)
 $D537 DEFB $F0,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ; #UDG(#PC)
 $D53F DEFB $F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8 ; #UDG(#PC)
 $D547 DEFB $FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC ; #UDG(#PC)
 $D54F DEFB $FE,$FE,$FE,$FE,$FE,$FE,$FE,$FE ; #UDG(#PC)
 $D557 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; #UDG(#PC)
 $D55F DEFB $FF,$FF,$F8,$F9,$F8,$F9,$F8,$FF ; #UDG(#PC)
 $D567 DEFB $FF,$FF,$71,$A6,$60,$A6,$66,$FF ; #UDG(#PC)
 $D56F DEFB $FF,$FF,$C2,$9E,$82,$F2,$86,$FF ; #UDG(#PC)
 $D577 DEFB $FF,$FF,$1F,$7F,$3F,$7F,$1F,$FF ; #UDG(#PC)
 $D57F DEFB $FF,$FF,$F8,$F3,$F0,$F3,$F3,$FF ; #UDG(#PC)
 $D587 DEFB $FF,$FF,$CE,$4E,$4E,$4E,$42,$FF ; #UDG(#PC)
 $D58F DEFB $FF,$FF,$42,$4E,$46,$4E,$42,$FF ; #UDG(#PC)
 $D597 DEFB $FF,$FF,$6F,$2F,$0F,$4F,$6F,$FF ; #UDG(#PC)

; Sprite: Blob
;
; .
;
; .
;
; Frame 1.
b$D59F DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D5A0 DEFB $03,$C0  ; {#SPRITE$1E(blob-01)
 $D5A2 DEFB $07,$E0  ;
 $D5A4 DEFB $07,$E0  ;
 $D5A6 DEFB $0F,$F0  ;
 $D5A8 DEFB $1F,$F8  ;
 $D5AA DEFB $7F,$FE  ;
 $D5AC DEFB $FF,$FF  ;
 $D5AE DEFB $BF,$FF  ;
 $D5B0 DEFB $BF,$FF  ;
 $D5B2 DEFB $CF,$FF  ;
 $D5B4 DEFB $77,$FE  ;
 $D5B6 DEFB $1B,$F8  ;
 $D5B8 DEFB $0D,$F0  ;
 $D5BA DEFB $05,$E0  ;
 $D5BC DEFB $06,$60  ;
 $D5BE DEFB $03,$C0  ; }
; Frame 2.
 $D5C0 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D5C1 DEFB $0F,$00  ; {#SPRITE$1F(blob-02)
 $D5C3 DEFB $1F,$80  ;
 $D5C5 DEFB $1F,$80  ;
 $D5C7 DEFB $3F,$C0  ;
 $D5C9 DEFB $7F,$E0  ;
 $D5CB DEFB $FF,$F8  ;
 $D5CD DEFB $BF,$FC  ;
 $D5CF DEFB $BF,$FE  ;
 $D5D1 DEFB $BF,$FE  ;
 $D5D3 DEFB $BF,$FE  ;
 $D5D5 DEFB $DF,$F8  ;
 $D5D7 DEFB $6F,$E0  ;
 $D5D9 DEFB $37,$C0  ;
 $D5DB DEFB $17,$80  ;
 $D5DD DEFB $19,$80  ;
 $D5DF DEFB $0F,$00  ; }
; Frame 3.
 $D5E1 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D5E2 DEFB $3C,$00  ; {#SPRITE$20(blob-03)
 $D5E4 DEFB $7E,$00  ;
 $D5E6 DEFB $7E,$00  ;
 $D5E8 DEFB $FF,$00  ;
 $D5EA DEFB $BF,$80  ;
 $D5EC DEFB $BF,$E0  ;
 $D5EE DEFB $BF,$FC  ;
 $D5F0 DEFB $BF,$FE  ;
 $D5F2 DEFB $BF,$FE  ;
 $D5F4 DEFB $BF,$FC  ;
 $D5F6 DEFB $BF,$E0  ;
 $D5F8 DEFB $BF,$80  ;
 $D5FA DEFB $DF,$00  ;
 $D5FC DEFB $7E,$00  ;
 $D5FE DEFB $66,$00  ;
 $D600 DEFB $3C,$00  ; }
; Frame 4.
 $D602 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $D603 DEFB $38,$00  ; {#SPRITE$21(blob-04)
 $D605 DEFB $78,$00  ;
 $D607 DEFB $7C,$00  ;
 $D609 DEFB $FE,$04  ;
 $D60B DEFB $BF,$9E  ;
 $D60D DEFB $BF,$FE  ;
 $D60F DEFB $BF,$FE  ;
 $D611 DEFB $BF,$FE  ;
 $D613 DEFB $BF,$F6  ;
 $D615 DEFB $BF,$9E  ;
 $D617 DEFB $DE,$04  ;
 $D619 DEFB $5C,$00  ;
 $D61B DEFB $68,$00  ;
 $D61D DEFB $38,$00  ; }
; Frame 5.
 $D61F DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $D620 DEFB $60,$06  ; {#SPRITE$22(blob-05)
 $D622 DEFB $70,$0E  ;
 $D624 DEFB $F8,$1F  ;
 $D626 DEFB $BE,$7F  ;
 $D628 DEFB $BF,$FF  ;
 $D62A DEFB $BF,$FF  ;
 $D62C DEFB $BF,$FF  ;
 $D62E DEFB $BF,$EF  ;
 $D630 DEFB $BE,$77  ;
 $D632 DEFB $D8,$1B  ;
 $D634 DEFB $70,$0A  ;
 $D636 DEFB $60,$0A  ; }
; Frame 6.
 $D638 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $D639 DEFB $00,$1C  ; {#SPRITE$23(blob-06)
 $D63B DEFB $00,$1E  ;
 $D63D DEFB $00,$3E  ;
 $D63F DEFB $20,$7F  ;
 $D641 DEFB $79,$FF  ;
 $D643 DEFB $7F,$FF  ;
 $D645 DEFB $5F,$FF  ;
 $D647 DEFB $5F,$FF  ;
 $D649 DEFB $6F,$BF  ;
 $D64B DEFB $79,$DF  ;
 $D64D DEFB $20,$6F  ;
 $D64F DEFB $00,$36  ;
 $D651 DEFB $00,$16  ;
 $D653 DEFB $00,$1C  ; }
; Frame 7.
 $D655 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D656 DEFB $00,$3C  ; {#SPRITE$24(blob-07)
 $D658 DEFB $00,$7E  ;
 $D65A DEFB $00,$7E  ;
 $D65C DEFB $00,$FF  ;
 $D65E DEFB $01,$FF  ;
 $D660 DEFB $07,$FF  ;
 $D662 DEFB $3F,$FF  ;
 $D664 DEFB $77,$FF  ;
 $D666 DEFB $77,$FF  ;
 $D668 DEFB $3C,$FF  ;
 $D66A DEFB $07,$7F  ;
 $D66C DEFB $01,$BF  ;
 $D66E DEFB $00,$DF  ;
 $D670 DEFB $00,$5E  ;
 $D672 DEFB $00,$66  ;
 $D674 DEFB $00,$3C  ; }
; Frame 8.
 $D676 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D677 DEFB $00,$F0  ; {#SPRITE$25(blob-08)
 $D679 DEFB $01,$F8  ;
 $D67B DEFB $01,$F8  ;
 $D67D DEFB $03,$FC  ;
 $D67F DEFB $07,$FE  ;
 $D681 DEFB $1F,$FF  ;
 $D683 DEFB $3F,$FF  ;
 $D685 DEFB $7F,$FF  ;
 $D687 DEFB $6F,$FF  ;
 $D689 DEFB $33,$FF  ;
 $D68B DEFB $1D,$FF  ;
 $D68D DEFB $06,$FE  ;
 $D68F DEFB $03,$7C  ;
 $D691 DEFB $01,$78  ;
 $D693 DEFB $01,$98  ;
 $D695 DEFB $00,$F0  ; }
; Frame 9.
 $D697 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D698 DEFB $00,$FC  ; {#SPRITE$26(blob-09)
 $D69A DEFB $03,$82  ;
 $D69C DEFB $0F,$81  ;
 $D69E DEFB $1F,$C1  ;
 $D6A0 DEFB $3F,$E1  ;
 $D6A2 DEFB $7F,$C3  ;
 $D6A4 DEFB $3F,$84  ;
 $D6A6 DEFB $7F,$04  ;
 $D6A8 DEFB $7F,$08  ;
 $D6AA DEFB $7F,$08  ;
 $D6AC DEFB $7F,$08  ;
 $D6AE DEFB $3F,$88  ;
 $D6B0 DEFB $1F,$90  ;
 $D6B2 DEFB $07,$D0  ;
 $D6B4 DEFB $03,$D0  ;
 $D6B6 DEFB $01,$E0  ; }
; Frame 10.
 $D6B8 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D6B9 DEFB $07,$F0  ; {#SPRITE$27(blob-10)
 $D6BB DEFB $1E,$10  ;
 $D6BD DEFB $3E,$08  ;
 $D6BF DEFB $78,$40  ;
 $D6C1 DEFB $F0,$02  ;
 $D6C3 DEFB $E0,$02  ;
 $D6C5 DEFB $F0,$02  ;
 $D6C7 DEFB $70,$02  ;
 $D6C9 DEFB $70,$04  ;
 $D6CB DEFB $70,$04  ;
 $D6CD DEFB $30,$08  ;
 $D6CF DEFB $38,$08  ;
 $D6D1 DEFB $1C,$10  ;
 $D6D3 DEFB $0E,$20  ;
 $D6D5 DEFB $07,$C0  ;
 $D6D7 DEFB $03,$80  ; }
; Frame 11.
 $D6D9 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D6DA DEFB $01,$F0  ; {#SPRITE$28(blob-11)
 $D6DC DEFB $0E,$08  ;
 $D6DE DEFB $10,$04  ;
 $D6E0 DEFB $20,$02  ;
 $D6E2 DEFB $60,$02  ;
 $D6E4 DEFB $40,$02  ;
 $D6E6 DEFB $C0,$01  ;
 $D6E8 DEFB $80,$02  ;
 $D6EA DEFB $40,$04  ;
 $D6EC DEFB $60,$04  ;
 $D6EE DEFB $70,$08  ;
 $D6F0 DEFB $38,$08  ;
 $D6F2 DEFB $18,$10  ;
 $D6F4 DEFB $0C,$10  ;
 $D6F6 DEFB $06,$60  ;
 $D6F8 DEFB $03,$80  ; }
; Frame 12.
 $D6FA DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D6FB DEFB $04,$F0  ; {#SPRITE$29(blob-12)
 $D6FD DEFB $1B,$0C  ;
 $D6FF DEFB $20,$06  ;
 $D701 DEFB $40,$07  ;
 $D703 DEFB $40,$0F  ;
 $D705 DEFB $40,$0F  ;
 $D707 DEFB $40,$1F  ;
 $D709 DEFB $40,$1F  ;
 $D70B DEFB $40,$0F  ;
 $D70D DEFB $80,$0E  ;
 $D70F DEFB $80,$1E  ;
 $D711 DEFB $80,$38  ;
 $D713 DEFB $60,$70  ;
 $D715 DEFB $39,$E0  ;
 $D717 DEFB $0F,$C0  ;
 $D719 DEFB $00,$00  ; }
; Frame 13.
 $D71B DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D71C DEFB $01,$F0  ; {#SPRITE$2A(blob-13)
 $D71E DEFB $02,$0C  ;
 $D720 DEFB $02,$0C  ;
 $D722 DEFB $02,$0E  ;
 $D724 DEFB $06,$0E  ;
 $D726 DEFB $08,$0E  ;
 $D728 DEFB $10,$1F  ;
 $D72A DEFB $20,$3F  ;
 $D72C DEFB $C0,$7F  ;
 $D72E DEFB $80,$7F  ;
 $D730 DEFB $80,$7E  ;
 $D732 DEFB $60,$FE  ;
 $D734 DEFB $3F,$FE  ;
 $D736 DEFB $1F,$FC  ;
 $D738 DEFB $0F,$F8  ;
 $D73A DEFB $07,$E0  ; }
; Frame 14.
 $D73C DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D73D DEFB $03,$C0  ; {#SPRITE$2B(blob-14)
 $D73F DEFB $02,$70  ;
 $D741 DEFB $04,$7C  ;
 $D743 DEFB $08,$7C  ;
 $D745 DEFB $11,$FE  ;
 $D747 DEFB $23,$FF  ;
 $D749 DEFB $43,$FF  ;
 $D74B DEFB $43,$FF  ;
 $D74D DEFB $87,$FF  ;
 $D74F DEFB $87,$FF  ;
 $D751 DEFB $8F,$FE  ;
 $D753 DEFB $FF,$FE  ;
 $D755 DEFB $FF,$FC  ;
 $D757 DEFB $7F,$FC  ;
 $D759 DEFB $03,$F8  ;
 $D75B DEFB $00,$F0  ; }
; Frame 15.
 $D75D DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D75E DEFB $00,$C0  ; {#SPRITE$2C(blob-15)
 $D760 DEFB $03,$F8  ;
 $D762 DEFB $07,$FC  ;
 $D764 DEFB $07,$FE  ;
 $D766 DEFB $0F,$FF  ;
 $D768 DEFB $0F,$FF  ;
 $D76A DEFB $1F,$FF  ;
 $D76C DEFB $3F,$FF  ;
 $D76E DEFB $3F,$FF  ;
 $D770 DEFB $7F,$FF  ;
 $D772 DEFB $7F,$FF  ;
 $D774 DEFB $7F,$FE  ;
 $D776 DEFB $3F,$FE  ;
 $D778 DEFB $1F,$FE  ;
 $D77A DEFB $0F,$FC  ;
 $D77C DEFB $01,$E8  ; }
; Frame 16.
 $D77E DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D77F DEFB $07,$F8  ; {#SPRITE$2D(blob-16)
 $D781 DEFB $0F,$C8  ;
 $D783 DEFB $1F,$E4  ;
 $D785 DEFB $3F,$E2  ;
 $D787 DEFB $3F,$E2  ;
 $D789 DEFB $7F,$FA  ;
 $D78B DEFB $7F,$F8  ;
 $D78D DEFB $7F,$F2  ;
 $D78F DEFB $FF,$E2  ;
 $D791 DEFB $FF,$E4  ;
 $D793 DEFB $FF,$C8  ;
 $D795 DEFB $FF,$88  ;
 $D797 DEFB $7F,$90  ;
 $D799 DEFB $3F,$20  ;
 $D79B DEFB $1F,$40  ;
 $D79D DEFB $0F,$80  ; }

; Sprite: Sparkle
;
; .
;
; .
;
; Frame 1.
b$D79F DEFB $09      ; Height = #N(#PEEK(#PC)) pixels.
 $D7A0 DEFB $01,$00  ; {#SPRITE$32(sparkle-01)
 $D7A2 DEFB $01,$00  ;
 $D7A4 DEFB $01,$80  ;
 $D7A6 DEFB $07,$F0  ;
 $D7A8 DEFB $1E,$60  ;
 $D7AA DEFB $02,$40  ;
 $D7AC DEFB $03,$C0  ;
 $D7AE DEFB $03,$40  ;
 $D7B0 DEFB $02,$00  ; }
; Frame 2.
 $D7B2 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $D7B3 DEFB $01,$00  ; {#SPRITE$33(sparkle-02)
 $D7B5 DEFB $01,$80  ;
 $D7B7 DEFB $03,$80  ;
 $D7B9 DEFB $06,$C0  ;
 $D7BB DEFB $1C,$7C  ;
 $D7BD DEFB $70,$38  ;
 $D7BF DEFB $3E,$20  ;
 $D7C1 DEFB $04,$A0  ;
 $D7C3 DEFB $05,$E0  ;
 $D7C5 DEFB $07,$60  ;
 $D7C7 DEFB $06,$20  ;
 $D7C9 DEFB $04,$00  ; }
; Frame 3.
 $D7CB DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D7CC DEFB $01,$00  ; {#SPRITE$34(sparkle-03)
 $D7CE DEFB $01,$80  ;
 $D7D0 DEFB $03,$C0  ;
 $D7D2 DEFB $03,$C0  ;
 $D7D4 DEFB $06,$40  ;
 $D7D6 DEFB $1C,$7E  ;
 $D7D8 DEFB $7A,$0F  ;
 $D7DA DEFB $E1,$DE  ;
 $D7DC DEFB $FD,$B8  ;
 $D7DE DEFB $3C,$30  ;
 $D7E0 DEFB $0C,$B0  ;
 $D7E2 DEFB $0B,$F0  ;
 $D7E4 DEFB $0F,$70  ;
 $D7E6 DEFB $0E,$20  ;
 $D7E8 DEFB $0C,$20  ;
 $D7EA DEFB $08,$00  ; }
; Frame 4.
 $D7EC DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D7ED DEFB $01,$80  ; {#SPRITE$35(sparkle-04)
 $D7EF DEFB $01,$80  ;
 $D7F1 DEFB $02,$40  ;
 $D7F3 DEFB $02,$40  ;
 $D7F5 DEFB $04,$40  ;
 $D7F7 DEFB $19,$3E  ;
 $D7F9 DEFB $E3,$01  ;
 $D7FB DEFB $1E,$FC  ;
 $D7FD DEFB $C6,$48  ;
 $D7FF DEFB $33,$D0  ;
 $D801 DEFB $0A,$50  ;
 $D803 DEFB $08,$90  ;
 $D805 DEFB $09,$50  ;
 $D807 DEFB $0A,$30  ;
 $D809 DEFB $0C,$20  ;
 $D80B DEFB $0C,$20  ; }
; Frame 5.
 $D80D DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D80E DEFB $00,$00  ; {#SPRITE$36(sparkle-05)
 $D810 DEFB $00,$20  ;
 $D812 DEFB $04,$00  ;
 $D814 DEFB $01,$00  ;
 $D816 DEFB $01,$04  ;
 $D818 DEFB $22,$00  ;
 $D81A DEFB $04,$E0  ;
 $D81C DEFB $90,$0C  ;
 $D81E DEFB $88,$11  ;
 $D820 DEFB $04,$00  ;
 $D822 DEFB $01,$A0  ;
 $D824 DEFB $02,$60  ;
 $D826 DEFB $12,$10  ;
 $D828 DEFB $00,$42  ;
 $D82A DEFB $00,$00  ;
 $D82C DEFB $04,$10  ; }
; Frame 6.
 $D82E DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D82F DEFB $00,$80  ; {#SPRITE$37(sparkle-06)
 $D831 DEFB $00,$00  ;
 $D833 DEFB $01,$40  ;
 $D835 DEFB $02,$00  ;
 $D837 DEFB $10,$20  ;
 $D839 DEFB $40,$00  ;
 $D83B DEFB $20,$03  ;
 $D83D DEFB $00,$02  ;
 $D83F DEFB $00,$04  ;
 $D841 DEFB $00,$00  ;
 $D843 DEFB $00,$00  ;
 $D845 DEFB $04,$04  ;
 $D847 DEFB $01,$00  ;
 $D849 DEFB $06,$12  ;
 $D84B DEFB $04,$06  ;
 $D84D DEFB $00,$00  ; }
; Frame 6.
 $D84F DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D850 DEFB $01,$00  ; {#SPRITE$38(sparkle-07)
 $D852 DEFB $02,$42  ;
 $D854 DEFB $00,$00  ;
 $D856 DEFB $00,$00  ;
 $D858 DEFB $20,$00  ;
 $D85A DEFB $80,$00  ;
 $D85C DEFB $00,$00  ;
 $D85E DEFB $20,$00  ;
 $D860 DEFB $00,$00  ;
 $D862 DEFB $00,$02  ;
 $D864 DEFB $00,$00  ;
 $D866 DEFB $00,$00  ;
 $D868 DEFB $00,$00  ;
 $D86A DEFB $20,$10  ;
 $D86C DEFB $08,$02  ;
 $D86E DEFB $20,$00  ; }

; Data block at D870
b$D870 DEFB $05                 ; Height = #N(#PEEK(#PC)) pixels.
 $D871 DEFB $38,$36,$5E,$6E,$04 ; #SPRITE$2E(test-2E)

; Data block at D876
b$D876 DEFB $07                         ; Height = #N(#PEEK(#PC)) pixels.
 $D877 DEFB $1C,$3C,$5A,$FF,$FF,$FF,$6E ; #SPRITE$2F(test-2F)

; Data block at D87E
b$D87E DEFB $09,$00,$00,$00,$08,$2A,$14,$2C
 $D886 DEFB $12,$08

; Data block at D888
b$D888 DEFB $0B,$01,$82,$44,$12,$C0,$12,$00
 $D890 DEFB $45,$12,$0C,$80

; Sprite: Spinning Top Alien
;
; .
;
; .
;
; Frame 1.
b$D894 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $D895 DEFB $3F,$FC  ; {#SPRITE$16(top-01)
 $D897 DEFB $7F,$FE  ;
 $D899 DEFB $00,$00  ;
 $D89B DEFB $FF,$FF  ;
 $D89D DEFB $6D,$B6  ;
 $D89F DEFB $2D,$B4  ;
 $D8A1 DEFB $1F,$F8  ;
 $D8A3 DEFB $01,$80  ;
 $D8A5 DEFB $01,$80  ;
 $D8A7 DEFB $01,$80  ;
 $D8A9 DEFB $01,$80  ;
 $D8AB DEFB $01,$80  ;
 $D8AD DEFB $00,$00  ;
 $D8AF DEFB $E3,$FF  ;
 $D8B1 DEFB $19,$F8  ;
 $D8B3 DEFB $02,$C0  ; }
; Frame 2.
 $D8B5 DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $D8B6 DEFB $3F,$FC  ; {#SPRITE$17(top-02)
 $D8B8 DEFB $7F,$FE  ;
 $D8BA DEFB $00,$00  ;
 $D8BC DEFB $FF,$FF  ;
 $D8BE DEFB $76,$DA  ;
 $D8C0 DEFB $36,$DC  ;
 $D8C2 DEFB $1F,$F8  ;
 $D8C4 DEFB $01,$80  ;
 $D8C6 DEFB $01,$80  ;
 $D8C8 DEFB $01,$80  ;
 $D8CA DEFB $01,$80  ;
 $D8CC DEFB $00,$00  ;
 $D8CE DEFB $E3,$FF  ;
 $D8D0 DEFB $19,$F8  ;
 $D8D2 DEFB $02,$C0  ; }
; Frame 3.
 $D8D4 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $D8D5 DEFB $3F,$FC  ; {#SPRITE$18(top-03)
 $D8D7 DEFB $7F,$FE  ;
 $D8D9 DEFB $00,$00  ;
 $D8DB DEFB $FF,$FF  ;
 $D8DD DEFB $5B,$6E  ;
 $D8DF DEFB $3B,$6C  ;
 $D8E1 DEFB $1F,$F8  ;
 $D8E3 DEFB $01,$80  ;
 $D8E5 DEFB $01,$80  ;
 $D8E7 DEFB $01,$80  ;
 $D8E9 DEFB $00,$00  ;
 $D8EB DEFB $E3,$FF  ;
 $D8ED DEFB $19,$F8  ;
 $D8EF DEFB $02,$C0  ; }
; Frame 4.
 $D8F1 DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $D8F2 DEFB $3F,$FC  ; {#SPRITE$19(top-04)
 $D8F4 DEFB $7F,$FE  ;
 $D8F6 DEFB $00,$00  ;
 $D8F8 DEFB $FF,$FF  ;
 $D8FA DEFB $6D,$B6  ;
 $D8FC DEFB $2D,$B4  ;
 $D8FE DEFB $1F,$F8  ;
 $D900 DEFB $01,$80  ;
 $D902 DEFB $01,$80  ;
 $D904 DEFB $00,$00  ;
 $D906 DEFB $E3,$FF  ;
 $D908 DEFB $19,$F8  ;
 $D90A DEFB $02,$C0  ; }
; Frame 5.
 $D90C DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $D90D DEFB $3F,$FC  ; {#SPRITE$1A(top-05)
 $D90F DEFB $7F,$FE  ;
 $D911 DEFB $00,$00  ;
 $D913 DEFB $FF,$FF  ;
 $D915 DEFB $76,$DA  ;
 $D917 DEFB $36,$DC  ;
 $D919 DEFB $1F,$F8  ;
 $D91B DEFB $01,$80  ;
 $D91D DEFB $00,$00  ;
 $D91F DEFB $E3,$FF  ;
 $D921 DEFB $19,$F8  ;
 $D923 DEFB $02,$C0  ; }
; Frame 6.
 $D925 DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $D926 DEFB $3F,$FC  ; {#SPRITE$1B(top-06)
 $D928 DEFB $7F,$FE  ;
 $D92A DEFB $00,$00  ;
 $D92C DEFB $FF,$FF  ;
 $D92E DEFB $5B,$6E  ;
 $D930 DEFB $3B,$6C  ;
 $D932 DEFB $1F,$F8  ;
 $D934 DEFB $00,$00  ;
 $D936 DEFB $E3,$FF  ;
 $D938 DEFB $19,$F8  ;
 $D93A DEFB $02,$C0  ; }
; Frame 7.
 $D93C DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $D93D DEFB $3F,$FC  ; {#SPRITE$1C(top-07)
 $D93F DEFB $7F,$FE  ;
 $D941 DEFB $00,$00  ;
 $D943 DEFB $FF,$FF  ;
 $D945 DEFB $6D,$B6  ;
 $D947 DEFB $2D,$B4  ;
 $D949 DEFB $1F,$F8  ;
 $D94B DEFB $00,$00  ;
 $D94D DEFB $19,$F8  ;
 $D94F DEFB $0D,$F0  ;
 $D951 DEFB $06,$E0  ;
 $D953 DEFB $02,$C0  ;
 $D955 DEFB $01,$80  ; }
; Frame 8.
 $D957 DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $D958 DEFB $3F,$FC  ; {#SPRITE$1D(top-08)
 $D95A DEFB $7F,$FE  ;
 $D95C DEFB $00,$00  ;
 $D95E DEFB $FF,$FF  ;
 $D960 DEFB $76,$DA  ;
 $D962 DEFB $36,$DC  ;
 $D964 DEFB $1F,$F8  ;
 $D966 DEFB $01,$80  ;
 $D968 DEFB $01,$80  ;
 $D96A DEFB $01,$80  ;
 $D96C DEFB $00,$00  ;
 $D96E DEFB $79,$FE  ;
 $D970 DEFB $1D,$F8  ;
 $D972 DEFB $06,$60  ;
 $D974 DEFB $01,$80  ; }

; Sprite: Platform
b$D976 DEFB $08      ; Height = #N(#PEEK(#PC)) pixels.
 $D977 DEFB $FF,$FF  ; {#SPRITE$04(platform)
 $D979 DEFB $66,$66  ;
 $D97B DEFB $3C,$3C  ;
 $D97D DEFB $18,$18  ;
 $D97F DEFB $3C,$3C  ;
 $D981 DEFB $66,$66  ;
 $D983 DEFB $FF,$FF  ;
 $D985 DEFB $FF,$FF  ; }

; Sprite: Missile Launcher
;
; .
;
; .
;
; Frame 1.
b$D987 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $D988 DEFB $AD,$B5  ; {#JETMAN$6F(missile-launcher-01*)
 $D98A DEFB $AD,$B5  ;
 $D98C DEFB $00,$00  ;
 $D98E DEFB $8F,$FF  ;
 $D990 DEFB $CF,$FF  ;
 $D992 DEFB $67,$FE  ;
 $D994 DEFB $67,$FE  ;
 $D996 DEFB $00,$3C  ;
 $D998 DEFB $10,$3C  ;
 $D99A DEFB $38,$7C  ;
 $D99C DEFB $7C,$78  ;
 $D99E DEFB $BE,$78  ;
 $D9A0 DEFB $5F,$78  ;
 $D9A2 DEFB $2E,$F0  ;
 $D9A4 DEFB $16,$F0  ;
 $D9A6 DEFB $0A,$F0  ;
 $D9A8 DEFB $14,$E0  ;
 $D9AA DEFB $39,$E8  ;
 $D9AC DEFB $7D,$EC  ;
 $D9AE DEFB $BD,$DE  ;
 $D9B0 DEFB $5D,$DE  ;
 $D9B2 DEFB $2B,$E7  ;
 $D9B4 DEFB $13,$99  ;
 $D9B6 DEFB $0B,$A7  ;
 $D9B8 DEFB $05,$B0  ;
 $D9BA DEFB $02,$78  ;
 $D9BC DEFB $01,$7C  ;
 $D9BE DEFB $00,$BE  ;
 $D9C0 DEFB $00,$5E  ;
 $D9C2 DEFB $00,$27  ;
 $D9C4 DEFB $00,$19  ;
 $D9C6 DEFB $00,$07  ; }
; Frame 2.
 $D9C8 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $D9C9 DEFB $AD,$B5  ; {#JETMAN$70(missile-launcher-02*)
 $D9CB DEFB $AD,$B5  ;
 $D9CD DEFB $00,$00  ;
 $D9CF DEFB $8F,$FF  ;
 $D9D1 DEFB $CF,$FF  ;
 $D9D3 DEFB $67,$FE  ;
 $D9D5 DEFB $67,$FE  ;
 $D9D7 DEFB $00,$78  ;
 $D9D9 DEFB $18,$78  ;
 $D9DB DEFB $3C,$F8  ;
 $D9DD DEFB $7E,$F0  ;
 $D9DF DEFB $5E,$F0  ;
 $D9E1 DEFB $2E,$F0  ;
 $D9E3 DEFB $25,$E0  ;
 $D9E5 DEFB $19,$E0  ;
 $D9E7 DEFB $05,$E0  ;
 $D9E9 DEFB $19,$B0  ;
 $D9EB DEFB $3B,$D8  ;
 $D9ED DEFB $7B,$DC  ;
 $D9EF DEFB $5B,$BC  ;
 $D9F1 DEFB $2B,$BE  ;
 $D9F3 DEFB $27,$A6  ;
 $D9F5 DEFB $17,$5A  ;
 $D9F7 DEFB $0F,$66  ;
 $D9F9 DEFB $07,$70  ;
 $D9FB DEFB $02,$F8  ;
 $D9FD DEFB $01,$7C  ;
 $D9FF DEFB $00,$BC  ;
 $DA01 DEFB $00,$5E  ;
 $DA03 DEFB $00,$26  ;
 $DA05 DEFB $00,$1A  ;
 $DA07 DEFB $00,$06  ; }
; Frame 3.
 $DA09 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DA0A DEFB $AD,$B5  ; {#JETMAN$71(missile-launcher-03*)
 $DA0C DEFB $AD,$B5  ;
 $DA0E DEFB $00,$00  ;
 $DA10 DEFB $8F,$FF  ;
 $DA12 DEFB $CF,$FF  ;
 $DA14 DEFB $67,$FE  ;
 $DA16 DEFB $67,$FE  ;
 $DA18 DEFB $01,$E0  ;
 $DA1A DEFB $0D,$E0  ;
 $DA1C DEFB $1D,$E0  ;
 $DA1E DEFB $3D,$E0  ;
 $DA20 DEFB $2D,$E0  ;
 $DA22 DEFB $2D,$C0  ;
 $DA24 DEFB $13,$C0  ;
 $DA26 DEFB $0B,$C0  ;
 $DA28 DEFB $0B,$C0  ;
 $DA2A DEFB $03,$B0  ;
 $DA2C DEFB $1B,$B8  ;
 $DA2E DEFB $3B,$B8  ;
 $DA30 DEFB $27,$B8  ;
 $DA32 DEFB $27,$3C  ;
 $DA34 DEFB $17,$4C  ;
 $DA36 DEFB $07,$34  ;
 $DA38 DEFB $07,$4C  ;
 $DA3A DEFB $06,$F0  ;
 $DA3C DEFB $00,$F8  ;
 $DA3E DEFB $01,$78  ;
 $DA40 DEFB $01,$78  ;
 $DA42 DEFB $00,$BC  ;
 $DA44 DEFB $00,$4C  ;
 $DA46 DEFB $00,$34  ;
 $DA48 DEFB $00,$0C  ; }
; Frame 4.
 $DA4A DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DA4B DEFB $AD,$B5  ; {#JETMAN$72(missile-launcher-04*)
 $DA4D DEFB $AD,$B5  ;
 $DA4F DEFB $00,$00  ;
 $DA51 DEFB $C7,$FF  ;
 $DA53 DEFB $EF,$FF  ;
 $DA55 DEFB $63,$FE  ;
 $DA57 DEFB $73,$FE  ;
 $DA59 DEFB $0E,$1C  ;
 $DA5B DEFB $0E,$1C  ;
 $DA5D DEFB $1E,$1C  ;
 $DA5F DEFB $1E,$9C  ;
 $DA61 DEFB $1E,$9C  ;
 $DA63 DEFB $0E,$9C  ;
 $DA65 DEFB $0E,$D8  ;
 $DA67 DEFB $0D,$D8  ;
 $DA69 DEFB $0D,$F8  ;
 $DA6B DEFB $0D,$E8  ;
 $DA6D DEFB $1C,$E8  ;
 $DA6F DEFB $1C,$F8  ;
 $DA71 DEFB $1C,$70  ;
 $DA73 DEFB $19,$70  ;
 $DA75 DEFB $1A,$B0  ;
 $DA77 DEFB $1B,$50  ;
 $DA79 DEFB $19,$A0  ;
 $DA7B DEFB $1D,$E0  ;
 $DA7D DEFB $05,$E0  ;
 $DA7F DEFB $02,$F0  ;
 $DA81 DEFB $02,$F0  ;
 $DA83 DEFB $01,$70  ;
 $DA85 DEFB $00,$B0  ;
 $DA87 DEFB $00,$50  ;
 $DA89 DEFB $00,$20  ; }
; Frame 5.
 $DA8B DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DA8C DEFB $AD,$B5  ; {#JETMAN$73(missile-launcher-05*)
 $DA8E DEFB $AD,$B5  ;
 $DA90 DEFB $00,$00  ;
 $DA92 DEFB $C7,$FF  ;
 $DA94 DEFB $E7,$FF  ;
 $DA96 DEFB $63,$FE  ;
 $DA98 DEFB $73,$FE  ;
 $DA9A DEFB $30,$0C  ;
 $DA9C DEFB $33,$CC  ;
 $DA9E DEFB $35,$EC  ;
 $DAA0 DEFB $35,$EC  ;
 $DAA2 DEFB $35,$EC  ;
 $DAA4 DEFB $35,$EC  ;
 $DAA6 DEFB $35,$EC  ;
 $DAA8 DEFB $35,$EC  ;
 $DAAA DEFB $35,$EC  ;
 $DAAC DEFB $35,$EC  ;
 $DAAE DEFB $35,$EC  ;
 $DAB0 DEFB $35,$EC  ;
 $DAB2 DEFB $35,$EC  ;
 $DAB4 DEFB $35,$EC  ;
 $DAB6 DEFB $35,$CC  ;
 $DAB8 DEFB $32,$CC  ;
 $DABA DEFB $35,$AC  ;
 $DABC DEFB $34,$6C  ;
 $DABE DEFB $05,$E0  ;
 $DAC0 DEFB $05,$E0  ;
 $DAC2 DEFB $05,$E0  ;
 $DAC4 DEFB $05,$E0  ;
 $DAC6 DEFB $02,$C0  ;
 $DAC8 DEFB $02,$C0  ;
 $DACA DEFB $01,$80  ; }
; Frame 6.
 $DACC DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DACD DEFB $AD,$B5  ; {#JETMAN$74(missile-launcher-06*)
 $DACF DEFB $AD,$B5  ;
 $DAD1 DEFB $00,$00  ;
 $DAD3 DEFB $8F,$FF  ;
 $DAD5 DEFB $6F,$FF  ;
 $DAD7 DEFB $67,$FE  ;
 $DAD9 DEFB $67,$FE  ;
 $DADB DEFB $38,$70  ;
 $DADD DEFB $38,$70  ;
 $DADF DEFB $38,$78  ;
 $DAE1 DEFB $39,$78  ;
 $DAE3 DEFB $39,$78  ;
 $DAE5 DEFB $39,$70  ;
 $DAE7 DEFB $1B,$70  ;
 $DAE9 DEFB $1A,$B0  ;
 $DAEB DEFB $1D,$B0  ;
 $DAED DEFB $15,$B0  ;
 $DAEF DEFB $1B,$B8  ;
 $DAF1 DEFB $1B,$B8  ;
 $DAF3 DEFB $0B,$B8  ;
 $DAF5 DEFB $0B,$98  ;
 $DAF7 DEFB $0B,$58  ;
 $DAF9 DEFB $0A,$D8  ;
 $DAFB DEFB $05,$D8  ;
 $DAFD DEFB $05,$F8  ;
 $DAFF DEFB $0B,$E0  ;
 $DB01 DEFB $0B,$C0  ;
 $DB03 DEFB $0B,$C0  ;
 $DB05 DEFB $0B,$80  ;
 $DB07 DEFB $0B,$00  ;
 $DB09 DEFB $0A,$00  ;
 $DB0B DEFB $04,$00  ; }
; Frame 7.
 $DB0D DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DB0E DEFB $AD,$B5  ; {#JETMAN$75(missile-launcher-07*)
 $DB10 DEFB $AD,$B5  ;
 $DB12 DEFB $00,$00  ;
 $DB14 DEFB $8F,$FF  ;
 $DB16 DEFB $6F,$FF  ;
 $DB18 DEFB $67,$FE  ;
 $DB1A DEFB $67,$FE  ;
 $DB1C DEFB $07,$80  ;
 $DB1E DEFB $07,$B0  ;
 $DB20 DEFB $07,$98  ;
 $DB22 DEFB $07,$BC  ;
 $DB24 DEFB $07,$BC  ;
 $DB26 DEFB $03,$BC  ;
 $DB28 DEFB $03,$B8  ;
 $DB2A DEFB $03,$B0  ;
 $DB2C DEFB $03,$B0  ;
 $DB2E DEFB $09,$C0  ;
 $DB30 DEFB $15,$D8  ;
 $DB32 DEFB $15,$CC  ;
 $DB34 DEFB $15,$EC  ;
 $DB36 DEFB $2E,$EC  ;
 $DB38 DEFB $2E,$E8  ;
 $DB3A DEFB $2C,$E0  ;
 $DB3C DEFB $32,$E0  ;
 $DB3E DEFB $0F,$60  ;
 $DB40 DEFB $17,$00  ;
 $DB42 DEFB $17,$80  ;
 $DB44 DEFB $17,$80  ;
 $DB46 DEFB $1F,$00  ;
 $DB48 DEFB $1E,$00  ;
 $DB4A DEFB $1C,$00  ;
 $DB4C DEFB $30,$00  ; }
; Frame 8.
 $DB4E DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DB4F DEFB $AD,$B5  ; {#JETMAN$76(missile-launcher-08*)
 $DB51 DEFB $AD,$B5  ;
 $DB53 DEFB $00,$00  ;
 $DB55 DEFB $8F,$FF  ;
 $DB57 DEFB $6F,$FF  ;
 $DB59 DEFB $67,$FE  ;
 $DB5B DEFB $67,$FE  ;
 $DB5D DEFB $1E,$00  ;
 $DB5F DEFB $1E,$18  ;
 $DB61 DEFB $1F,$1C  ;
 $DB63 DEFB $0F,$5E  ;
 $DB65 DEFB $0F,$3E  ;
 $DB67 DEFB $0F,$7C  ;
 $DB69 DEFB $07,$3C  ;
 $DB6B DEFB $07,$38  ;
 $DB6D DEFB $07,$A0  ;
 $DB6F DEFB $0B,$98  ;
 $DB71 DEFB $13,$CC  ;
 $DB73 DEFB $2B,$DE  ;
 $DB75 DEFB $2D,$DE  ;
 $DB77 DEFB $5D,$DC  ;
 $DB79 DEFB $5D,$EC  ;
 $DB7B DEFB $5A,$E8  ;
 $DB7D DEFB $64,$F0  ;
 $DB7F DEFB $0A,$E0  ;
 $DB81 DEFB $17,$40  ;
 $DB83 DEFB $2F,$80  ;
 $DB85 DEFB $2F,$00  ;
 $DB87 DEFB $5E,$00  ;
 $DB89 DEFB $5C,$00  ;
 $DB8B DEFB $58,$00  ;
 $DB8D DEFB $60,$00  ; }
; Frame 9.
 $DB8F DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DB90 DEFB $AD,$B5  ; {#JETMAN$77(missile-launcher-09*)
 $DB92 DEFB $AD,$B5  ;
 $DB94 DEFB $00,$00  ;
 $DB96 DEFB $8F,$FF  ;
 $DB98 DEFB $CF,$FF  ;
 $DB9A DEFB $67,$FE  ;
 $DB9C DEFB $67,$FE  ;
 $DB9E DEFB $3C,$00  ;
 $DBA0 DEFB $3C,$08  ;
 $DBA2 DEFB $3E,$14  ;
 $DBA4 DEFB $1E,$2E  ;
 $DBA6 DEFB $1E,$5F  ;
 $DBA8 DEFB $1E,$BE  ;
 $DBAA DEFB $0F,$7C  ;
 $DBAC DEFB $0F,$78  ;
 $DBAE DEFB $0F,$70  ;
 $DBB0 DEFB $07,$68  ;
 $DBB2 DEFB $17,$B4  ;
 $DBB4 DEFB $27,$AE  ;
 $DBB6 DEFB $5B,$9F  ;
 $DBB8 DEFB $5B,$BE  ;
 $DBBA DEFB $BF,$DC  ;
 $DBBC DEFB $B9,$D8  ;
 $DBBE DEFB $E5,$D0  ;
 $DBC0 DEFB $09,$A0  ;
 $DBC2 DEFB $16,$40  ;
 $DBC4 DEFB $2F,$80  ;
 $DBC6 DEFB $5F,$00  ;
 $DBC8 DEFB $5E,$00  ;
 $DBCA DEFB $BC,$00  ;
 $DBCC DEFB $B8,$00  ;
 $DBCE DEFB $E0,$00  ; }
; Frame 10.
 $DBD0 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DBD1 DEFB $AD,$B5  ; {#JETMAN$78(missile-launcher-0A*)
 $DBD3 DEFB $AD,$B5  ;
 $DBD5 DEFB $00,$00  ;
 $DBD7 DEFB $8F,$FF  ;
 $DBD9 DEFB $CF,$FF  ;
 $DBDB DEFB $67,$FE  ;
 $DBDD DEFB $67,$FE  ;
 $DBDF DEFB $3C,$00  ;
 $DBE1 DEFB $3C,$18  ;
 $DBE3 DEFB $3C,$34  ;
 $DBE5 DEFB $3C,$5A  ;
 $DBE7 DEFB $1E,$5E  ;
 $DBE9 DEFB $1E,$DC  ;
 $DBEB DEFB $1E,$3C  ;
 $DBED DEFB $1E,$F8  ;
 $DBEF DEFB $0E,$E0  ;
 $DBF1 DEFB $0E,$D8  ;
 $DBF3 DEFB $0E,$B4  ;
 $DBF5 DEFB $2F,$5A  ;
 $DBF7 DEFB $27,$5E  ;
 $DBF9 DEFB $57,$3C  ;
 $DBFB DEFB $57,$7C  ;
 $DBFD DEFB $57,$78  ;
 $DBFF DEFB $63,$70  ;
 $DC01 DEFB $0B,$60  ;
 $DC03 DEFB $14,$C0  ;
 $DC05 DEFB $1F,$80  ;
 $DC07 DEFB $2F,$00  ;
 $DC09 DEFB $5E,$00  ;
 $DC0B DEFB $5C,$00  ;
 $DC0D DEFB $58,$00  ;
 $DC0F DEFB $60,$00  ; }
; Frame 11.
 $DC11 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DC12 DEFB $AD,$B5  ; {#JETMAN$79(missile-launcher-0B*)
 $DC14 DEFB $AD,$B5  ;
 $DC16 DEFB $00,$00  ;
 $DC18 DEFB $8F,$FF  ;
 $DC1A DEFB $6F,$FF  ;
 $DC1C DEFB $67,$FE  ;
 $DC1E DEFB $67,$FE  ;
 $DC20 DEFB $38,$00  ;
 $DC22 DEFB $38,$30  ;
 $DC24 DEFB $38,$58  ;
 $DC26 DEFB $38,$6C  ;
 $DC28 DEFB $38,$B4  ;
 $DC2A DEFB $39,$7C  ;
 $DC2C DEFB $1A,$F8  ;
 $DC2E DEFB $1A,$F0  ;
 $DC30 DEFB $1D,$D0  ;
 $DC32 DEFB $1D,$B0  ;
 $DC34 DEFB $1D,$58  ;
 $DC36 DEFB $1D,$6C  ;
 $DC38 DEFB $0C,$B4  ;
 $DC3A DEFB $1D,$7C  ;
 $DC3C DEFB $1C,$F8  ;
 $DC3E DEFB $1D,$F0  ;
 $DC40 DEFB $3D,$F0  ;
 $DC42 DEFB $0D,$E0  ;
 $DC44 DEFB $13,$C0  ;
 $DC46 DEFB $17,$80  ;
 $DC48 DEFB $17,$80  ;
 $DC4A DEFB $2F,$00  ;
 $DC4C DEFB $1E,$00  ;
 $DC4E DEFB $1C,$00  ;
 $DC50 DEFB $30,$00  ; }
; Frame 12.
 $DC52 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DC53 DEFB $AD,$B5  ; {#JETMAN$7A(missile-launcher-0C*)
 $DC55 DEFB $AD,$B5  ;
 $DC57 DEFB $00,$00  ;
 $DC59 DEFB $C7,$FF  ;
 $DC5B DEFB $E7,$FF  ;
 $DC5D DEFB $63,$FE  ;
 $DC5F DEFB $73,$FE  ;
 $DC61 DEFB $38,$0C  ;
 $DC63 DEFB $38,$34  ;
 $DC65 DEFB $38,$58  ;
 $DC67 DEFB $38,$9C  ;
 $DC69 DEFB $38,$A4  ;
 $DC6B DEFB $39,$7C  ;
 $DC6D DEFB $39,$78  ;
 $DC6F DEFB $3A,$F8  ;
 $DC71 DEFB $39,$C0  ;
 $DC73 DEFB $3B,$B0  ;
 $DC75 DEFB $3B,$58  ;
 $DC77 DEFB $3A,$DC  ;
 $DC79 DEFB $1A,$A4  ;
 $DC7B DEFB $19,$7C  ;
 $DC7D DEFB $19,$78  ;
 $DC7F DEFB $1A,$F8  ;
 $DC81 DEFB $1D,$F0  ;
 $DC83 DEFB $1D,$F0  ;
 $DC85 DEFB $0B,$E0  ;
 $DC87 DEFB $0B,$C0  ;
 $DC89 DEFB $0B,$C0  ;
 $DC8B DEFB $0B,$80  ;
 $DC8D DEFB $0B,$00  ;
 $DC8F DEFB $0A,$00  ;
 $DC91 DEFB $04,$00  ; }
; Frame 13.
 $DC93 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DC94 DEFB $AD,$B5  ; {#JETMAN$7B(missile-launcher-0D*)
 $DC96 DEFB $AD,$B5  ;
 $DC98 DEFB $00,$00  ;
 $DC9A DEFB $C7,$FF  ;
 $DC9C DEFB $E7,$FF  ;
 $DC9E DEFB $63,$FF  ;
 $DCA0 DEFB $73,$FE  ;
 $DCA2 DEFB $30,$0C  ;
 $DCA4 DEFB $33,$CC  ;
 $DCA6 DEFB $37,$EC  ;
 $DCA8 DEFB $33,$CC  ;
 $DCAA DEFB $34,$2C  ;
 $DCAC DEFB $35,$EC  ;
 $DCAE DEFB $35,$EC  ;
 $DCB0 DEFB $35,$EC  ;
 $DCB2 DEFB $34,$2C  ;
 $DCB4 DEFB $33,$CC  ;
 $DCB6 DEFB $37,$EC  ;
 $DCB8 DEFB $33,$CC  ;
 $DCBA DEFB $34,$2C  ;
 $DCBC DEFB $35,$EC  ;
 $DCBE DEFB $35,$EC  ;
 $DCC0 DEFB $35,$EC  ;
 $DCC2 DEFB $35,$EC  ;
 $DCC4 DEFB $35,$EC  ;
 $DCC6 DEFB $05,$E0  ;
 $DCC8 DEFB $05,$E0  ;
 $DCCA DEFB $05,$E0  ;
 $DCCC DEFB $05,$E0  ;
 $DCCE DEFB $02,$C0  ;
 $DCD0 DEFB $02,$C0  ;
 $DCD2 DEFB $01,$80  ; }
; Frame 14.
 $DCD4 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DCD5 DEFB $AD,$B5  ; {#JETMAN$7C(missile-launcher-0E*)
 $DCD7 DEFB $AD,$B5  ;
 $DCD9 DEFB $00,$00  ;
 $DCDB DEFB $8F,$FF  ;
 $DCDD DEFB $CF,$FF  ;
 $DCDF DEFB $67,$FE  ;
 $DCE1 DEFB $67,$FE  ;
 $DCE3 DEFB $30,$1C  ;
 $DCE5 DEFB $2C,$1C  ;
 $DCE7 DEFB $1A,$1C  ;
 $DCE9 DEFB $3B,$1C  ;
 $DCEB DEFB $27,$1C  ;
 $DCED DEFB $2F,$9C  ;
 $DCEF DEFB $17,$9C  ;
 $DCF1 DEFB $17,$DC  ;
 $DCF3 DEFB $03,$DC  ;
 $DCF5 DEFB $0D,$DC  ;
 $DCF7 DEFB $1A,$DC  ;
 $DCF9 DEFB $3B,$5C  ;
 $DCFB DEFB $27,$58  ;
 $DCFD DEFB $2F,$98  ;
 $DCFF DEFB $17,$98  ;
 $DD01 DEFB $17,$D8  ;
 $DD03 DEFB $0B,$F8  ;
 $DD05 DEFB $1B,$F8  ;
 $DD07 DEFB $05,$E0  ;
 $DD09 DEFB $02,$F0  ;
 $DD0B DEFB $02,$F0  ;
 $DD0D DEFB $01,$70  ;
 $DD0F DEFB $00,$B0  ;
 $DD11 DEFB $00,$50  ;
 $DD13 DEFB $00,$20  ; }
; Frame 15.
 $DD15 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DD16 DEFB $AD,$B5  ; {#JETMAN$7D(missile-launcher-0F*)
 $DD18 DEFB $AD,$B5  ;
 $DD1A DEFB $00,$00  ;
 $DD1C DEFB $8F,$FF  ;
 $DD1E DEFB $6F,$FF  ;
 $DD20 DEFB $67,$FE  ;
 $DD22 DEFB $67,$FE  ;
 $DD24 DEFB $00,$1C  ;
 $DD26 DEFB $0C,$1C  ;
 $DD28 DEFB $1A,$1C  ;
 $DD2A DEFB $36,$1C  ;
 $DD2C DEFB $2F,$1C  ;
 $DD2E DEFB $1F,$9C  ;
 $DD30 DEFB $17,$D8  ;
 $DD32 DEFB $0F,$D8  ;
 $DD34 DEFB $0B,$B8  ;
 $DD36 DEFB $0D,$B8  ;
 $DD38 DEFB $1A,$B8  ;
 $DD3A DEFB $36,$B8  ;
 $DD3C DEFB $2F,$30  ;
 $DD3E DEFB $1F,$B4  ;
 $DD40 DEFB $17,$B4  ;
 $DD42 DEFB $0B,$B4  ;
 $DD44 DEFB $0B,$BC  ;
 $DD46 DEFB $05,$B0  ;
 $DD48 DEFB $02,$C8  ;
 $DD4A DEFB $01,$78  ;
 $DD4C DEFB $01,$78  ;
 $DD4E DEFB $00,$BC  ;
 $DD50 DEFB $00,$4C  ;
 $DD52 DEFB $00,$34  ;
 $DD54 DEFB $00,$0C  ; }
; Frame 16.
 $DD56 DEFB $20      ; Height = #N(#PEEK(#PC)) pixels.
 $DD57 DEFB $AD,$B5  ; {#JETMAN$7E(missile-launcher-10*)
 $DD59 DEFB $AD,$B5  ;
 $DD5B DEFB $00,$00  ;
 $DD5D DEFB $8F,$FF  ;
 $DD5F DEFB $6F,$FF  ;
 $DD61 DEFB $67,$FE  ;
 $DD63 DEFB $67,$FE  ;
 $DD65 DEFB $00,$3C  ;
 $DD67 DEFB $18,$3C  ;
 $DD69 DEFB $2C,$3C  ;
 $DD6B DEFB $5E,$3C  ;
 $DD6D DEFB $5E,$3C  ;
 $DD6F DEFB $2F,$78  ;
 $DD71 DEFB $2F,$78  ;
 $DD73 DEFB $1F,$78  ;
 $DD75 DEFB $07,$70  ;
 $DD77 DEFB $1B,$70  ;
 $DD79 DEFB $2D,$70  ;
 $DD7B DEFB $5E,$F4  ;
 $DD7D DEFB $57,$E4  ;
 $DD7F DEFB $2E,$EE  ;
 $DD81 DEFB $2E,$E6  ;
 $DD83 DEFB $16,$EA  ;
 $DD85 DEFB $0A,$C6  ;
 $DD87 DEFB $04,$B0  ;
 $DD89 DEFB $02,$38  ;
 $DD8B DEFB $01,$7C  ;
 $DD8D DEFB $00,$BC  ;
 $DD8F DEFB $00,$5E  ;
 $DD91 DEFB $00,$26  ;
 $DD93 DEFB $00,$1A  ;
 $DD95 DEFB $00,$06  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*missile-launcher-01,15;missile-launcher-02;missile-launcher-03;missile-launcher-04;missile-launcher-05;missile-launcher-06;missile-launcher-07;missile-launcher-08;missile-launcher-09;missile-launcher-0A;missile-launcher-0B;missile-launcher-0C;missile-launcher-0D;missile-launcher-0E;missile-launcher-0F;missile-launcher-10(missile-launcher)
; }
; UDGTABLE#

; UDG Graphics
;
; .
;
; .
;
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
@label=UDG_Tiles
b$DD97 DEFB %00000000 ; {#UDG(#PC)
 $DD98 DEFB %00000000 ;
 $DD99 DEFB %00000000 ;
 $DD9A DEFB %00000000 ;
 $DD9B DEFB %00000000 ;
 $DD9C DEFB %00000000 ;
 $DD9D DEFB %00000000 ;
 $DD9E DEFB %00000000 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DD9F DEFB %10000000 ; {#UDG(#PC)
 $DDA0 DEFB %11000000 ;
 $DDA1 DEFB %11100000 ;
 $DDA2 DEFB %11110000 ;
 $DDA3 DEFB %11111000 ;
 $DDA4 DEFB %11111100 ;
 $DDA5 DEFB %11111111 ;
 $DDA6 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDA7 DEFB %00000011 ; {#UDG(#PC)
 $DDA8 DEFB %00000011 ;
 $DDA9 DEFB %00000011 ;
 $DDAA DEFB %00000011 ;
 $DDAB DEFB %11111111 ;
 $DDAC DEFB %11111111 ;
 $DDAD DEFB %11111111 ;
 $DDAE DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDAF DEFB %11000000 ; {#UDG(#PC)
 $DDB0 DEFB %11000000 ;
 $DDB1 DEFB %11000000 ;
 $DDB2 DEFB %11000000 ;
 $DDB3 DEFB %11111111 ;
 $DDB4 DEFB %11111111 ;
 $DDB5 DEFB %11111111 ;
 $DDB6 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDB7 DEFB %00000001 ; {#UDG(#PC)
 $DDB8 DEFB %00000011 ;
 $DDB9 DEFB %00000111 ;
 $DDBA DEFB %00001111 ;
 $DDBB DEFB %00011111 ;
 $DDBC DEFB %00111111 ;
 $DDBD DEFB %11111111 ;
 $DDBE DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDBF DEFB %11111111 ; {#UDG(#PC)
 $DDC0 DEFB %11111111 ;
 $DDC1 DEFB %11111100 ;
 $DDC2 DEFB %11111000 ;
 $DDC3 DEFB %11110000 ;
 $DDC4 DEFB %11100000 ;
 $DDC5 DEFB %11000000 ;
 $DDC6 DEFB %10000000 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDC7 DEFB %11111111 ; {#UDG(#PC)
 $DDC8 DEFB %11111111 ;
 $DDC9 DEFB %11111111 ;
 $DDCA DEFB %11111111 ;
 $DDCB DEFB %00000011 ;
 $DDCC DEFB %00000011 ;
 $DDCD DEFB %00000011 ;
 $DDCE DEFB %00000011 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDCF DEFB %11111111 ; {#UDG(#PC)
 $DDD0 DEFB %11111111 ;
 $DDD1 DEFB %11111111 ;
 $DDD2 DEFB %11111111 ;
 $DDD3 DEFB %11000000 ;
 $DDD4 DEFB %11000000 ;
 $DDD5 DEFB %11000000 ;
 $DDD6 DEFB %11000000 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDD7 DEFB %11111111 ; {#UDG(#PC)
 $DDD8 DEFB %11111111 ;
 $DDD9 DEFB %00111111 ;
 $DDDA DEFB %00011111 ;
 $DDDB DEFB %00001111 ;
 $DDDC DEFB %00000111 ;
 $DDDD DEFB %00000011 ;
 $DDDE DEFB %00000001 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDDF DEFB %11111111 ; {#UDG(#PC)
 $DDE0 DEFB %11111111 ;
 $DDE1 DEFB %10000010 ;
 $DDE2 DEFB %11001110 ;
 $DDE3 DEFB %11001110 ;
 $DDE4 DEFB %11001110 ;
 $DDE5 DEFB %11001110 ;
 $DDE6 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDE7 DEFB %11111111 ; {#UDG(#PC)
 $DDE8 DEFB %11111111 ;
 $DDE9 DEFB %00011001 ;
 $DDEA DEFB %01101001 ;
 $DDEB DEFB %00011001 ;
 $DDEC DEFB %01101001 ;
 $DDED DEFB %01101100 ;
 $DDEE DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDEF DEFB %11111111 ; {#UDG(#PC)
 $DDF0 DEFB %11111111 ;
 $DDF1 DEFB %10110001 ;
 $DDF2 DEFB %10100110 ;
 $DDF3 DEFB %10100111 ;
 $DDF4 DEFB %10100110 ;
 $DDF5 DEFB %01110001 ;
 $DDF6 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDF7 DEFB %11111111 ; {#UDG(#PC)
 $DDF8 DEFB %11111111 ;
 $DDF9 DEFB %10011011 ;
 $DDFA DEFB %10010111 ;
 $DDFB DEFB %10001111 ;
 $DDFC DEFB %10010111 ;
 $DDFD DEFB %10011011 ;
 $DDFE DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DDFF DEFB %11111111 ; {#UDG(#PC)
 $DE00 DEFB %11111111 ;
 $DE01 DEFB %11111000 ;
 $DE02 DEFB %11111001 ;
 $DE03 DEFB %11111000 ;
 $DE04 DEFB %11111001 ;
 $DE05 DEFB %11111000 ;
 $DE06 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE07 DEFB %11111111 ; {#UDG(#PC)
 $DE08 DEFB %11111111 ;
 $DE09 DEFB %01110001 ;
 $DE0A DEFB %10100110 ;
 $DE0B DEFB %01100000 ;
 $DE0C DEFB %10100110 ;
 $DE0D DEFB %01100110 ;
 $DE0E DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE0F DEFB %11111111 ; {#UDG(#PC)
 $DE10 DEFB %11111111 ;
 $DE11 DEFB %11000010 ;
 $DE12 DEFB %10011110 ;
 $DE13 DEFB %10000010 ;
 $DE14 DEFB %11110010 ;
 $DE15 DEFB %10000110 ;
 $DE16 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE17 DEFB %11111111 ; {#UDG(#PC)
 $DE18 DEFB %11111111 ;
 $DE19 DEFB %00011111 ;
 $DE1A DEFB %01111111 ;
 $DE1B DEFB %00111111 ;
 $DE1C DEFB %01111111 ;
 $DE1D DEFB %00011111 ;
 $DE1E DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE1F DEFB %00000000 ; {#UDG(#PC)
 $DE20 DEFB %00000000 ;
 $DE21 DEFB %00010001 ;
 $DE22 DEFB %00010001 ;
 $DE23 DEFB %00010001 ;
 $DE24 DEFB %00010001 ;
 $DE25 DEFB %00000000 ;
 $DE26 DEFB %00000000 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE27 DEFB %00000000 ; {#UDG(#PC)
 $DE28 DEFB %00010000 ;
 $DE29 DEFB %00010001 ;
 $DE2A DEFB %00010001 ;
 $DE2B DEFB %00010001 ;
 $DE2C DEFB %00010001 ;
 $DE2D DEFB %00010000 ;
 $DE2E DEFB %00000000 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE2F DEFB %11111111 ; {#UDG(#PC)
 $DE30 DEFB %11000010 ;
 $DE31 DEFB %11001110 ;
 $DE32 DEFB %11000110 ;
 $DE33 DEFB %11001110 ;
 $DE34 DEFB %11001111 ;
 $DE35 DEFB %11111111 ;
 $DE36 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE37 DEFB %11111111 ; {#UDG(#PC)
 $DE38 DEFB %01101000 ;
 $DE39 DEFB %01101001 ;
 $DE3A DEFB %01101000 ;
 $DE3B DEFB %01101001 ;
 $DE3C DEFB %00011000 ;
 $DE3D DEFB %11111111 ;
 $DE3E DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE3F DEFB %11111111 ; {#UDG(#PC)
 $DE40 DEFB %01001111 ;
 $DE41 DEFB %11001111 ;
 $DE42 DEFB %11001111 ;
 $DE43 DEFB %11001111 ;
 $DE44 DEFB %01000011 ;
 $DE45 DEFB %11111111 ;
 $DE46 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE47 DEFB %11111111 ; {#UDG(#PC)
 $DE48 DEFB %11111111 ;
 $DE49 DEFB %11000001 ;
 $DE4A DEFB %11100111 ;
 $DE4B DEFB %11100111 ;
 $DE4C DEFB %11100111 ;
 $DE4D DEFB %11100111 ;
 $DE4E DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE4F DEFB %11111111 ; {#UDG(#PC)
 $DE50 DEFB %11111111 ;
 $DE51 DEFB %00100000 ;
 $DE52 DEFB %00100101 ;
 $DE53 DEFB %00100101 ;
 $DE54 DEFB %00100111 ;
 $DE55 DEFB %00100111 ;
 $DE56 DEFB %11111111 ; }
; Tile ID: "#N(#EVAL((#PC - $DD97) / $08))".
 $DE57 DEFB %11111111 ; {#UDG(#PC)
 $DE58 DEFB %11111111 ;
 $DE59 DEFB %01000011 ;
 $DE5A DEFB %01001111 ;
 $DE5B DEFB %01000111 ;
 $DE5C DEFB %01001111 ;
 $DE5D DEFB %01000011 ;
 $DE5E DEFB %11111111 ; }

; HUD Panel Layout
@label=HUDPanelLayoutData
b$DE5F DEFB $09,$0A,$0B,$0C,$13,$14,$15,$00 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DE67 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #PEEK(#PC + n) * $08)||
 $DE6F DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $DE77 DEFB $00,$00,$0D,$0E,$0F,$10         ; }
 $DE7D DEFB $05,$06,$07,$08,$11,$12,$11,$12 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DE85 DEFB $11,$12,$11,$12,$11,$12,$11,$12 ; #PEEK(#PC + n) * $08)||
 $DE8D DEFB $11,$12,$11,$12,$11,$12,$11,$12 ;
 $DE95 DEFB $11,$12,$05,$06,$07,$08         ; }
 $DE9B DEFB $01,$02,$03,$04,$16,$17,$18,$00 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DEA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #PEEK(#PC + n) * $08)||
 $DEAB DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $DEB3 DEFB $00,$00,$01,$02,$03,$04         ; }

; HUD Panel Attributes
@label=HUDPanelAttributes
b$DEB9 DEFB $45,$45,$45,$45,$44,$44,$44,$42 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DEC1 DEFB $42,$42,$42,$42,$42,$46,$46,$46 ; #PEEK(n + #PC - $5A) *
 $DEC9 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; $08,attr=#PEEK(#PC + n))||
 $DED1 DEFB $46,$46,$45,$45,$45,$45         ; }
 $DED7 DEFB $42,$42,$42,$42,$47,$47,$47,$47 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DEDF DEFB $47,$47,$47,$47,$47,$47,$47,$47 ; #PEEK(n + #PC - $5A) *
 $DEE7 DEFB $47,$47,$47,$47,$47,$47,$47,$47 ; $08,attr=#PEEK(#PC + n))||
 $DEEF DEFB $47,$47,$42,$42,$42,$42         ; }
 $DEF5 DEFB $42,$42,$42,$42,$44,$44,$44,$42 ; {#FOR($00,$1D)||n|#UDG($DD97 +
 $DEFD DEFB $42,$42,$43,$43,$43,$46,$46,$46 ; #PEEK(n + #PC - $5A) *
 $DF05 DEFB $46,$46,$46,$46,$46,$46,$46,$46 ; $08,attr=#PEEK(#PC + n))||
 $DF0D DEFB $46,$46,$42,$42,$42,$42         ; }

; Graphic: Alien Base
;
; .
;
; .
;
; Frame 1.
b$DF13 DEFB $04                 ; Width = #N(#PEEK(#PC)) bytes.
 $DF14 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $DF15 DEFB $F8,$3F,$FD,$55     ; {#GRAPHIC$67(base-01)
 $DF19 DEFB $F8,$3F,$F8,$6A     ;
 $DF1D DEFB $F8,$3F,$F3,$B5     ;
 $DF21 DEFB $F8,$3F,$F6,$2A     ;
 $DF25 DEFB $F8,$3F,$F6,$35     ;
 $DF29 DEFB $F8,$3F,$F3,$AA     ;
 $DF2D DEFB $F8,$3F,$F8,$D5     ;
 $DF31 DEFB $00,$00,$00,$00     ;
 $DF35 DEFB $FC,$1F,$FE,$D5     ;
 $DF39 DEFB $7E,$1F,$F1,$AA     ;
 $DF3D DEFB $3E,$0F,$EE,$54     ;
 $DF41 DEFB $1F,$0F,$DA,$A8     ;
 $DF45 DEFB $0F,$87,$D9,$50     ;
 $DF49 DEFB $07,$87,$EE,$A0     ;
 $DF4D DEFB $03,$C3,$F1,$40     ;
 $DF51 DEFB $01,$E3,$FA,$80     ; }
; Frame 2.
 $DF55 DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $DF56 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $DF57 DEFB $7C,$1F,$FE,$AA,$80 ; {#GRAPHIC$68(base-02)
 $DF5C DEFB $7C,$1F,$FC,$35,$00 ;
 $DF61 DEFB $7C,$1F,$F9,$DA,$80 ;
 $DF66 DEFB $7C,$1F,$FB,$15,$00 ;
 $DF6B DEFB $7C,$1F,$FB,$1A,$80 ;
 $DF70 DEFB $7C,$1F,$F9,$D5,$00 ;
 $DF75 DEFB $7C,$1F,$FC,$6A,$80 ;
 $DF7A DEFB $00,$00,$00,$00,$00 ;
 $DF7F DEFB $7E,$0F,$FF,$6A,$80 ;
 $DF84 DEFB $3F,$0F,$F8,$D5,$00 ;
 $DF89 DEFB $1F,$07,$F7,$2A,$00 ;
 $DF8E DEFB $0F,$87,$ED,$54,$00 ;
 $DF93 DEFB $07,$C3,$EC,$A8,$00 ;
 $DF98 DEFB $03,$C3,$F7,$50,$00 ;
 $DF9D DEFB $01,$E1,$F8,$A0,$00 ;
 $DFA2 DEFB $00,$F1,$FD,$40,$00 ; }
; Frame 3.
 $DFA7 DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $DFA8 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $DFA9 DEFB $3E,$0F,$FF,$55,$40 ; {#GRAPHIC$69(base-03)
 $DFAE DEFB $3E,$0F,$FE,$1A,$80 ;
 $DFB3 DEFB $3E,$0F,$FC,$ED,$40 ;
 $DFB8 DEFB $3E,$0F,$FD,$8A,$80 ;
 $DFBD DEFB $3E,$0F,$FD,$8D,$40 ;
 $DFC2 DEFB $3E,$0F,$FC,$EA,$80 ;
 $DFC7 DEFB $3E,$0F,$FE,$35,$40 ;
 $DFCC DEFB $00,$00,$00,$00,$00 ;
 $DFD1 DEFB $3F,$07,$FF,$B5,$40 ;
 $DFD6 DEFB $1F,$87,$FC,$6A,$80 ;
 $DFDB DEFB $0F,$83,$FB,$95,$00 ;
 $DFE0 DEFB $07,$C3,$F6,$AA,$00 ;
 $DFE5 DEFB $03,$E1,$F6,$54,$00 ;
 $DFEA DEFB $01,$E1,$FB,$A8,$00 ;
 $DFEF DEFB $00,$F0,$FC,$50,$00 ;
 $DFF4 DEFB $00,$78,$FE,$A0,$00 ; }
; Frame 4.
 $DFF9 DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $DFFA DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $DFFB DEFB $1F,$07,$FF,$AA,$A0 ; {#GRAPHIC$6A(base-04)
 $E000 DEFB $1F,$07,$FF,$0D,$40 ;
 $E005 DEFB $1F,$07,$FE,$76,$A0 ;
 $E00A DEFB $1F,$07,$FE,$C5,$40 ;
 $E00F DEFB $1F,$07,$FE,$C6,$A0 ;
 $E014 DEFB $1F,$07,$FE,$75,$40 ;
 $E019 DEFB $1F,$07,$FF,$1A,$A0 ;
 $E01E DEFB $00,$00,$00,$00,$00 ;
 $E023 DEFB $1F,$83,$FF,$DA,$A0 ;
 $E028 DEFB $0F,$C3,$FE,$35,$40 ;
 $E02D DEFB $07,$C1,$FD,$CA,$80 ;
 $E032 DEFB $03,$E1,$FB,$55,$00 ;
 $E037 DEFB $01,$F0,$FB,$2A,$00 ;
 $E03C DEFB $00,$F0,$FD,$D4,$00 ;
 $E041 DEFB $00,$78,$7E,$28,$00 ;
 $E046 DEFB $00,$3C,$7F,$50,$00 ; }
; Frame 5.
 $E04B DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $E04C DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $E04D DEFB $0F,$83,$FF,$D5,$50 ; {#GRAPHIC$6B(base-05)
 $E052 DEFB $0F,$83,$FF,$86,$A0 ;
 $E057 DEFB $0F,$83,$FF,$3B,$50 ;
 $E05C DEFB $0F,$83,$FF,$62,$A0 ;
 $E061 DEFB $0F,$83,$FF,$63,$50 ;
 $E066 DEFB $0F,$83,$FF,$3A,$A0 ;
 $E06B DEFB $0F,$83,$FF,$8D,$50 ;
 $E070 DEFB $00,$00,$00,$00,$00 ;
 $E075 DEFB $0F,$C1,$FF,$ED,$50 ;
 $E07A DEFB $07,$E1,$FF,$1A,$A0 ;
 $E07F DEFB $03,$E0,$FE,$E5,$40 ;
 $E084 DEFB $01,$F0,$FD,$AA,$80 ;
 $E089 DEFB $00,$F8,$7D,$95,$00 ;
 $E08E DEFB $00,$78,$7E,$EA,$00 ;
 $E093 DEFB $00,$3C,$3F,$14,$00 ;
 $E098 DEFB $00,$1E,$3F,$A8,$00 ; }
; Frame 6.
 $E09D DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $E09E DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $E09F DEFB $07,$C1,$FF,$EA,$A8 ; {#GRAPHIC$6C(base-06)
 $E0A4 DEFB $07,$C1,$FF,$C3,$50 ;
 $E0A9 DEFB $07,$C1,$FF,$9D,$A8 ;
 $E0AE DEFB $07,$C1,$FF,$B1,$50 ;
 $E0B3 DEFB $07,$C1,$FF,$B1,$A8 ;
 $E0B8 DEFB $07,$C1,$FF,$9D,$50 ;
 $E0BD DEFB $07,$C1,$FF,$C6,$A8 ;
 $E0C2 DEFB $00,$00,$00,$00,$00 ;
 $E0C7 DEFB $07,$E0,$FF,$F6,$A8 ;
 $E0CC DEFB $03,$F0,$FF,$8D,$50 ;
 $E0D1 DEFB $01,$F0,$7F,$72,$A0 ;
 $E0D6 DEFB $00,$F8,$7E,$D5,$40 ;
 $E0DB DEFB $00,$7C,$3E,$CA,$80 ;
 $E0E0 DEFB $00,$3C,$3F,$75,$00 ;
 $E0E5 DEFB $00,$1E,$1F,$8A,$00 ;
 $E0EA DEFB $00,$0F,$1F,$D4,$00 ; }
; Frame 7.
 $E0EF DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $E0F0 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $E0F1 DEFB $03,$E0,$FF,$F5,$54 ; {#GRAPHIC$6D(base-07)
 $E0F6 DEFB $03,$E0,$FF,$E1,$A8 ;
 $E0FB DEFB $03,$E0,$FF,$CE,$D4 ;
 $E100 DEFB $03,$E0,$FF,$D8,$A8 ;
 $E105 DEFB $03,$E0,$FF,$D8,$D4 ;
 $E10A DEFB $03,$E0,$FF,$CE,$A8 ;
 $E10F DEFB $03,$E0,$FF,$E3,$54 ;
 $E114 DEFB $00,$00,$00,$00,$00 ;
 $E119 DEFB $03,$F0,$7F,$FB,$54 ;
 $E11E DEFB $01,$F8,$7F,$C6,$A8 ;
 $E123 DEFB $00,$F8,$3F,$B9,$50 ;
 $E128 DEFB $00,$7C,$3F,$6A,$A0 ;
 $E12D DEFB $00,$3E,$1F,$65,$40 ;
 $E132 DEFB $00,$1E,$1F,$BA,$80 ;
 $E137 DEFB $00,$0F,$0F,$C5,$00 ;
 $E13C DEFB $00,$07,$8F,$EA,$00 ; }
; Frame 8.
 $E141 DEFB $05                 ; Width = #N(#PEEK(#PC)) bytes.
 $E142 DEFB $10                 ; Height = #N(#PEEK(#PC)) pixels.
 $E143 DEFB $01,$F0,$7F,$FA,$AA ; {#GRAPHIC$6E(base-08)
 $E148 DEFB $01,$F0,$7F,$F0,$D4 ;
 $E14D DEFB $01,$F0,$7F,$E7,$6A ;
 $E152 DEFB $01,$F0,$7F,$EC,$54 ;
 $E157 DEFB $01,$F0,$7F,$EC,$6A ;
 $E15C DEFB $01,$F0,$7F,$E7,$54 ;
 $E161 DEFB $01,$F0,$7F,$F1,$AA ;
 $E166 DEFB $00,$00,$00,$00,$00 ;
 $E16B DEFB $01,$F8,$3F,$FD,$AA ;
 $E170 DEFB $00,$FC,$3F,$E3,$54 ;
 $E175 DEFB $00,$7C,$1F,$DC,$A8 ;
 $E17A DEFB $00,$3E,$1F,$B5,$50 ;
 $E17F DEFB $00,$1F,$0F,$B2,$A0 ;
 $E184 DEFB $00,$0F,$0F,$DD,$40 ;
 $E189 DEFB $00,$07,$87,$E2,$80 ;
 $E18E DEFB $00,$03,$C7,$F5,$00 ; }

; Sprite: Missile
;
; .
;
; .
;
; Frame Up-Left.
b$E193 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E194 DEFB $00,$08  ; {#JETMAN$7F(missile-up-left)
 $E196 DEFB $00,$14  ;
 $E198 DEFB $00,$2E  ;
 $E19A DEFB $00,$5F  ;
 $E19C DEFB $00,$BE  ;
 $E19E DEFB $01,$7C  ;
 $E1A0 DEFB $03,$F8  ;
 $E1A2 DEFB $05,$F0  ;
 $E1A4 DEFB $0B,$E0  ;
 $E1A6 DEFB $17,$C0  ;
 $E1A8 DEFB $3F,$80  ;
 $E1AA DEFB $5F,$00  ;
 $E1AC DEFB $5E,$00  ;
 $E1AE DEFB $BC,$00  ;
 $E1B0 DEFB $B8,$00  ;
 $E1B2 DEFB $E0,$00  ; }
; Frame Up-Right.
 $E1B4 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E1B5 DEFB $10,$00  ; {#JETMAN$83(missile-up-right)
 $E1B7 DEFB $38,$00  ;
 $E1B9 DEFB $7C,$00  ;
 $E1BB DEFB $BE,$00  ;
 $E1BD DEFB $5F,$00  ;
 $E1BF DEFB $4F,$80  ;
 $E1C1 DEFB $17,$C0  ;
 $E1C3 DEFB $0B,$E0  ;
 $E1C5 DEFB $05,$F0  ;
 $E1C7 DEFB $02,$F8  ;
 $E1C9 DEFB $01,$7C  ;
 $E1CB DEFB $00,$BE  ;
 $E1CD DEFB $00,$5E  ;
 $E1CF DEFB $00,$27  ;
 $E1D1 DEFB $00,$19  ;
 $E1D3 DEFB $00,$07  ; }

; Data block at E1D5
;
; .
;
; .
;
b$E1D5 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E1D6 DEFB $AD,$B5  ; {#JETMAN$9A(9a)
 $E1D8 DEFB $AD,$B5  ;
 $E1DA DEFB $00,$00  ;
 $E1DC DEFB $9F,$FF  ;
 $E1DE DEFB $CF,$FF  ;
 $E1E0 DEFB $67,$FE  ;
 $E1E2 DEFB $67,$FE  ;
 $E1E4 DEFB $3C,$00  ;
 $E1E6 DEFB $3C,$00  ;
 $E1E8 DEFB $3E,$00  ;
 $E1EA DEFB $1E,$00  ;
 $E1EC DEFB $1E,$00  ;
 $E1EE DEFB $1E,$00  ;
 $E1F0 DEFB $0F,$00  ;
 $E1F2 DEFB $0F,$00  ;
 $E1F4 DEFB $0F,$00  ;
 $E1F6 DEFB $07,$00  ;
 $E1F8 DEFB $07,$80  ;
 $E1FA DEFB $07,$80  ;
 $E1FC DEFB $03,$80  ;
 $E1FE DEFB $03,$80  ;
 $E200 DEFB $03,$C0  ;
 $E202 DEFB $01,$C0  ;
 $E204 DEFB $01,$C0  ;
 $E206 DEFB $01,$80  ; }
 $E208 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E209 DEFB $AD,$B5
 $E20B DEFB $AD,$B5
 $E20D DEFB $00,$00
 $E20F DEFB $9F,$FF
 $E211 DEFB $CF,$FF
 $E213 DEFB $67,$FE
 $E215 DEFB $67,$FE
 $E217 DEFB $00,$3C
 $E219 DEFB $00,$3C
 $E21B DEFB $00,$7C
 $E21D DEFB $00,$78
 $E21F DEFB $00,$78
 $E221 DEFB $00,$78
 $E223 DEFB $00,$F0
 $E225 DEFB $00,$F0
 $E227 DEFB $00,$F0
 $E229 DEFB $00,$E0
 $E22B DEFB $01,$E0
 $E22D DEFB $01,$E0
 $E22F DEFB $01,$C0
 $E231 DEFB $01,$C0
 $E233 DEFB $03,$C0
 $E235 DEFB $03,$80
 $E237 DEFB $03,$80
 $E239 DEFB $01,$80

; Sprite: Missile Flame
;
; .
;
; .
;
; Frame 1.
b$E23B DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $E23C DEFB $00,$28  ; {#JETMAN$81(missile-flame-01*)
 $E23E DEFB $04,$10  ;
 $E240 DEFB $01,$80  ;
 $E242 DEFB $28,$08  ;
 $E244 DEFB $02,$20  ;
 $E246 DEFB $48,$90  ;
 $E248 DEFB $2A,$00  ;
 $E24A DEFB $94,$50  ;
 $E24C DEFB $2A,$80  ;
 $E24E DEFB $93,$00  ;
 $E250 DEFB $28,$40  ;
 $E252 DEFB $24,$00  ;
 $E254 DEFB $18,$00  ; }
; Frame 2.
 $E256 DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $E257 DEFB $00,$08  ; {#JETMAN$82(missile-flame-02*)
 $E259 DEFB $00,$10  ;
 $E25B DEFB $00,$80  ;
 $E25D DEFB $02,$40  ;
 $E25F DEFB $08,$00  ;
 $E261 DEFB $22,$40  ;
 $E263 DEFB $48,$00  ;
 $E265 DEFB $12,$80  ;
 $E267 DEFB $08,$00  ;
 $E269 DEFB $55,$00  ;
 $E26B DEFB $00,$00  ;
 $E26D DEFB $08,$00  ;
 $E26F DEFB $00,$00  ; }
; Frame 3.
 $E271 DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $E272 DEFB $14,$00  ; {#JETMAN$85(missile-flame-03*)
 $E274 DEFB $08,$20  ;
 $E276 DEFB $10,$80  ;
 $E278 DEFB $01,$12  ;
 $E27A DEFB $04,$40  ;
 $E27C DEFB $09,$12  ;
 $E27E DEFB $00,$54  ;
 $E280 DEFB $0A,$29  ;
 $E282 DEFB $01,$54  ;
 $E284 DEFB $00,$C9  ;
 $E286 DEFB $02,$14  ;
 $E288 DEFB $00,$24  ;
 $E28A DEFB $00,$18  ; }
; Frame 4.
 $E28C DEFB $0D      ; Height = #N(#PEEK(#PC)) pixels.
 $E28D DEFB $10,$00  ; {#JETMAN$86(missile-flame-04*)
 $E28F DEFB $08,$00  ;
 $E291 DEFB $01,$00  ;
 $E293 DEFB $02,$40  ;
 $E295 DEFB $00,$10  ;
 $E297 DEFB $02,$44  ;
 $E299 DEFB $00,$12  ;
 $E29B DEFB $01,$48  ;
 $E29D DEFB $00,$10  ;
 $E29F DEFB $00,$AA  ;
 $E2A1 DEFB $00,$00  ;
 $E2A3 DEFB $00,$10  ;
 $E2A5 DEFB $00,$00  ; }

; Sprite: The Block
;
; .
;
; .
;
; Frame 1.
b$E2A7 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E2A8 DEFB $03,$C0  ; {#JETMAN$87(block-01)
 $E2AA DEFB $03,$C0  ;
 $E2AC DEFB $03,$C0  ;
 $E2AE DEFB $03,$C0  ;
 $E2B0 DEFB $03,$C0  ;
 $E2B2 DEFB $03,$C0  ;
 $E2B4 DEFB $03,$C0  ;
 $E2B6 DEFB $03,$C0  ;
 $E2B8 DEFB $03,$C0  ;
 $E2BA DEFB $03,$C0  ;
 $E2BC DEFB $03,$C0  ;
 $E2BE DEFB $03,$C0  ;
 $E2C0 DEFB $03,$C0  ;
 $E2C2 DEFB $03,$C0  ;
 $E2C4 DEFB $03,$C0  ;
 $E2C6 DEFB $03,$C0  ; }
; Frame 2.
 $E2C8 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E2C9 DEFB $06,$00  ; {#JETMAN$88(block-02)
 $E2CB DEFB $0E,$80  ;
 $E2CD DEFB $0E,$80  ;
 $E2CF DEFB $0E,$C0  ;
 $E2D1 DEFB $0E,$C0  ;
 $E2D3 DEFB $0E,$E0  ;
 $E2D5 DEFB $0E,$E0  ;
 $E2D7 DEFB $0E,$E0  ;
 $E2D9 DEFB $0E,$E0  ;
 $E2DB DEFB $0E,$E0  ;
 $E2DD DEFB $0E,$E0  ;
 $E2DF DEFB $0E,$C0  ;
 $E2E1 DEFB $0E,$C0  ;
 $E2E3 DEFB $0E,$80  ;
 $E2E5 DEFB $0E,$80  ;
 $E2E7 DEFB $06,$00  ; }
; Frame 3.
 $E2E9 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $E2EA DEFB $16,$00  ; {#JETMAN$89(block-03)
 $E2EC DEFB $37,$80  ;
 $E2EE DEFB $37,$E0  ;
 $E2F0 DEFB $37,$F8  ;
 $E2F2 DEFB $37,$F8  ;
 $E2F4 DEFB $37,$F8  ;
 $E2F6 DEFB $37,$F8  ;
 $E2F8 DEFB $37,$F8  ;
 $E2FA DEFB $37,$F8  ;
 $E2FC DEFB $37,$F8  ;
 $E2FE DEFB $37,$F8  ;
 $E300 DEFB $37,$E0  ;
 $E302 DEFB $37,$80  ;
 $E304 DEFB $16,$00  ; }
; Frame 4.
 $E306 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E307 DEFB $5F,$80  ; {#JETMAN$8A(block-04)
 $E309 DEFB $5F,$FE  ;
 $E30B DEFB $5F,$FE  ;
 $E30D DEFB $5F,$FE  ;
 $E30F DEFB $5F,$FE  ;
 $E311 DEFB $5F,$FE  ;
 $E313 DEFB $5F,$FE  ;
 $E315 DEFB $5F,$FE  ;
 $E317 DEFB $5F,$FE  ;
 $E319 DEFB $5F,$FE  ;
 $E31B DEFB $5F,$FE  ;
 $E31D DEFB $5F,$80  ; }
; Frame 5.
 $E31F DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E320 DEFB $FF,$FF  ; {#JETMAN$8B(block-05)
 $E322 DEFB $FF,$FF  ;
 $E324 DEFB $FF,$FF  ;
 $E326 DEFB $FF,$FF  ;
 $E328 DEFB $FF,$FF  ;
 $E32A DEFB $FF,$FF  ;
 $E32C DEFB $FF,$FF  ;
 $E32E DEFB $FF,$FF  ;
 $E330 DEFB $FF,$FF  ;
 $E332 DEFB $FF,$FF  ;
 $E334 DEFB $FF,$FF  ;
 $E336 DEFB $FF,$FF  ; }
; Frame 6.
 $E338 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E339 DEFB $01,$FA  ; {#JETMAN$8C(block-06)
 $E33B DEFB $7F,$FA  ;
 $E33D DEFB $7F,$FA  ;
 $E33F DEFB $7F,$FA  ;
 $E341 DEFB $7F,$FA  ;
 $E343 DEFB $7F,$FA  ;
 $E345 DEFB $7F,$FA  ;
 $E347 DEFB $7F,$FA  ;
 $E349 DEFB $7F,$FA  ;
 $E34B DEFB $7F,$FA  ;
 $E34D DEFB $7F,$FA  ;
 $E34F DEFB $01,$FA  ; }
; Frame 7.
 $E351 DEFB $0E      ; Height = #N(#PEEK(#PC)) pixels.
 $E352 DEFB $00,$68  ; {#JETMAN$8D(block-07)
 $E354 DEFB $01,$EC  ;
 $E356 DEFB $07,$EC  ;
 $E358 DEFB $1F,$FC  ;
 $E35A DEFB $1F,$EC  ;
 $E35C DEFB $1F,$EC  ;
 $E35E DEFB $1F,$EC  ;
 $E360 DEFB $1F,$EC  ;
 $E362 DEFB $1F,$EC  ;
 $E364 DEFB $1F,$EC  ;
 $E366 DEFB $1F,$EC  ;
 $E368 DEFB $07,$EC  ;
 $E36A DEFB $01,$EC  ;
 $E36C DEFB $00,$68  ; }
; Frame 8.
 $E36E DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E36F DEFB $00,$60  ; {#JETMAN$8E(block-08)
 $E371 DEFB $01,$70  ;
 $E373 DEFB $01,$70  ;
 $E375 DEFB $03,$70  ;
 $E377 DEFB $03,$70  ;
 $E379 DEFB $07,$70  ;
 $E37B DEFB $07,$70  ;
 $E37D DEFB $07,$70  ;
 $E37F DEFB $07,$70  ;
 $E381 DEFB $07,$70  ;
 $E383 DEFB $07,$70  ;
 $E385 DEFB $03,$70  ;
 $E387 DEFB $03,$70  ;
 $E389 DEFB $01,$70  ;
 $E38B DEFB $01,$70  ;
 $E38D DEFB $00,$60  ; }

; Sprite: Missile
;
; .
;
; .
;
; Left frame.
b$E38F DEFB $09      ; Height = #N(#PEEK(#PC)) pixels.
 $E390 DEFB $00,$03  ; {#JETMAN$9F(missile-left)
 $E392 DEFB $00,$0E  ;
 $E394 DEFB $1F,$FF  ;
 $E396 DEFB $7F,$FF  ;
 $E398 DEFB $BF,$FF  ;
 $E39A DEFB $40,$00  ;
 $E39C DEFB $1F,$FF  ;
 $E39E DEFB $00,$0E  ;
 $E3A0 DEFB $00,$03  ; }
; Right frame.
 $E3A2 DEFB $09      ; Height = #N(#PEEK(#PC)) pixels.
 $E3A3 DEFB $C0,$00  ; {#JETMAN$A3(missile-right)
 $E3A5 DEFB $70,$00  ;
 $E3A7 DEFB $FF,$F8  ;
 $E3A9 DEFB $FF,$FE  ;
 $E3AB DEFB $FF,$FF  ;
 $E3AD DEFB $00,$02  ;
 $E3AF DEFB $FF,$F8  ;
 $E3B1 DEFB $70,$00  ;
 $E3B3 DEFB $C0,$00  ; }

; Sprite: Missile Flame
;
; .
;
; .
;
; Left frame 1.
b$E3B5 DEFB $0A      ; Height = #N(#PEEK(#PC)) pixels.
 $E3B6 DEFB $04,$00  ; {#JETMAN$A1(missile-flame-left-01)
 $E3B8 DEFB $11,$10  ;
 $E3BA DEFB $42,$40  ;
 $E3BC DEFB $AC,$08  ;
 $E3BE DEFB $95,$42  ;
 $E3C0 DEFB $60,$04  ;
 $E3C2 DEFB $9A,$11  ;
 $E3C4 DEFB $45,$40  ;
 $E3C6 DEFB $10,$10  ;
 $E3C8 DEFB $04,$80  ; }
; Left frame 2.
 $E3CA DEFB $08      ; Height = #N(#PEEK(#PC)) pixels.
 $E3CB DEFB $00,$00  ; {#JETMAN$A2(missile-flame-left-02)
 $E3CD DEFB $08,$00  ;
 $E3CF DEFB $92,$80  ;
 $E3D1 DEFB $68,$94  ;
 $E3D3 DEFB $92,$20  ;
 $E3D5 DEFB $A8,$8A  ;
 $E3D7 DEFB $42,$48  ;
 $E3D9 DEFB $11,$00  ; }
; Right frame 1.
 $E3DB DEFB $0A      ; Height = #N(#PEEK(#PC)) pixels.
 $E3DC DEFB $00,$20  ; {#JETMAN$A5(missile-flame-right-01)
 $E3DE DEFB $08,$88  ;
 $E3E0 DEFB $02,$42  ;
 $E3E2 DEFB $10,$35  ;
 $E3E4 DEFB $42,$A9  ;
 $E3E6 DEFB $20,$06  ;
 $E3E8 DEFB $88,$59  ;
 $E3EA DEFB $02,$A2  ;
 $E3EC DEFB $08,$08  ;
 $E3EE DEFB $01,$20  ; }
; Right frame 2.
 $E3F0 DEFB $08      ; Height = #N(#PEEK(#PC)) pixels.
 $E3F1 DEFB $00,$00  ; {#JETMAN$A6(missile-flame-right-02)
 $E3F3 DEFB $00,$10  ;
 $E3F5 DEFB $01,$49  ;
 $E3F7 DEFB $29,$16  ;
 $E3F9 DEFB $04,$49  ;
 $E3FB DEFB $51,$15  ;
 $E3FD DEFB $12,$42  ;
 $E3FF DEFB $00,$88  ; }

; Data block at E401
b$E401 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E402 DEFB $AD,$B5  ; {#JETMAN$97(thing97)
 $E404 DEFB $AD,$B5  ;
 $E406 DEFB $00,$00  ;
 $E408 DEFB $9F,$FF  ;
 $E40A DEFB $CF,$FF  ;
 $E40C DEFB $67,$FE  ;
 $E40E DEFB $67,$FE  ;
 $E410 DEFB $3C,$00  ;
 $E412 DEFB $3C,$00  ;
 $E414 DEFB $3E,$10  ;
 $E416 DEFB $1E,$2C  ;
 $E418 DEFB $1E,$5E  ;
 $E41A DEFB $1E,$BE  ;
 $E41C DEFB $0F,$7C  ;
 $E41E DEFB $0F,$78  ;
 $E420 DEFB $0F,$70  ;
 $E422 DEFB $07,$60  ;
 $E424 DEFB $17,$80  ;
 $E426 DEFB $27,$80  ;
 $E428 DEFB $5B,$80  ;
 $E42A DEFB $5B,$80  ;
 $E42C DEFB $BF,$C0  ;
 $E42E DEFB $B9,$C0  ;
 $E430 DEFB $E1,$C0  ;
 $E432 DEFB $01,$80  ; }
 $E434 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E435 DEFB $AD,$B5  ; {#JETMAN$98(thing98)
 $E437 DEFB $AD,$B5  ;
 $E439 DEFB $00,$00  ;
 $E43B DEFB $9F,$FF  ;
 $E43D DEFB $CF,$FF  ;
 $E43F DEFB $67,$FE  ;
 $E441 DEFB $67,$FE  ;
 $E443 DEFB $3C,$00  ;
 $E445 DEFB $3C,$00  ;
 $E447 DEFB $3E,$00  ;
 $E449 DEFB $1E,$00  ;
 $E44B DEFB $1E,$06  ;
 $E44D DEFB $1E,$1E  ;
 $E44F DEFB $0F,$7F  ;
 $E451 DEFB $0F,$79  ;
 $E453 DEFB $0F,$66  ;
 $E455 DEFB $17,$18  ;
 $E457 DEFB $37,$A0  ;
 $E459 DEFB $77,$80  ;
 $E45B DEFB $63,$80  ;
 $E45D DEFB $3B,$80  ;
 $E45F DEFB $03,$C0  ;
 $E461 DEFB $01,$C0  ;
 $E463 DEFB $01,$C0  ;
 $E465 DEFB $01,$80  ; }
 $E467 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E468 DEFB $AD,$B5  ; {#JETMAN$99(thing99)
 $E46A DEFB $AD,$B5  ;
 $E46C DEFB $00,$00  ;
 $E46E DEFB $9F,$FF  ;
 $E470 DEFB $CF,$FF  ;
 $E472 DEFB $67,$FE  ;
 $E474 DEFB $67,$FE  ;
 $E476 DEFB $3C,$00  ;
 $E478 DEFB $3C,$00  ;
 $E47A DEFB $3E,$00  ;
 $E47C DEFB $1E,$00  ;
 $E47E DEFB $1E,$00  ;
 $E480 DEFB $1E,$00  ;
 $E482 DEFB $0F,$00  ;
 $E484 DEFB $0F,$7F  ;
 $E486 DEFB $6F,$7F  ;
 $E488 DEFB $F7,$F7  ;
 $E48A DEFB $47,$81  ;
 $E48C DEFB $17,$BF  ;
 $E48E DEFB $03,$80  ;
 $E490 DEFB $03,$80  ;
 $E492 DEFB $03,$C0  ;
 $E494 DEFB $01,$C0  ;
 $E496 DEFB $01,$C0  ;
 $E498 DEFB $01,$80  ; }

; Data block at E49A
b$E49A DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E49B DEFB $AD,$B5  ; {#JETMAN$9B(thing3)
 $E49D DEFB $AD,$B5  ;
 $E49F DEFB $00,$00  ;
 $E4A1 DEFB $FF,$F9  ;
 $E4A3 DEFB $FF,$F3  ;
 $E4A5 DEFB $7F,$E6  ;
 $E4A7 DEFB $7F,$E6  ;
 $E4A9 DEFB $00,$3C  ;
 $E4AB DEFB $00,$3C  ;
 $E4AD DEFB $08,$7C  ;
 $E4AF DEFB $34,$78  ;
 $E4B1 DEFB $7A,$78  ;
 $E4B3 DEFB $7D,$78  ;
 $E4B5 DEFB $3E,$F0  ;
 $E4B7 DEFB $1E,$F0  ;
 $E4B9 DEFB $0E,$F0  ;
 $E4BB DEFB $06,$70  ;
 $E4BD DEFB $01,$E8  ;
 $E4BF DEFB $01,$E4  ;
 $E4C1 DEFB $01,$DA  ;
 $E4C3 DEFB $01,$DA  ;
 $E4C5 DEFB $03,$FD  ;
 $E4C7 DEFB $03,$9D  ;
 $E4C9 DEFB $03,$07  ;
 $E4CB DEFB $01,$80  ; }
 $E4CD DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E4CE DEFB $AD,$B5  ; {#JETMAN$9C(thing4)
 $E4D0 DEFB $AD,$B5  ;
 $E4D2 DEFB $00,$00  ;
 $E4D4 DEFB $FF,$F9  ;
 $E4D6 DEFB $FF,$F3  ;
 $E4D8 DEFB $F7,$E6  ;
 $E4DA DEFB $7F,$E6  ;
 $E4DC DEFB $00,$3C  ;
 $E4DE DEFB $00,$3C  ;
 $E4E0 DEFB $00,$7C  ;
 $E4E2 DEFB $00,$78  ;
 $E4E4 DEFB $60,$78  ;
 $E4E6 DEFB $38,$78  ;
 $E4E8 DEFB $7E,$F0  ;
 $E4EA DEFB $9E,$F0  ;
 $E4EC DEFB $66,$F0  ;
 $E4EE DEFB $18,$E8  ;
 $E4F0 DEFB $05,$EC  ;
 $E4F2 DEFB $01,$7E  ;
 $E4F4 DEFB $01,$C3  ;
 $E4F6 DEFB $01,$DC  ;
 $E4F8 DEFB $03,$C0  ;
 $E4FA DEFB $03,$80  ;
 $E4FC DEFB $03,$80  ;
 $E4FE DEFB $01,$80  ; }
 $E500 DEFB $19      ; Height = #N(#PEEK(#PC)) pixels.
 $E501 DEFB $AD,$B5  ; {#JETMAN$9D(thing5)
 $E503 DEFB $AD,$B5  ;
 $E505 DEFB $00,$00  ;
 $E507 DEFB $FF,$F9  ;
 $E509 DEFB $FF,$F3  ;
 $E50B DEFB $F7,$E6  ;
 $E50D DEFB $7F,$E6  ;
 $E50F DEFB $00,$3C  ;
 $E511 DEFB $00,$3C  ;
 $E513 DEFB $00,$7C  ;
 $E515 DEFB $00,$78  ;
 $E517 DEFB $00,$78  ;
 $E519 DEFB $00,$78  ;
 $E51B DEFB $00,$F0  ;
 $E51D DEFB $FE,$F0  ;
 $E51F DEFB $FE,$F6  ;
 $E521 DEFB $FE,$EF  ;
 $E523 DEFB $81,$E2  ;
 $E525 DEFB $FD,$E8  ;
 $E527 DEFB $01,$C0  ;
 $E529 DEFB $01,$C0  ;
 $E52B DEFB $03,$C0  ;
 $E52D DEFB $03,$80  ;
 $E52F DEFB $03,$80  ;
 $E531 DEFB $01,$80  ; }

; Sprite: Alien Base Plasma
;
; .
;
; .
;
; Frame 1.
b$E533 DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $E534 DEFB $09,$F0  ; {#JETMAN$90(alien-base-plasma-01*)
 $E536 DEFB $09,$F0  ;
 $E538 DEFB $0B,$F0  ;
 $E53A DEFB $0B,$F0  ;
 $E53C DEFB $33,$FC  ;
 $E53E DEFB $33,$FC  ;
 $E540 DEFB $33,$FC  ;
 $E542 DEFB $33,$FC  ;
 $E544 DEFB $08,$30  ;
 $E546 DEFB $0B,$F0  ;
 $E548 DEFB $09,$F0  ;
 $E54A DEFB $0D,$F0  ;
 $E54C DEFB $16,$E8  ;
 $E54E DEFB $23,$C4  ;
 $E550 DEFB $40,$02  ;
 $E552 DEFB $80,$01  ;
 $E554 DEFB $E1,$83  ;
 $E556 DEFB $12,$65  ;
 $E558 DEFB $24,$18  ;
 $E55A DEFB $24,$00  ;
 $E55C DEFB $1C,$00  ; }
; Frame 2.
 $E55E DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $E55F DEFB $09,$F0  ; {#JETMAN$91(alien-base-plasma-02*)
 $E561 DEFB $09,$F0  ;
 $E563 DEFB $09,$F0  ;
 $E565 DEFB $33,$FC  ;
 $E567 DEFB $33,$FC  ;
 $E569 DEFB $08,$30  ;
 $E56B DEFB $09,$F0  ;
 $E56D DEFB $33,$FC  ;
 $E56F DEFB $33,$FC  ;
 $E571 DEFB $08,$30  ;
 $E573 DEFB $09,$F0  ;
 $E575 DEFB $0D,$F0  ;
 $E577 DEFB $16,$E8  ;
 $E579 DEFB $23,$C4  ;
 $E57B DEFB $40,$02  ;
 $E57D DEFB $80,$01  ;
 $E57F DEFB $40,$C8  ;
 $E581 DEFB $21,$22  ;
 $E583 DEFB $21,$14  ;
 $E585 DEFB $2D,$08  ;
 $E587 DEFB $12,$00  ; }
; Frame 3.
 $E589 DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $E58A DEFB $09,$F0  ; {#JETMAN$92(alien-base-plasma-03*)
 $E58C DEFB $09,$F0  ;
 $E58E DEFB $33,$FC  ;
 $E590 DEFB $33,$FC  ;
 $E592 DEFB $08,$30  ;
 $E594 DEFB $09,$F0  ;
 $E596 DEFB $09,$F0  ;
 $E598 DEFB $09,$F0  ;
 $E59A DEFB $33,$FC  ;
 $E59C DEFB $33,$FC  ;
 $E59E DEFB $08,$30  ;
 $E5A0 DEFB $0D,$F0  ;
 $E5A2 DEFB $16,$E8  ;
 $E5A4 DEFB $23,$C4  ;
 $E5A6 DEFB $40,$02  ;
 $E5A8 DEFB $80,$01  ;
 $E5AA DEFB $60,$01  ;
 $E5AC DEFB $18,$21  ;
 $E5AE DEFB $04,$41  ;
 $E5B0 DEFB $09,$91  ;
 $E5B2 DEFB $01,$8C  ; }
; Frame 4.
 $E5B4 DEFB $15      ; Height = #N(#PEEK(#PC)) pixels.
 $E5B5 DEFB $09,$F0  ; {#JETMAN$93(alien-base-plasma-04*)
 $E5B7 DEFB $33,$FC  ;
 $E5B9 DEFB $33,$FC  ;
 $E5BB DEFB $08,$30  ;
 $E5BD DEFB $09,$F0  ;
 $E5BF DEFB $09,$F0  ;
 $E5C1 DEFB $09,$F0  ;
 $E5C3 DEFB $09,$F0  ;
 $E5C5 DEFB $09,$F0  ;
 $E5C7 DEFB $33,$FC  ;
 $E5C9 DEFB $33,$FC  ;
 $E5CB DEFB $0C,$30  ;
 $E5CD DEFB $16,$E8  ;
 $E5CF DEFB $23,$C4  ;
 $E5D1 DEFB $40,$02  ;
 $E5D3 DEFB $80,$01  ;
 $E5D5 DEFB $9E,$03  ;
 $E5D7 DEFB $51,$04  ;
 $E5D9 DEFB $90,$C8  ;
 $E5DB DEFB $90,$50  ;
 $E5DD DEFB $70,$20  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*alien-base-plasma-01,5;alien-base-plasma-01;alien-base-plasma-02;alien-base-plasma-03;alien-base-plasma-04;alien-base-plasma-04;alien-base-plasma-03;alien-base-plasma-02(alien-base-plasma)
; }
; UDGTABLE#

; Data block at E5DF
b$E5DF DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E5E0 DEFB $00,$00  ; {#JETMAN$BF(thing1)
 $E5E2 DEFB $00,$00  ;
 $E5E4 DEFB $00,$00  ;
 $E5E6 DEFB $00,$00  ;
 $E5E8 DEFB $01,$20  ;
 $E5EA DEFB $07,$E0  ;
 $E5EC DEFB $03,$F8  ;
 $E5EE DEFB $0F,$E0  ;
 $E5F0 DEFB $07,$C0  ;
 $E5F2 DEFB $07,$0E  ;
 $E5F4 DEFB $09,$60  ;
 $E5F6 DEFB $01,$20  ; }
 $E5F8 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E5F9 DEFB $00,$00  ; {#JETMAN$C0(thing2)
 $E5FB DEFB $00,$00  ;
 $E5FD DEFB $04,$80  ;
 $E5FF DEFB $06,$B0  ;
 $E601 DEFB $1F,$E0  ;
 $E603 DEFB $1F,$E0  ;
 $E605 DEFB $0F,$FC  ;
 $E607 DEFB $3F,$F0  ;
 $E609 DEFB $0F,$FC  ;
 $E60B DEFB $0F,$E0  ;
 $E60D DEFB $1F,$F0  ;
 $E60F DEFB $16,$E8  ;
 $E611 DEFB $02,$40  ;
 $E613 DEFB $00,$20  ;
 $E615 DEFB $00,$00  ;
 $E617 DEFB $00,$00  ; }
 $E619 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E61A DEFB $3C,$10  ; {#JETMAN$C1(thingc1)
 $E61C DEFB $1E,$30  ;
 $E61E DEFB $0F,$70  ;
 $E620 DEFB $CF,$F0  ;
 $E622 DEFB $FF,$FF  ;
 $E624 DEFB $7E,$3E  ;
 $E626 DEFB $3C,$1E  ;
 $E628 DEFB $39,$9C  ;
 $E62A DEFB $79,$9C  ;
 $E62C DEFB $CC,$3E  ;
 $E62E DEFB $1F,$7F  ;
 $E630 DEFB $1F,$FC  ;
 $E632 DEFB $3F,$F0  ;
 $E634 DEFB $3F,$78  ;
 $E636 DEFB $77,$38  ;
 $E638 DEFB $C2,$04  ; }
 $E63A DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E63B DEFB $05,$20  ; {#JETMAN$C2(thingc2)
 $E63D DEFB $0A,$C8  ;
 $E63F DEFB $2F,$D4  ;
 $E641 DEFB $19,$F2  ;
 $E643 DEFB $59,$8E  ;
 $E645 DEFB $F8,$0E  ;
 $E647 DEFB $21,$9D  ;
 $E649 DEFB $C3,$E6  ;
 $E64B DEFB $A3,$CD  ;
 $E64D DEFB $79,$9E  ;
 $E64F DEFB $B0,$0D  ;
 $E651 DEFB $20,$04  ;
 $E653 DEFB $27,$3E  ;
 $E655 DEFB $5F,$38  ;
 $E657 DEFB $1B,$F4  ;
 $E659 DEFB $05,$90  ; }
 $E65B DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E65C DEFB $04,$A0  ; {#JETMAN$C3(thingc3)
 $E65E DEFB $5F,$F4  ;
 $E660 DEFB $0A,$86  ;
 $E662 DEFB $78,$06  ;
 $E664 DEFB $20,$06  ;
 $E666 DEFB $63,$C1  ;
 $E668 DEFB $C7,$E3  ;
 $E66A DEFB $47,$E2  ;
 $E66C DEFB $47,$E1  ;
 $E66E DEFB $67,$E2  ;
 $E670 DEFB $B3,$C7  ;
 $E672 DEFB $50,$02  ;
 $E674 DEFB $34,$0C  ;
 $E676 DEFB $5D,$4A  ;
 $E678 DEFB $16,$F0  ;
 $E67A DEFB $0A,$A8  ; }
 $E67C DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E67D DEFB $00,$00  ; {#JETMAN$C4(thingc4)
 $E67F DEFB $00,$80  ;
 $E681 DEFB $00,$80  ;
 $E683 DEFB $00,$80  ;
 $E685 DEFB $07,$E0  ;
 $E687 DEFB $0F,$E8  ;
 $E689 DEFB $0F,$B8  ;
 $E68B DEFB $0E,$88  ;
 $E68D DEFB $B2,$95  ;
 $E68F DEFB $0C,$78  ;
 $E691 DEFB $0E,$F0  ;
 $E693 DEFB $06,$F0  ;
 $E695 DEFB $01,$00  ;
 $E697 DEFB $00,$00  ;
 $E699 DEFB $01,$00  ;
 $E69B DEFB $01,$00  ; }
 $E69D DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E69E DEFB $00,$80  ; {#JETMAN$C5(thingc5)
 $E6A0 DEFB $00,$00  ;
 $E6A2 DEFB $0C,$38  ;
 $E6A4 DEFB $1F,$3C  ;
 $E6A6 DEFB $1C,$1C  ;
 $E6A8 DEFB $10,$8C  ;
 $E6AA DEFB $30,$00  ;
 $E6AC DEFB $00,$21  ;
 $E6AE DEFB $22,$00  ;
 $E6B0 DEFB $18,$98  ;
 $E6B2 DEFB $3C,$18  ;
 $E6B4 DEFB $3E,$38  ;
 $E6B6 DEFB $1E,$78  ;
 $E6B8 DEFB $0E,$30  ;
 $E6BA DEFB $00,$00  ;
 $E6BC DEFB $00,$80  ; }
 $E6BE DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E6BF DEFB $0C,$10  ; {#JETMAN$C6(thingc6)
 $E6C1 DEFB $10,$1C  ;
 $E6C3 DEFB $60,$0E  ;
 $E6C5 DEFB $40,$03  ;
 $E6C7 DEFB $80,$03  ;
 $E6C9 DEFB $80,$01  ;
 $E6CB DEFB $00,$00  ;
 $E6CD DEFB $00,$00  ;
 $E6CF DEFB $00,$00  ;
 $E6D1 DEFB $00,$00  ;
 $E6D3 DEFB $00,$00  ;
 $E6D5 DEFB $80,$01  ;
 $E6D7 DEFB $80,$01  ;
 $E6D9 DEFB $C0,$03  ;
 $E6DB DEFB $70,$0E  ;
 $E6DD DEFB $38,$18  ; }
 $E6DF DEFB $04      ; Height = #N(#PEEK(#PC)) pixels.
 $E6E0 DEFB $81,$64  ; {#JETMAN$C7(thingc7)
 $E6E2 DEFB $8A,$A2  ;
 $E6E4 DEFB $4F,$48  ;
 $E6E6 DEFB $4A,$38  ; }

; Data block at E6E8
b$E6E8 DEFB $08      ; Height = #N(#PEEK(#PC)) pixels.
 $E6E9 DEFB $70,$8E  ; {#JETMAN$C8(thingc8)
 $E6EB DEFB $A5,$81  ;
 $E6ED DEFB $49,$46  ;
 $E6EF DEFB $64,$39  ; }

; Data block at E6F1
b$E6F1 DEFB $08,$1C,$6A,$24,$16,$61,$4B,$4E
 $E6F9 DEFB $B0

; Data block at E6FA
b$E6FA DEFB $08,$3D,$64,$AB,$C1,$2A,$22,$49
 $E702 DEFB $3E

; Sprite: Saturn
;
; .
;
; .
;
; Frame 1.
b$E703 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E704 DEFB $0F,$F0  ; {#JETMAN$CB(saturn-01*)
 $E706 DEFB $30,$0C  ;
 $E708 DEFB $43,$C2  ;
 $E70A DEFB $47,$E2  ;
 $E70C DEFB $8F,$F1  ;
 $E70E DEFB $8D,$F1  ;
 $E710 DEFB $89,$F1  ;
 $E712 DEFB $8C,$F1  ;
 $E714 DEFB $46,$62  ;
 $E716 DEFB $43,$C2  ;
 $E718 DEFB $30,$0C  ;
 $E71A DEFB $0F,$F0  ; }
; Frame 2.
 $E71C DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E71D DEFB $3F,$80  ; {#JETMAN$CC(saturn-02*)
 $E71F DEFB $40,$70  ;
 $E721 DEFB $83,$C8  ;
 $E723 DEFB $87,$E4  ;
 $E725 DEFB $8F,$F2  ;
 $E727 DEFB $8B,$F2  ;
 $E729 DEFB $49,$F1  ;
 $E72B DEFB $4C,$F1  ;
 $E72D DEFB $26,$61  ;
 $E72F DEFB $13,$C1  ;
 $E731 DEFB $0E,$02  ;
 $E733 DEFB $01,$FC  ; }
; Frame 3.
 $E735 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E736 DEFB $78,$00  ; {#JETMAN$CD(saturn-03*)
 $E738 DEFB $87,$00  ;
 $E73A DEFB $80,$C0  ;
 $E73C DEFB $87,$30  ;
 $E73E DEFB $4F,$C8  ;
 $E740 DEFB $4D,$F8  ;
 $E742 DEFB $29,$F2  ;
 $E744 DEFB $0C,$F2  ;
 $E746 DEFB $06,$61  ;
 $E748 DEFB $03,$C1  ;
 $E74A DEFB $00,$E1  ;
 $E74C DEFB $00,$1E  ; }
; Frame 4.
 $E74E DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E74F DEFB $70,$00  ; {#JETMAN$CE(saturn-04*)
 $E751 DEFB $8C,$00  ;
 $E753 DEFB $83,$40  ;
 $E755 DEFB $44,$A0  ;
 $E757 DEFB $2F,$40  ;
 $E759 DEFB $0F,$B0  ;
 $E75B DEFB $09,$C8  ;
 $E75D DEFB $0C,$F4  ;
 $E75F DEFB $06,$62  ;
 $E761 DEFB $03,$C1  ;
 $E763 DEFB $00,$21  ;
 $E765 DEFB $00,$0E  ; }
; Frame 5.
 $E767 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E768 DEFB $80,$00  ; {#JETMAN$CF(saturn-05*)
 $E76A DEFB $60,$00  ;
 $E76C DEFB $13,$C0  ;
 $E76E DEFB $09,$E0  ;
 $E770 DEFB $06,$F0  ;
 $E772 DEFB $09,$70  ;
 $E774 DEFB $08,$90  ;
 $E776 DEFB $0C,$60  ;
 $E778 DEFB $06,$10  ;
 $E77A DEFB $03,$C8  ;
 $E77C DEFB $00,$06  ;
 $E77E DEFB $00,$01  ; }
; Frame 6.
 $E780 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E781 DEFB $70,$00  ; {#JETMAN$D0(saturn-06*)
 $E783 DEFB $8C,$00  ;
 $E785 DEFB $83,$C0  ;
 $E787 DEFB $47,$E0  ;
 $E789 DEFB $2F,$F0  ;
 $E78B DEFB $13,$F0  ;
 $E78D DEFB $0D,$F0  ;
 $E78F DEFB $02,$F4  ;
 $E791 DEFB $05,$22  ;
 $E793 DEFB $02,$C1  ;
 $E795 DEFB $00,$31  ;
 $E797 DEFB $00,$0E  ; }
; Frame 7.
 $E799 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E79A DEFB $78,$00  ; {#JETMAN$D1(saturn-07*)
 $E79C DEFB $87,$00  ;
 $E79E DEFB $83,$C0  ;
 $E7A0 DEFB $87,$E0  ;
 $E7A2 DEFB $4F,$F0  ;
 $E7A4 DEFB $4B,$F4  ;
 $E7A6 DEFB $29,$F2  ;
 $E7A8 DEFB $10,$F2  ;
 $E7AA DEFB $0C,$61  ;
 $E7AC DEFB $03,$01  ;
 $E7AE DEFB $00,$E1  ;
 $E7B0 DEFB $00,$1E  ; }
; Frame 8.
 $E7B2 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E7B3 DEFB $01,$FC  ; {#JETMAN$D4(saturn-08*)
 $E7B5 DEFB $0E,$02  ;
 $E7B7 DEFB $13,$C1  ;
 $E7B9 DEFB $27,$E1  ;
 $E7BB DEFB $4F,$F1  ;
 $E7BD DEFB $4B,$F1  ;
 $E7BF DEFB $89,$F2  ;
 $E7C1 DEFB $8C,$F2  ;
 $E7C3 DEFB $86,$64  ;
 $E7C5 DEFB $83,$C8  ;
 $E7C7 DEFB $40,$70  ;
 $E7C9 DEFB $3F,$80  ; }
; Frame 9.
 $E7CB DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E7CC DEFB $00,$1E  ; {#JETMAN$D5(saturn-09*)
 $E7CE DEFB $00,$E1  ;
 $E7D0 DEFB $03,$C1  ;
 $E7D2 DEFB $07,$E1  ;
 $E7D4 DEFB $0F,$F2  ;
 $E7D6 DEFB $1B,$F2  ;
 $E7D8 DEFB $49,$F4  ;
 $E7DA DEFB $4C,$C8  ;
 $E7DC DEFB $86,$30  ;
 $E7DE DEFB $80,$C0  ;
 $E7E0 DEFB $87,$00  ;
 $E7E2 DEFB $78,$00  ; }
; Frame 10.
 $E7E4 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E7E5 DEFB $00,$0E  ; {#JETMAN$D6(saturn-0A*)
 $E7E7 DEFB $00,$21  ;
 $E7E9 DEFB $03,$C1  ;
 $E7EB DEFB $07,$E2  ;
 $E7ED DEFB $0F,$F4  ;
 $E7EF DEFB $0B,$C8  ;
 $E7F1 DEFB $09,$B0  ;
 $E7F3 DEFB $28,$40  ;
 $E7F5 DEFB $44,$A0  ;
 $E7F7 DEFB $83,$40  ;
 $E7F9 DEFB $8C,$00  ;
 $E7FB DEFB $70,$00  ; }
; Frame 11.
 $E7FD DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E7FE DEFB $00,$01  ; {#JETMAN$D7(saturn-0B*)
 $E800 DEFB $00,$06  ;
 $E802 DEFB $03,$C8  ;
 $E804 DEFB $07,$90  ;
 $E806 DEFB $0F,$60  ;
 $E808 DEFB $0A,$90  ;
 $E80A DEFB $09,$70  ;
 $E80C DEFB $06,$F0  ;
 $E80E DEFB $08,$60  ;
 $E810 DEFB $13,$C0  ;
 $E812 DEFB $60,$00  ;
 $E814 DEFB $80,$00  ; }
; Frame 12.
 $E816 DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E817 DEFB $00,$0E  ; {#JETMAN$D8(saturn-0C*)
 $E819 DEFB $00,$31  ;
 $E81B DEFB $00,$C1  ;
 $E81D DEFB $01,$22  ;
 $E81F DEFB $02,$F4  ;
 $E821 DEFB $0D,$F0  ;
 $E823 DEFB $11,$F0  ;
 $E825 DEFB $2C,$F0  ;
 $E827 DEFB $44,$60  ;
 $E829 DEFB $83,$C0  ;
 $E82B DEFB $80,$00  ;
 $E82D DEFB $70,$00  ; }
; Frame 13.
 $E82F DEFB $0C      ; Height = #N(#PEEK(#PC)) pixels.
 $E830 DEFB $00,$1E  ; {#JETMAN$D9(saturn-0D*)
 $E832 DEFB $00,$E1  ;
 $E834 DEFB $03,$01  ;
 $E836 DEFB $0C,$E1  ;
 $E838 DEFB $13,$F2  ;
 $E83A DEFB $2B,$F2  ;
 $E83C DEFB $49,$F4  ;
 $E83E DEFB $2C,$F0  ;
 $E840 DEFB $86,$60  ;
 $E842 DEFB $83,$C0  ;
 $E844 DEFB $87,$00  ;
 $E846 DEFB $78,$00  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*saturn-01,15;saturn-02;saturn-03;saturn-04;saturn-05;saturn-06;saturn-07;saturn-08;saturn-09;saturn-0A;saturn-0B;saturn-0C;saturn-0D(saturn)
; }
; UDGTABLE#

; Sprite: Spinner
;
; .
;
; .
;
; Frame 1.
b$E848 DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $E849 DEFB $00,$00  ; {#JETMAN$AF(spinner-01)
 $E84B DEFB $00,$00  ;
 $E84D DEFB $00,$00  ;
 $E84F DEFB $00,$00  ;
 $E851 DEFB $00,$78  ;
 $E853 DEFB $00,$84  ;
 $E855 DEFB $01,$02  ;
 $E857 DEFB $02,$01  ;
 $E859 DEFB $01,$EA  ;
 $E85B DEFB $00,$FC  ;
 $E85D DEFB $01,$C6  ;
 $E85F DEFB $03,$03  ;
 $E861 DEFB $03,$C6  ;
 $E863 DEFB $07,$FC  ;
 $E865 DEFB $0F,$F8  ;
 $E867 DEFB $1F,$F8  ;
 $E869 DEFB $0F,$F0  ;
 $E86B DEFB $07,$E0  ;
 $E86D DEFB $03,$C0  ; }
; Frame 2.
 $E86F DEFB $13      ; Height = #N(#PEEK(#PC)) pixels.
 $E870 DEFB $00,$00  ; {#JETMAN$B0(spinner-02)
 $E872 DEFB $00,$00  ;
 $E874 DEFB $00,$00  ;
 $E876 DEFB $00,$00  ;
 $E878 DEFB $00,$00  ;
 $E87A DEFB $00,$00  ;
 $E87C DEFB $00,$00  ;
 $E87E DEFB $00,$00  ;
 $E880 DEFB $1E,$78  ;
 $E882 DEFB $3F,$84  ;
 $E884 DEFB $7F,$82  ;
 $E886 DEFB $FF,$C1  ;
 $E888 DEFB $7F,$C2  ;
 $E88A DEFB $3F,$64  ;
 $E88C DEFB $1E,$38  ;
 $E88E DEFB $18,$18  ;
 $E890 DEFB $0C,$30  ;
 $E892 DEFB $07,$E0  ;
 $E894 DEFB $03,$C0  ; }
; Frame 3.
 $E896 DEFB $12      ; Height = #N(#PEEK(#PC)) pixels.
 $E897 DEFB $00,$00  ; {#JETMAN$B1(spinner-03)
 $E899 DEFB $00,$00  ;
 $E89B DEFB $00,$00  ;
 $E89D DEFB $1E,$00  ;
 $E89F DEFB $3F,$00  ;
 $E8A1 DEFB $7F,$80  ;
 $E8A3 DEFB $FF,$C0  ;
 $E8A5 DEFB $7F,$80  ;
 $E8A7 DEFB $3F,$00  ;
 $E8A9 DEFB $7F,$80  ;
 $E8AB DEFB $C0,$C0  ;
 $E8AD DEFB $61,$C0  ;
 $E8AF DEFB $3F,$20  ;
 $E8B1 DEFB $1E,$10  ;
 $E8B3 DEFB $10,$08  ;
 $E8B5 DEFB $08,$10  ;
 $E8B7 DEFB $04,$20  ;
 $E8B9 DEFB $03,$C0  ; }
; Frame 4.
 $E8BB DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $E8BC DEFB $03,$C0  ; {#JETMAN$B2(spinner-04)
 $E8BE DEFB $07,$E0  ;
 $E8C0 DEFB $0F,$F0  ;
 $E8C2 DEFB $1F,$F8  ;
 $E8C4 DEFB $1F,$F0  ;
 $E8C6 DEFB $37,$E0  ;
 $E8C8 DEFB $63,$C0  ;
 $E8CA DEFB $C0,$C0  ;
 $E8CC DEFB $61,$80  ;
 $E8CE DEFB $3F,$00  ;
 $E8D0 DEFB $5E,$80  ;
 $E8D2 DEFB $80,$40  ;
 $E8D4 DEFB $40,$80  ;
 $E8D6 DEFB $21,$00  ;
 $E8D8 DEFB $1E,$00  ; }
; Frame 5.
 $E8DA DEFB $0B      ; Height = #N(#PEEK(#PC)) pixels.
 $E8DB DEFB $03,$C0  ; {#JETMAN$B3(spinner-05)
 $E8DD DEFB $07,$E0  ;
 $E8DF DEFB $0C,$30  ;
 $E8E1 DEFB $18,$18  ;
 $E8E3 DEFB $1C,$78  ;
 $E8E5 DEFB $26,$FC  ;
 $E8E7 DEFB $43,$FE  ;
 $E8E9 DEFB $83,$FF  ;
 $E8EB DEFB $41,$FE  ;
 $E8ED DEFB $21,$FC  ;
 $E8EF DEFB $1E,$78  ; }
; Frame 6.
 $E8F1 DEFB $0F      ; Height = #N(#PEEK(#PC)) pixels.
 $E8F2 DEFB $03,$C0  ; {#JETMAN$B4(spinner-06)
 $E8F4 DEFB $04,$20  ;
 $E8F6 DEFB $08,$10  ;
 $E8F8 DEFB $10,$08  ;
 $E8FA DEFB $08,$78  ;
 $E8FC DEFB $04,$FC  ;
 $E8FE DEFB $03,$86  ;
 $E900 DEFB $03,$03  ;
 $E902 DEFB $01,$7A  ;
 $E904 DEFB $00,$FC  ;
 $E906 DEFB $01,$FE  ;
 $E908 DEFB $03,$FF  ;
 $E90A DEFB $01,$FE  ;
 $E90C DEFB $00,$FC  ;
 $E90E DEFB $00,$78  ; }

; Sprite: Jetman Falling
;
; .
;
; .
;
; Frame 1.
b$E910 DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $E911 DEFB $03,$C0  ; {#JETMAN$DB(jetman-falling-01*)
 $E913 DEFB $01,$C0  ;
 $E915 DEFB $00,$00  ;
 $E917 DEFB $00,$C0  ;
 $E919 DEFB $00,$C0  ;
 $E91B DEFB $41,$C0  ;
 $E91D DEFB $E1,$FB  ;
 $E91F DEFB $76,$FB  ;
 $E921 DEFB $3F,$73  ;
 $E923 DEFB $1F,$A1  ;
 $E925 DEFB $6F,$C0  ;
 $E927 DEFB $DB,$80  ;
 $E929 DEFB $BF,$80  ;
 $E92B DEFB $DD,$C0  ;
 $E92D DEFB $EA,$E0  ;
 $E92F DEFB $76,$70  ;
 $E931 DEFB $3C,$20  ; }
; Frame 2.
 $E933 DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $E934 DEFB $03,$C0  ; {#JETMAN$DC(jetman-falling-02*)
 $E936 DEFB $03,$80  ;
 $E938 DEFB $00,$00  ;
 $E93A DEFB $03,$00  ;
 $E93C DEFB $03,$00  ;
 $E93E DEFB $03,$80  ;
 $E940 DEFB $DF,$87  ;
 $E942 DEFB $DF,$6E  ;
 $E944 DEFB $CE,$FC  ;
 $E946 DEFB $85,$F8  ;
 $E948 DEFB $03,$F6  ;
 $E94A DEFB $01,$DB  ;
 $E94C DEFB $01,$FD  ;
 $E94E DEFB $03,$BB  ;
 $E950 DEFB $07,$57  ;
 $E952 DEFB $0E,$6E  ;
 $E954 DEFB $04,$3C  ; }
; Frame 3.
 $E956 DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $E957 DEFB $04,$3C  ; {#JETMAN$DD(jetman-falling-03*)
 $E959 DEFB $0E,$6E  ;
 $E95B DEFB $07,$5E  ;
 $E95D DEFB $03,$BB  ;
 $E95F DEFB $01,$FD  ;
 $E961 DEFB $01,$DB  ;
 $E963 DEFB $03,$F6  ;
 $E965 DEFB $85,$F8  ;
 $E967 DEFB $CE,$FC  ;
 $E969 DEFB $DF,$6E  ;
 $E96B DEFB $DF,$87  ;
 $E96D DEFB $03,$82  ;
 $E96F DEFB $03,$00  ;
 $E971 DEFB $03,$00  ;
 $E973 DEFB $00,$00  ;
 $E975 DEFB $03,$80  ;
 $E977 DEFB $03,$C0  ; }
; Frame 4.
 $E979 DEFB $11      ; Height = #N(#PEEK(#PC)) pixels.
 $E97A DEFB $3C,$20  ; {#JETMAN$DE(jetman-falling-04*)
 $E97C DEFB $76,$70  ;
 $E97E DEFB $EA,$E0  ;
 $E980 DEFB $DD,$C0  ;
 $E982 DEFB $BF,$80  ;
 $E984 DEFB $DB,$80  ;
 $E986 DEFB $6F,$C0  ;
 $E988 DEFB $1F,$A0  ;
 $E98A DEFB $3F,$73  ;
 $E98C DEFB $76,$FB  ;
 $E98E DEFB $E1,$FB  ;
 $E990 DEFB $41,$C0  ;
 $E992 DEFB $00,$C0  ;
 $E994 DEFB $00,$C0  ;
 $E996 DEFB $00,$00  ;
 $E998 DEFB $01,$C0  ;
 $E99A DEFB $03,$C0  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*jetman-falling-01,15;jetman-falling-02;jetman-falling-03;jetman-falling-04(jetman-falling)
; }
; UDGTABLE#

; Sprite: Shooter
;
; Shooters appear from level 8 onwards.
;
; .
;
; Frame 1.
b$E99C DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E99D DEFB $00,$00  ; {#JETMAN$B7(shooter-01*)
 $E99F DEFB $00,$00  ;
 $E9A1 DEFB $00,$00  ;
 $E9A3 DEFB $6D,$B6  ;
 $E9A5 DEFB $00,$00  ;
 $E9A7 DEFB $00,$00  ;
 $E9A9 DEFB $0F,$F0  ;
 $E9AB DEFB $00,$00  ;
 $E9AD DEFB $6B,$9C  ;
 $E9AF DEFB $77,$DE  ;
 $E9B1 DEFB $EF,$EF  ;
 $E9B3 DEFB $EF,$EF  ;
 $E9B5 DEFB $00,$00  ;
 $E9B7 DEFB $67,$FE  ;
 $E9B9 DEFB $33,$FC  ;
 $E9BB DEFB $0D,$F0  ; }
; Frame 2.
 $E9BD DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E9BE DEFB $00,$00  ; {#JETMAN$B8(shooter-02*)
 $E9C0 DEFB $00,$00  ;
 $E9C2 DEFB $2A,$AA  ;
 $E9C4 DEFB $00,$00  ;
 $E9C6 DEFB $00,$00  ;
 $E9C8 DEFB $3F,$F8  ;
 $E9CA DEFB $00,$00  ;
 $E9CC DEFB $00,$00  ;
 $E9CE DEFB $69,$DC  ;
 $E9D0 DEFB $7B,$EE  ;
 $E9D2 DEFB $F7,$F7  ;
 $E9D4 DEFB $F7,$F7  ;
 $E9D6 DEFB $00,$00  ;
 $E9D8 DEFB $67,$FE  ;
 $E9DA DEFB $33,$FC  ;
 $E9DC DEFB $0D,$F0  ; }
; Frame 3.
 $E9DE DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $E9DF DEFB $00,$00  ; {#JETMAN$B9(shooter-03*)
 $E9E1 DEFB $AA,$AA  ;
 $E9E3 DEFB $00,$00  ;
 $E9E5 DEFB $00,$00  ;
 $E9E7 DEFB $36,$D8  ;
 $E9E9 DEFB $00,$00  ;
 $E9EB DEFB $00,$00  ;
 $E9ED DEFB $00,$00  ;
 $E9EF DEFB $39,$EC  ;
 $E9F1 DEFB $7D,$F6  ;
 $E9F3 DEFB $FB,$FB  ;
 $E9F5 DEFB $FB,$FB  ;
 $E9F7 DEFB $00,$00  ;
 $E9F9 DEFB $67,$FE  ;
 $E9FB DEFB $33,$FC  ;
 $E9FD DEFB $0D,$F0  ; }
; Frame 4.
 $E9FF DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EA00 DEFB $92,$49  ; {#JETMAN$BA(shooter-04*)
 $EA02 DEFB $00,$00  ;
 $EA04 DEFB $00,$00  ;
 $EA06 DEFB $6D,$B6  ;
 $EA08 DEFB $00,$00  ;
 $EA0A DEFB $00,$00  ;
 $EA0C DEFB $00,$00  ;
 $EA0E DEFB $00,$00  ;
 $EA10 DEFB $1C,$74  ;
 $EA12 DEFB $3E,$FA  ;
 $EA14 DEFB $7F,$FD  ;
 $EA16 DEFB $7D,$FD  ;
 $EA18 DEFB $00,$00  ;
 $EA1A DEFB $67,$FE  ;
 $EA1C DEFB $33,$FC  ;
 $EA1E DEFB $0D,$F0  ; }
; Frame 5.
 $EA20 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EA21 DEFB $00,$00  ; {#JETMAN$BB(shooter-05*)
 $EA23 DEFB $00,$00  ;
 $EA25 DEFB $55,$54  ;
 $EA27 DEFB $00,$00  ;
 $EA29 DEFB $00,$00  ;
 $EA2B DEFB $00,$00  ;
 $EA2D DEFB $0F,$F0  ;
 $EA2F DEFB $00,$00  ;
 $EA31 DEFB $1C,$38  ;
 $EA33 DEFB $3E,$7C  ;
 $EA35 DEFB $7F,$7E  ;
 $EA37 DEFB $7F,$7E  ;
 $EA39 DEFB $00,$00  ;
 $EA3B DEFB $67,$FE  ;
 $EA3D DEFB $33,$FC  ;
 $EA3F DEFB $0D,$F0  ; }
; Frame 6.
 $EA41 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EA42 DEFB $00,$00  ; {#JETMAN$BC(shooter-06*)
 $EA44 DEFB $55,$55  ;
 $EA46 DEFB $00,$00  ;
 $EA48 DEFB $00,$00  ;
 $EA4A DEFB $00,$00  ;
 $EA4C DEFB $3F,$F8  ;
 $EA4E DEFB $00,$00  ;
 $EA50 DEFB $00,$00  ;
 $EA52 DEFB $2E,$1C  ;
 $EA54 DEFB $5F,$3E  ;
 $EA56 DEFB $BF,$BF  ;
 $EA58 DEFB $BF,$BF  ;
 $EA5A DEFB $00,$00  ;
 $EA5C DEFB $67,$FE  ;
 $EA5E DEFB $33,$FC  ;
 $EA60 DEFB $0D,$F0  ; }
; Frame 7.
 $EA62 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EA63 DEFB $92,$49  ; {#JETMAN$BD(shooter-07*)
 $EA65 DEFB $00,$00  ;
 $EA67 DEFB $00,$00  ;
 $EA69 DEFB $00,$00  ;
 $EA6B DEFB $36,$D8  ;
 $EA6D DEFB $00,$00  ;
 $EA6F DEFB $00,$00  ;
 $EA71 DEFB $00,$00  ;
 $EA73 DEFB $37,$1C  ;
 $EA75 DEFB $6F,$BE  ;
 $EA77 DEFB $DF,$DF  ;
 $EA79 DEFB $DF,$DF  ;
 $EA7B DEFB $00,$00  ;
 $EA7D DEFB $67,$FE  ;
 $EA7F DEFB $33,$FC  ;
 $EA81 DEFB $0D,$F0  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*shooter-01,15;shooter-02;shooter-03;shooter-04;shooter-05;shooter-06;shooter-07(shooter)
; }
; UDGTABLE#

; Data block at EA83
b$EA83 DEFB $04      ; Height = #N(#PEEK(#PC)) pixels.
 $EA84 DEFB $0F
 $EA85 DEFB $FC
 $EA86 DEFB $7E
 $EA87 DEFB $07

; Data block at EA88
b$EA88 DEFB $04      ; Height = #N(#PEEK(#PC)) pixels.
 $EA89 DEFB $F0
 $EA8A DEFB $3F
 $EA8B DEFB $7E
 $EA8C DEFB $E0

; Graphic: Explosion
;
; .
;
; .
;
; Frame 1.
b$EA8D DEFB $02                         ; Width = #N(#PEEK(#PC)) bytes.
 $EA8E DEFB $0E                         ; Height = #N(#PEEK(#PC)) pixels.
 $EA8F DEFB $00,$00                     ; {#GRAPHIC$DF(explosion-01)
 $EA91 DEFB $00,$00                     ;
 $EA93 DEFB $00,$00                     ;
 $EA95 DEFB $00,$00                     ;
 $EA97 DEFB $01,$00                     ;
 $EA99 DEFB $01,$86                     ;
 $EA9B DEFB $37,$FC                     ;
 $EA9D DEFB $3E,$F8                     ;
 $EA9F DEFB $18,$18                     ;
 $EAA1 DEFB $70,$70                     ;
 $EAA3 DEFB $3F,$E8                     ;
 $EAA5 DEFB $1F,$B8                     ;
 $EAA7 DEFB $1B,$0C                     ;
 $EAA9 DEFB $18,$00                     ; }
; Frame 2.
 $EAAB DEFB $04                         ; Width = #N(#PEEK(#PC)) bytes.
 $EAAC DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $EAAD DEFB $00,$01,$02,$00             ; {#GRAPHIC$E0(explosion-02)
 $EAB1 DEFB $02,$07,$1C,$00             ;
 $EAB5 DEFB $03,$8F,$7C,$0E             ;
 $EAB9 DEFB $01,$F9,$EC,$FC             ;
 $EABD DEFB $01,$F0,$8F,$F8             ;
 $EAC1 DEFB $1F,$A6,$A7,$30             ;
 $EAC5 DEFB $0F,$06,$32,$30             ;
 $EAC9 DEFB $07,$1F,$F9,$70             ;
 $EACD DEFB $03,$CF,$FF,$18             ;
 $EAD1 DEFB $01,$9C,$E0,$18             ;
 $EAD5 DEFB $03,$02,$63,$EC             ;
 $EAD9 DEFB $03,$F3,$0F,$FC             ;
 $EADD DEFB $07,$FF,$DC,$7E             ;
 $EAE1 DEFB $0F,$9F,$F8,$06             ;
 $EAE5 DEFB $1C,$1E,$F0,$03             ;
 $EAE9 DEFB $00,$20,$10,$00             ; }
; Frame 3.
 $EAED DEFB $05                         ; Width = #N(#PEEK(#PC)) bytes.
 $EAEE DEFB $18                         ; Height = #N(#PEEK(#PC)) pixels.
 $EAEF DEFB $00,$00,$00,$20,$40         ; {#GRAPHIC$E1(explosion-03)
 $EAF4 DEFB $18,$00,$00,$60,$C0         ;
 $EAF9 DEFB $1E,$00,$00,$E1,$C0         ;
 $EAFE DEFB $0F,$80,$01,$E3,$80         ;
 $EB03 DEFB $07,$BF,$FD,$E7,$80         ;
 $EB08 DEFB $03,$7F,$FB,$EF,$9F         ;
 $EB0D DEFB $00,$FF,$F7,$FF,$FE         ;
 $EB12 DEFB $0E,$00,$0F,$7F,$FC         ;
 $EB17 DEFB $DF,$FB,$DE,$3B,$F0         ;
 $EB1C DEFB $C7,$FD,$84,$33,$B8         ;
 $EB21 DEFB $00,$E4,$10,$A7,$5C         ;
 $EB26 DEFB $01,$F9,$5B,$86,$E8         ;
 $EB2B DEFB $07,$E1,$FF,$85,$E0         ;
 $EB30 DEFB $0F,$87,$CF,$1B,$DC         ;
 $EB35 DEFB $1F,$F2,$02,$77,$BE         ;
 $EB3A DEFB $3F,$F0,$38,$7B,$B0         ;
 $EB3F DEFB $60,$80,$1B,$B9,$C0         ;
 $EB44 DEFB $08,$3F,$6D,$F8,$E0         ;
 $EB49 DEFB $03,$7E,$F7,$FC,$70         ;
 $EB4E DEFB $03,$7E,$F7,$7E,$38         ;
 $EB53 DEFB $0B,$00,$F3,$8E,$10         ;
 $EB58 DEFB $0E,$3F,$61,$81,$00         ;
 $EB5D DEFB $08,$00,$00,$C0,$00         ;
 $EB62 DEFB $00,$00,$00,$20,$00         ; }
; Frame 4.
 $EB67 DEFB $07                         ; Width = #N(#PEEK(#PC)) bytes.
 $EB68 DEFB $20                         ; Height = #N(#PEEK(#PC)) pixels.
 $EB69 DEFB $00,$00,$00,$00,$00,$00,$00 ; {#GRAPHIC$E2(explosion-04)
 $EB70 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $EB77 DEFB $00,$00,$01,$00,$08,$00,$00 ;
 $EB7E DEFB $00,$00,$01,$00,$18,$30,$00 ;
 $EB85 DEFB $00,$0C,$01,$80,$28,$50,$00 ;
 $EB8C DEFB $00,$1F,$C1,$E0,$78,$F0,$00 ;
 $EB93 DEFB $00,$3F,$FC,$18,$F9,$F0,$08 ;
 $EB9A DEFB $00,$0F,$FF,$DF,$FF,$F1,$70 ;
 $EBA1 DEFB $00,$00,$FF,$BF,$9F,$7F,$E0 ;
 $EBA8 DEFB $00,$01,$0F,$7F,$1E,$7F,$C0 ;
 $EBAF DEFB $00,$3E,$F0,$C2,$0C,$1F,$80 ;
 $EBB6 DEFB $07,$FF,$FF,$00,$40,$3B,$00 ;
 $EBBD DEFB $01,$FE,$00,$18,$E0,$75,$00 ;
 $EBC4 DEFB $00,$3F,$80,$3F,$F4,$EE,$80 ;
 $EBCB DEFB $0A,$43,$9F,$F7,$18,$EE,$80 ;
 $EBD2 DEFB $0D,$07,$9F,$F8,$39,$DD,$C0 ;
 $EBD9 DEFB $0E,$0E,$3F,$FE,$33,$BB,$F8 ;
 $EBE0 DEFB $00,$1E,$1F,$07,$67,$7B,$E0 ;
 $EBE7 DEFB $00,$3F,$98,$63,$F3,$BD,$00 ;
 $EBEE DEFB $00,$7F,$A3,$F9,$F1,$DE,$00 ;
 $EBF5 DEFB $00,$B3,$07,$0C,$F8,$EF,$80 ;
 $EBFC DEFB $00,$C7,$3E,$F6,$40,$F3,$00 ;
 $EC03 DEFB $00,$07,$FD,$FB,$08,$FC,$E0 ;
 $EC0A DEFB $00,$0F,$F2,$FB,$9D,$DF,$E0 ;
 $EC11 DEFB $00,$0F,$CE,$FB,$DF,$C3,$F0 ;
 $EC18 DEFB $00,$0F,$BF,$79,$FB,$E0,$70 ;
 $EC1F DEFB $00,$0F,$3F,$94,$F8,$E0,$00 ;
 $EC26 DEFB $00,$0E,$3E,$6C,$78,$60,$00 ;
 $EC2D DEFB $00,$0C,$19,$98,$38,$30,$00 ;
 $EC34 DEFB $00,$08,$06,$70,$18,$10,$00 ;
 $EC3B DEFB $00,$00,$00,$30,$00,$00,$00 ;
 $EC42 DEFB $00,$00,$00,$20,$00,$00,$00 ; }
; Frame 5.
 $EC49 DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $EC4A DEFB $04,$90                     ; {#JETMAN$E3(explosion-05)
 $EC4C DEFB $29,$60                     ;
 $EC4E DEFB $22,$AA                     ;
 $EC50 DEFB $0D,$D4                     ;
 $EC52 DEFB $4D,$76                     ;
 $EC54 DEFB $AB,$AC                     ;
 $EC56 DEFB $1E,$FA                     ;
 $EC58 DEFB $6F,$EC                     ;
 $EC5A DEFB $9D,$BB                     ;
 $EC5C DEFB $37,$EC                     ;
 $EC5E DEFB $5F,$7A                     ;
 $EC60 DEFB $36,$D5                     ;
 $EC62 DEFB $4B,$74                     ;
 $EC64 DEFB $2C,$90                     ;
 $EC66 DEFB $0B,$44                     ;
 $EC68 DEFB $01,$20                     ; }
; Frame 6.
 $EC6A DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $EC6B DEFB $08,$60                     ; {#JETMAN$E4(explosion-06)
 $EC6D DEFB $02,$40                     ;
 $EC6F DEFB $28,$98                     ;
 $EC71 DEFB $6B,$E6                     ;
 $EC73 DEFB $96,$D8                     ;
 $EC75 DEFB $5D,$D6                     ;
 $EC77 DEFB $AF,$F8                     ;
 $EC79 DEFB $3F,$F7                     ;
 $EC7B DEFB $A7,$6A                     ;
 $EC7D DEFB $1F,$DD                     ;
 $EC7F DEFB $5F,$EA                     ;
 $EC81 DEFB $59,$EA                     ;
 $EC83 DEFB $17,$A4                     ;
 $EC85 DEFB $4B,$54                     ;
 $EC87 DEFB $12,$50                     ;
 $EC89 DEFB $09,$00                     ; }
; Frame 7.
 $EC8B DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $EC8C DEFB $04,$A0                     ; {#JETMAN$E5(explosion-07)
 $EC8E DEFB $16,$48                     ;
 $EC90 DEFB $49,$50                     ;
 $EC92 DEFB $2F,$6C                     ;
 $EC94 DEFB $DB,$B0                     ;
 $EC96 DEFB $2F,$56                     ;
 $EC98 DEFB $5E,$F8                     ;
 $EC9A DEFB $B5,$DA                     ;
 $EC9C DEFB $7F,$F0                     ;
 $EC9E DEFB $B7,$DD                     ;
 $ECA0 DEFB $5E,$F6                     ;
 $ECA2 DEFB $97,$54                     ;
 $ECA4 DEFB $2A,$AA                     ;
 $ECA6 DEFB $0B,$50                     ;
 $ECA8 DEFB $15,$48                     ;
 $ECAA DEFB $00,$A0                     ; }
; Frame 8.
 $ECAC DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $ECAD DEFB $01,$50                     ; {#JETMAN$E6(explosion-08)
 $ECAF DEFB $04,$40                     ;
 $ECB1 DEFB $33,$2A                     ;
 $ECB3 DEFB $0F,$D0                     ;
 $ECB5 DEFB $55,$7A                     ;
 $ECB7 DEFB $2C,$94                     ;
 $ECB9 DEFB $D4,$39                     ;
 $ECBB DEFB $22,$36                     ;
 $ECBD DEFB $B0,$09                     ;
 $ECBF DEFB $5C,$7E                     ;
 $ECC1 DEFB $AA,$21                     ;
 $ECC3 DEFB $1B,$BA                     ;
 $ECC5 DEFB $2D,$50                     ;
 $ECC7 DEFB $22,$4C                     ;
 $ECC9 DEFB $09,$50                     ;
 $ECCB DEFB $02,$60                     ; }
; Frame 9.
 $ECCD DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $ECCE DEFB $01,$40                     ; {#JETMAN$E7(explosion-09)
 $ECD0 DEFB $05,$34                     ;
 $ECD2 DEFB $2A,$C8                     ;
 $ECD4 DEFB $1D,$B6                     ;
 $ECD6 DEFB $58,$B8                     ;
 $ECD8 DEFB $24,$05                     ;
 $ECDA DEFB $90,$0E                     ;
 $ECDC DEFB $58,$19                     ;
 $ECDE DEFB $B0,$0D                     ;
 $ECE0 DEFB $40,$1A                     ;
 $ECE2 DEFB $B8,$09                     ;
 $ECE4 DEFB $10,$3C                     ;
 $ECE6 DEFB $2E,$3A                     ;
 $ECE8 DEFB $52,$E8                     ;
 $ECEA DEFB $1F,$B0                     ;
 $ECEC DEFB $02,$80                     ; }
; Frame 10.
 $ECEE DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $ECEF DEFB $09,$10                     ; {#JETMAN$E8(explosion-0a)
 $ECF1 DEFB $15,$00                     ;
 $ECF3 DEFB $49,$8C                     ;
 $ECF5 DEFB $03,$31                     ;
 $ECF7 DEFB $60,$44                     ;
 $ECF9 DEFB $80,$05                     ;
 $ECFB DEFB $50,$06                     ;
 $ECFD DEFB $58,$02                     ;
 $ECFF DEFB $40,$04                     ;
 $ED01 DEFB $80,$0D                     ;
 $ED03 DEFB $70,$02                     ;
 $ED05 DEFB $A0,$01                     ;
 $ED07 DEFB $60,$06                     ;
 $ED09 DEFB $01,$1A                     ;
 $ED0B DEFB $77,$8C                     ;
 $ED0D DEFB $0A,$78                     ; }
; Frame 11.
 $ED0F DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $ED10 DEFB $00,$00                     ; {#JETMAN$E9(explosion-0b)
 $ED12 DEFB $00,$80                     ;
 $ED14 DEFB $00,$00                     ;
 $ED16 DEFB $01,$40                     ;
 $ED18 DEFB $04,$90                     ;
 $ED1A DEFB $00,$00                     ;
 $ED1C DEFB $10,$84                     ;
 $ED1E DEFB $00,$80                     ;
 $ED20 DEFB $4B,$ED                     ;
 $ED22 DEFB $10,$80                     ;
 $ED24 DEFB $00,$84                     ;
 $ED26 DEFB $08,$00                     ;
 $ED28 DEFB $00,$10                     ;
 $ED2A DEFB $02,$80                     ;
 $ED2C DEFB $00,$00                     ;
 $ED2E DEFB $00,$80                     ; }
; Frame 12.
 $ED30 DEFB $10                         ; Height = #N(#PEEK(#PC)) pixels.
 $ED31 DEFB $00,$00                     ; {#JETMAN$EA(explosion-0c)
 $ED33 DEFB $00,$80                     ;
 $ED35 DEFB $00,$00                     ;
 $ED37 DEFB $02,$C0                     ;
 $ED39 DEFB $00,$90                     ;
 $ED3B DEFB $08,$80                     ;
 $ED3D DEFB $00,$84                     ;
 $ED3F DEFB $10,$80                     ;
 $ED41 DEFB $5F,$FD                     ;
 $ED43 DEFB $00,$84                     ;
 $ED45 DEFB $10,$80                     ;
 $ED47 DEFB $00,$88                     ;
 $ED49 DEFB $04,$80                     ;
 $ED4B DEFB $01,$A0                     ;
 $ED4D DEFB $00,$00                     ;
 $ED4F DEFB $00,$80                     ; }

; Sprite: Bouncing Wheel
;
; .
;
; .
;
; Frame 1.
b$ED51 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $ED52 DEFB $07,$E0  ; {#JETMAN$A7(bouncing-wheel-01*)
 $ED54 DEFB $1F,$F8  ;
 $ED56 DEFB $37,$EC  ;
 $ED58 DEFB $6D,$B6  ;
 $ED5A DEFB $59,$9A  ;
 $ED5C DEFB $F1,$8F  ;
 $ED5E DEFB $E1,$87  ;
 $ED60 DEFB $FF,$FF  ;
 $ED62 DEFB $FF,$FF  ;
 $ED64 DEFB $E1,$87  ;
 $ED66 DEFB $F1,$8F  ;
 $ED68 DEFB $59,$9A  ;
 $ED6A DEFB $6D,$B6  ;
 $ED6C DEFB $37,$EC  ;
 $ED6E DEFB $1F,$F8  ;
 $ED70 DEFB $07,$E0  ; }
; Frame 2.
 $ED72 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $ED73 DEFB $07,$E0  ; {#JETMAN$A8(bouncing-wheel-02*)
 $ED75 DEFB $1B,$F8  ;
 $ED77 DEFB $37,$FC  ;
 $ED79 DEFB $6C,$F6  ;
 $ED7B DEFB $78,$DA  ;
 $ED7D DEFB $F0,$CD  ;
 $ED7F DEFB $FD,$87  ;
 $ED81 DEFB $FF,$C7  ;
 $ED83 DEFB $E3,$FF  ;
 $ED85 DEFB $E1,$BF  ;
 $ED87 DEFB $B3,$0F  ;
 $ED89 DEFB $5B,$1E  ;
 $ED8B DEFB $6F,$36  ;
 $ED8D DEFB $3F,$EC  ;
 $ED8F DEFB $1F,$D8  ;
 $ED91 DEFB $07,$E0  ; }
; Frame 3.
 $ED93 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $ED94 DEFB $07,$E0  ; {#JETMAN$A9(bouncing-wheel-03*)
 $ED96 DEFB $18,$F8  ;
 $ED98 DEFB $37,$FC  ;
 $ED9A DEFB $7C,$7E  ;
 $ED9C DEFB $78,$7A  ;
 $ED9E DEFB $F8,$CD  ;
 $EDA0 DEFB $FE,$C5  ;
 $EDA2 DEFB $E7,$85  ;
 $EDA4 DEFB $A1,$E7  ;
 $EDA6 DEFB $A3,$7F  ;
 $EDA8 DEFB $B3,$1F  ;
 $EDAA DEFB $5E,$1E  ;
 $EDAC DEFB $7E,$3E  ;
 $EDAE DEFB $3F,$EC  ;
 $EDB0 DEFB $1F,$18  ;
 $EDB2 DEFB $07,$E0  ; }
; Frame 4.
 $EDB4 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EDB5 DEFB $07,$E0  ; {#JETMAN$AA(bouncing-wheel-04*)
 $EDB7 DEFB $1C,$38  ;
 $EDB9 DEFB $3F,$FC  ;
 $EDBB DEFB $7C,$3E  ;
 $EDBD DEFB $7C,$3E  ;
 $EDBF DEFB $FE,$7F  ;
 $EDC1 DEFB $A7,$E5  ;
 $EDC3 DEFB $A3,$C5  ;
 $EDC5 DEFB $A3,$C5  ;
 $EDC7 DEFB $A7,$E5  ;
 $EDC9 DEFB $FE,$7F  ;
 $EDCB DEFB $7C,$3E  ;
 $EDCD DEFB $7C,$3E  ;
 $EDCF DEFB $3F,$FC  ;
 $EDD1 DEFB $1C,$38  ;
 $EDD3 DEFB $07,$E0  ; }
; Frame 5.
 $EDD5 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EDD6 DEFB $07,$E0  ; {#JETMAN$AB(bouncing-wheel-05*)
 $EDD8 DEFB $1F,$18  ;
 $EDDA DEFB $3F,$EC  ;
 $EDDC DEFB $7E,$3E  ;
 $EDDE DEFB $5E,$1E  ;
 $EDE0 DEFB $B3,$1F  ;
 $EDE2 DEFB $A3,$7F  ;
 $EDE4 DEFB $A1,$E7  ;
 $EDE6 DEFB $E7,$85  ;
 $EDE8 DEFB $FE,$C5  ;
 $EDEA DEFB $F8,$CD  ;
 $EDEC DEFB $E8,$7A  ;
 $EDEE DEFB $7C,$7E  ;
 $EDF0 DEFB $3E,$FC  ;
 $EDF2 DEFB $18,$F8  ;
 $EDF4 DEFB $07,$E0  ; }
; Frame 6.
 $EDF6 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EDF7 DEFB $07,$E0  ; {#JETMAN$AC(bouncing-wheel-06*)
 $EDF9 DEFB $1F,$D8  ;
 $EDFB DEFB $3F,$EC  ;
 $EDFD DEFB $6F,$36  ;
 $EDFF DEFB $5B,$1E  ;
 $EE01 DEFB $B3,$0F  ;
 $EE03 DEFB $E1,$BF  ;
 $EE05 DEFB $E3,$FF  ;
 $EE07 DEFB $FF,$C7  ;
 $EE09 DEFB $FD,$87  ;
 $EE0B DEFB $F0,$CD  ;
 $EE0D DEFB $78,$DA  ;
 $EE0F DEFB $6C,$F6  ;
 $EE11 DEFB $37,$FC  ;
 $EE13 DEFB $1B,$F8  ;
 $EE15 DEFB $07,$E0  ; }
; #UDGTABLE(default)
; {
; #UDGARRAY*bouncing-wheel-01,5;bouncing-wheel-02;bouncing-wheel-03;bouncing-wheel-04;bouncing-wheel-05;bouncing-wheel-06(bouncing-wheel)
; }
; UDGTABLE#

; Sprite: Bomb
;
; .
;
; .
;
; Frame 1.
b$EE17 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EE18 DEFB $07,$E0  ; {#JETMAN$EB(bomb-01*)
 $EE1A DEFB $19,$F8  ;
 $EE1C DEFB $23,$FC  ;
 $EE1E DEFB $27,$FC  ;
 $EE20 DEFB $46,$1E  ;
 $EE22 DEFB $4E,$6E  ;
 $EE24 DEFB $4E,$6E  ;
 $EE26 DEFB $4E,$1E  ;
 $EE28 DEFB $4E,$6E  ;
 $EE2A DEFB $46,$6E  ;
 $EE2C DEFB $26,$1C  ;
 $EE2E DEFB $23,$FC  ;
 $EE30 DEFB $19,$F8  ;
 $EE32 DEFB $06,$E0  ;
 $EE34 DEFB $01,$80  ;
 $EE36 DEFB $00,$D8  ; }
; Frame 2.
 $EE38 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EE39 DEFB $07,$E0  ; {#JETMAN$EC(bomb-02*)
 $EE3B DEFB $19,$F8  ;
 $EE3D DEFB $23,$FC  ;
 $EE3F DEFB $27,$FC  ;
 $EE41 DEFB $46,$1E  ;
 $EE43 DEFB $4E,$6E  ;
 $EE45 DEFB $4E,$6E  ;
 $EE47 DEFB $4E,$1E  ;
 $EE49 DEFB $4E,$6E  ;
 $EE4B DEFB $46,$6E  ;
 $EE4D DEFB $26,$1C  ;
 $EE4F DEFB $23,$FC  ;
 $EE51 DEFB $19,$F8  ;
 $EE53 DEFB $06,$E0  ;
 $EE55 DEFB $01,$80  ;
 $EE57 DEFB $01,$80  ; }
; Frame 3.
 $EE59 DEFB $10      ; Height = #N(#PEEK(#PC)) pixels.
 $EE5A DEFB $07,$E0  ; {#JETMAN$ED(bomb-03*)
 $EE5C DEFB $19,$F8  ;
 $EE5E DEFB $23,$FC  ;
 $EE60 DEFB $27,$FC  ;
 $EE62 DEFB $46,$1E  ;
 $EE64 DEFB $4E,$6E  ;
 $EE66 DEFB $4E,$6E  ;
 $EE68 DEFB $4E,$1E  ;
 $EE6A DEFB $4E,$6E  ;
 $EE6C DEFB $46,$6E  ;
 $EE6E DEFB $26,$1C  ;
 $EE70 DEFB $23,$FC  ;
 $EE72 DEFB $19,$F8  ;
 $EE74 DEFB $06,$E0  ;
 $EE76 DEFB $01,$80  ;
 $EE78 DEFB $1B,$00  ; }
; #UDGTABLE(default)
; { #UDGARRAY*bomb-01,25;bomb-02;bomb-03;bomb-02(bomb) }
; UDGTABLE#

; Data block at EE7A
b$EE7A DEFB $BA,$EE,$D7,$EE,$F4,$EE,$11,$EF
 $EE82 DEFB $2E,$EF,$4B,$EF,$68,$EF,$85,$EF
 $EE8A DEFB $6A,$F1,$83,$F1,$9C,$F1,$B5,$F1
 $EE92 DEFB $CE,$F1,$E7,$F1,$00,$F2,$19,$F2
 $EE9A DEFB $A2,$EF,$C3,$EF,$E4,$EF,$05,$F0
 $EEA2 DEFB $26,$F0,$68,$F0,$68,$F0,$89,$F0
 $EEAA DEFB $AA,$F0,$C7,$F0,$E6,$F0,$07,$F1
 $EEB2 DEFB $2A,$F1,$4B,$F1,$BC,$BC,$BC,$BC
 $EEBA DEFB $0E,$F0,$00,$B3,$C0,$B2,$CF,$B2
 $EEC2 DEFB $CB,$B2,$CB,$00,$00,$FF,$FF,$7F
 $EECA DEFB $FE,$00,$00,$33,$FC,$0B,$F0,$02
 $EED2 DEFB $40,$04,$20,$08,$10,$0E,$00,$00
 $EEDA DEFB $F0,$00,$B3,$C0,$B2,$CF,$B2,$CB
 $EEE2 DEFB $00,$00,$FF,$FF,$7F,$FE,$00,$00
 $EEEA DEFB $33,$FC,$0B,$F0,$02,$40,$04,$20
 $EEF2 DEFB $04,$20,$0E,$00,$00,$00,$00,$F0
 $EEFA DEFB $00,$B3,$C0,$B2,$CF,$00,$00,$FF
 $EF02 DEFB $FF,$7F,$FE,$00,$00,$33,$FC,$0B
 $EF0A DEFB $F0,$01,$80,$02,$40,$02,$40,$0E
 $EF12 DEFB $00,$00,$00,$00,$00,$00,$F0,$0F
 $EF1A DEFB $B3,$CB,$00,$00,$FF,$FF,$7F,$FE
 $EF22 DEFB $00,$00,$33,$FC,$0B,$F0,$01,$00
 $EF2A DEFB $01,$00,$01,$00,$0E,$00,$00,$00
 $EF32 DEFB $00,$00,$0F,$0B,$CB,$F2,$3B,$00
 $EF3A DEFB $00,$FF,$FF,$7F,$FE,$00,$00,$33
 $EF42 DEFB $FC,$0B,$F0,$00,$80,$00,$80,$00
 $EF4A DEFB $80,$0E,$00,$00,$00,$0F,$03,$CB
 $EF52 DEFB $F2,$CB,$B2,$CB,$00,$00,$FF,$FF
 $EF5A DEFB $7F,$FE,$00,$00,$33,$FC,$0B,$F0
 $EF62 DEFB $01,$80,$02,$40,$02,$40,$0E,$00
 $EF6A DEFB $0F,$03,$CB,$F2,$CB,$B2,$CB,$B2
 $EF72 DEFB $CB,$00,$00,$FF,$FF,$7F,$FE,$00
 $EF7A DEFB $00,$33,$FC,$0B,$F0,$02,$40,$04
 $EF82 DEFB $20,$04,$20,$0E,$03,$C0,$F2,$CF
 $EF8A DEFB $B2,$CB,$B2,$CB,$B2,$CB,$00,$00
 $EF92 DEFB $FF,$FF,$7F,$FE,$00,$00,$33,$FC
 $EF9A DEFB $0B,$F0,$02,$40,$04,$20,$08,$10
 $EFA2 DEFB $10,$01,$80,$01,$80,$01,$80,$00
 $EFAA DEFB $00,$03,$C0,$07,$E0,$0F,$F0,$EE
 $EFB2 DEFB $77,$EE,$77,$0F,$F0,$07,$E0,$03
 $EFBA DEFB $C0,$00,$00,$01,$80,$01,$80,$01
 $EFC2 DEFB $80,$10,$00,$00,$01,$80,$01,$80
 $EFCA DEFB $00,$00,$0B,$D0,$07,$E0,$0E,$70
 $EFD2 DEFB $6D,$B6,$6D,$B6,$0E,$70,$07,$E0
 $EFDA DEFB $0B,$D0,$00,$00,$01,$80,$01,$80
 $EFE2 DEFB $00,$00,$10,$00,$00,$00,$00,$01
 $EFEA DEFB $80,$18,$18,$1B,$D8,$06,$60,$0F
 $EFF2 DEFB $F0,$2B,$D4,$2B,$D4,$0F,$F0,$06
 $EFFA DEFB $60,$1B,$D8,$18,$18,$01,$80,$00
 $F002 DEFB $00,$00,$00,$10,$00,$00,$00,$00
 $F00A DEFB $30,$0C,$38,$1C,$1A,$58,$07,$E0
 $F012 DEFB $0F,$F0,$07,$E0,$07,$E0,$0F,$F0
 $F01A DEFB $07,$E0,$1A,$58,$38,$1C,$30,$0C
 $F022 DEFB $00,$00,$00,$00,$10,$00,$00,$60
 $F02A DEFB $06,$70,$0E,$38,$1C,$1B,$D8,$07
 $F032 DEFB $E0,$0F,$F0,$0E,$70,$0E,$70,$0F
 $F03A DEFB $F0,$07,$E0,$1B,$D8,$38,$1C,$70
 $F042 DEFB $0E,$60,$06,$00,$00,$10,$00,$00
 $F04A DEFB $00,$00,$30,$0C,$38,$1C,$1B,$D8
 $F052 DEFB $07,$E0,$0E,$70,$0D,$B0,$0D,$B0
 $F05A DEFB $0E,$70,$07,$E0,$1B,$D8,$38,$1C
 $F062 DEFB $30,$0C,$00,$00,$00,$00,$10,$00
 $F06A DEFB $00,$00,$00,$01,$80,$18,$18,$1B
 $F072 DEFB $D8,$06,$60,$0F,$F0,$2B,$D4,$2B
 $F07A DEFB $D4,$0F,$F0,$06,$60,$1B,$D8,$18
 $F082 DEFB $18,$01,$80,$00,$00,$00,$00,$10
 $F08A DEFB $00,$00,$01,$80,$01,$80,$00,$00
 $F092 DEFB $0A,$50,$07,$E0,$0F,$F0,$67,$E6
 $F09A DEFB $67,$E6,$0F,$F0,$07,$E0,$0A,$50
 $F0A2 DEFB $00,$00,$01,$80,$01,$80,$00,$00
 $F0AA DEFB $0E,$00,$00,$00,$00,$00,$00,$20
 $F0B2 DEFB $80,$00,$08,$02,$1C,$07,$3E,$0F
 $F0BA DEFB $9C,$07,$08,$02,$00,$00,$00,$00
 $F0C2 DEFB $20,$00,$70,$10,$20,$0F,$00,$00
 $F0CA DEFB $00,$00,$20,$80,$78,$C8,$20,$9C
 $F0D2 DEFB $00,$3E,$04,$7F,$0E,$3E,$04,$1C
 $F0DA DEFB $00,$08,$00,$00,$00,$00,$10,$20
 $F0E2 DEFB $38,$00,$10,$00,$10,$00,$00,$00
 $F0EA DEFB $80,$21,$C0,$73,$E0,$21,$C8,$00
 $F0F2 DEFB $9C,$00,$3E,$02,$1C,$00,$08,$00
 $F0FA DEFB $00,$00,$00,$08,$20,$1C,$70,$3E
 $F102 DEFB $20,$1C,$00,$08,$00,$11,$00,$80
 $F10A DEFB $01,$C0,$03,$E0,$27,$F0,$03,$E0
 $F112 DEFB $01,$C8,$02,$9C,$07,$08,$02,$00
 $F11A DEFB $00,$00,$10,$20,$38,$70,$7C,$F8
 $F122 DEFB $FE,$70,$7C,$20,$38,$00,$10,$00
 $F12A DEFB $10,$00,$00,$00,$80,$01,$C0,$23
 $F132 DEFB $E0,$01,$C0,$02,$80,$07,$08,$0F
 $F13A DEFB $80,$07,$00,$02,$20,$00,$70,$10
 $F142 DEFB $F8,$39,$FC,$7C,$F8,$38,$70,$10
 $F14A DEFB $20,$0F,$00,$00,$00,$00,$00,$80
 $F152 DEFB $01,$C0,$02,$80,$07,$08,$0F,$9C
 $F15A DEFB $1F,$C8,$0F,$80,$07,$00,$02,$20
 $F162 DEFB $00,$70,$10,$F8,$38,$70,$10,$20
 $F16A DEFB $0C,$04,$40,$08,$20,$0C,$60,$0C
 $F172 DEFB $60,$0F,$E0,$13,$90,$25,$28,$2D
 $F17A DEFB $68,$13,$90,$0F,$E0,$3E,$F8,$F8
 $F182 DEFB $3E,$0C,$02,$80,$04,$40,$0C,$60
 $F18A DEFB $0C,$60,$0F,$E0,$13,$90,$25,$28
 $F192 DEFB $2D,$68,$13,$90,$FF,$FE,$7E,$FC
 $F19A DEFB $00,$00,$0C,$02,$80,$04,$40,$0C
 $F1A2 DEFB $60,$0C,$60,$0F,$E0,$13,$90,$25
 $F1AA DEFB $28,$ED,$6E,$E3,$9C,$3E,$F8,$00
 $F1B2 DEFB $00,$00,$00,$0C,$01,$00,$02,$80
 $F1BA DEFB $06,$C0,$06,$C0,$8F,$E2,$D3,$96
 $F1C2 DEFB $65,$2C,$2D,$68,$13,$90,$0C,$60
 $F1CA DEFB $00,$00,$00,$00,$0C,$01,$00,$02
 $F1D2 DEFB $80,$86,$C2,$C6,$C6,$6F,$EC,$7E
 $F1DA DEFB $9C,$29,$28,$2D,$68,$23,$90,$0C
 $F1E2 DEFB $60,$00,$00,$00,$00,$0C,$01,$00
 $F1EA DEFB $02,$80,$06,$C0,$06,$C0,$8F,$E2
 $F1F2 DEFB $D3,$96,$69,$4C,$2D,$68,$13,$90
 $F1FA DEFB $0C,$60,$00,$00,$00,$00,$0C,$02
 $F202 DEFB $80,$04,$40,$0C,$60,$0C,$60,$0F
 $F20A DEFB $E0,$13,$90,$29,$48,$ED,$6E,$E3
 $F212 DEFB $9C,$3E,$F8,$00,$00,$00,$00,$0C
 $F21A DEFB $02,$80,$04,$40,$0C,$60,$0C,$60
 $F222 DEFB $0F,$E0,$13,$90,$29,$28,$2D,$68
 $F22A DEFB $13,$90,$FF,$FE,$7E,$FC,$00,$00

; New High Score Suffix
;
; Used by the routine at #R$F4C6.
@label=NewHighScore_Suffix
c$F232 LD A,($5E77)  ; {If #R$5E77 is zero, jump to #R$F26B.
 $F235 AND A         ;
 $F236 JP Z,$F26B    ; }
; #N$00 is the "Top Score" so we +#N$01 to make it human readable.
 $F239 ADD A,$31     ; #REGa=#REGa+#N$31 (convert to ASCII + #N$01).
 $F23B LD HL,$5007   ; #REGhl=#N$5007 (screen buffer location).
 $F23E PUSH AF       ; Stash the ASCII highscore position on the stack.
 $F23F CALL $89EF    ; Call #R$89EF.
 $F242 POP AF        ; #REGa=the ASCII highscore position from the stack.
 $F243 SUB $31       ; #REGa=#REGa-#N$31.
 $F245 LD HL,$8048   ; #REGhl=#N$8048 (screen location).
; Remember that #N$00 is the "Top Score" so #N$01 is 2nd place.
 $F248 CP $01        ; {If the highscore position is #N$01 jump to #R$F261.
 $F24A JP Z,$F261    ; }
; And #N$02 is 3rd...
 $F24D CP $02        ; {If the highscore position is #N$02 jump to #R$F266.
 $F24F JP Z,$F266    ; }
; Anything higher will use the "TH" suffix messaging.
@label=NewHighScore_Suffix_TH
 $F252 LD DE,$F274   ; #REGde=#R$F274.
@label=NewHighScore_Suffix_Print
*$F255 CALL $8A11    ; Call #R$8A11.
; Handle displaying "HIGHEST SCORE" messaging.
@label=NewHighScore_Suffix_Highest
 $F258 LD HL,$8060   ; #REGhl=#N$8060 (screen location).
 $F25B LD DE,$F287   ; #REGde=#R$F287.
 $F25E JP $8A11      ; Jump to #R$8A11.
; Handle displaying the "ND" suffix messaging.
@label=NewHighScore_Suffix_ND
*$F261 LD DE,$F281   ; #REGde=#R$F281.
 $F264 JR $F255      ; Jump to #R$F255.
; Handle displaying the "RD" suffix messaging.
@label=NewHighScore_Suffix_RD
*$F266 LD DE,$F284   ; #REGde=#R$F284.
 $F269 JR $F255      ; Jump to #R$F255.
; Handle displaying "TOP SCORE" messaging.
@label=NewHighScore_Suffix_Top_Score
*$F26B LD HL,$8058   ; #REGhl=#N$8058 (screen location).
 $F26E LD DE,$F277   ; #REGde=#R$F277.
 $F271 JP $8A11      ; Jump to #R$8A11.

; Messaging: High Score Suffixes
;
; .
;
; .
;
; #FONT:(TH)addr=$D347,attr=$46(th)
@label=HighScore_Suffixes_TH
t$F274 DEFM $46                    ; {Attribute: #N(#PEEK(#PC)) + "TH".
 $F275 DEFM "T","H"+$80            ; }
; #FONT:(TOP SCORE)addr=$D347,attr=$46(top-score)
@label=HighScore_Top_Score
 $F277 DEFM $46                    ; {Attribute: #N(#PEEK(#PC)) + "TOP SCORE".
 $F278 DEFM "TOP SCOR","E"+$80     ; }
; #FONT:(ND)addr=$D347,attr=$46(nd)
@label=HighScore_Suffixes_ND
 $F281 DEFM $46                    ; {Attribute: #N(#PEEK(#PC)) + "ND".
 $F282 DEFM "N","D"+$80            ; }
; #FONT:(RD)addr=$D347,attr=$46(rd)
@label=HighScore_Suffixes_RD
 $F284 DEFM $46                    ; {Attribute: #N(#PEEK(#PC)) + "RD".
 $F285 DEFM "R","D"+$80            ; }
; #FONT:(HIGHEST SCORE)addr=$D347,attr=$46(highest-score)
@label=HighScore_Highest_Score
 $F287 DEFM $46                    ; {Attribute: #N(#PEEK(#PC)) + "HIGHEST
 $F288 DEFM "HIGHEST SCOR","E"+$80 ; SCORE".}

; Routine at F295
;
; Used by the routines at #R$F56E and #R$F5E3.
c$F295 LD HL,($5E6D) ;
 $F298 DEC HL        ;
 $F299 LD ($5E6D),HL ;
 $F29C LD A,L        ;
 $F29D OR H          ;
 $F29E JP Z,$F345    ;
 $F2A1 CALL $8F90    ;
 $F2A4 BIT 4,A       ;
 $F2A6 JP Z,$F2D6    ;
 $F2A9 LD A,($5E6D)  ;
 $F2AC AND $0F       ;
 $F2AE JP NZ,$F2C2   ;
 $F2B1 XOR A         ;
 $F2B2 LD ($5E70),A  ;
 $F2B5 CALL $8F90    ;
 $F2B8 BIT 0,A       ;
 $F2BA JP Z,$F2FE    ;
 $F2BD BIT 1,A       ;
 $F2BF JP Z,$F31C    ;
*$F2C2 LD A,($5E6F)  ;
 $F2C5 LD HL,$5E78   ;
 $F2C8 LD C,A        ;
 $F2C9 LD B,$00      ;
 $F2CB ADD HL,BC     ;
 $F2CC LD A,(HL)     ;
 $F2CD LD HL,($5E75) ;
 $F2D0 CALL $89EF    ;
 $F2D3 JP $F5E3      ;
*$F2D6 LD A,($5E70)  ;
 $F2D9 AND A         ;
 $F2DA JP NZ,$F2C2   ;
 $F2DD CALL $B8C3    ;
 $F2E0 LD A,$01      ;
 $F2E2 LD ($5E70),A  ;
 $F2E5 LD A,($5E6F)  ;
 $F2E8 INC A         ;
 $F2E9 CP $03        ;
 $F2EB JP Z,$F345    ;
 $F2EE LD ($5E6F),A  ;
 $F2F1 LD HL,($5E75) ;
 $F2F4 LD A,$40      ;
 $F2F6 INC L         ;
 $F2F7 INC L         ;
 $F2F8 LD ($5E75),HL ;
 $F2FB JP $F2C2      ;
*$F2FE CALL $B8BD    ;
 $F301 LD A,($5E6F)  ;
 $F304 LD C,A        ;
 $F305 LD B,$00      ;
 $F307 LD HL,$5E78   ;
 $F30A ADD HL,BC     ;
 $F30B LD A,(HL)     ;
 $F30C INC A         ;
 $F30D CP $5B        ;
 $F30F JR Z,$F33A    ;
 $F311 CP $21        ;
 $F313 JP NZ,$F318   ;
 $F316 LD A,$41      ;
*$F318 LD (HL),A     ;
 $F319 JP $F2C2      ;
*$F31C CALL $B8BD    ;
 $F31F LD A,($5E6F)  ;
 $F322 LD C,A        ;
 $F323 LD B,$00      ;
 $F325 LD HL,$5E78   ;
 $F328 ADD HL,BC     ;
 $F329 LD A,(HL)     ;
 $F32A DEC A         ;
 $F32B CP $40        ;
 $F32D JR Z,$F33A    ;
 $F32F CP $1F        ;
 $F331 JP NZ,$F336   ;
 $F334 LD A,$5A      ;
*$F336 LD (HL),A     ;
 $F337 JP $F2C2      ;
*$F33A LD A,$20      ;
 $F33C JR $F336      ;

; Routine at F33E
;
; Used by the routines at #R$F345 and #R$F56E.
c$F33E XOR A         ; {Write #N$00 to #R$5E73.
 $F33F LD ($5E73),A  ; }
 $F342 JP $802C      ; Jump to #R$802C.

; Routine at F345
;
; Used by the routine at #R$F295.
c$F345 LD DE,$5E38   ; #REGde=#R$5E38.
 $F348 LD HL,$5E35   ; #REGhl=#R$5E35.
 $F34B LD A,($5E77)  ;
 $F34E NEG           ;
 $F350 ADD A,$08     ;
 $F352 LD B,A        ;
 $F353 SLA A         ;
 $F355 ADD A,B       ;
 $F356 LD C,A        ;
 $F357 LD B,$00      ;
 $F359 LDDR          ;
 $F35B LD HL,$5E78   ; #REGhl=#R$5E78.
 $F35E LD BC,$0003   ; #REGbc=#N($0003,$04,$04).
 $F361 LDIR          ;
 $F363 LD A,($5E71)  ;
 $F366 LD ($5E74),A  ;
 $F369 CP $01        ;
 $F36B JR Z,$F372    ;
 $F36D LD DE,$5E62   ; #REGde=#R$5E62.
 $F370 JR $F375      ; Jump to #R$F375.
*$F372 LD DE,$5E5F   ; #REGde=#R$5E5F.
*$F375 CALL $F3BF    ; Call #R$F3BF.
 $F378 LD A,($5E72)  ;
 $F37B AND A         ;
 $F37C JP Z,$F33E    ;
 $F37F CP $02        ;
 $F381 JP Z,$F39F    ;
 $F384 LD ($5E71),A  ;
 $F387 XOR A         ;
 $F388 LD ($5E72),A  ;
 $F38B LD DE,$5E5F   ; #REGde=#R$5E5F.
 $F38E LD ($5E74),A  ;
 $F391 CALL $F3BF    ;
 $F394 LD A,B        ;
 $F395 AND A         ;
 $F396 JP Z,$F33E    ;
 $F399 CALL $F535    ; Call #R$F535.
 $F39C JP $F5E3      ; Jump to #R$F5E3.
*$F39F LD ($5E71),A  ;
 $F3A2 XOR A         ;
 $F3A3 LD ($5E72),A  ;
 $F3A6 LD DE,$5E62   ; #REGde=#R$5E62.
 $F3A9 LD ($5E74),A  ;
 $F3AC CALL $F3BF    ;
 $F3AF LD A,B        ;
 $F3B0 AND A         ;
 $F3B1 JP Z,$F33E    ;
 $F3B4 LD A,$01      ; {Write #N$01 to #R$5E65.
 $F3B6 LD ($5E65),A  ; }
 $F3B9 CALL $F535    ; Call #R$F535.
 $F3BC JP $F5E3      ; Jump to #R$F5E3.

; Routine at F3BF
;
; Used by the routines at #R$F345 and #R$F56E.
c$F3BF LD B,$08      ;
 $F3C1 PUSH DE       ;
 $F3C2 LD HL,$5E06   ;
*$F3C5 LD C,(HL)     ;
 $F3C6 LD A,(DE)     ;
 $F3C7 CP C          ;
 $F3C8 JP Z,$F3D5    ;
 $F3CB JP NC,$F3F1   ;
 $F3CE INC HL        ;
*$F3CF INC HL        ;
*$F3D0 INC HL        ;
 $F3D1 DJNZ $F3C5    ;
 $F3D3 POP DE        ;
 $F3D4 RET           ;
*$F3D5 INC DE        ;
 $F3D6 INC HL        ;
 $F3D7 LD C,(HL)     ;
 $F3D8 LD A,(DE)     ;
 $F3D9 CP C          ;
 $F3DA JP Z,$F3E3    ;
 $F3DD JP NC,$F3F1   ;
 $F3E0 DEC DE        ;
 $F3E1 JR $F3CF      ;
*$F3E3 INC HL        ;
 $F3E4 INC DE        ;
 $F3E5 LD C,(HL)     ;
 $F3E6 LD A,(DE)     ;
 $F3E7 CP C          ;
 $F3E8 JR Z,$F3EC    ;
 $F3EA JR NC,$F3F1   ;
*$F3EC DEC DE        ;
 $F3ED DEC DE        ;
 $F3EE JP $F3D0      ;
*$F3F1 LD DE,$5E1E   ;
 $F3F4 POP HL        ;
 $F3F5 LD A,($5E74)  ;
 $F3F8 AND A         ;
 $F3F9 RET Z         ;
 $F3FA PUSH BC       ;
 $F3FB PUSH HL       ;
 $F3FC LD HL,$5E1B   ;
 $F3FF LD A,B        ;
 $F400 SLA A         ;
 $F402 ADD A,B       ;
 $F403 LD C,A        ;
 $F404 LD B,$00      ;
 $F406 LDDR          ;
 $F408 POP HL        ;
 $F409 LD BC,$0003   ;
 $F40C LDIR          ;
 $F40E POP BC        ;
 $F40F RET           ; Return.

; Hall Of Fame
;
; Used by the routine at #R$800A.
@label=HallOfFame
c$F410 LD A,$47      ; #REGa=#N$47.
 $F412 LD C,$08      ; #REGc=#N$08.
 $F414 LD HL,$5900   ; #REGhl=#N$5900.
*$F417 LD B,$40      ; #REGb=#N$40.
*$F419 LD (HL),A     ;
 $F41A INC HL        ;
 $F41B DJNZ $F419    ;
 $F41D DEC A         ;
 $F41E CP $41        ;
 $F420 JR NZ,$F424   ;
 $F422 LD A,$44      ; #REGa=#N$44.
*$F424 DEC C         ;
 $F425 JR NZ,$F417   ;
; Handle printing "THE ULTIMATE" messaging.
 $F427 LD HL,$1850   ; #REGhl=#N$1850 (screen location).
 $F42A LD DE,$F4AA   ; #REGde=#R$F4AA.
 $F42D CALL $8A11    ; Call #R$8A11.
; Handle printing "HALL OF FAME" messaging.
 $F430 LD HL,$2850   ; #REGhl=#N$2850 (screen location).
 $F433 LD DE,$F4B8   ; #REGde=#R$F4B8.
 $F436 CALL $8A11    ; Call #R$8A11.
 $F439 LD HL,$4048   ; #REGhl=#N$4048 (screen buffer location).
 $F43C XOR A         ;
 $F43D LD C,$31      ;
 $F43F LD B,$08      ;
@label=
 $F441 PUSH HL       ;
 $F442 CALL $851E    ;
 $F445 LD A,C        ;
 $F446 CALL $89EF    ;
 $F449 POP HL        ;
 $F44A LD A,H        ;
 $F44B ADD A,$10     ;
 $F44D LD H,A        ;
 $F44E INC C         ;
 $F44F DJNZ $F441    ;
 $F451 LD HL,$4060   ; #REGhl=#N$4060 (screen buffer location).
 $F454 LD DE,$5E20   ; #REGde=#R$5E20.
 $F457 LD C,$08      ; #REGc=#N$08.
*$F459 PUSH HL       ;
 $F45A CALL $851E    ;
 $F45D LD B,$03      ; #REGb=#N$03.
*$F45F LD A,(DE)     ;
 $F460 CALL $89EF    ;
 $F463 INC DE        ;
 $F464 DJNZ $F45F    ;
 $F466 POP HL        ;
 $F467 LD A,H        ;
 $F468 ADD A,$10     ;
 $F46A LD H,A        ;
 $F46B DEC C         ;
 $F46C JR NZ,$F459   ;
 $F46E LD C,$08      ; #REGc=#N$08.
 $F470 LD DE,$5E06   ; #REGde=#R$5E06.
 $F473 LD HL,$4088   ; #REGhl=#N$4088.
*$F476 LD B,$03      ; #REGb=#N$03.
 $F478 PUSH HL       ; Stash #REGhl on the stack.
 $F479 CALL $851E    ; Call #R$851E.
 $F47C CALL $89D7    ; Call #R$89D7.
 $F47F POP HL        ; Restore #REGhl from the stack.
 $F480 LD A,H        ; {#REGh=#REGh+#N$10.
 $F481 ADD A,$10     ;
 $F483 LD H,A        ; }
 $F484 DEC C         ; Decrease #REGc by one.
 $F485 JR NZ,$F476   ; Jump back to #R$F476 until #REGc is zero.
 $F487 LD A,$01      ; {Write #N$01 to #R$5E74.
 $F489 LD ($5E74),A  ; }
 $F48C LD HL,$0400   ; {Write #N$0400 to #R$5E6D.
 $F48F LD ($5E6D),HL ; }
*$F492 EI            ; Enable interrupts.
 $F493 HALT          ;
 $F494 LD HL,($5E6D) ;
 $F497 DEC HL        ;
 $F498 LD ($5E6D),HL ;
 $F49B LD A,$E7      ; {Read from the keyboard;
 $F49D OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $F49F IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$E7 | Q | W | E | R | T | Y | U | I | O | P }
                     ; TABLE#}
 $F4A1 CPL           ; Flip the bits.
 $F4A2 AND %00011111 ; Keep only bits 0-4.
 $F4A4 RET NZ        ;
 $F4A5 LD A,H        ;
 $F4A6 OR L          ;
 $F4A7 JR NZ,$F492   ;
 $F4A9 RET           ; Return.

; Messaging: Hall Of Fame
;
; .
;
; .
;
; #FONT:(THE ULTIMATE)addr=$D347,attr=$45(ultimate)
@label=String_Ultimate
t$F4AA DEFM $45                    ; {Attribute: #N(#PEEK(#PC)) + "THE ULTIMATE
 $F4AB DEFM "THE ULTIMATE"," "+$80 ; ".}
; #FONT:(HALL OF FAME)addr=$D347,attr=$45(hall-of-fame)
@label=String_HallOfFame
 $F4B8 DEFM $45                    ; {Attribute: #N(#PEEK(#PC)) + "HALL OF FAME
 $F4B9 DEFM "HALL OF FAME"," "+$80 ; ".}

; Handler: High Score Messaging
;
; Used by the routine at #R$F535.
;
; .
;
; Handle printing "CONGRATULATIONS PLAYER ..." messaging.
@label=HighScoreMessaging
c$F4C6 LD DE,$F4FB   ; #REGde=#R$F4FB.
 $F4C9 LD HL,$6020   ; #REGhl=#N$6020 (screen location).
 $F4CC CALL $8A11    ; Call #R$8A11.
; Handle printing the player "number".
 $F4CF LD A,($5E71)  ; {#REGa=#R$5E71 + #N$30 (convert to ASCII).
 $F4D2 ADD A,$30     ; }
 $F4D4 LD HL,$489B   ; #REGhl=#N$489B (screen buffer location).
 $F4D7 CALL $89EF    ; Call #R$89EF.
; Handle printing "TODAYS" messaging.
 $F4DA LD DE,$F513   ; #REGde=#R$F513.
 $F4DD LD HL,$7068   ; #REGhl=#N$7068 (screen location).
 $F4E0 CALL $8A11    ; Call #R$8A11.
 $F4E3 CALL $F232    ; Call #R$F232.
; Handle printing "JETMAN WILL REMEMBER YOU" messaging.
 $F4E6 LD DE,$F51B   ; #REGde=#R$F51B.
 $F4E9 LD HL,$9020   ; #REGhl=#N$9020 (screen location).
 $F4EC CALL $8A11    ; Call #R$8A11.
 $F4EF LD HL,$53AD   ; #REGhl=#N$53AD (attribute buffer location).
 $F4F2 LD B,$03      ; #REGb=#N$03 (counter).
@label=HighScoreMessaging_Loop
*$F4F4 LD (HL),$7E   ; Write #N$7E to #REGhl.
 $F4F6 INC L         ; {Increment #REGl by two.
 $F4F7 INC L         ; }
 $F4F8 DJNZ $F4F4    ; Decrease counter by one and loop back to #R$F4F4 until
                     ; counter is zero.
 $F4FA RET           ; Return.

; Messaging: High Score
;
; .
;
; .
;
; #FONT:(CONGRATULATIONS PLAYER X)addr=$D347,attr=$47(congratulations)
@label=String_Congratulations
t$F4FB DEFM $47                                ; {Attribute: #N(#PEEK(#PC)) +
 $F4FC DEFM "CONGRATULATIONS PLAYER"," "+$80   ; "CONGRATULATIONS PLAYER ".}
; #FONT:(TODAYS)addr=$D347,attr=$47(todays)
@label=String_Todays
 $F513 DEFM $47                                ; {Attribute: #N(#PEEK(#PC)) +
 $F514 DEFM "TODAYS"," "+$80                   ; "TODAYS ".}
; #FONT:(JETMAN WILL REMEMBER YOU)addr=$D347,attr=$47(remember)
@label=String_Remember
 $F51B DEFM $47                                ; {Attribute: #N(#PEEK(#PC)) +
 $F51C DEFM "JETMAN WILL REMEMBER YOU"," "+$80 ; "JETMAN WILL REMEMBER YOU ".}

; Routine at F535
;
; Used by the routines at #R$F345 and #R$F56E.
c$F535 LD A,B        ; #REGa=#REGb.
 $F536 SUB $08       ;
 $F538 NEG           ;
 $F53A LD ($5E77),A  ;
 $F53D CALL $84D8    ; Call #R$84D8.
 $F540 LD HL,$5900   ; #REGhl=#N$5900.
 $F543 LD C,$02      ; #REGc=#N$02.
 $F545 LD A,$46      ; #REGa=#N$46.
*$F547 LD B,$00      ; #REGb=#N$00 (counter).
*$F549 LD (HL),A     ; Write #REGa to #REGhl.
 $F54A INC HL        ; Increment #REGhl by one.
 $F54B DJNZ $F549    ; Decrease counter by one and loop back to #R$F549 until
                     ; counter is zero.
 $F54D DEC C         ; Decrease #REGc by one.
 $F54E JR NZ,$F547   ; Jump back to #R$F547 until #REGc is zero.
 $F550 CALL $F4C6    ; Call #R$F4C6.
 $F553 LD HL,$1000   ; {Write #N($1000,$04,$04) to #R$5E6D.
 $F556 LD ($5E6D),HL ; }
 $F559 LD HL,$50AD   ; {Write #N$50AD to #R$5E75.
 $F55C LD ($5E75),HL ; }
 $F55F XOR A         ; {Write #N$00 to #R$5E6F.
 $F560 LD ($5E6F),A  ; }
 $F563 LD HL,$5E78   ; #REGhl=#R$5E78.
 $F566 LD B,$03      ; #REGb=#N$03 (counter).
*$F568 LD (HL),$41   ; Write #N$41 to #REGhl.
 $F56A INC HL        ; Increment #REGhl by one.
 $F56B DJNZ $F568    ; Decrease counter by one and loop back to #R$F568 until
                     ; counter is zero.
 $F56D RET           ; Return.

; Handler: New High Score
;
; Used by the routine at #R$A8E3.
@label=NewHighScore
c$F56E LD DE,$5E5F   ; #REGde=#R$5E5F.
 $F571 LD HL,$5E62   ; #REGhl=#R$5E62.
 $F574 LD A,(DE)     ;
 $F575 CP (HL)       ;
 $F576 JP C,$F5BF    ;
 $F579 JR Z,$F57D    ;
 $F57B JR $F58F      ; Jump to #R$F58F.
*$F57D INC DE        ;
 $F57E LD A,(DE)     ;
 $F57F INC HL        ;
 $F580 CP (HL)       ;
 $F581 JP C,$F5BF    ;
 $F584 JR Z,$F588    ;
 $F586 JR $F58F      ;
*$F588 INC DE        ;
 $F589 INC HL        ;
 $F58A LD A,(DE)     ;
 $F58B CP (HL)       ;
 $F58C JP C,$F5BF    ;
*$F58F LD A,$02      ;
 $F591 LD ($5E72),A  ;
 $F594 LD A,$01      ;
 $F596 LD ($5E71),A  ;
 $F599 LD A,($5E00)  ;
 $F59C BIT 0,A       ;
 $F59E JP NZ,$F5A5   ;
 $F5A1 XOR A         ;
 $F5A2 LD ($5E72),A  ;
*$F5A5 LD DE,$5E5F   ;
 $F5A8 XOR A         ;
 $F5A9 LD ($5E74),A  ;
 $F5AC CALL $F3BF    ;
 $F5AF LD A,B        ;
 $F5B0 AND A         ;
 $F5B1 JP Z,$F33E    ;
 $F5B4 LD A,$01      ;
 $F5B6 LD ($5E73),A  ;
 $F5B9 CALL $F535    ;
 $F5BC JP $F295      ;
*$F5BF LD C,$4A      ;
 $F5C1 LD DE,$5E62   ;
 $F5C4 XOR A         ;
 $F5C5 LD ($5E74),A  ;
 $F5C8 CALL $F3BF    ;
 $F5CB LD A,B        ;
 $F5CC AND A         ;
 $F5CD JP Z,$F33E    ;
 $F5D0 LD A,$02      ;
 $F5D2 LD ($5E71),A  ;
 $F5D5 LD A,$01      ;
 $F5D7 LD ($5E72),A  ;
 $F5DA LD ($5E73),A  ;
 $F5DD CALL $F535    ;
 $F5E0 JP $F295      ;

; Routine at F5E3
;
; Used by the routines at #R$F295 and #R$F345.
c$F5E3 LD B,$00      ; #REGb=#N$00.
*$F5E5 DJNZ $F5E5    ;
 $F5E7 EI            ; Enable interrupts.
 $F5E8 HALT          ;
 $F5E9 JP $F295      ; Jump to #R$F295.

; Routine at F5EC
;
; Used by the routines at #R$84D8 and #R$9F6A.
c$F5EC LD HL,$0848   ; #REGhl=#N$0848.
 $F5EF CALL $F662    ; Call #R$F662.
 $F5F2 LD HL,$08A0   ; #REGhl=#N$08A0.
 $F5F5 CALL $F662    ; Call #R$F662.
 $F5F8 LD A,($5E65)  ; {If #R$5E65 is not zero, jump to #R$F609.
 $F5FB AND A         ;
 $F5FC JR NZ,$F609   ; }
 $F5FE LD HL,$0848   ; #REGhl=#N$0848.
 $F601 CALL $F612    ; Call #R$F612.
 $F604 LD HL,$08A0   ; #REGhl=#N$08A0.
 $F607 JR $F628      ; Jump to #R$F628.
*$F609 LD HL,$0848   ; #REGhl=#N$0848.
 $F60C CALL $F628    ; Call #R$F628.
 $F60F LD HL,$08A0   ; #REGhl=#N$08A0.
*$F612 LD A,$4C      ; #REGa=#N$4C.
 $F614 CALL $F632    ; Call #R$F632.
 $F617 CALL $F641    ; Call #R$F641.
; This entry point is used by the routine at #R$F628.
*$F61A PUSH BC       ; Stash #REGbc on the stack.
 $F61B ADD A,$30     ; #REGa=#REGa+#N$30.
 $F61D CALL $F632    ; Call #R$F632.
 $F620 POP BC        ; Restore #REGbc from the stack.
 $F621 LD A,C        ;
 $F622 ADD A,$30     ; #REGa=#REGa+#N$30.
 $F624 CALL $F632    ; Call #R$F632.
 $F627 RET           ; Return.

; Routine at F628
;
; Used by the routine at #R$F5EC.
c$F628 LD A,$4C      ; #REGa=#N$4C.
 $F62A CALL $F632    ; Call #R$F632.
 $F62D CALL $F658    ; Call #R$F658.
 $F630 JR $F61A      ; Jump to #R$F61A.
*$F632 PUSH HL       ; {Stash #REGhl and #REGaf on the stack.
 $F633 PUSH AF       ; }
 $F634 CALL $851E    ; Call #R$851E.
 $F637 POP AF        ; Restore #REGaf from the stack.
 $F638 CALL $89EF    ; Call #R$89EF.
 $F63B POP HL        ; Restore #REGhl from the stack.
 $F63C LD A,L        ; {#REGl=#REGl+#N$08.
 $F63D ADD A,$08     ;
 $F63F LD L,A        ; }
 $F640 RET           ; Return.

; Routine at F641
;
; Used by the routine at #R$F5EC.
c$F641 LD A,($5EA0)  ; {If #R$5EA0 is not #N$FF, jump to #R$F649.
 $F644 CP $FF        ;
 $F646 JR NZ,$F649   ; }
 $F648 XOR A         ; #REGa=#N$00.
*$F649 CALL $B699    ; Call #R$B699.
 $F64C LD B,A        ; #REGb=#REGa.
 $F64D AND %00001111 ; Keep only bits 0-3.
 $F64F LD C,A        ; #REGc=#REGa.
 $F650 LD A,B        ; #REGa=#REGb.
 $F651 RRA           ;
 $F652 RRA           ;
 $F653 RRA           ;
 $F654 RRA           ;
 $F655 AND %00001111 ; Keep only bits 0-3.
 $F657 RET           ; Return.
; This entry point is used by the routine at #R$F628.
*$F658 LD A,($5EA4)  ; {If #R$5EA4 is not #N$FF, jump to #R$F649.
 $F65B CP $FF        ;
 $F65D JR NZ,$F649   ; }
 $F65F XOR A         ; #REGa=#N$00.
 $F660 JR $F649      ; Jump to #R$F649.

; Routine at F662
;
; Used by the routine at #R$F5EC.
c$F662 CALL $8506    ; Call #R$8506.
 $F665 LD B,$03      ; #REGb=#N$03.
 $F667 LD A,$44      ; {Write #N$44 (attribute byte) to #REGhl.
@label=Write44_Loop
*$F669 LD (HL),A     ; }
 $F66A INC HL        ; Increment #REGhl by one.
 $F66B DJNZ $F669    ; Decrease counter by one and loop back to #R$F669 until
                     ; counter is zero.
 $F66D RET           ; Return.

; Terrain UDGs
@label=TerrainUDGs
b$F66E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$43)
 $F676 DEFB $51,$AA,$FB,$FF,$FF,$FF,$FF,$FF ; #UDG(#PC,attr=$43)
 $F67E DEFB $34,$FE,$FF,$FF,$FF,$FF,$FF,$FF ; #UDG(#PC,attr=$43)
 $F686 DEFB $FF,$FF,$66,$3C,$18,$3C,$66,$FF ; #UDG(#PC,attr=$43)
 $F68E DEFB $14,$BD,$FF,$FF,$FF,$FF,$FF,$FF ; #UDG(#PC,attr=$43)
 $F696 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$43)
 $F69E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$43)
 $F6A6 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG(#PC,attr=$43)
 $F6AE DEFB $00,$00,$80,$C0,$E0,$F8,$FF,$FF ; #UDG(#PC,attr=$43)
 $F6B6 DEFB $00,$00,$01,$03,$07,$1F,$FF,$FF ; #UDG(#PC,attr=$43)
 $F6BE DEFB $00,$00,$00,$00,$00,$C2,$E7,$FF ; #UDG(#PC,attr=$43)
 $F6C6 DEFB $00,$00,$00,$81,$81,$C3,$E7,$FF ; #UDG(#PC,attr=$43)

; Default Terrain Data
@label=TerrainData_Default
b$F6CE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F6D6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F6DE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F6E6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F6EE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F6F6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F6FE DEFB $01,$02,$01,$02,$0B,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F706 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F70E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F716 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F71E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F726 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F72E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F736 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F73E DEFB $01,$02,$01,$02,$04,$02,$01,$0B ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F746 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F74E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F756 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F75E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F766 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F76E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F776 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F77E DEFB $01,$02,$01,$02,$04,$0B,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F786 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F78E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F796 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F79E DEFB $01,$02,$01,$02,$04,$02,$01,$0B ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7A6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7AE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7B6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7BE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7C6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7CE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7D6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7DE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7E6 DEFB $0B,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7EE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F7F6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F7FE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F806 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F80E DEFB $01,$02,$01,$0B,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F816 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F81E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F826 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F82E DEFB $01,$0B,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F836 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F83E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F846 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F84E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F856 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F85E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F866 DEFB $0B,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F86E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F876 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F87E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F886 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F88E DEFB $01,$02,$0B,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F896 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F89E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8A6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8AE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8B6 DEFB $02,$01,$0B,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8BE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8C6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8CE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8D6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8DE DEFB $01,$02,$01,$02,$0B,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8E6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8EE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F8F6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F8FE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F906 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F90E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F916 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F91E DEFB $01,$02,$01,$0B,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F926 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F92E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F936 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F93E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F946 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F94E DEFB $01,$02,$01,$02,$04,$02,$0B,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F956 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F95E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F966 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F96E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F976 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F97E DEFB $01,$02,$01,$02,$04,$02,$01,$0B ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F986 DEFB $02,$0B,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F98E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F996 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F99E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9A6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9AE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9B6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9BE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9C6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9CE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9D6 DEFB $0B,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9DE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9E6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9EE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $F9F6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $F9FE DEFB $01,$02,$0B,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA06 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA0E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA16 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA1E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA26 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA2E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA36 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA3E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA46 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA4E DEFB $01,$02,$01,$02,$04,$02,$01,$0B ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA56 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA5E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA66 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA6E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA76 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA7E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA86 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA8E DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FA96 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FA9E DEFB $01,$02,$01,$02,$04,$02,$0B,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FAA6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FAAE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FAB6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}
 $FABE DEFB $01,$02,$01,$02,$04,$02,$01,$02 ; {#FOR($00,$0F)||n|#UDG($F66E +
 $FAC6 DEFB $02,$01,$04,$02,$04,$02,$01,$04 ; #PEEK(#PC + n) * $08,attr=$43)||}

; Data block at FACE
b$FACE DEFB $00,$00,$00,$00,$00,$01,$00,$00
 $FAD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FADE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAFE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB06 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB16 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB36 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB3E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB46 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB4E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB56 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB76 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB7E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB86 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBCE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBFE DEFB $69,$3D

i$FC00

; Data block at FF44
b$FF44 DEFB $00
 $FF45 DEFB $00
 $FF46 DEFB $00
 $FF47 DEFB $00
 $FF48 DEFB $00
 $FF49 DEFB $00
 $FF4A DEFB $00
 $FF4B DEFB $00
 $FF4C DEFB $00
 $FF4D DEFB $00
 $FF4E DEFB $00
 $FF4F DEFB $00
 $FF50 DEFB $00
 $FF51 DEFB $00
 $FF52 DEFB $00
 $FF53 DEFB $00

; Data block at FF54
w$FF54 DEFW $0000

