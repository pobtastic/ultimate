@org=$4000
@start=$5B80

; Loading screen
;
; #UDGTABLE
; { #SCR2(loading) | Cookie Loading Screen. }
; TABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$0F,$FF,$C0,$00,$00,$00,$00,$00,$3F,$FF,$C0,$00,$00,$00,$00,$01,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels
 $4020 DEFB $00,$00,$00,$00,$00,$3F,$8F,$FF,$FE,$78,$00,$00,$00,$F9,$CF,$FF,$39,$B0,$00,$00,$00,$1F,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$01,$FF,$FD,$C7,$FF,$1F,$DF,$FE,$01,$FF,$FB,$F8,$E7,$3F,$E5,$BF,$FB,$CF,$1C,$6F,$EC,$00,$00,$00,$00 ;
 $4060 DEFB $00,$3F,$FF,$80,$FF,$FF,$FE,$00,$00,$3F,$FF,$FF,$FF,$F7,$FC,$00,$FF,$FB,$FE,$00,$7F,$FC,$FF,$FB,$FF,$FF,$FF,$FF,$00,$3F,$FF,$80 ;
 $4080 DEFB $03,$FF,$FF,$00,$FF,$7F,$FF,$FF,$FF,$FD,$F8,$01,$FF,$F7,$FF,$FF,$FF,$FB,$FF,$FF,$FF,$07,$FF,$FE,$FF,$FF,$FF,$FF,$03,$FF,$FF,$00 ;
 $40A0 DEFB $00,$FF,$FF,$00,$FF,$1F,$FF,$FF,$FF,$EF,$FC,$03,$FF,$F7,$FF,$FF,$FF,$DF,$FF,$03,$FF,$FB,$FF,$FF,$BF,$80,$7F,$FF,$00,$FF,$FF,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$FF,$FF,$7F,$FF,$FF,$FF,$E0,$FF,$FF,$01,$FF,$FF,$E7,$FF,$FF,$80,$0F,$FF,$FF,$FF,$FE,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$F0,$00,$00,$00,$FF,$FF,$E7,$FF,$FF,$80,$07,$FF,$FF,$FF,$FF,$00,$3C,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$01,$FC,$78,$FC,$00,$00,$00,$00,$03,$F8,$E1,$FC,$00,$00,$00,$00,$07,$87,$9E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$03,$7F,$0F,$FF,$1F,$78,$00,$00,$00,$FF,$CF,$FF,$B9,$B0,$00,$00,$00,$1F,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$00,$FF,$FB,$DF,$C3,$FE,$DF,$FE,$01,$FF,$FB,$FC,$E7,$FF,$FE,$BF,$FB,$0F,$1F,$E1,$F6,$00,$00,$00,$00 ;
 $4160 DEFB $00,$FF,$FF,$80,$FF,$FF,$FE,$00,$7F,$C7,$FF,$FF,$FF,$F7,$FC,$00,$FF,$FB,$FE,$00,$FF,$FD,$FF,$FB,$FF,$FF,$FF,$FF,$00,$FF,$FF,$80 ;
 $4180 DEFB $03,$FC,$3F,$00,$FF,$7F,$FF,$FF,$FF,$FD,$F8,$01,$FF,$F7,$FF,$FF,$FF,$F7,$FF,$FF,$FE,$0F,$FF,$FF,$7F,$FF,$FF,$FF,$03,$F8,$3F,$00 ;
 $41A0 DEFB $03,$FF,$FF,$C0,$FF,$0F,$FF,$FF,$FF,$DF,$FE,$07,$FF,$F7,$FF,$FF,$FF,$9F,$FE,$00,$FF,$FD,$FF,$FF,$7F,$C0,$FF,$FF,$03,$FF,$FF,$C0 ;
 $41C0 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$C0,$FF,$FF,$01,$FF,$FF,$E7,$FF,$FF,$80,$0F,$FF,$FF,$FF,$FE,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$F0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$07,$FF,$FF,$FF,$FF,$00,$42,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$07,$3F,$FF,$FF,$00,$00,$00,$00,$0F,$3F,$FF,$8F,$00,$00,$00,$00,$09,$FF,$EF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$0F,$7F,$7F,$FF,$1F,$E8,$00,$00,$00,$CF,$9F,$FF,$F9,$F0,$00,$00,$00,$03,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$7F,$FF,$FE,$00,$3F,$87,$FF,$C3,$F6,$EF,$FE,$01,$FF,$FB,$0F,$E7,$FF,$FE,$BF,$FB,$3F,$FF,$F1,$F6,$00,$00,$00,$00 ;
 $4260 DEFB $00,$FF,$FF,$00,$FF,$FF,$FF,$03,$FF,$FB,$FE,$07,$FF,$F7,$FC,$00,$FF,$FB,$FF,$03,$FF,$F9,$FF,$FB,$FF,$FF,$FF,$FF,$00,$FF,$FF,$00 ;
 $4280 DEFB $03,$F9,$FF,$80,$FF,$7F,$FF,$FF,$FF,$FB,$F8,$01,$FF,$F7,$FF,$FF,$FF,$F7,$FF,$FF,$FF,$0F,$FF,$FF,$7F,$FF,$F0,$06,$03,$F9,$FF,$80 ;
 $42A0 DEFB $00,$00,$00,$00,$FF,$07,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$F7,$FF,$FF,$FF,$1F,$FE,$00,$7F,$FC,$FF,$FF,$7F,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$C0,$FF,$FF,$01,$FF,$FF,$E7,$FF,$FF,$80,$07,$FF,$FF,$FF,$FC,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$F0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$03,$FF,$FF,$FF,$FF,$00,$99,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$0E,$F3,$C7,$E7,$C0,$00,$00,$00,$1C,$FF,$87,$F7,$80,$00,$00,$00,$09,$98,$FB,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$1F,$7F,$FF,$FF,$FC,$EC,$3F,$FF,$C0,$CF,$FF,$FF,$FF,$37,$FF,$00,$FF,$FC,$FF,$FF,$07,$FF,$FC,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$7F,$9F,$FF,$F2,$EF,$FC,$00,$FF,$FB,$0F,$E7,$FF,$FF,$BF,$FB,$FF,$FF,$FF,$9E,$00,$00,$00,$00 ;
 $4360 DEFB $00,$C0,$03,$00,$FF,$FF,$FF,$03,$FF,$FD,$FC,$03,$FF,$F7,$FE,$01,$FF,$FB,$FF,$8F,$FF,$F9,$FF,$FB,$FF,$C0,$3F,$FF,$00,$C0,$03,$00 ;
 $4380 DEFB $03,$F8,$7F,$80,$FF,$7F,$FF,$FF,$FF,$FB,$F8,$01,$FF,$F7,$FF,$FF,$FF,$F7,$FF,$FF,$FF,$DF,$FF,$FF,$BF,$FF,$CF,$F8,$03,$F8,$7F,$80 ;
 $43A0 DEFB $00,$00,$00,$00,$FF,$01,$FF,$FF,$FC,$FF,$FF,$FF,$FF,$F3,$FF,$FF,$FC,$7F,$FF,$81,$FF,$FF,$7F,$FE,$FF,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$3F,$FF,$FF,$FF,$80,$FF,$FF,$01,$FF,$FF,$E7,$FF,$FF,$80,$07,$FF,$FF,$FF,$FC,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$E0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$03,$FF,$FF,$FF,$FE,$00,$A1,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$1B,$9F,$C6,$61,$E0,$00,$00,$00,$3F,$C7,$86,$3D,$C0,$00,$00,$00,$1B,$18,$FD,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$3F,$7F,$FF,$FF,$FE,$6D,$E3,$8C,$FC,$CF,$FF,$FF,$FF,$3A,$33,$C3,$F1,$B7,$7F,$FE,$7E,$3E,$3F,$C0,$00,$00,$00,$00 ;
 $4440 DEFB $00,$FF,$FF,$F0,$FF,$FF,$FE,$00,$00,$7F,$1F,$FF,$F3,$EF,$FC,$00,$FF,$FB,$FF,$E7,$FF,$FF,$BF,$FB,$FF,$FF,$FF,$9E,$00,$FF,$FF,$F0 ;
 $4460 DEFB $01,$00,$00,$00,$FF,$FF,$FF,$87,$FF,$FD,$FC,$03,$FF,$F7,$FE,$01,$FF,$FB,$FF,$FF,$FF,$F1,$FF,$FB,$FF,$80,$3F,$FF,$01,$00,$00,$00 ;
 $4480 DEFB $01,$F9,$FF,$C0,$FF,$3F,$FF,$FF,$FF,$FB,$F8,$01,$FF,$F7,$FF,$FF,$FF,$F7,$FF,$FF,$FF,$EF,$FF,$FF,$BF,$FF,$BF,$FE,$01,$F9,$FF,$C0 ;
 $44A0 DEFB $00,$00,$00,$00,$7F,$00,$0F,$FF,$C0,$FF,$FF,$FF,$FF,$F0,$3F,$FF,$C0,$FF,$FF,$C3,$FF,$FF,$7F,$F9,$FF,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$1F,$FF,$FF,$FF,$FF,$1F,$FF,$FF,$FF,$80,$FF,$FF,$00,$FF,$FF,$E7,$FF,$FF,$80,$03,$FF,$FF,$FF,$F8,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$E0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$01,$FF,$FF,$FF,$FC,$00,$A1,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$16,$18,$7E,$19,$B0,$00,$00,$00,$37,$C7,$FE,$1C,$C0,$00,$00,$00,$1F,$7F,$CD,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$3F,$7F,$FF,$FF,$FE,$7D,$BF,$FF,$67,$7F,$FF,$FF,$FF,$3B,$FC,$E6,$FF,$F9,$BF,$F9,$8F,$E7,$F8,$F0,$00,$00,$00,$00 ;
 $4540 DEFB $00,$7F,$FF,$C0,$FF,$FF,$FE,$00,$00,$FF,$7F,$FF,$FF,$EF,$FC,$00,$FF,$FB,$FF,$C3,$FF,$FF,$BF,$FB,$FF,$FF,$FF,$CB,$00,$7F,$FF,$C0 ;
 $4560 DEFB $01,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FD,$FC,$03,$FF,$F7,$FE,$01,$FF,$FB,$FF,$FF,$FF,$F1,$FF,$FB,$FF,$80,$3F,$FF,$01,$00,$00,$00 ;
 $4580 DEFB $01,$F9,$FC,$C0,$FF,$3F,$FF,$FF,$FF,$FB,$F8,$01,$FF,$F7,$FF,$FF,$FF,$EF,$FF,$FF,$FF,$F7,$FF,$FF,$BF,$FF,$BF,$FF,$01,$F9,$FC,$C0 ;
 $45A0 DEFB $00,$00,$00,$00,$7F,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$E0,$00,$00,$00,$FF,$FF,$C3,$FF,$FF,$00,$07,$FF,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$0F,$FF,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$E7,$FF,$FF,$80,$01,$FF,$FF,$FF,$F0,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$C0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$00,$FF,$FF,$FF,$F8,$00,$99,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$2E,$78,$7F,$9F,$90,$00,$00,$00,$6E,$7C,$63,$DE,$E0,$00,$00,$00,$13,$E3,$C7,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FD,$7C,$63,$FB,$BF,$FF,$FF,$FF,$FB,$1F,$A5,$F0,$DF,$BF,$FB,$F9,$E7,$FF,$78,$00,$00,$00,$00 ;
 $4640 DEFB $00,$7F,$FF,$80,$FF,$FF,$FE,$00,$00,$FF,$FF,$FF,$FF,$F7,$FC,$00,$FF,$FB,$FF,$C3,$FF,$FF,$7F,$FB,$FF,$FF,$FF,$CB,$00,$7F,$FF,$80 ;
 $4660 DEFB $03,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FD,$F8,$01,$FF,$F7,$FF,$03,$FF,$FB,$FF,$FF,$FF,$E1,$FF,$FB,$FF,$80,$3F,$FF,$03,$00,$00,$00 ;
 $4680 DEFB $00,$7F,$C0,$C0,$FF,$3F,$FF,$FF,$FF,$F7,$FC,$03,$FF,$F7,$FF,$FF,$FF,$EF,$FF,$FF,$FF,$F7,$FF,$FF,$BF,$80,$3F,$FF,$00,$7F,$80,$C0 ;
 $46A0 DEFB $00,$00,$00,$00,$7F,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$E0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$0F,$FF,$FF,$FF,$FE,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$03,$FF,$FF,$FE,$FF,$03,$FF,$FF,$FC,$00,$FF,$F8,$00,$7F,$FF,$C3,$FF,$FF,$00,$00,$7F,$FF,$FF,$C0,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$00,$00,$00,$00,$FF,$FF,$C3,$FF,$FF,$00,$00,$3F,$FF,$FF,$E0,$00,$42,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$73,$FF,$FF,$FC,$D8,$00,$00,$00,$68,$7C,$63,$7F,$A0,$00,$00,$00,$13,$E3,$F7,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$7F,$FF,$FF,$81,$FF,$FD,$E4,$63,$1F,$9F,$FF,$03,$FF,$FB,$1B,$A5,$90,$C7,$BF,$FB,$F9,$FC,$79,$FC,$00,$00,$00,$00 ;
 $4740 DEFB $00,$FF,$FF,$80,$FF,$FF,$FE,$00,$00,$FF,$FF,$FF,$FF,$F7,$FC,$00,$FF,$FB,$FF,$81,$FF,$FF,$7F,$FB,$FF,$FF,$FF,$FF,$00,$FF,$FF,$80 ;
 $4760 DEFB $03,$00,$01,$00,$FF,$7F,$FF,$FF,$FF,$FD,$F8,$01,$FF,$F7,$FF,$FF,$FF,$FB,$FF,$FF,$FF,$C1,$FF,$F9,$FF,$FF,$FF,$FF,$03,$00,$01,$00 ;
 $4780 DEFB $00,$00,$00,$80,$FF,$1F,$FF,$FF,$FF,$F7,$FC,$03,$FF,$F7,$FF,$FF,$FF,$DF,$FF,$8F,$FF,$FB,$FF,$FF,$BF,$80,$7F,$FF,$00,$00,$00,$80 ;
 $47A0 DEFB $00,$00,$00,$00,$7F,$00,$00,$00,$00,$7F,$FF,$FF,$FF,$E0,$00,$00,$01,$FF,$FF,$E7,$FF,$FF,$80,$0F,$FF,$FF,$FF,$FE,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$7F,$FF,$C0,$FF,$00,$3F,$FF,$C0,$00,$FC,$00,$00,$0F,$FF,$00,$FF,$FC,$00,$00,$07,$FF,$FC,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$F0,$00,$00,$00,$00,$3F,$FF,$00,$FF,$FC,$00,$00,$03,$FF,$FE,$00,$00,$3C,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$4B,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$1F,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$08,$02,$05,$3F,$E0,$01,$2A,$FC,$69,$40,$3C,$88,$0C,$9E,$63,$5E,$E2,$00,$00 ;
 $4840 DEFB $00,$00,$0F,$FF,$F7,$FF,$80,$00,$00,$00,$00,$80,$8D,$00,$10,$09,$FF,$FE,$00,$00,$07,$D1,$34,$A4,$62,$ED,$17,$F4,$33,$DB,$7F,$80 ;
 $4860 DEFB $00,$00,$7F,$DD,$DF,$C0,$1F,$30,$00,$00,$00,$00,$00,$00,$00,$FF,$C0,$FF,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$67,$5F,$F3,$FF ;
 $4880 DEFB $FF,$FC,$00,$1A,$30,$07,$FF,$00,$00,$00,$1C,$00,$00,$07,$87,$FF,$FF,$B8,$07,$FF,$F0,$00,$00,$00,$00,$00,$0F,$FE,$00,$E3,$7D,$C0 ;
 $48A0 DEFB $03,$B7,$3B,$BD,$DD,$7D,$80,$00,$00,$05,$00,$00,$00,$00,$0B,$FF,$FF,$CC,$CC,$70,$00,$00,$01,$E1,$00,$EC,$58,$FF,$00,$00,$00,$00 ;
 $48C0 DEFB $7F,$F8,$00,$01,$CF,$F7,$FF,$FC,$00,$32,$7F,$FF,$FF,$3C,$00,$3F,$FF,$E0,$08,$00,$06,$0C,$30,$03,$FE,$3F,$F8,$FF,$F0,$0F,$E0,$00 ;
 $48E0 DEFB $00,$00,$0F,$FF,$DF,$FE,$FF,$00,$00,$02,$73,$7C,$77,$44,$FE,$00,$00,$1F,$99,$0F,$FF,$FF,$9F,$FE,$E3,$8F,$FF,$FF,$FF,$DF,$DE,$F0 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$80,$81,$54,$E3,$C0,$00,$00,$F0,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$7F,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$02,$00,$50,$FF,$F2,$2C,$05,$03,$9C,$53,$C2,$B5,$63,$29,$98,$07,$D0,$00,$00 ;
 $4940 DEFB $00,$00,$3F,$FF,$E7,$FF,$80,$00,$00,$08,$A1,$0B,$00,$A2,$42,$21,$7F,$FE,$48,$00,$00,$14,$EF,$FA,$7D,$F5,$68,$05,$4E,$AC,$FF,$C0 ;
 $4960 DEFB $00,$00,$3F,$DE,$FF,$81,$9C,$70,$02,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$78,$0C,$00,$00,$00,$00,$80,$00,$00,$00,$58,$9F,$FD,$FF ;
 $4980 DEFB $FF,$FC,$19,$18,$18,$FF,$DE,$00,$00,$00,$60,$00,$00,$00,$61,$FE,$FF,$B8,$3F,$7F,$FE,$00,$00,$00,$00,$00,$3F,$FE,$00,$7F,$FD,$C0 ;
 $49A0 DEFB $08,$78,$BD,$BD,$BD,$BE,$00,$00,$00,$04,$80,$00,$00,$00,$1C,$03,$E3,$F6,$66,$30,$00,$00,$2F,$5E,$00,$E8,$50,$FF,$E0,$00,$00,$00 ;
 $49C0 DEFB $0F,$F8,$00,$7C,$7F,$EF,$DF,$F8,$00,$1A,$7F,$FF,$FF,$EC,$00,$3F,$FF,$F0,$18,$00,$30,$CC,$03,$07,$FD,$1F,$F0,$FF,$FC,$3F,$F0,$00 ;
 $49E0 DEFB $00,$00,$07,$F0,$0F,$FC,$FE,$00,$00,$02,$73,$7C,$77,$A4,$FF,$FE,$03,$FF,$99,$1F,$73,$9F,$9F,$FD,$CD,$37,$FF,$FF,$FF,$D0,$C2,$F8 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$02,$02,$B0,$1F,$F8,$7F,$83,$AC,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$FF,$F0,$00,$00,$00,$00,$00,$24,$02,$00,$00,$25,$09,$E0,$78,$00,$D2,$9C,$69,$6D,$69,$2A,$98,$EB,$AB,$60,$72,$00,$00 ;
 $4A40 DEFB $00,$00,$7F,$FF,$EB,$FF,$80,$00,$00,$00,$0C,$00,$24,$08,$00,$01,$03,$FE,$00,$00,$80,$0F,$47,$95,$B6,$DB,$75,$5E,$55,$8D,$FF,$F0 ;
 $4A60 DEFB $00,$00,$0F,$1F,$E1,$87,$E7,$C0,$00,$00,$00,$00,$00,$00,$01,$C7,$7F,$FE,$FC,$0E,$00,$08,$00,$00,$08,$00,$00,$00,$34,$BC,$7E,$7A ;
 $4A80 DEFB $FF,$80,$7B,$6C,$61,$7D,$DC,$00,$00,$00,$80,$00,$00,$00,$10,$54,$FF,$DC,$7A,$9F,$F8,$00,$00,$00,$00,$0F,$FF,$FE,$00,$7F,$FD,$C0 ;
 $4AA0 DEFB $0F,$FC,$BE,$DD,$BD,$BF,$00,$00,$00,$02,$60,$00,$00,$00,$60,$03,$D0,$7B,$33,$00,$00,$00,$23,$46,$00,$E8,$50,$FF,$F0,$00,$00,$00 ;
 $4AC0 DEFB $03,$E0,$03,$FF,$9F,$EF,$BF,$F8,$00,$0E,$78,$FF,$FF,$EB,$00,$63,$FF,$EF,$28,$00,$36,$C0,$C3,$0F,$FB,$0F,$E0,$FF,$FE,$7F,$FC,$00 ;
 $4AE0 DEFB $00,$00,$03,$FF,$F3,$F1,$FD,$80,$00,$02,$73,$7C,$77,$A4,$FF,$FF,$FF,$FF,$99,$3E,$6D,$6E,$65,$FB,$D1,$47,$FF,$FF,$FF,$D0,$82,$7C ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$21,$11,$29,$02,$C9,$7D,$FD,$C7,$5E,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$01,$FF,$F9,$F8,$00,$00,$00,$00,$00,$00,$10,$02,$00,$83,$9F,$B9,$49,$AA,$42,$84,$52,$D8,$D5,$56,$58,$D2,$A8,$3C,$60,$00 ;
 $4B40 DEFB $00,$00,$7F,$7F,$DD,$FF,$80,$00,$00,$03,$00,$42,$00,$40,$08,$01,$01,$FF,$02,$00,$00,$27,$90,$0F,$1F,$BD,$DF,$E9,$39,$53,$FF,$F8 ;
 $4B60 DEFB $00,$F0,$00,$0F,$DE,$0F,$F9,$80,$00,$00,$00,$00,$00,$00,$03,$BF,$3F,$E0,$FE,$0E,$00,$00,$00,$00,$00,$00,$00,$00,$9A,$BC,$3F,$A4 ;
 $4B80 DEFB $78,$7D,$B6,$F0,$FB,$7D,$D8,$00,$00,$01,$00,$00,$00,$00,$08,$00,$FF,$E0,$EC,$E0,$00,$00,$00,$00,$00,$3F,$FF,$FE,$00,$1F,$FB,$80 ;
 $4BA0 DEFB $20,$1C,$7F,$1E,$DD,$BF,$07,$F8,$00,$03,$1C,$00,$00,$01,$80,$03,$DA,$3D,$99,$80,$00,$00,$61,$42,$00,$F0,$E1,$FF,$F0,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$07,$FF,$E7,$DF,$A7,$F0,$00,$06,$7C,$FF,$1F,$F0,$C1,$9C,$FF,$9F,$C8,$00,$06,$0C,$D8,$1F,$F7,$07,$C0,$84,$3F,$FF,$FE,$00 ;
 $4BE0 DEFB $00,$00,$00,$FF,$FC,$01,$FC,$60,$00,$02,$73,$7C,$77,$D4,$F1,$FF,$FF,$FF,$92,$7C,$66,$37,$FB,$F7,$D1,$47,$FF,$FF,$FF,$E0,$01,$3E ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$00,$80,$41,$69,$26,$AE,$DA,$EE,$ED,$70,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$03,$FF,$FB,$FE,$00,$00,$02,$00,$00,$00,$02,$10,$12,$13,$BE,$F4,$A6,$89,$54,$66,$E8,$56,$8D,$A1,$91,$6B,$AB,$DF,$00,$00 ;
 $4C40 DEFB $00,$00,$FF,$BF,$DC,$DF,$00,$00,$00,$00,$02,$00,$10,$00,$42,$10,$81,$FE,$00,$00,$10,$00,$00,$20,$07,$1F,$CF,$64,$45,$F4,$FF,$FC ;
 $4C60 DEFB $07,$FC,$00,$00,$3F,$5F,$FE,$00,$00,$00,$00,$00,$00,$00,$03,$77,$7F,$DF,$7E,$1E,$00,$00,$00,$00,$00,$00,$00,$00,$28,$78,$1F,$D8 ;
 $4C80 DEFB $07,$7E,$36,$FB,$7B,$7E,$B0,$00,$00,$02,$00,$00,$00,$00,$08,$00,$FF,$FF,$F8,$30,$00,$00,$00,$3F,$80,$7F,$FF,$FE,$00,$07,$FB,$80 ;
 $4CA0 DEFB $7F,$C4,$00,$1E,$D9,$83,$3F,$FC,$00,$3B,$83,$E0,$00,$7E,$00,$07,$E3,$BE,$D9,$80,$00,$00,$61,$42,$30,$FF,$FF,$FF,$F0,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$0F,$FB,$FB,$DF,$5F,$E0,$00,$06,$73,$7E,$EF,$84,$33,$7F,$3F,$7F,$80,$03,$61,$EC,$18,$3F,$EF,$03,$C0,$42,$1F,$FF,$FF,$00 ;
 $4CE0 DEFB $00,$00,$00,$3F,$FF,$80,$F3,$18,$00,$02,$73,$7C,$77,$D4,$EC,$FE,$3F,$C7,$9C,$7B,$62,$17,$9B,$EF,$E3,$8F,$FF,$FF,$FF,$F8,$C7,$1E ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$54,$02,$44,$90,$8E,$03,$BB,$BB,$BF,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$03,$FF,$FF,$FF,$00,$00,$00,$00,$02,$22,$44,$83,$41,$41,$F1,$CD,$1C,$B2,$A9,$93,$A8,$A9,$6A,$EF,$66,$90,$17,$65,$90,$00 ;
 $4D40 DEFB $00,$00,$FF,$CF,$DD,$3F,$03,$00,$00,$04,$10,$04,$00,$40,$00,$00,$81,$FE,$00,$00,$00,$08,$01,$00,$20,$4F,$80,$7D,$2C,$07,$3F,$FE ;
 $4D60 DEFB $1F,$FE,$00,$0F,$B8,$43,$FF,$00,$00,$00,$00,$00,$00,$00,$07,$77,$3F,$BF,$A2,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$07,$79,$8F,$B0 ;
 $4D80 DEFB $00,$0F,$BF,$FB,$7B,$7E,$A0,$00,$00,$04,$00,$00,$00,$00,$04,$00,$FF,$FF,$F3,$18,$00,$00,$01,$FF,$E0,$7F,$FF,$FC,$00,$01,$FB,$80 ;
 $4DA0 DEFB $7F,$FA,$00,$1F,$66,$DC,$7F,$FC,$00,$67,$E0,$1F,$FF,$84,$00,$0F,$FC,$7E,$CC,$00,$00,$00,$F0,$E1,$7C,$FF,$FF,$FF,$F0,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$0F,$FC,$FF,$FF,$3F,$C0,$00,$06,$73,$7C,$77,$76,$0F,$7F,$DF,$7D,$B0,$03,$6D,$E7,$03,$7F,$DF,$01,$80,$63,$1F,$F8,$63,$00 ;
 $4DE0 DEFB $00,$00,$00,$0F,$FF,$A3,$0F,$84,$00,$02,$73,$7C,$77,$EC,$E6,$FD,$DF,$BB,$90,$F3,$61,$0E,$66,$DF,$FF,$FF,$FF,$FF,$FE,$FF,$FF,$0F ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$84,$20,$80,$01,$50,$92,$B7,$75,$FC,$57,$EB,$D7,$88,$00,$00 ;
 $4E20 DEFB $00,$00,$03,$FF,$FF,$FF,$00,$00,$00,$00,$08,$00,$00,$0A,$28,$22,$FF,$3C,$D9,$6F,$14,$68,$16,$56,$97,$10,$95,$47,$CD,$BB,$88,$00 ;
 $4E40 DEFB $00,$00,$FF,$F3,$DD,$FC,$0D,$60,$00,$10,$09,$10,$80,$08,$00,$00,$80,$FC,$10,$00,$04,$02,$08,$08,$08,$10,$14,$7F,$92,$6F,$DF,$FE ;
 $4E60 DEFB $1F,$FE,$00,$1C,$33,$5F,$FF,$00,$00,$00,$00,$1F,$FF,$00,$0F,$4F,$7F,$BF,$A0,$FC,$00,$00,$00,$00,$00,$00,$01,$F8,$0A,$70,$DF,$70 ;
 $4E80 DEFB $03,$B7,$BF,$FB,$7B,$76,$40,$00,$00,$06,$00,$00,$00,$00,$04,$00,$8F,$FF,$C1,$98,$00,$00,$07,$FF,$F8,$F0,$E1,$FC,$00,$00,$3A,$00 ;
 $4EA0 DEFB $7F,$FE,$00,$0F,$36,$DD,$FF,$FC,$00,$63,$FC,$00,$00,$08,$00,$0F,$FF,$F8,$60,$00,$00,$63,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$0F,$FF,$7F,$FF,$7F,$C0,$00,$02,$73,$7C,$77,$4F,$80,$6F,$DF,$60,$77,$00,$7F,$FB,$63,$FF,$BF,$00,$80,$7B,$DF,$F7,$9C,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$FE,$55,$FF,$84,$00,$02,$73,$7C,$77,$EC,$E6,$F8,$EF,$9B,$B0,$F0,$FF,$FF,$66,$BF,$FF,$FF,$F8,$03,$FE,$FF,$FC,$0F ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$14,$01,$4A,$84,$28,$17,$5A,$A7,$40,$D6,$E9,$C0,$00,$00 ;
 $4F20 DEFB $00,$00,$03,$FF,$FF,$FF,$80,$00,$00,$00,$02,$24,$11,$A4,$01,$03,$00,$FC,$00,$3C,$0F,$64,$AA,$11,$13,$FF,$E5,$5A,$AC,$2B,$3E,$00 ;
 $4F40 DEFB $00,$00,$FF,$FD,$DB,$F0,$00,$40,$00,$00,$00,$00,$10,$00,$00,$55,$E1,$F0,$00,$08,$80,$00,$00,$01,$40,$82,$91,$1E,$CA,$AF,$EF,$FF ;
 $4F60 DEFB $7F,$FE,$00,$19,$B4,$7F,$FF,$00,$00,$00,$03,$E0,$00,$F8,$07,$FF,$7F,$BC,$23,$FF,$C0,$00,$00,$00,$00,$00,$07,$FC,$00,$F0,$7E,$C0 ;
 $4F80 DEFB $00,$37,$BF,$FB,$7B,$7A,$00,$00,$00,$06,$00,$00,$00,$00,$04,$00,$80,$FE,$38,$E0,$00,$00,$0F,$FF,$FC,$E7,$4E,$FE,$00,$00,$00,$00 ;
 $4FA0 DEFB $7F,$FC,$00,$06,$B7,$3B,$FF,$FC,$00,$22,$7F,$E0,$00,$F8,$00,$1F,$FF,$C0,$08,$00,$06,$63,$FF,$FF,$FF,$7F,$FF,$00,$E0,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$0F,$FF,$BF,$FF,$7F,$80,$00,$02,$73,$7C,$77,$47,$E0,$0D,$C0,$03,$FD,$03,$FF,$FE,$60,$FF,$7F,$00,$00,$84,$3F,$FF,$DE,$C0 ;
 $4FE0 DEFB $00,$00,$00,$00,$41,$94,$FE,$02,$00,$02,$73,$7C,$77,$EC,$E6,$F8,$EF,$9B,$D0,$F6,$FF,$FB,$6C,$7F,$FF,$FF,$80,$00,$FC,$FF,$F0,$0F ;
 $5000 DEFB $00,$00,$00,$01,$BF,$14,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$F6,$3D,$E0,$F8,$FF,$03,$FF,$C0,$FF,$FF,$FF,$00,$0F ;
 $5020 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$90,$1C,$F0,$78,$C7,$FF,$FC,$7C,$7F,$00,$00,$00,$0F,$38 ;
 $5040 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7C,$7C,$03,$F0,$1F,$80,$1C,$90,$01,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$80 ;
 $5060 DEFB $38,$B4,$2F,$27,$00,$25,$01,$49,$29,$7A,$52,$4B,$DF,$42,$70,$16,$80,$1C,$C0,$00,$7F,$FC,$00,$00,$00,$00,$00,$00,$00,$3F,$FE,$00 ;
 $5080 DEFB $38,$FF,$9E,$03,$FC,$F3,$C3,$FF,$79,$EF,$F8,$3F,$E7,$F9,$F0,$FD,$FF,$1C,$00,$3C,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00 ;
 $50A0 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$02,$3F,$16,$00,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$F0,$CD,$8F,$FF,$FF,$0F,$FF,$F0,$FF,$FF,$FF,$00,$0F ;
 $5120 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$90,$0F,$7C,$7F,$FF,$FF,$FB,$BB,$BF,$00,$00,$00,$3E,$F0 ;
 $5140 DEFB $38,$F4,$3F,$3F,$00,$3F,$01,$F9,$FF,$CF,$FE,$7F,$7C,$03,$F0,$1F,$80,$1C,$88,$01,$80,$00,$FC,$07,$FF,$FF,$FF,$E0,$3F,$00,$01,$80 ;
 $5160 DEFB $38,$BE,$5F,$2F,$00,$2D,$01,$69,$69,$7A,$7A,$5F,$FF,$C2,$F0,$17,$80,$1C,$00,$00,$7F,$FF,$80,$00,$00,$00,$00,$00,$01,$FF,$FE,$00 ;
 $5180 DEFB $38,$FF,$DE,$07,$FE,$F3,$C3,$FF,$79,$EF,$F8,$7F,$EF,$FD,$F9,$FD,$FF,$1C,$00,$42,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00 ;
 $51A0 DEFB $1C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$04,$1C,$21,$80,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$F8,$C3,$3F,$FF,$FF,$1F,$FF,$F8,$FF,$FF,$FF,$00,$1F ;
 $5220 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$90,$0F,$BF,$1F,$FF,$FE,$F7,$D7,$DF,$00,$00,$00,$FD,$F0 ;
 $5240 DEFB $38,$F4,$3D,$3D,$00,$3F,$01,$F9,$FF,$FF,$FA,$7E,$FE,$03,$D0,$1E,$FF,$1C,$E8,$01,$C0,$00,$FF,$F8,$00,$00,$00,$1F,$FF,$00,$03,$80 ;
 $5260 DEFB $38,$BF,$FF,$2F,$FF,$2F,$01,$E9,$E8,$BC,$7E,$5E,$0F,$E2,$F0,$17,$FF,$1C,$00,$00,$3F,$FF,$FC,$00,$00,$00,$00,$00,$3F,$FF,$FC,$00 ;
 $5280 DEFB $38,$F3,$DE,$07,$9E,$F3,$C0,$78,$79,$EF,$00,$78,$0F,$3D,$F9,$FD,$E0,$1C,$00,$99,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00 ;
 $52A0 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$08,$00,$40,$7F,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$7C,$33,$78,$43,$7F,$3F,$FF,$FC,$FF,$FF,$FF,$00,$3C ;
 $5320 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FE,$01,$FE,$7F,$E0,$7F,$FF,$9F,$FF,$1C,$90,$07,$CF,$E3,$FF,$FE,$F7,$11,$DF,$00,$00,$07,$F3,$E0 ;
 $5340 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$F9,$FF,$FF,$FA,$7E,$BA,$03,$D0,$1E,$81,$1C,$E8,$00,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0F,$00 ;
 $5360 DEFB $38,$BF,$FF,$2F,$FF,$3F,$01,$F9,$F8,$FC,$7E,$5E,$0F,$E3,$F0,$1F,$FF,$1C,$00,$00,$3F,$FF,$FF,$F0,$00,$00,$00,$0F,$FF,$FF,$FC,$00 ;
 $5380 DEFB $38,$FF,$DE,$07,$FE,$FF,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$00,$A1,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$00 ;
 $53A0 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$F0,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$90,$5E,$30,$70,$85,$3F,$7F,$FF,$FE,$FF,$FF,$FF,$00,$7A ;
 $5420 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$90,$07,$F3,$FC,$3F,$FC,$F6,$10,$DF,$00,$00,$3F,$CF,$E0 ;
 $5440 DEFB $38,$F4,$3D,$3D,$00,$3D,$01,$79,$7B,$FF,$FA,$7A,$5D,$02,$D0,$1E,$FD,$1C,$D8,$00,$F8,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$1F,$00 ;
 $5460 DEFB $38,$5F,$FE,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$00,$00,$1F,$FF,$FF,$FF,$C0,$00,$03,$FF,$FF,$FF,$F8,$00 ;
 $5480 DEFB $38,$FF,$9E,$07,$FE,$7F,$C0,$78,$7F,$EF,$E0,$7B,$EF,$FD,$FF,$FD,$FC,$1C,$00,$A1,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00 ;
 $54A0 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$90,$2F,$00,$F0,$85,$1F,$7F,$FF,$FE,$FF,$FF,$FE,$00,$F4 ;
 $5520 DEFB $38,$FC,$3F,$3F,$07,$FF,$F9,$F9,$FF,$03,$FE,$7F,$F0,$7F,$FF,$9F,$FF,$1C,$90,$03,$FC,$7F,$C0,$F8,$F6,$10,$DF,$00,$03,$FE,$3F,$C0 ;
 $5540 DEFB $38,$A4,$29,$2D,$00,$2D,$01,$69,$1D,$FE,$1A,$62,$5D,$02,$D0,$14,$FF,$1C,$B8,$00,$FE,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00 ;
 $5560 DEFB $38,$3F,$FC,$3F,$FF,$3F,$01,$F9,$F8,$78,$7E,$7E,$07,$F3,$F0,$1F,$FF,$1C,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00 ;
 $5580 DEFB $38,$F0,$1E,$07,$9E,$03,$C0,$78,$79,$EF,$00,$79,$EF,$3D,$EF,$BD,$E0,$1C,$00,$99,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$00 ;
 $55A0 DEFB $01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$90,$37,$C0,$F1,$CB,$01,$FF,$FF,$FF,$FF,$FF,$FC,$03,$EC ;
 $5620 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$90,$03,$FF,$8F,$FF,$00,$78,$38,$3E,$00,$FF,$F1,$FF,$C0 ;
 $5640 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$E1,$42,$42,$20,$82,$10,$10,$80,$1C,$70,$00,$FF,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$00 ;
 $5660 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$00 ;
 $5680 DEFB $38,$F0,$1F,$F7,$9E,$FF,$C0,$78,$79,$EF,$F8,$7F,$EF,$3D,$E7,$3D,$FF,$1C,$00,$42,$00,$03,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $1E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$78,$90,$1B,$E0,$F7,$33,$00,$FF,$FF,$FF,$FF,$FF,$F0,$07,$D8 ;
 $5720 DEFB $38,$FC,$3F,$3F,$00,$3F,$01,$F9,$FF,$87,$FE,$7F,$F8,$03,$F0,$1F,$80,$1C,$90,$03,$FF,$F0,$FF,$FE,$00,$00,$00,$7F,$FF,$0F,$FF,$C0 ;
 $5740 DEFB $38,$84,$21,$21,$00,$21,$01,$09,$0A,$01,$42,$43,$E0,$82,$10,$10,$80,$1C,$E0,$00,$FF,$E0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$07,$FF,$00 ;
 $5760 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00 ;
 $5780 DEFB $38,$F0,$1F,$F7,$9E,$FF,$80,$78,$79,$EF,$F8,$3F,$EF,$3D,$E7,$3D,$FF,$1C,$00,$3C,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$00,$00,$00,$06,$06,$06,$06,$06,$00,$00,$00,$06,$06,$06,$06,$00,$00,$00,$00,$00,$00,$00 ; {Attributes
 $5820 DEFB $00,$00,$00,$00,$41,$4E,$46,$4E,$46,$46,$46,$46,$46,$46,$46,$4E,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$00,$00,$00,$00 ;
 $5840 DEFB $00,$47,$47,$47,$41,$46,$4E,$4E,$4E,$4E,$46,$46,$46,$4E,$4E,$4E,$46,$4E,$46,$4E,$4E,$4E,$4E,$4E,$46,$46,$46,$46,$00,$47,$47,$47 ;
 $5860 DEFB $47,$7D,$7D,$45,$41,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$46,$4E,$4E,$4E,$46,$4E,$4E,$4E,$4E,$4E,$46,$4E,$46,$4E,$4E,$46,$47,$7D,$7D,$45 ;
 $5880 DEFB $45,$7D,$7D,$47,$41,$4E,$46,$46,$46,$4E,$4E,$4E,$46,$4E,$46,$46,$46,$4E,$46,$4E,$4E,$4E,$46,$4E,$4E,$4E,$4E,$4E,$45,$7D,$7D,$47 ;
 $58A0 DEFB $47,$47,$47,$47,$41,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$46,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$4E,$46,$47,$47,$47,$47 ;
 $58C0 DEFB $00,$00,$00,$00,$41,$41,$41,$41,$41,$4E,$4E,$46,$4E,$4E,$41,$41,$4E,$4E,$46,$4E,$4E,$4E,$4E,$4E,$4E,$46,$4E,$46,$00,$00,$00,$00 ;
 $58E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$41,$41,$00,$00,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$41,$00,$46,$00,$00,$00 ;
 $5900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$00 ;
 $5920 DEFB $00,$00,$47,$47,$47,$47,$47,$00,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00 ;
 $5940 DEFB $00,$00,$47,$47,$47,$47,$47,$47,$00,$47,$47,$47,$47,$47,$47,$47,$57,$47,$47,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5960 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$45,$45,$45,$45,$47,$47,$7C,$44,$44,$46,$46,$47,$00,$00,$47,$00,$43,$43,$47,$47,$47,$47 ;
 $5980 DEFB $47,$47,$47,$47,$47,$47,$47,$00,$00,$45,$45,$45,$45,$45,$45,$47,$74,$44,$44,$46,$46,$00,$42,$42,$42,$43,$43,$43,$00,$47,$47,$47 ;
 $59A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$00,$45,$45,$45,$45,$45,$45,$44,$46,$46,$46,$46,$47,$47,$42,$42,$55,$43,$43,$63,$43,$00,$00,$00 ;
 $59C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$00,$45,$45,$45,$45,$45,$44,$44,$44,$44,$45,$47,$47,$47,$57,$55,$45,$6B,$63,$44,$44,$42,$42,$47 ;
 $59E0 DEFB $00,$00,$47,$47,$47,$47,$47,$47,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$45,$45,$45,$54,$54,$54,$42,$42,$47 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$47,$47,$47,$47,$7D,$6E,$46,$56,$42,$42,$42,$47,$47 ;
 $5A20 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$45,$47,$47,$47,$47,$47,$46,$46,$46,$47,$47,$47,$47,$47 ;
 $5A40 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$45,$43,$7B,$7B,$47,$47,$47,$47,$47,$47,$47,$7B,$7B,$43 ;
 $5A60 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$45,$00,$43,$7B,$7B,$7B,$7B,$7B,$7B,$7B,$7B,$43,$43,$00 ;
 $5A80 DEFB $47,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$47,$00,$42,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$43,$00 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$00,$00,$00,$00,$43,$43,$43,$43,$43,$43,$43,$00,$00,$00 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

@expand=#DEF(#SPRITE(addr,attr) #UDGARRAY2,attr=$attr,scale=4,step=2,mask=1,flip=2;($addr)-($addr+$11)-$01-$10{0,($10-#PEEK($addr-1))*4,$10*4,#PEEK($addr-1)*4})
i$5B00

; Game entry point
@label=GameEntry
c$5B80 DI            ; Disable interrupts.
 $5B81 LD HL,$5F01   ; {Moves #N$20FF bytes from #N$5F01 to #N$5F00.
 $5B84 LD DE,$5F00   ;
 $5B87 LD BC,$20FF   ;
 $5B8A LDIR          ; }
 $5B8C JP $5F00      ; Jump to #R$5F00.
; View the equivalent code in;
; #LIST
; { #JETPAC$5B80 }
; { #PSSST$5B80 }
; { #TRANZAM$5B80 }
; LIST#
; .
; Later Ultimate games use more advanced decryption mechanisms;
; #LIST
; { #ATICATAC$5B80 }
; { #LUNARJETMAN$5B80 }
; LIST#

; Data block at 5B8F
b$5B8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C07 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C0F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C17 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C1F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C27 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C37 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C3F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C47 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C77 DEFB $00,$34,$32,$00,$00,$00,$00,$00
 $5C7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAF DEFB $00,$E9,$00,$00,$00,$00,$00,$00
 $5CB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CC7 DEFB $00,$00,$00,$00,$00,$01,$7D,$01
 $5CCF DEFB $FD,$32,$34,$33,$31,$39,$0E,$00
 $5CD7 DEFB $00,$FF,$5E,$00,$3A,$D7,$2E,$31
 $5CDF DEFB $0E,$7D,$4C,$CC,$CC,$CC,$2C,$31
 $5CE7 DEFB $0E,$00,$00,$01,$00,$00,$3A,$D7
 $5CEF DEFB $2E,$31,$0E,$7D,$4C,$CC,$CC,$CC
 $5CF7 DEFB $2C,$32,$0E,$00,$00,$02,$00,$00
 $5CFF DEFB $3A,$D7,$2E,$31,$0E,$7D,$4C,$CC
 $5D07 DEFB $CC,$CC,$2C,$33,$0E,$00,$00,$03
 $5D0F DEFB $00,$00,$3A,$D7,$2E,$31,$0E,$7D
 $5D17 DEFB $4C,$CC,$CC,$CC,$2C,$34,$0E,$00
 $5D1F DEFB $00,$04,$00,$00,$3A,$D7,$2E,$31
 $5D27 DEFB $0E,$7D,$4C,$CC,$CC,$CC,$2C,$35
 $5D2F DEFB $0E,$00,$00,$05,$00,$00,$3A,$DA
 $5D37 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5D3F DEFB $E7,$30,$0E,$00,$00,$00,$00,$00
 $5D47 DEFB $3A,$D9,$37,$0E,$00,$00,$07,$00
 $5D4F DEFB $00,$3A,$DC,$31,$0E,$00,$00,$01
 $5D57 DEFB $00,$00,$3A,$FB,$3A,$F5,$DC,$31
 $5D5F DEFB $0E,$00,$00,$01,$00,$00,$3B,$D9
 $5D67 DEFB $37,$0E,$00,$00,$07,$00,$00,$3B
 $5D6F DEFB $AC,$39,$0E,$00,$00,$09,$00,$00
 $5D77 DEFB $2C,$37,$0E,$00,$00,$07,$00,$00
 $5D7F DEFB $3B,$22,$43,$4F,$4F,$4B,$49,$45
 $5D87 DEFB $20,$49,$53,$20,$4C,$4F,$41,$44
 $5D8F DEFB $49,$4E,$47,$22,$3B,$AC,$31,$32
 $5D97 DEFB $0E,$00,$00,$0C,$00,$00,$2C,$31
 $5D9F DEFB $30,$0E,$00,$00,$0A,$00,$00,$3B
 $5DA7 DEFB $22,$14,$01,$50,$4C,$45,$41,$53
 $5DAF DEFB $45,$20,$57,$41,$49,$54,$22,$14
 $5DB7 DEFB $00,$3A,$F5,$AC,$30,$0E,$00,$00
 $5DBF DEFB $00,$00,$00,$2C,$30,$0E,$00,$00
 $5DC7 DEFB $00,$00,$00,$3A,$EF,$22,$22,$AA
 $5DCF DEFB $3A,$D9,$30,$0E,$00,$00,$00,$00
 $5DD7 DEFB $00,$3A,$DA,$30,$0E,$00,$00,$00
 $5DDF DEFB $00,$00,$3A,$F5,$AC,$36,$0E,$00
 $5DE7 DEFB $00,$06,$00,$00,$2C,$30,$0E,$00
 $5DEF DEFB $00,$00,$00,$00,$3A,$EF,$22,$22
 $5DF7 DEFB $AF,$3A,$F5,$AC,$36,$0E,$00,$00
 $5DFF DEFB $06,$00,$00,$2C,$30,$0E,$00,$00
 $5E07 DEFB $00,$00,$00,$3A,$EF,$22,$22,$AF
 $5E0F DEFB $3A,$F5,$AC,$36,$0E,$00,$00,$06
 $5E17 DEFB $00,$00,$2C,$30,$0E,$00,$00,$00
 $5E1F DEFB $00,$00,$3A,$EF,$22,$22,$AF,$3A
 $5E27 DEFB $F5,$AC,$36,$0E,$00,$00,$06,$00
 $5E2F DEFB $00,$2C,$30,$0E,$00,$00,$00,$00
 $5E37 DEFB $00,$3A,$EF,$22,$22,$AF,$3A,$F5
 $5E3F DEFB $C0,$32,$33,$34,$32,$34,$0E,$00
 $5E47 DEFB $00,$80,$5B,$00,$0D,$00,$00,$00
 $5E4F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E5F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E67 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E6F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E7F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E87 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E9F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ECF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EFF DEFB $00

; Security Check
;
; Used by the routine at #R$5B80.
@label=SecurityCheck
c$5F00 LD A,($5C79)  ; #HTML(#REGa=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
 $5F03 CP $32        ; {Return if #REGa is not #N$32.
 $5F05 RET NZ        ; }
 $5F06 JP $6298      ; Jump to #R$6298.
; View the equivalent code in;
; #LIST
; { #ATICATAC$6000 }
; { #JETPAC$61E5 }
; { #LUNARJETMAN$8000 }
; { #PSSST$61C6 }
; { #TRANZAM$5F00 }
; LIST#

; High Score
;
; 3-byte representation of the score.
@label=High_Score
g$5F09 DEFB $00,$00,$00
; View the equivalent code in;
; #LIST
; { #JETPAC$5CF0 }
; { #LUNARJETMAN$5E06 }
; { #PSSST$5E00 }
; LIST#

; Game Options
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Binary | =h Option }
; { #N$00 | #EVAL($00, 2, 8) | 1UP Game + Keyboard }
; { #N$01 | #EVAL($01, 2, 8) | 2UP Game + Keyboard }
; { #N$02 | #EVAL($02, 2, 8) | 1UP Game + Kempston Joystick }
; { #N$03 | #EVAL($03, 2, 8) | 2UP Game + Kempston Joystick }
; { #N$04 | #EVAL($04, 2, 8) | 1UP Game + Cursor Joystick }
; { #N$05 | #EVAL($05, 2, 8) | 2UP Game + Cursor Joystick }
; TABLE#
@label=GameOptions
g$5F0C DEFB $00

; Sound On/ Off
;
; Either #N$00 or #N$01.
@label=Sound_Enable
g$5F0D DEFB $00

; 1UP Score
;
; 3-byte representation of the score.
@label=1UP_Score
g$5F0E DEFB $00,$00,$00

; 2UP Score
;
; 3-byte representation of the score.
@label=2UP_Score
g$5F11 DEFB $00,$00,$00

; Game status buffer entry at 5F14
@label=
g$5F14 DEFB $00
@label=
 $5F15 DEFB $00
@label=
 $5F16 DEFB $00

; Game status buffer entry at 5F17
g$5F17 DEFB $00

; Game status buffer entry at 5F18
g$5F18 DEFB $00

; Unused
s$5F19 DEFS $02

; Game status buffer entry at 5F1B
g$5F1B DEFB $00,$00

; Game status buffer entry at 5F1D
g$5F1D DEFB $00,$00

; Game status buffer entry at 5F1F
g$5F1F DEFW $0000

; Current Player
;
; The currently active player.
; #TABLE(default,centre,centre)
; { =h Value | =h Player }
; { #N$00 | 1UP }
; { #N$01 | 2UP }
; TABLE#
@label=ActivePlayer
g$5F21 DEFB $00

; Last Frame
@label=LastFrame
g$5F22 DEFB $00

; Frame Updated
;
; Has the frame been updated? #N$00=No #N$01=Yes.
@label=FrameUpdated
g$5F23 DEFB $00

; Menu Item Attribute
;
; Current menu item colour attribute.
@label=Current_MenuAttr
g$5F24 DEFB $00

; Game Delay Timer
;
; At the beginning of each player turn there is a delay to allow the player to be ready for play.
; #TABLE(default,centre,centre)
; { =h Value | =h Game Mode }
; { #N$80 | 1UP }
; { #N$FF | 2UP }
; TABLE#
; The larger delay for a 2UP game is useful for swapping players controls.
@label=GameDelayTimer
g$5F25 DEFB $00

; Game status buffer entry at 5F26
g$5F26 DEFB $00

; Game status buffer entry at 5F27
g$5F27 DEFB $00

; Game status buffer entry at 5F28
g$5F28 DEFB $00

; Game status buffer entry at 5F29
g$5F29 DEFB $00,$00,$02,$00

; 1UP Player
@label=1UP_Level
g$5F2D DEFB $00      ; 1UP Level
@label=1UP_Lives
 $5F2E DEFB $00      ; 1UP Lives
@label=1UP_Nasties
 $5F2F DEFB $00      ; Number of Nasties to kill
@label=1UP_Ingredients
 $5F30 DEFB $00      ; Number of ingredients to collect

; 2UP Player
@label=2UP_Level
g$5F31 DEFB $00      ; 2UP Level
@label=2UP_Lives
 $5F32 DEFB $00      ; 2UP Lives
@label=2UP_Nasties
 $5F33 DEFB $00      ; Number of Nasties to kill
@label=2UP_Ingredients
 $5F34 DEFB $00      ; Number of ingredients to collect

; Nasties Buffer
@label=BufferNasties
g$5F35 DEFB $00
 $5F36 DEFB $00
 $5F37 DEFB $00
 $5F38 DEFB $00
 $5F39 DEFB $00
 $5F3A DEFB $00
 $5F3B DEFB $00
 $5F3C DEFB $00

; Data block at 5F3D
b$5F3D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F45 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F4D DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Ingredients Buffer
@label=BufferIngredients
g$5F55 DEFB $00
 $5F56 DEFB $00
 $5F57 DEFB $00
 $5F58 DEFB $00
 $5F59 DEFB $00
 $5F5A DEFB $00
 $5F5B DEFB $00
 $5F5C DEFB $00

; Game status buffer entry at 5F5D
g$5F5D DEFB $00

; Data block at 5F5E
b$5F5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F76 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F7E DEFB $00,$00,$00,$00,$00,$00,$00

; Copyright Messaging
@label=Message_Copyright
t$5F85 DEFM "COPYRIGHT"                              ; "COPYRIGHT".
; #N(#PEEK(#PC)) is the text colour. #N(#PEEK(#PC + $01)) is the font code for
; the "©" symbol.
@label=Message_Rights
 $5F8E DEFM $47                                      ; {"© 1983 A.C.G. ALL
 $5F8F DEFM $7F                                      ; RIGHTS RESERVED".
 $5F90 DEFM "1983 A.C.G. ALL RIGHTS RESERVE","D"+$80 ; }

; Data block at 5FAF
b$5FAF DEFB $01
 $5FB0 DEFB $60
 $5FB1 DEFB $78
 $5FB2 DEFB $47
 $5FB3 DEFB $00
 $5FB4 DEFB $00
 $5FB5 DEFB $00
 $5FB6 DEFB $00

; Create Game Window
;
; Used by the routines at #R$5FE1, #R$6298 and #R$6BE0.
;
; .
;
; Blank the screen and write the banner.
@label=CreateWindow
c$5FB7 CALL $74E2    ; Call #R$74E2.
 $5FBA CALL $74D4    ; Call #R$74D4.
 $5FBD CALL $74AE    ; Call #R$74AE.
; Set the attributes for the 1UP lives graphic.
 $5FC0 LD HL,$5808   ; #REGhl=#N$5808.
 $5FC3 LD A,$47      ; #REGa=#N$47.
 $5FC5 LD (HL),A     ; Write #REGa to #REGhl.
 $5FC6 INC HL        ; Increment #REGhl by one.
 $5FC7 LD (HL),A     ; Write #REGa to #REGhl.
; Set the attributes for the 2UP lives graphic.
 $5FC8 LD HL,$5816   ; #REGhl=#N$5816.
 $5FCB LD (HL),A     ; Write #REGa to #REGhl.
 $5FCC INC HL        ; Increment #REGhl by one.
 $5FCD LD (HL),A     ; Write #REGa to #REGhl.
; Set the attributes for the score line (the whole line is INK:#N$45).
 $5FCE LD HL,$5820   ; #REGhl=#N$5820.
 $5FD1 LD BC,$2045   ; #REGbc=counter:#N$20, INK:#N$45.
@label=CreateWindow_Loop
*$5FD4 LD (HL),C     ; Write #N$45 to the attribute buffer.
 $5FD5 INC L         ; Move onto the next column.
 $5FD6 DJNZ $5FD4    ; Decrease counter by one and loop back to #R$5FD4 until
                     ; counter is zero.
; Write the 1UP, 2UP and HI scores.
 $5FD8 CALL $7438    ; Call #R$7438.
 $5FDB CALL $7440    ; Call #R$7440.
 $5FDE JP $7448      ; Jump to #R$7448.

; Routine at 5FE1
;
; Used by the routine at #R$6D87.
c$5FE1 LD HL,$5F2E                  ; {Increase #R$5F2E by one.
 $5FE4 INC (HL)                     ; }
 $5FE5 CALL $6FFD                   ; Call #R$6FFD.
; This entry point is used by the routine at #R$68C4.
*$5FE8 LD A,($5F2D)                 ; #REGa=#R$5F2D.
 $5FEB INC A                        ;
 $5FEC RET Z                        ;
 $5FED CALL $5FB7                   ; Call #R$5FB7.
 $5FF0 CALL $6017                   ; Call #R$6017.
 $5FF3 CALL $7378                   ; Call #R$7378.
; #HTML(Self modifying code; this updates the command at #R$7515 to <strong>"CP
; #N$1A"</strong>.)
 $5FF6 LD A,$1A                     ; {Write #N$1A to #R$7515(#N$7516).
 $5FF8 LD ($7516),A                 ; }
 $5FFB LD A,($5C78)                 ; {#HTML(Write <a
 $5FFE LD ($5F22),A                 ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                                    ; to #R$5F22.)}
 $6001 RET                          ; Return.
*$6002 LD A,B                       ; #REGa=#REGb.
 $6003 EXX                          ; Switch to the shadow registers.
 $6004 LD C,A                       ; {Create an offset in #REGbc'.
 $6005 LD B,$00                     ; }
 $6007 LD HL,$6011                  ; {Calculate the address using the offset
 $600A ADD HL,BC                    ; and #R$6011.}
 $600B LD A,(HL)                    ; {Write the data from the offset to
 $600C LD ($5F27),A                 ; #R$5F27.}
 $600F EXX                          ; Switch to the normal registers.
 $6010 RET                          ; Return.
 $6011 DEFB $00,$43,$46,$42,$44,$46 ;
; The pantry is constructed like it is a font.
*$6017 LD HL,($5C36)                ; {#HTML(Stash <a
 $601A PUSH HL                      ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>
                                    ; on the stack.)}
 $601B LD HL,$7B4A                  ; {#HTML(Write #R$7B4A to <a
 $601E LD ($5C36),HL                ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
                                    ; }
 $6021 LD A,($5F2D)                 ; #REGa=#R$5F2D.
 $6024 AND %00000111                ; Keep only bits 0-2.
 $6026 LD B,A                       ; Store the result in #REGb.
 $6027 LD A,$20                     ; #REGa=#N$20.
 $6029 JR Z,$602F                   ;
*$602B SRL A                        ;
 $602D DJNZ $602B                   ;
*$602F LD ($5F2A),A                 ;
 $6032 LD DE,$613B                  ; #REGde=#R$613B.
 $6035 LD HL,$10D0                  ; #REGhl=#N$10D0.
 $6038 CALL $7488                   ; Call #R$7488.
 $603B EXX                          ;
 $603C INC DE                       ;
 $603D LD HL,$18D0                  ;
 $6040 CALL $7488                   ;
 $6043 EXX                          ;
 $6044 LD HL,$20D0                  ;
 $6047 INC DE                       ;
 $6048 LD B,$05                     ;
*$604A CALL $60BD                   ;
 $604D DJNZ $604A                   ;
 $604F LD DE,$616D                  ;
 $6052 LD HL,$98D0                  ;
 $6055 CALL $7488                   ;
 $6058 LD DE,$6174                  ;
 $605B LD HL,$20D0                  ;
 $605E LD B,$05                     ;
*$6060 CALL $6002                   ;
 $6063 CALL $60FD                   ;
 $6066 DJNZ $6060                   ;
 $6068 LD HL,$A000                  ;
 $606B LD DE,$6198                  ;
 $606E LD C,$04                     ;
 $6070 LD A,$20                     ;
 $6072 CALL $60E2                   ;
 $6075 LD DE,$6218                  ;
 $6078 LD HL,$A000                  ;
 $607B LD C,$04                     ;
 $607D CALL $60A4                   ;
 $6080 POP HL                       ;
 $6081 LD ($5C36),HL                ;
 $6084 LD B,$00                     ;
 $6086 CALL $6C88                   ;
 $6089 LD A,($5F30)                 ;
 $608C LD C,A                       ;
 $608D RRA                          ;
 $608E RRA                          ;
 $608F RRA                          ;
 $6090 RRA                          ;
 $6091 AND $0F                      ;
 $6093 ADD A,$30                    ;
 $6095 LD HL,$50FC                  ;
 $6098 CALL $7468                   ;
 $609B LD A,C                       ;
 $609C AND $0F                      ;
 $609E ADD A,$30                    ;
 $60A0 CALL $7468                   ;
 $60A3 RET                          ;
*$60A4 LD A,($5F28)                 ;
 $60A7 LD B,A                       ;
 $60A8 PUSH HL                      ;
 $60A9 PUSH BC                      ;
 $60AA CALL $7534                   ;
 $60AD POP BC                       ;
*$60AE LD A,(DE)                    ;
 $60AF LD (HL),A                    ;
 $60B0 INC HL                       ;
 $60B1 INC DE                       ;
 $60B2 DJNZ $60AE                   ;
 $60B4 POP HL                       ;
 $60B5 LD A,H                       ;
 $60B6 ADD A,$08                    ;
 $60B8 LD H,A                       ;
 $60B9 DEC C                        ;
 $60BA JR NZ,$60A4                  ;
 $60BC RET                          ;
*$60BD PUSH BC                      ;
 $60BE PUSH DE                      ;
 $60BF LD A,B                       ;
 $60C0 RLCA                         ;
 $60C1 RLCA                         ;
 $60C2 RLCA                         ;
 $60C3 AND $38                      ;
 $60C5 OR $47                       ;
 $60C7 LD ($60CE),A                 ;
 $60CA LD A,($5F2A)                 ;
 $60CD RLC B                        ;
 $60CF JR Z,$60D8                   ;
 $60D1 PUSH HL                      ;
 $60D2 LD HL,$0012                  ;
 $60D5 ADD HL,DE                    ;
 $60D6 EX DE,HL                     ;
 $60D7 POP HL                       ;
*$60D8 LD C,$03                     ;
 $60DA LD A,$06                     ;
 $60DC CALL $60E2                   ;
 $60DF POP DE                       ;
 $60E0 POP BC                       ;
 $60E1 RET                          ;
*$60E2 LD ($5F28),A                 ;
*$60E5 LD A,($5F28)                 ;
 $60E8 LD B,A                       ;
 $60E9 PUSH HL                      ;
 $60EA CALL $76E3                   ;
*$60ED LD A,(DE)                    ;
 $60EE CALL $7468                   ;
 $60F1 INC DE                       ;
 $60F2 DJNZ $60ED                   ;
 $60F4 POP HL                       ;
 $60F5 LD A,H                       ;
 $60F6 ADD A,$08                    ;
 $60F8 LD H,A                       ;
 $60F9 DEC C                        ;
 $60FA JR NZ,$60E5                  ;
 $60FC RET                          ;
*$60FD PUSH BC                      ;
 $60FE PUSH DE                      ;
 $60FF LD A,B                       ;
 $6100 RLCA                         ;
 $6101 RLCA                         ;
 $6102 RLCA                         ;
 $6103 AND $38                      ;
 $6105 OR $47                       ;
 $6107 LD ($610E),A                 ;
 $610A LD A,($5F2A)                 ;
 $610D BIT 0,A                      ;
 $610F JR Z,$6118                   ;
 $6111 PUSH HL                      ;
 $6112 LD HL,$0012                  ;
 $6115 ADD HL,DE                    ;
 $6116 EX DE,HL                     ;
 $6117 POP HL                       ;
*$6118 LD C,$03                     ;
*$611A LD B,$06                     ;
 $611C PUSH HL                      ;
 $611D PUSH BC                      ;
 $611E CALL $7534                   ;
 $6121 POP BC                       ;
*$6122 LD A,(DE)                    ;
 $6123 AND A                        ;
 $6124 CALL Z,$6137                 ;
 $6127 LD (HL),A                    ;
 $6128 INC DE                       ;
 $6129 INC HL                       ;
 $612A DJNZ $6122                   ;
 $612C POP HL                       ;
 $612D LD A,H                       ;
 $612E ADD A,$08                    ;
 $6130 LD H,A                       ;
 $6131 DEC C                        ;
 $6132 JR NZ,$611A                  ;
 $6134 POP DE                       ;
 $6135 POP BC                       ;
 $6136 RET                          ;
*$6137 LD A,($5F27)                 ;
 $613A RET                          ;

; Pantry Graphic
;
; .
;
; .
;
; The pantry is printed like a font.
@label=CupboardData
b$613B DEFB $44                             ; Attribute = #PEEK(#PC).
 $613C DEFB %00011111                       ; {Offsets.
 $613D DEFB %00100000                       ;
 $613E DEFB %00100001                       ;
 $613F DEFB %00100010                       ;
 $6140 DEFB %00100011                       ;
 $6141 DEFB %10100100                       ; }
; The pantry is printed like a font.
 $6142 DEFB $44                             ; Attribute = #PEEK(#PC).
 $6143 DEFB %00100101                       ; {Offsets.
 $6144 DEFB %00100110                       ;
 $6145 DEFB %00100111                       ;
 $6146 DEFB %00101000                       ;
 $6147 DEFB %00101001                       ;
 $6148 DEFB %10101010                       ; }
 $6149 DEFB $2B                             ; Attribute = #PEEK(#PC).
 $614A DEFB %00101100                       ; {Offsets.
 $614B DEFB %00101101                       ;
 $614C DEFB %00101110                       ;
 $614D DEFB %00101111                       ;
 $614E DEFB %00110000                       ;
 $614F DEFB %00101011                       ;
 $6150 DEFB %00110001                       ;
 $6151 DEFB %00110010                       ;
 $6152 DEFB %00110011                       ;
 $6153 DEFB %00110100                       ;
 $6154 DEFB %00110000                       ;
 $6155 DEFB %00101011                       ;
 $6156 DEFB %00000001                       ;
 $6157 DEFB %00000001                       ;
 $6158 DEFB %00000001                       ;
 $6159 DEFB %00000001                       ; }
 $615A DEFB $30,$2B,$45,$46,$46,$47,$30,$2B
 $6162 DEFB $48,$49,$49,$4A,$30,$2B,$01,$01
 $616A DEFB $01,$01,$30
 $616D DEFB $44                             ; Attribute = #PEEK(#PC).
 $616E DEFB %00110101                       ; {Offsets.
 $616F DEFB %00110110                       ;
 $6170 DEFB %00110110                       ;
 $6171 DEFB %00110110                       ;
 $6172 DEFB %00110110                       ;
 $6173 DEFB %10110111                       ; }
 $6174 DEFB $44                             ; Attribute = #PEEK(#PC).
 $6175 DEFB %01001111                       ; {Offsets.
 $6176 DEFB %01001111                       ;
 $6177 DEFB %01001111                       ;
 $6178 DEFB %01001111                       ;
 $6179 DEFB %01000100                       ; }
 $617A DEFB $44,$4F,$4F,$4F,$4F,$44,$44,$44
 $6182 DEFB $44,$44,$44,$44,$44,$00,$00,$00
 $618A DEFB $00,$44,$44,$00,$00,$00,$00,$44
 $6192 DEFB $44,$44,$44,$44,$44,$44
 $6198 DEFB $02                             ; Attribute = #PEEK(#PC).
 $6199 DEFB %00000011                       ; {Offsets.
 $619A DEFB %00000100                       ;
 $619B DEFB %00000101                       ;
 $619C DEFB %00000010                       ; }
 $619D DEFB $03,$04,$05,$12,$01,$01,$01,$01
 $61A5 DEFB $01,$01,$01,$01,$1D,$02,$03,$04
 $61AD DEFB $05,$02,$03,$04,$05,$38,$39,$3A
 $61B5 DEFB $3A,$3B,$3C,$06,$07,$08,$09,$06
 $61BD DEFB $07,$08,$09,$13,$01,$01,$01,$01
 $61C5 DEFB $01,$01,$01,$01,$1C,$06,$07,$08
 $61CD DEFB $09,$06,$07,$08,$09,$3D,$3E,$00
 $61D5 DEFB $00,$3F,$40,$0A,$07,$08,$0D,$0A
 $61DD DEFB $07,$08,$0D,$1E,$15,$01,$01,$01
 $61E5 DEFB $01,$01,$01,$19,$1A,$0A,$07,$08
 $61ED DEFB $0D,$0A,$07,$08,$0D,$41,$42,$4B
 $61F5 DEFB $4C,$43,$44,$0E,$0F,$10,$11,$0E
 $61FD DEFB $0F,$10,$11,$00,$1E,$16,$17,$17
 $6205 DEFB $17,$17,$18,$1A,$00,$0E,$0F,$10
 $620D DEFB $11,$0E,$0F,$10,$11,$14,$1B,$00
 $6215 DEFB $00,$0B,$0C
 $6218 DEFB $45                             ; Attribute = #PEEK(#PC).
 $6219 DEFB %01000101                       ; {Offsets.
 $621A DEFB %01000101                       ;
 $621B DEFB %01000101                       ;
 $621C DEFB %01000101                       ; }
 $621D DEFB $45,$45,$45,$43,$43,$43,$43,$43
 $6225 DEFB $43,$43,$43,$43,$43,$45,$45,$45
 $622D DEFB $45,$45,$45,$45,$45,$46,$46,$46
 $6235 DEFB $46,$46,$46,$45,$45,$45,$45,$45
 $623D DEFB $45,$45,$45,$47,$47,$47,$47,$78
 $6245 DEFB $78,$47,$47,$47,$47,$45,$45,$45
 $624D DEFB $45,$45,$45,$45,$45,$46,$46,$00
 $6255 DEFB $00,$46,$46,$45,$45,$45,$45,$45
 $625D DEFB $45,$45,$45,$43,$43,$43,$43,$43
 $6265 DEFB $43,$43,$43,$43,$43,$45,$45,$45
 $626D DEFB $45,$45,$45,$45,$45,$46,$46,$47
 $6275 DEFB $47,$46,$46,$45,$45,$45,$45,$45
 $627D DEFB $45,$45,$45,$00,$47,$47,$67,$67
 $6285 DEFB $67,$67,$47,$47,$00,$45,$45,$45
 $628D DEFB $45,$45,$45,$45,$45,$46,$46,$45
 $6295 DEFB $45,$46,$46

; Game Initialisation
;
; Used by the routine at #R$5F00.
;
; .
;
; Blank the 1UP, 2UP and HI scores.
@label=GameInitialisation
c$6298 LD HL,$5F09   ; {Write #N$00 to #N$0B bytes from #R$5F09 to #N$5F13.
 $629B LD BC,$0B00   ;
@label=GameInitialisation_Loop
*$629E LD (HL),C     ;
 $629F INC HL        ;
 $62A0 DJNZ $629E    ; }
; #HTML(This calculates a "checksum" of the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a> routine.
;       The expected value at the end is #N$00, and if #R$5F0D does not contain #N$00 then the game is muted.)
 $62A2 LD HL,$03B5   ; #HTML(#REGhl=<a
                     ; href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a>.)
 $62A5 LD B,$43      ; #REGb=#N$43 (counter).
 $62A7 XOR A         ; #REGa=#N$00.
@label=Mute_Loop
*$62A8 ADD A,(HL)    ; Add the byte at #REGhl to #REGa.
 $62A9 INC HL        ; Increment #REGhl by one.
 $62AA DJNZ $62A8    ; Decrease counter by one and loop back to #R$62A8 until
                     ; counter is zero.
 $62AC ADD A,$68     ; #REGa=#REGa + #N$68.
 $62AE LD ($5F0D),A  ; Store this number at #R$5F0D.
 $62B1 XOR A         ; {#HTML(Write #N$00 to <a
 $62B2 LD ($5C48),A  ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C48.html">BORDCR</a>.)
                     ; }
; This entry point is used by the routine at #R$6BE0.
@label=Game_Restart
*$62B5 DI            ; Disable interrupts.
 $62B6 LD SP,$5F00   ; Set the stack pointer to #R$5F00.
 $62B9 CALL $5FB7    ; Call #R$5FB7.
@label=GameSelect_Loop
*$62BC CALL $6332    ; Call #R$6332.
 $62BF LD A,$F7      ; {Read from the keyboard;
 $62C1 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $62C3 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $62C5 CPL           ; Flip the bits.
 $62C6 LD E,A        ; #REGe=#REGa.
 $62C7 LD A,($5F0C)  ; #REGa=#R$5F0C.
; Handle 1UP selection.
 $62CA BIT 0,E       ; Has key "1" been pressed? ("1 PLAYER GAME").
 $62CC JR Z,$62D0    ; If not jump to #R$62D0.
 $62CE RES 0,A       ; Set player count = 1.
; Handle 2UP selection.
@label=GameSelect_CheckP2
*$62D0 BIT 1,E       ; Has key "2" been pressed? ("2 PLAYER GAME").
 $62D2 JR Z,$62D6    ; If not jump to #R$62D6.
 $62D4 SET 0,A       ; Set player count = 2.
; Handle Keyboard selection.
@label=GameSelect_CheckKeyboard
*$62D6 BIT 2,E       ; Has key "3" been pressed? ("KEYBOARD").
 $62D8 JR Z,$62DC    ; If not jump to #R$62DC.
 $62DA AND %11111001 ; Keep only bits 0, 3-7.
; Handle Kempston Joystick selection.
@label=GameSelect_CheckKempston
*$62DC BIT 3,E       ; Has key "4" been pressed? ("KEMPSTON JOYSTICK").
 $62DE JR Z,$62E4    ; If not jump to #R$62E4.
 $62E0 AND %11111001 ; Keep only bits.
 $62E2 OR %00000010  ; Set bit 1.
; Handle Cursor Joystick selection.
@label=GameSelect_CheckCursor
*$62E4 BIT 4,E       ; Has key "5" been pressed? ("CURSOR JOYSTICK").
 $62E6 JR Z,$62EC    ; If not jump to #R$62EC.
 $62E8 AND %11111001 ; Keep only bits 0, 3-7.
 $62EA OR %00000100  ; Set bit 2.
@label=GameSelect_CheckStart
*$62EC LD ($5F0C),A  ; Store #REGa at #R$5F0C.
; "0" for "Start Game" is on a different port.
 $62EF LD A,$EF      ; {Read from the keyboard;
 $62F1 OUT ($FD),A   ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $62F3 IN A,($FE)    ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#}
 $62F5 CPL           ; Flip the bits.
; Handle starting a new game.
 $62F6 BIT 0,A       ; Has key "0" been pressed? ("START GAME").
 $62F8 JP NZ,$6428   ; If so, jump to #R$6428.
; Handle flashing each selection.
 $62FB LD HL,$635F   ; #REGhl=#R$635F(GameSelection_Attributes)+#N$01 (i.e.
                     ; ignoring "Game Selection" as it doesn't flash).
 $62FE LD A,($5F0C)  ; {#REGc=#R$5F0C.
 $6301 LD C,A        ; }
 $6302 BIT 0,C       ; {If a 1UP game is selected, jump to #R$631F.
 $6304 JR NZ,$631F   ; }
 $6306 CALL $6324    ; Call #R$6324.
@label=MenuAttrHandler
*$6309 LD B,$03      ; #REGb=#N$03.
 $630B LD A,C        ; #REGa=#REGc.
 $630C RRCA          ;
@label=MenuAttrHandler_Loop
*$630D AND %00000011 ; Keep only bits 0-1.
 $630F JR Z,$631A    ;
 $6311 CALL $6327    ; Call #R$6327.
*$6314 DEC A         ; Decrease #REGa by one.
 $6315 DJNZ $630D    ; Decrease counter by one and loop back to #R$630D until
                     ; counter is zero.
 $6317 JP $62BC      ; Jump back to #R$62BC.
; Handle flashing 2UP.
@label=MenuAttrHandle2UP
*$631A CALL $632E    ; Call #R$632E.
 $631D JR $6314      ; Jump to #R$6314.
; Handle flashing joystick.
@label=MenuAttrHandleJoystick
*$631F CALL $632B    ; Call #R$632B.
 $6322 JR $6309      ; Jump to #R$6309.
; Set the first menu item, unset the second.
@label=MenuAttributeSetUnset
*$6324 SET 7,(HL)    ; Set the FLASH attribute for the menu attribute.
 $6326 INC HL        ; Move onto the next menu attribute.
@label=MenuAttributeUnSetFirst
*$6327 RES 7,(HL)    ; Unset the FLASH attribute for the menu attribute.
 $6329 INC HL        ; Move onto the next menu attribute.
 $632A RET           ; Return.
; Unset the first menu item, set the second.
@label=MenuAttributeUnsetSet
*$632B RES 7,(HL)    ; Unset the FLASH attribute for the menu attribute.
 $632D INC HL        ; Move onto the next menu attribute.
@label=MenuAttributeSetFirst
*$632E SET 7,(HL)    ; Set the FLASH attribute for the menu attribute.
 $6330 INC HL        ; Move onto the next menu attribute.
 $6331 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7C19 }
; { #JETPAC$61EB }
; { #LUNARJETMAN$800A }
; { #PSSST$61CD }
; { #TRANZAM$5F07 }
; LIST#

; Game Selection Menu
;
; Used by the routine at #R$6298.
@label=GameMenu
c$6332 LD DE,$635E   ; #REGde=#R$635E.
 $6335 EXX           ; Switch to the shadow registers.
 $6336 LD HL,$6365   ; #REGhl'=#R$6365.
 $6339 LD DE,$636C   ; #REGde'=#R$636C.
; There are seven lines of text.
 $633C LD B,$07      ; #REGb'=#N$07 (counter).
@label=GameMenu_Loop
*$633E EXX           ; Switch back to the normal registers.
 $633F LD A,(DE)     ; {Copy a byte from #REGde to #R$5F24.
 $6340 LD ($5F24),A  ; }
 $6343 INC DE        ; Increment #REGde by one.
 $6344 EXX           ; Switch to the shadow registers.
 $6345 PUSH BC       ; Stash #REGbc' on the stack.
 $6346 LD A,(HL)     ; #REGa=#REGhl' (grab the position data).
 $6347 INC HL        ; Increment #REGhl' (position data pointer) by one.
 $6348 PUSH HL       ; Stash #REGhl' (position data pointer) on the stack.
 $6349 LD H,A        ; {#REGh'=#REGa #REGl'=#N$38.
 $634A LD L,$38      ; }
 $634C CALL $63E0    ; Call #R$63E0.
 $634F EXX           ; Switch back to the normal registers.
 $6350 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $6351 POP BC        ; }
 $6352 INC DE        ; Increase #REGde by one.
 $6353 DJNZ $633E    ; Decrease counter by one and loop back to #R$633E until
                     ; counter is zero.
 $6355 LD HL,$B800   ; #REGhl=#R$B800.
 $6358 LD DE,$5F8E   ; #REGde=#R$5F8E.
 $635B JP $7488      ; Jump to #R$7488.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CAF }
; { #JETPAC$6260 }
; { #LUNARJETMAN$80D1 }
; { #PSSST$6250 }
; { #TRANZAM$0000 }
; LIST#

; Game Select Attribute Table
@label=GameSelection_Attributes
b$635E DEFB $47      ; {#TABLE(default,centre)
 $635F DEFB $47      ; { =h Byte(n) | =h Menu Item }
 $6360 DEFB $47      ; { #N$01 | Game Selection }
 $6361 DEFB $47      ; { #N$02 | 1 Player Game }
 $6362 DEFB $47      ; { #N$03 | 2 Player Game }
 $6363 DEFB $47      ; { #N$04 | Keyboard }
 $6364 DEFB $47      ; { #N$05 | Kempston Joystick }
                     ; { #N$06 | Cursor Joystick }
                     ; { #N$07 | Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CEA }
; { #JETPAC$628D }
; { #LUNARJETMAN$810E }
; { #PSSST$627C }
; { #TRANZAM$5FA7 }
; LIST#

; Game Select Y Position Table
@label=GameSelection_Position
b$6365 DEFB $20      ; {#TABLE(default,centre,centre)
 $6366 DEFB $38      ; { =h Byte(n) | =h Position | =h Menu Item }
 $6367 DEFB $48      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | Game Selection }
 $6368 DEFB $58      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 1 Player Game }
 $6369 DEFB $68      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 2 Player Game }
 $636A DEFB $78      ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | Keyboard }
 $636B DEFB $98      ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | Kempston Joystick }
                     ; { #N$06 | #EVAL(#PEEK(#PC+$05) / $08) | Cursor Joystick }
                     ; { #N$07 | #EVAL(#PEEK(#PC+$06) / $08) | Start Game }
                     ; TABLE#}
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF1 }
; { #JETPAC$6293 }
; { #LUNARJETMAN$8115 }
; { #PSSST$6282 }
; { #TRANZAM$5FAC }
; LIST#

; Game Selection Screen Text
@label=GameSelection_Text
t$636C DEFM "GAME SELECTIO","N"+$80        ; "GAME SELECTION".
 $637A DEFM "1   1 PLAYER GAM","E"+$80     ; "1   1 PLAYER GAME".
 $638B DEFM "2   2 PLAYER GAM","E"+$80     ; "2   2 PLAYER GAME".
 $639C DEFM "3   KEYBOAR","D"+$80          ; "3   KEYBOARD".
 $63A8 DEFM "4   KEMPSTON JOYSTIC","K"+$80 ; "4   KEMPSTON JOYSTICK".
 $63BD DEFM "5   CURSOR   JOYSTIC","K"+$80 ; "5   CURSOR   JOYSTICK".
 $63D2 DEFM "0   START GAM","E"+$80        ; "0   START GAME".
; View the equivalent code in;
; #LIST
; { #ATICATAC$7CF8 }
; { #JETPAC$6299 }
; { #LUNARJETMAN$811C }
; { #PSSST$6288 }
; { #TRANZAM$5FB1 }
; LIST#

; Write Menu Line
;
; Used by the routine at #R$6332.
@label=MenuWriteText
c$63E0 PUSH HL       ; Stash #REGhl containing the co-ordinate on the stack.
 $63E1 CALL $76E3    ; Call #R$76E3.
 $63E4 LD A,($5F24)  ; #REGa=the menu attribute byte from #R$5F24.
 $63E7 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $63E8 EXX           ; Switch to the shadow registers.
 $63E9 POP HL        ; Restore #REGhl from the stack.
 $63EA CALL $7534    ; Call #R$7534.
 $63ED JP $7494      ; Jump to #R$7494.
; View the equivalent code in;
; #LIST
; { #ATICATAC$7D8A }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$62E7 }
; { #TRANZAM$0000 }
; LIST#

; Initialise Players
;
; Used by the routine at #R$6428.
@label=PlayersInit
c$63F0 LD B,$02      ; #REGb=#N$02 (counter; both players).
@label=PlayersInit_Loop
*$63F2 PUSH BC       ; Stash #REGbc on the stack.
 $63F3 XOR A         ; {Write #N$00 to #R$5F2D.
 $63F4 LD ($5F2D),A  ; }
; Set both players starting lives.
 $63F7 LD A,$04      ; {Write #N$04 to #R$5F2E.
 $63F9 LD ($5F2E),A  ; }
 $63FC CALL $6416    ; Call #R$6416 to swap the player data between 1UP and 2UP
                     ; players.
 $63FF POP BC        ; Restore #REGbc from the stack.
 $6400 DJNZ $63F2    ; Decrease counter by one and loop back to #R$63F2 until
                     ; counter is zero.
; Note this is +#N$01 to #R$63F7 as you "spend a life", and 1UP goes first.
 $6402 LD A,$05      ; {Write #N$05 to #R$5F32.
 $6404 LD ($5F32),A  ; }
; Default to writing #N$FF to #R$5F31 (this is a 1UP game).
 $6407 LD A,$FF      ; {Write #N$FF to #R$5F31.
 $6409 LD ($5F31),A  ; }
; Handle 2UP game.
 $640C LD A,($5F0C)  ; {Return if bit 0 of #R$5F0C is not set (i.e. if this is
 $640F AND %00000001 ; a 1UP game).
 $6411 RET NZ        ; }
 $6412 LD ($5F32),A  ; Else, write it to #R$5F32.
 $6415 RET           ; Return.

; 1UP/ 2UP Swapper.
;
; Used by the routines at #R$63F0 and #R$68C4.
;
; .
;
; This routine "swaps" the data between #REGde and #REGhl.
@label=ChangePlayer
c$6416 LD HL,$5F2D   ; #REGhl=#R$5F2D.
 $6419 LD DE,$5F31   ; #REGde=#R$5F31.
 $641C LD B,$04      ; #REGb=#N$04 (counter).
; This looks complicated but it's just grabbing the data from #REGde, grabbing
; the data from #REGhl, and writing the others data to each one.
@label=ChangePlayer_Loop
*$641E LD A,(DE)     ; #REGa=#REGde.
 $641F LD C,(HL)     ; #REGc=#REGhl.
 $6420 LD (HL),A     ; Store #REGa at #REGhl.
 $6421 LD A,C        ; {Store #REGc at #REGde.
 $6422 LD (DE),A     ; }
 $6423 INC HL        ; {Increase both #REGhl and #REGde by one.
 $6424 INC DE        ; }
 $6425 DJNZ $641E    ; Decrease counter by one and loop back to #R$641E until
                     ; counter is zero.
 $6427 RET           ; Return.
; View the equivalent code in;
; #LIST
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$613B }
; { #TRANZAM$0000 }
; LIST#

; Start Game
;
; Used by the routine at #R$6298.
@label=StartGame
c$6428 CALL $74E2    ; Call #R$74E2.
 $642B CALL $74D4    ; Call #R$74D4.
 $642E LD A,($5F0D)  ; {If #R$5F0D is not zero then jump to #R$643A.
 $6431 AND A         ;
 $6432 JR NZ,$643A   ; }
 $6434 LD DE,$65C8   ; #REGde=#R$65C8.
 $6437 CALL $6568    ; Call #R$6568.
@label=SkipMusic
*$643A XOR A         ; {Write #N$00 to; #LIST { #R$5F30 } { #R$5F34 } LIST#
 $643B LD ($5F30),A  ;
 $643E LD ($5F34),A  ; }
 $6441 LD HL,$5F0E   ; {Write #N$00 to #N$0076 bytes, from #N$5F0E to #N$5F84.
 $6444 LD (HL),$00   ;
 $6446 LD D,H        ;
 $6447 LD E,L        ;
 $6448 INC DE        ;
 $6449 LD BC,$0076   ;
 $644C LDIR          ; }
 $644E CALL $63F0    ; Call #R$63F0.
 $6451 CALL $7186    ; Call #R$7186.
 $6454 CALL $6C58    ; Call #R$6C58.
; This entry point is used by the routine at #R$7198.
@label=MainLoopResetStack
*$6457 LD SP,$5F00   ; Set the stack pointer to #R$5F00.
 $645A EI            ; Enable interrupts.
 $645B LD IX,$5F55   ; #REGix=#R$5F55.
 $645F XOR A         ; {Write #N$00 to #R$5F1B to reset the current nasties.
 $6460 LD ($5F1B),A  ; }
; This entry point is used by the routines at #R$7160 and #R$7198.
@label=MainLoop
*$6463 LD A,($5C78)  ; {#HTML(Compare <a
 $6466 LD C,A        ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
 $6467 LD A,($5F22)  ; and #R$5F22.)}
; If interrupts are enabled, then #R$7160 will be called and DI executed.
 $646A CP C          ; {If they are not equal call #R$7160.
 $646B CALL NZ,$7160 ; }
 $646E LD HL,$71A3   ; #REGhl=#R$71A3.
 $6471 PUSH HL       ; Stash #REGhl on the stack.
 $6472 LD HL,$6486   ; #REGhl=#R$6486.
 $6475 LD A,(IX+$00) ; #REGa=#REGix+#N$00.
; This entry point is used by the routine at #R$65E8.
*$6478 RLCA          ; #REGa=#REGa * 2.
 $6479 AND %01111110 ; Keep only bits 1-6.
 $647B LD C,A        ; {Create an offset in #REGbc.
 $647C LD B,$00      ; }
 $647E ADD HL,BC     ; #REGhl=#REGhl + offset.
 $647F LD A,(HL)     ;
 $6480 INC HL        ; Increment #REGhl by one.
 $6481 LD H,(HL)     ;
 $6482 LD L,A        ;
 $6483 JP $5CB0      ; #HTML(Jump to <a
                     ; href="https://skoolkid.github.io/rom/asm/5CB0.html">NMIADD</a>
                     ; which should just jump to the address in #REGhl.)

; Jump Table
w$6486 DEFW $7152
 $6488 DEFW $7048
 $648A DEFW $7048
 $648C DEFW $6F78
 $648E DEFW $7281
 $6490 DEFW $7281
 $6492 DEFW $6D89
 $6494 DEFW $6D89
 $6496 DEFW $6CB7
 $6498 DEFW $6CB7
 $649A DEFW $6C31
 $649C DEFW $6C31
 $649E DEFW $7152
 $64A0 DEFW $6AA0
 $64A2 DEFW $6B8B
 $64A4 DEFW $6B18
 $64A6 DEFW $69D4
 $64A8 DEFW $69D4
 $64AA DEFW $6930
 $64AC DEFW $6930
 $64AE DEFW $669B
 $64B0 DEFW $669B
 $64B2 DEFW $689A
 $64B4 DEFW $7152
 $64B6 DEFW $6BAF
 $64B8 DEFW $6888
 $64BA DEFW $6765
 $64BC DEFW $6765
 $64BE DEFW $6765
 $64C0 DEFW $6765
 $64C2 DEFW $6996
 $64C4 DEFW $6996
 $64C6 DEFW $6996
 $64C8 DEFW $6996
 $64CA DEFW $6996
 $64CC DEFW $6996
 $64CE DEFW $6607
 $64D0 DEFW $6607
 $64D2 DEFW $65E8
 $64D4 DEFW $65E8
 $64D6 DEFW $654C
 $64D8 DEFW $654C
 $64DA DEFW $654C
 $64DC DEFW $655C
 $64DE DEFW $64F4
 $64E0 DEFW $64F4
 $64E2 DEFW $64F4
 $64E4 DEFW $64F4
 $64E6 DEFW $64F4

; Routine at 64E8
;
; Used by the routine at #R$6C3C.
c$64E8 LD HL,$6524   ;
 $64EB LD DE,$5F55   ;
 $64EE LD BC,$0028   ;
 $64F1 LDIR          ;
 $64F3 RET           ;
 $64F4 CALL $76D0    ;
 $64F7 LD HL,$5F1B   ;
 $64FA INC (HL)      ;
 $64FB LD A,(IX+$02) ;
 $64FE CP $A0        ;
 $6500 JR Z,$650B    ;
 $6502 DEC (IX+$02)  ;
 $6505 CALL $75CC    ;
 $6508 JP $74EE      ;
*$650B LD A,($5F0D)  ;
 $650E AND A         ;
 $650F JR NZ,$651D   ;
 $6511 LD DE,$65DA   ;
 $6514 CALL $6568    ;
*$6517 CALL $713D    ;
 $651A JP $6C58      ;
*$651D LD B,$08      ;
 $651F CALL $6BF3    ;
 $6522 JR $6517      ;

; Data block at 6524
b$6524 DEFB $2C,$40,$B0,$46,$00,$00,$00,$00
 $652C DEFB $2D,$50,$B0,$46,$00,$00,$00,$00
 $6534 DEFB $2E,$60,$B0,$46,$00,$00,$00,$00
 $653C DEFB $2F,$70,$B0,$46,$00,$00,$00,$00
 $6544 DEFB $30,$80,$B0,$46,$00,$00,$00,$00
 $654C DEFB $CD,$D0,$76,$21,$1B,$5F,$34,$DD
 $6554 DEFB $34,$00,$CD,$CC,$75,$C3,$EE,$74
 $655C DEFB $CD,$17,$76,$21,$1B,$5F,$34,$DD
 $6564 DEFB $36,$00,$00,$C9

; Play Music
;
; Used by the routines at #R$6428, #R$64E8 and #R$68C4.
;
; DE Music Data
@label=PlayMusic
c$6568 LD A,(DE)                            ; Fetch the music data byte.
 $6569 CP $FF                               ; {Return if the terminator
 $656B RET Z                                ; character has been reached.}
 $656C AND %00011111                        ; Keep only bits 0-3.
 $656E DEC A                                ; Decrease #REGa by one.
 $656F SLA A                                ; #REGa=#REGa * 2.
 $6571 LD C,A                               ; {Create an offset in #REGbc.
 $6572 LD B,$00                             ; }
 $6574 LD HL,$6594                          ; {#REGhl=#N$6594 + offset.
 $6577 ADD HL,BC                            ; }
 $6578 PUSH DE                              ; Stash #REGde on the stack.
 $6579 LD A,(HL)                            ;
 $657A INC HL                               ;
 $657B LD E,(HL)                            ;
 $657C LD D,$00                             ;
 $657E LD L,A                               ;
 $657F LD H,$00                             ;
 $6581 SLA L                                ;
 $6583 RL H                                 ;
 $6585 SLA L                                ;
 $6587 RL H                                 ;
 $6589 PUSH IX                              ; Stash #REGix on the stack.
 $658B CALL $03B5                           ; #HTML(Call <a
                                            ; href="https://skoolkid.github.io/rom/asm/03B5.html">BEEPER</a.)
 $658E POP IX                               ; {Restore #REGix and #REGde from
 $6590 POP DE                               ; the stack.}
 $6591 INC DE                               ; Increment #REGde by one.
 $6592 JR $6568                             ; Loop back round to the
                                            ; #R$6568(beginning) (we only end
                                            ; when the terminator is reached).
 $6594 DEFW $82A7                           ;
 $6596 DEFW $8A9E                           ;
 $6598 DEFW $9295                           ;
 $659A DEFW $9A8D                           ;
 $659C DEFW $A485                           ;
 $659E DEFW $AE7D                           ;
 $65A0 DEFW $B876                           ;
 $65A2 DEFW $C470                           ;
 $65A4 DEFW $D069                           ;
 $65A6 DEFW $DC64                           ;
 $65A8 DEFW $EA5E                           ;
 $65AA DEFW $F659                           ;
 $65AC DEFW $FF54                           ;
 $65AE DEFW $41A7                           ;
 $65B0 DEFW $459E                           ;
 $65B2 DEFW $4995                           ;
 $65B4 DEFW $4D8D                           ;
 $65B6 DEFW $5285                           ;
 $65B8 DEFW $577D                           ;
 $65BA DEFW $5C76                           ;
 $65BC DEFW $6270                           ;
 $65BE DEFW $6869                           ;
 $65C0 DEFW $6E64                           ;
 $65C2 DEFW $755E                           ;
 $65C4 DEFW $7B59                           ;
 $65C6 DEFW $8354                           ;
@label=MusicData
 $65C8 DEFB $0E,$01,$0E,$03,$04,$05,$05,$01 ; {Music Data
 $65D0 DEFB $FF,$0E,$01,$0E,$03,$05,$06,$01 ;
 $65D8 DEFB $06,$FF,$0D,$05,$06,$07,$08,$06 ;
 $65E0 DEFB $05,$03,$01,$05,$08,$05,$01,$FF ; }

; Routine at 65E8
c$65E8 LD A,(IX+$07)                        ;
 $65EB AND $01                              ;
 $65ED ADD A,$26                            ;
 $65EF LD (IX+$00),A                        ;
 $65F2 CALL $7617                           ;
 $65F5 CALL $74EE                           ;
 $65F8 LD A,(IX+$07)                        ;
 $65FB AND A                                ;
 $65FC JR Z,$6602                           ;
 $65FE DEC (IX+$07)                         ;
 $6601 RET                                  ;
*$6602 LD (IX+$00),$00                      ;
 $6606 RET                                  ;
 $6607 LD HL,$5F1B                          ;
 $660A INC (HL)                             ;
 $660B CALL $76D0                           ;
 $660E LD A,(IX+$03)                        ;
 $6611 CP $47                               ;
 $6613 JR Z,$6628                           ;
 $6615 CALL $7317                           ;
 $6618 BIT 7,(IX+$00)                       ;
 $661C JR Z,$6628                           ;
 $661E LD (IX+$06),$02                      ;
 $6622 LD BC,$0125                          ;
 $6625 CALL $7415                           ;
*$6628 LD HL,$6631                          ;
 $662B LD A,(IX+$06)                        ;
 $662E JP $6478                             ;
 $6631 DEFB $39,$66,$53,$66,$69,$66,$81,$66 ;
 $6639 DEFB $DD,$7E,$02,$3D,$FE,$A0,$38,$09 ;
*$6641 DEFB $DD,$77,$02,$CD,$CC,$75,$C3,$EE ;
 $6649 DEFB $74,$DD,$36,$07,$10,$DD,$34,$06 ;
 $6651 DEFB $18,$F1                         ;
 $6653 DEC (IX+$07)                         ;
 $6656 JR Z,$664E                           ;
 $6658 LD A,($5F1D)                         ;
 $665B AND $07                              ;
 $665D JR NZ,$6644                          ;
 $665F LD A,(IX+$00)                        ;
 $6662 XOR $01                              ;
 $6664 LD (IX+$00),A                        ;
 $6667 JR $6644                             ;
 $6669 LD A,(IX+$02)                        ;
 $666C ADD A,$04                            ;
 $666E CP $B8                               ;
 $6670 JR NC,$6674                          ;
 $6672 JR $6641                             ;
*$6674 LD A,R                               ;
 $6676 AND $0F                              ;
 $6678 OR $01                               ;
 $667A LD (IX+$07),A                        ;
 $667D INC (IX+$06)                         ;
 $6680 RET                                  ;
 $6681 DEC (IX+$07)                         ;
 $6684 RET NZ                               ;
 $6685 LD A,(IX+$03)                        ;
 $6688 CP $47                               ;
 $668A LD A,$00                             ;
 $668C JR Z,$6695                           ;
 $668E LD A,($5F2F)                         ;
 $6691 AND $02                              ;
 $6693 ADD A,$1A                            ;
*$6695 LD (IX+$00),A                        ;
 $6698 JP $6915                             ;
 $669B CALL $76D0                           ;
 $669E LD HL,$5F1B                          ;
 $66A1 INC (HL)                             ;
 $66A2 LD A,(IX+$01)                        ;
 $66A5 CP $C4                               ;
 $66A7 JR NC,$66ED                          ;
 $66A9 CALL $6A46                           ;
 $66AC DEC E                                ;
 $66AD JP Z,$6A73                           ;
 $66B0 CALL $7317                           ;
 $66B3 BIT 7,(IX+$00)                       ;
 $66B7 JP NZ,$730D                          ;
 $66BA LD A,(IX+$07)                        ;
 $66BD INC A                                ;
 $66BE AND $0F                              ;
 $66C0 LD (IX+$07),A                        ;
 $66C3 JR NZ,$66CC                          ;
 $66C5 LD A,R                               ;
 $66C7 AND $07                              ;
 $66C9 LD (IX+$06),A                        ;
*$66CC CALL $6735                           ;
 $66CF LD (IX+$03),$43                      ;
 $66D3 JR NZ,$66D6                          ;
 $66D5 INC HL                               ;
*$66D6 LD A,(HL)                            ;
 $66D7 BIT 1,(IX+$06)                       ;
 $66DB JR NZ,$66DF                          ;
 $66DD NEG                                  ;
*$66DF ADD A,(IX+$02)                       ;
 $66E2 CP $A0                               ;
 $66E4 JR NC,$6719                          ;
 $66E6 CP $20                               ;
 $66E8 JR C,$6723                           ;
 $66EA LD (IX+$02),A                        ;
*$66ED CALL $6735                           ;
 $66F0 JR Z,$66F3                           ;
 $66F2 INC HL                               ;
*$66F3 LD A,(HL)                            ;
 $66F4 BIT 0,(IX+$06)                       ;
 $66F8 JR NZ,$66FC                          ;
 $66FA NEG                                  ;
*$66FC ADD A,(IX+$01)                       ;
 $66FF CP $04                               ;
 $6701 JR C,$6729                           ;
 $6703 CP $C0                               ;
 $6705 JR NC,$672F                          ;
*$6707 LD (IX+$01),A                        ;
 $670A LD A,(IX+$07)                        ;
 $670D RRA                                  ;
 $670E AND $01                              ;
 $6710 XOR (IX+$00)                         ;
 $6713 LD (IX+$00),A                        ;
 $6716 JP $72D4                             ;
*$6719 LD (IX+$02),$A0                      ;
 $671D RES 1,(IX+$06)                       ;
 $6721 JR $66ED                             ;
*$6723 SET 1,(IX+$06)                       ;
 $6727 JR $66ED                             ;
*$6729 SET 0,(IX+$06)                       ;
 $672D JR $6707                             ;
*$672F RES 0,(IX+$06)                       ;
 $6733 JR $6707                             ;

; Routine at 6735
;
; Used by the routine at #R$65E8.
c$6735 LD C,(IX+$07)                        ;
 $6738 SLA C                                ;
 $673A LD B,$00                             ;
 $673C LD HL,$6745                          ;
 $673F ADD HL,BC                            ;
 $6740 BIT 2,(IX+$06)                       ;
 $6744 RET                                  ;
 $6745 DEFB $03,$00,$03,$00,$03,$01,$03,$01 ;
 $674D DEFB $03,$01,$02,$02,$02,$02,$02,$02 ;
 $6755 DEFB $02,$02,$02,$02,$02,$02,$01,$03 ;
 $675D DEFB $01,$03,$01,$03,$00,$03,$00,$03 ;
 $6765 DEFB $CD,$D0,$76,$21,$1B,$5F,$34,$CD ;
 $676D DEFB $46,$6A,$1D,$CA,$73,$6A,$CD,$17 ;
 $6775 DEFB $73,$DD,$CB,$00,$7E,$C2,$0D,$73 ;
 $677D DEFB $3E,$44,$DD,$77,$03,$DD,$7E,$02 ;
 $6785 DEFB $FE,$A0,$D2,$0D,$73,$3A,$1D,$5F ;
 $678D DEFB $E6,$07,$20,$03,$DD,$34,$05,$DD ;
 $6795 DEFB $7E,$05,$DD,$86,$02,$FE,$B8,$30 ;
 $679D DEFB $2D,$DD,$77,$02,$FE,$24,$DC,$D9 ;
 $67A5 DEFB $67,$DD,$7E,$04,$A7,$FA,$BE,$67 ;
 $67AD DEFB $DD,$86,$01,$DD,$77,$01,$FE,$BC ;
 $67B5 DEFB $D4,$D0,$67,$CD,$CC,$75,$C3,$EE ;
 $67BD DEFB $74,$DD,$86,$01,$DD,$77,$01,$FE ;
 $67C5 DEFB $04,$DC,$D0,$67,$18,$ED,$DD,$36 ;
 $67CD DEFB $00,$00,$C9,$DD,$7E,$04,$ED,$44 ;
 $67D5 DEFB $DD,$77,$04,$C9,$DD,$7E,$05,$ED ;
 $67DD DEFB $44,$DD,$77,$05,$C9             ;

; Routine at 67E2
;
; Used by the routine at #R$7198.
c$67E2 LD DE,$5F7D          ;
 $67E5 LD A,(DE)            ;
 $67E6 AND A                ;
 $67E7 RET NZ               ;
 $67E8 LD A,($5F2F)         ;
 $67EB AND $01              ;
 $67ED ADD A,$24            ;
 $67EF LD (DE),A            ;
 $67F0 INC DE               ;
 $67F1 LD A,R               ;
 $67F3 AND $03              ;
 $67F5 LD C,A               ;
 $67F6 LD B,$00             ;
 $67F8 LD HL,$6821          ;
 $67FB ADD HL,BC            ;
 $67FC LD A,(HL)            ;
 $67FD LD (DE),A            ;
 $67FE INC DE               ;
 $67FF LD A,$B8             ;
 $6801 LD (DE),A            ;
 $6802 INC DE               ;
 $6803 LD A,$44             ;
 $6805 LD (DE),A            ;
 $6806 INC DE               ;
 $6807 LD A,($5F1D)         ;
 $680A AND $03              ;
 $680C NEG                  ;
 $680E LD (DE),A            ;
 $680F INC DE               ;
 $6810 LD B,A               ;
 $6811 LD A,R               ;
 $6813 ADD A,B              ;
 $6814 AND $03              ;
 $6816 ADD A,$04            ;
 $6818 NEG                  ;
 $681A LD (DE),A            ;
 $681B INC DE               ;
 $681C XOR A                ;
 $681D LD (DE),A            ;
 $681E JP $68FA             ;
 $6821 DEFB $08,$28,$98,$B8 ;

; Routine at 6825
;
; Used by the routine at #R$7048.
c$6825 LD C,$07      ;
*$6827 LD A,C        ;
 $6828 DAA           ;
 $6829 XOR $F0       ;
 $682B RLCA          ;
 $682C LD D,A        ;
 $682D LD A,($5F1D)  ;
 $6830 RRCA          ;
 $6831 RRCA          ;
 $6832 RRCA          ;
 $6833 AND $60       ;
 $6835 XOR D         ;
 $6836 LD D,A        ;
 $6837 CALL $68B1    ;
 $683A DEC C         ;
 $683B JR NZ,$6827   ;
 $683D RET           ;

; Routine at 683E
;
; Used by the routine at #R$7198.
c$683E LD A,($5F1B)  ;
 $6841 RLCA          ;
 $6842 RLCA          ;
 $6843 RLCA          ;
 $6844 OR $07        ;
 $6846 LD C,A        ;
*$6847 LD A,C        ;
 $6848 XOR $40       ;
 $684A LD D,A        ;
 $684B CALL $68B1    ;
 $684E DEC C         ;
 $684F RET Z         ;
 $6850 DEC C         ;
 $6851 RET Z         ;
 $6852 JR $6847      ;

; Routine at 6854
;
; Used by the routine at #R$6D87.
@label=LevelStartJingle
c$6854 LD C,(IX+$06)                        ; #REGc=pointer to counter.
 $6857 INC (IX+$06)                         ; Increment the counter by one.
 $685A LD B,$00                             ; {Create an offset from #R$686A
 $685C LD HL,$686A                          ; using the counter as the LSB.
 $685F ADD HL,BC                            ; }
 $6860 LD D,(HL)                            ; #REGd=fetch the next byte from
                                            ; #R$686A.
 $6861 LD C,$08                             ; #REGc=#N$08 (note counter).
@label=LevelStartJingle_Loop
*$6863 CALL $68B1                           ; Call #R$68B1.
 $6866 DEC C                                ; Decrease the note counter by one.
 $6867 JR NZ,$6863                          ; Keep looping back to #R$6863
                                            ; until the note counter is zero.
 $6869 RET                                  ; Return.
 $686A DEFB $80,$80,$80,$80,$80,$80,$80,$80 ;
 $6872 DEFB $80,$80,$80,$80,$80,$80,$80,$80 ;
 $687A DEFB $80,$80,$80,$80,$80,$80,$80,$80 ;
; This entry point is used by the routine at #R$7048.
@label=GameStartJingle
*$6882 LD D,$30                             ; #REGd=#N$30.
 $6884 LD C,$40                             ; #REGc=#N$40.
 $6886 JR $6863                             ; Jump to #R$6863.

; Routine at 6888
c$6888 DEC (IX+$03)  ;
 $688B JR Z,$68BF    ;
 $688D LD D,(IX+$03) ;
 $6890 LD C,(IX+$02) ;
*$6893 CALL $68B1    ;
 $6896 DEC C         ;
 $6897 JR NZ,$6893   ;
 $6899 RET           ;
 $689A DEC (IX+$01)  ;
 $689D JR Z,$68BF    ;
 $689F LD C,(IX+$01) ;
 $68A2 LD B,$00      ;
 $68A4 LD L,(IX+$02) ;
 $68A7 LD H,(IX+$03) ;
 $68AA ADD HL,BC     ;
 $68AB LD D,(HL)     ;
 $68AC LD C,(IX+$04) ;
 $68AF JR $6893      ;

; Play square wave sound.
;
; Used by the routines at #R$6825, #R$683E, #R$6854 and #R$6888.
;
; D Duration of wave
@label=PlaySquareWave
c$68B1 LD A,$10      ; {Play square wave sound.
 $68B3 OUT ($FE),A   ;
 $68B5 LD B,D        ;
@label=PlaySquareWave_Loop
*$68B6 DJNZ $68B6    ; }
 $68B8 XOR A         ; {Play "silence".
 $68B9 OUT ($FE),A   ;
 $68BB LD B,D        ;
@label=Silence_Loop
*$68BC DJNZ $68BC    ; }
 $68BE RET           ; Return.

; Routine at 68BF
;
; Used by the routine at #R$6888.
c$68BF LD (IX+$00),$00 ;
 $68C3 RET             ;

; Routine at 68C4
c$68C4 LD HL,$68D0                          ; #REGhl=#R$68D0.
*$68C7 LD DE,$5F4D                          ; #REGde=#R$5F4D.
 $68CA LD BC,$0008                          ; #REGbc=#N$0008.
 $68CD LDIR                                 ;
 $68CF RET                                  ; Return.
 $68D0 DEFB $19,$20,$20,$20,$21,$D9,$68,$18 ;
 $68D8 DEFB $EE,$16,$08,$DE,$68,$10         ;
 $68DE DEFB $00,$78,$70,$68,$60,$58,$50,$48 ;
 $68E6 DEFB $40                             ;
; This entry point is used by the routines at #R$6C7A and #R$6E25.
*$68E7 LD HL,$68EC                          ; #REGhl=#R$68EC.
 $68EA JR $68C7                             ; Jump to #R$68C7.
 $68EC DEFB $16,$08,$F1,$68,$10,$00,$40,$48 ;
 $68F4 DEFB $50,$58,$60,$68,$70,$78         ;
; This entry point is used by the routine at #R$67E2.
*$68FA LD HL,$68FF                          ; #REGhl=#R$68FF.
 $68FD JR $68C7                             ; Jump to #R$68C7.
 $68FF DEFB $16,$10,$04,$69,$06,$00,$40,$40 ;
 $6907 DEFB $40,$40,$50,$50,$50,$50,$40,$40 ;
 $690F DEFB $40,$40,$50,$50,$50,$50         ;
; This entry point is used by the routine at #R$65E8.
*$6915 LD HL,$691A                          ; #REGhl=#R$691A.
 $6918 JR $68C7                             ;
 $691A DEFB $16,$10,$1F,$69,$06,$00,$50,$4E ;
 $6922 DEFB $4C                             ;
 $6923 LD C,D                               ;
 $6924 LD C,B                               ;
 $6925 LD B,(HL)                            ;
 $6926 LD B,H                               ;
 $6927 LD B,D                               ;
 $6928 LD B,B                               ;
 $6929 LD A,$3C                             ;
 $692B LD A,($3638)                         ;
 $692E INC (HL)                             ;
 $692F LD ($D0CD),A                         ;
 $6932 HALT                                 ;
 $6933 LD HL,$5F1B                          ;
 $6936 INC (HL)                             ;
 $6937 LD A,(IX+$01)                        ;
 $693A CP $C4                               ;
 $693C JR NC,$6977                          ;
 $693E CALL $6A46                           ;
 $6941 DEC E                                ;
 $6942 JP Z,$6A73                           ;
 $6945 CALL $7317                           ;
 $6948 BIT 7,(IX+$00)                       ;
 $694C JP NZ,$730D                          ;
 $694F LD A,(IX+$07)                        ;
 $6952 AND $07                              ;
 $6954 JR NZ,$6960                          ;
 $6956 LD A,(IX+$05)                        ;
 $6959 CP $08                               ;
 $695B JR Z,$6960                           ;
 $695D INC (IX+$05)                         ;
*$6960 LD A,(IX+$05)                        ;
 $6963 LD (IX+$03),$46                      ;
 $6967 SRA A                                ;
 $6969 ADD A,(IX+$02)                       ;
 $696C CP $20                               ;
 $696E JR C,$697A                           ;
 $6970 CP $A0                               ;
 $6972 JR NC,$6988                          ;
 $6974 LD (IX+$02),A                        ;
*$6977 JP $72B4                             ;
*$697A LD (IX+$02),$20                      ;
 $697E LD A,(IX+$05)                        ;
 $6981 NEG                                  ;
*$6983 LD (IX+$05),A                        ;
 $6986 JR $6977                             ;
*$6988 LD (IX+$02),$A0                      ;
 $698C CALL $6EAC                           ;
 $698F LD A,R                               ;
 $6991 AND $07                              ;
 $6993 CPL                                  ;
 $6994 JR $6983                             ;
 $6996 CALL $76D0                           ;
 $6999 LD HL,$5F1B                          ;
 $699C INC (HL)                             ;
 $699D CALL $6A46                           ;
 $69A0 DEC E                                ;
 $69A1 JP Z,$6A73                           ;
 $69A4 CALL $7317                           ;
 $69A7 BIT 7,(IX+$00)                       ;
 $69AB JP NZ,$730D                          ;
 $69AE LD (IX+$03),$45                      ;
 $69B2 LD A,(IX+$07)                        ;
 $69B5 AND $0F                              ;
 $69B7 JR NZ,$6A05                          ;
 $69B9 LD C,$00                             ;
 $69BB LD HL,$5F36                          ;
 $69BE LD A,(IX+$01)                        ;
 $69C1 SUB (HL)                             ;
 $69C2 JR NC,$69C6                          ;
 $69C4 LD C,$02                             ;
*$69C6 INC HL                               ;
 $69C7 LD A,(IX+$02)                        ;
 $69CA SUB (HL)                             ;
 $69CB JR NC,$69CF                          ;
 $69CD SET 0,C                              ;
*$69CF LD (IX+$06),C                        ;
 $69D2 JR $6A05                             ;
 $69D4 CALL $76D0                           ;
 $69D7 LD HL,$5F1B                          ;
 $69DA INC (HL)                             ;
 $69DB LD A,(IX+$01)                        ;
 $69DE CP $C4                               ;
 $69E0 JR NC,$6A2B                          ;
 $69E2 CALL $6A46                           ;
 $69E5 DEC E                                ;
 $69E6 JP Z,$6A73                           ;
 $69E9 CALL $7317                           ;
 $69EC BIT 7,(IX+$00)                       ;
 $69F0 JP NZ,$730D                          ;
 $69F3 LD (IX+$03),$42                      ;
 $69F7 LD A,(IX+$07)                        ;
 $69FA AND $0F                              ;
 $69FC JR NZ,$6A05                          ;
 $69FE LD A,R                               ;
 $6A00 AND $03                              ;
 $6A02 LD (IX+$06),A                        ;
*$6A05 BIT 0,(IX+$07)                       ;
 $6A09 JR NZ,$6A2B                          ;
 $6A0B BIT 0,(IX+$06)                       ;
 $6A0F JR Z,$6A2E                           ;
 $6A11 LD A,(IX+$05)                        ;
 $6A14 CP $02                               ;
 $6A16 JR Z,$6A1B                           ;
 $6A18 INC (IX+$05)                         ;
*$6A1B BIT 1,(IX+$06)                       ;
 $6A1F JR Z,$6A3A                           ;
 $6A21 LD A,(IX+$04)                        ;
 $6A24 CP $02                               ;
 $6A26 JR Z,$6A2B                           ;
 $6A28 INC (IX+$04)                         ;
*$6A2B JP $72A3                             ;
*$6A2E LD A,(IX+$05)                        ;
 $6A31 CP $FE                               ;
 $6A33 JR Z,$6A1B                           ;
 $6A35 DEC (IX+$05)                         ;
 $6A38 JR $6A1B                             ;
*$6A3A LD A,(IX+$04)                        ;
 $6A3D CP $FE                               ;
 $6A3F JR Z,$6A2B                           ;
 $6A41 DEC (IX+$04)                         ;
 $6A44 JR $6A2B                             ;
; This entry point is used by the routines at #R$65E8 and #R$6C7A.
*$6A46 LD HL,$5F35                          ;
 $6A49 LD E,$00                             ;
 $6A4B LD A,(HL)                            ;
 $6A4C AND $3F                              ;
 $6A4E DEC A                                ;
 $6A4F JR Z,$6A53                           ;
 $6A51 DEC A                                ;
 $6A52 RET NZ                               ;
*$6A53 INC HL                               ;
 $6A54 LD A,(HL)                            ;
 $6A55 SUB (IX+$01)                         ;
 $6A58 JP P,$6A5D                           ;
 $6A5B NEG                                  ;
*$6A5D CP $0C                               ;
 $6A5F RET NC                               ;
 $6A60 INC HL                               ;
 $6A61 LD A,(HL)                            ;
 $6A62 SUB (IX+$02)                         ;
 $6A65 JP P,$6A6A                           ;
 $6A68 NEG                                  ;
*$6A6A CP $0C                               ;
 $6A6C RET NC                               ;
 $6A6D CALL $68C4                           ;
 $6A70 LD E,$01                             ;
 $6A72 RET                                  ;
; This entry point is used by the routines at #R$65E8 and #R$6C7A.
*$6A73 PUSH IX                              ;
 $6A75 LD IX,$5F35                          ;
 $6A79 CALL $7617                           ;
 $6A7C LD (IX+$00),$0C                      ;
 $6A80 CALL $7617                           ;
 $6A83 LD (IX+$00),$0D                      ;
 $6A87 LD A,(IX+$01)                        ;
 $6A8A LD (IX+$04),A                        ;
 $6A8D LD A,(IX+$02)                        ;
 $6A90 LD (IX+$05),A                        ;
 $6A93 SUB $10                              ;
 $6A95 LD (IX+$02),A                        ;
 $6A98 CALL $7617                           ;
 $6A9B POP IX                               ;
 $6A9D JP $6AFC                             ;
 $6AA0 CALL $76D0                           ;
 $6AA3 LD A,(IX+$02)                        ;
 $6AA6 SUB $02                              ;
 $6AA8 JR C,$6ADF                           ;
 $6AAA LD (IX+$02),A                        ;
 $6AAD CALL $75CC                           ;
 $6AB0 CALL $74EE                           ;
 $6AB3 LD L,(IX+$01)                        ;
 $6AB6 LD H,(IX+$02)                        ;
 $6AB9 PUSH HL                              ;
 $6ABA LD A,(IX+$04)                        ;
 $6ABD LD (IX+$01),A                        ;
 $6AC0 LD A,(IX+$05)                        ;
 $6AC3 LD (IX+$02),A                        ;
 $6AC6 LD (IX+$00),$0C                      ;
 $6ACA CALL $76D0                           ;
 $6ACD CALL $75CC                           ;
 $6AD0 CALL $74EE                           ;
 $6AD3 POP HL                               ;
 $6AD4 LD (IX+$01),L                        ;
 $6AD7 LD (IX+$02),H                        ;
 $6ADA LD (IX+$00),$0D                      ;
 $6ADE RET                                  ;
*$6ADF CALL $7617                           ;
 $6AE2 LD A,(IX+$04)                        ;
 $6AE5 LD (IX+$01),A                        ;
 $6AE8 LD A,(IX+$05)                        ;
 $6AEB LD (IX+$02),A                        ;
 $6AEE LD (IX+$00),$0C                      ;
 $6AF2 CALL $7617                           ;
 $6AF5 LD (IX+$00),$0E                      ;
 $6AF9 JP $7617                             ;
; This entry point is used by the routine at #R$6C7A.
*$6AFC LD HL,$5F55                          ;
 $6AFF LD DE,$0004                          ;
 $6B02 LD B,$06                             ;
*$6B04 LD A,(HL)                            ;
 $6B05 AND A                                ;
 $6B06 JR Z,$6B13                           ;
 $6B08 LD C,A                               ;
 $6B09 LD (HL),$0F                          ;
 $6B0B ADD HL,DE                            ;
 $6B0C LD (HL),C                            ;
 $6B0D INC HL                               ;
 $6B0E LD (HL),$01                          ;
 $6B10 DEC HL                               ;
 $6B11 JR $6B14                             ;
*$6B13 ADD HL,DE                            ;
*$6B14 ADD HL,DE                            ;
 $6B15 DJNZ $6B04                           ;
 $6B17 RET                                  ;
 $6B18 LD HL,$5F1B                          ;
 $6B1B INC (HL)                             ;
 $6B1C LD A,(IX+$00)                        ;
 $6B1F PUSH AF                              ;
 $6B20 LD A,(IX+$04)                        ;
 $6B23 LD (IX+$00),A                        ;
 $6B26 CALL $76D0                           ;
 $6B29 LD A,(IX+$05)                        ;
 $6B2C AND A                                ;
 $6B2D JR Z,$6B4E                           ;
 $6B2F LD A,(IX+$02)                        ;
 $6B32 CP $A0                               ;
 $6B34 JR C,$6B3A                           ;
 $6B36 LD (IX+$05),$00                      ;
*$6B3A LD A,(IX+$01)                        ;
 $6B3D CP $68                               ;
 $6B3F JR NC,$6B7D                          ;
 $6B41 SUB $04                              ;
 $6B43 JR NC,$6B49                          ;
 $6B45 XOR A                                ;
 $6B46 LD (IX+$05),A                        ;
*$6B49 LD (IX+$01),A                        ;
 $6B4C JR $6B5A                             ;
*$6B4E LD A,(IX+$02)                        ;
 $6B51 ADD A,$04                            ;
 $6B53 CP $B8                               ;
 $6B55 JR NC,$6B77                          ;
 $6B57 LD (IX+$02),A                        ;
*$6B5A LD A,($5F1D)                         ;
 $6B5D AND $03                              ;
 $6B5F LD A,(IX+$04)                        ;
 $6B62 JR NZ,$6B69                          ;
 $6B64 XOR $01                              ;
 $6B66 LD (IX+$04),A                        ;
*$6B69 LD (IX+$00),A                        ;
 $6B6C CALL $75CC                           ;
 $6B6F CALL $74EE                           ;
 $6B72 POP AF                               ;
 $6B73 LD (IX+$00),A                        ;
 $6B76 RET                                  ;
*$6B77 LD (IX+$00),$00                      ;
 $6B7B POP AF                               ;
 $6B7C RET                                  ;
*$6B7D ADD A,$04                            ;
 $6B7F CP $C0                               ;
 $6B81 JR C,$6B49                           ;
 $6B83 XOR A                                ;
 $6B84 LD (IX+$05),A                        ;
 $6B87 LD A,$C0                             ;
 $6B89 JR $6B49                             ;
 $6B8B CALL $76D0                           ;
 $6B8E LD A,(IX+$02)                        ;
 $6B91 ADD A,$01                            ;
 $6B93 CP $B4                               ;
 $6B95 JR NC,$6BA0                          ;
 $6B97 LD (IX+$02),A                        ;
 $6B9A CALL $75CC                           ;
 $6B9D JP $74EE                             ;
*$6BA0 LD (IX+$00),$18                      ;
 $6BA4 LD A,($5F0D)                         ;
 $6BA7 AND A                                ;
 $6BA8 RET NZ                               ;
 $6BA9 LD DE,$65D1                          ;
 $6BAC JP $6568                             ;
 $6BAF LD A,($5F1C)                         ;
 $6BB2 AND A                                ;
 $6BB3 RET NZ                               ;
 $6BB4 LD A,($5F0C)                         ;
 $6BB7 AND A                                ;
 $6BB8 JR NZ,$6BC3                          ;
*$6BBA LD A,($5F2E)                         ;
 $6BBD AND A                                ;
 $6BBE JR Z,$6C0A                           ;
 $6BC0 JP $6FFD                             ;
*$6BC3 LD A,($5F32)                         ;
 $6BC6 AND A                                ;
 $6BC7 JR Z,$6BBA                           ;
 $6BC9 LD A,($5F2E)                         ;
 $6BCC AND A                                ;
 $6BCD CALL Z,$6C02                         ;
 $6BD0 CALL $6416                           ;
 $6BD3 LD A,($5F21)                         ;
 $6BD6 CPL                                  ;
 $6BD7 LD ($5F21),A                         ;
 $6BDA CALL $5FE8                           ;
 $6BDD JP $6FFD                             ;

; Game Over
;
; .
;
; .
;
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 1UP.)
@label=GameOver_1UP
c$6BE0 LD A,"1"+$80                     ; #REGa="1" + #N$80 (escape character).
; Print the messaging and pause to show it for a period of time.
@label=GameOver_Write
*$6BE2 LD ($6C30),A                     ; Write ASCII player number to
                                        ; #R$6C1F(#N$6C30).
 $6BE5 CALL $5FB7                       ; Call #R$5FB7.
 $6BE8 LD DE,$6C1E                      ; #REGde=#R$6C1E.
 $6BEB LD HL,$7038                      ; #REGhl=#N$7038.
 $6BEE CALL $7488                       ; Call #R$7488.
; Introduce a pause by counting down from #N$10000 four times.
 $6BF1 LD B,$04                         ; #REGb=#N$04 (counter).
; This entry point is used by the routine at #R$64E8.
*$6BF3 LD HL,$0000                      ; #REGhl=#N$0000 (large counter).
@label=GameOver_Pause
*$6BF6 DEC HL                           ; Decrease #REGhl by one.
 $6BF7 LD A,H                           ; {Loop back to #R$6BF6 until #REGhl is
 $6BF8 OR L                             ; zero.
 $6BF9 JR NZ,$6BF6                      ; }
 $6BFB DJNZ $6BF6                       ; Decrease counter by one and loop back
                                        ; to #R$6BF6 until counter is zero.
 $6BFD RET                              ; Return.
; #HTML(Set up altering the "GAME OVER PLAYER <em>X</em>" message for 2UP.)
@label=GameOver_2UP
*$6BFE LD A,"2"+$80                     ; #REGa="2" + #N$80 (escape character).
 $6C00 JR $6BE2                         ; Jump to #R$6BE2.
; This controller simply returns on end. This is for when the game continues
; after the messaging.
@label=GameOver_Controller
*$6C02 LD A,($5F21)                     ; {If #R$5F21 is zero, jump to #R$6BE0.
 $6C05 AND A                            ;
 $6C06 JR Z,$6BE0                       ; }
 $6C08 JR $6BFE                         ; Else, jump to #R$6BFE.
; This is a controller with a jump to #R$62B5 to return to the game selection
; screen.
@label=GameOver_ControllerRestart
*$6C0A CALL $73D3                       ; Call #R$73D3.
 $6C0D LD A,($5F21)                     ; {If #R$5F21 is not zero, jump to
 $6C10 AND A                            ; #R$6C19.
 $6C11 JR NZ,$6C19                      ; }
 $6C13 CALL $6BE0                       ; Call #R$6BE0.
@label=GameOver_Restart
*$6C16 JP $62B5                         ; Jump to #R$62B5.
@label=GameOver_Restart2UP
*$6C19 CALL $6BFE                       ; Call #R$6BFE.
 $6C1C JR $6C16                         ; Jump to #R$6C16.
; Game Over Messaging
@label=GameOver_Text
 $6C1E DEFM $47                         ; {#HTML("GAME OVER PLAYER <em>X</em>"
 $6C1F DEFM "GAME OVER PLAYER ","1"+$80 ; (#N(#PEEK(#PC)) is the attribute).)}

; Routine at 6C31
c$6C31 LD A,(IX+$01) ;
 $6C34 DEC A         ;
 $6C35 LD (IX+$01),A ;
 $6C38 CALL Z,$6D38  ;
 $6C3B RET           ; Return.

; Next Level
;
; Used by the routine at #R$7198.
@label=NextLevel
c$6C3C LD HL,$5F2D   ; {Increase #R$5F2D by one.
 $6C3F INC (HL)      ; }
 $6C40 LD A,(HL)     ; #REGa=#R$5F2D.
 $6C41 AND %00000111 ; Keep only bits 1-3.
; Every #N$05 levels is an extra life, handle the logic.
 $6C43 CP $05        ; {If there's carry-over from #N$05 jump to #R$6C58.
 $6C45 JR C,$6C58    ; }
 $6C47 LD A,(HL)     ; {Add #N$03 to #R$5F2D (and write it).
 $6C48 ADD A,$03     ;
 $6C4A LD (HL),A     ; }
 $6C4B LD HL,$5F2E   ; {Increase #R$5F2E by one.
 $6C4E INC (HL)      ; }
 $6C4F LD BC,$2500   ; #REGbc=#N$2500.
 $6C52 CALL $7415    ; Call #R$7415.
 $6C55 JP $64E8      ; Jump to #R$64E8.

; Initialise New Game
;
; Used by the routines at #R$6428, #R$64E8 and #R$6C3C.
@label=GameInit
c$6C58 LD A,($5F2D)  ; #REGa=#R$5F2D.
 $6C5B RLCA          ; #REGa=#REGa * 2.
 $6C5C AND %01110000 ; Keep only bits 4-6.
 $6C5E ADD A,$10     ; Add #N$10.
 $6C60 LD ($5F2F),A  ; Write this to #R$5F2F.
 $6C63 LD HL,$5F55   ; {Write #N$0A to #R$5F55.
 $6C66 LD (HL),$0A   ; }
 $6C68 INC HL        ; {Write #N$20 to #R$5F56.
 $6C69 LD (HL),$20   ; }
; The number of Nasties to spawn maxes at #N$99.
 $6C6B LD HL,$5F30   ; {#REGa=#R$5F30.
 $6C6E LD A,(HL)     ; }
 $6C6F ADD A,$01     ; {#REGa=#REGa + #N$01 (with "Decimal Adjust after
 $6C71 DAA           ; Addition").}
 $6C72 CP $99        ; {If #REGa is already #N$99 jump to #R$6C78.
 $6C74 JR C,$6C78    ; }
 $6C76 LD A,$99      ; #REGa=#N$99.
@label=GameInit_Return
*$6C78 LD (HL),A     ; Write #REGa to #REGhl.
 $6C79 RET           ; Return.

; Routine at 6C7A
;
; Used by the routine at #R$6E25.
c$6C7A LD A,(IX+$00)   ;
 $6C7D AND $3F         ;
 $6C7F CP $18          ;
 $6C81 JR NC,$6CA7     ;
 $6C83 CALL $68E7      ;
 $6C86 LD B,$01        ;
; This entry point is used by the routine at #R$5FE1.
*$6C88 LD A,($5F2F)    ;
 $6C8B SUB B           ;
 $6C8C JR C,$6CA1      ;
 $6C8E DAA             ;
 $6C8F LD ($5F2F),A    ;
 $6C92 AND A           ;
 $6C93 CALL Z,$6AFC    ;
*$6C96 LD HL,$50AC     ;
 $6C99 LD DE,$5F2F     ;
 $6C9C LD B,$01        ;
 $6C9E JP $7450        ;
*$6CA1 XOR A           ;
*$6CA2 LD ($5F2F),A    ;
 $6CA5 JR $6C96        ;
*$6CA7 CALL $68D4      ;
 $6CAA LD B,$05        ;
 $6CAC LD A,($5F2F)    ;
 $6CAF ADD A,B         ;
 $6CB0 DAA             ;
 $6CB1 JR NC,$6CA2     ;
 $6CB3 LD A,$99        ;
 $6CB5 JR $6CA2        ;
 $6CB7 CALL $76D0      ;
 $6CBA LD HL,$5F1B     ;
 $6CBD INC (HL)        ;
 $6CBE LD A,(IX+$01)   ;
 $6CC1 CP $C4          ;
 $6CC3 JR NC,$6CD6     ;
 $6CC5 CALL $6A46      ;
 $6CC8 DEC E           ;
 $6CC9 JP Z,$6A73      ;
 $6CCC CALL $7317      ;
 $6CCF BIT 7,(IX+$00)  ;
 $6CD3 JP NZ,$730D     ;
*$6CD6 INC (IX+$07)    ;
 $6CD9 LD (IX+$03),$44 ;
 $6CDD LD A,(IX+$07)   ;
 $6CE0 AND $1F         ;
 $6CE2 JR Z,$6D33      ;
 $6CE4 LD A,(IX+$01)   ;
 $6CE7 ADD A,(IX+$04)  ;
 $6CEA LD (IX+$01),A   ;
 $6CED CP $C0          ;
 $6CEF JR NC,$6D1B     ;
 $6CF1 CP $04          ;
 $6CF3 JR C,$6D21      ;
*$6CF5 LD A,(IX+$07)   ;
 $6CF8 AND $03         ;
 $6CFA BIT 2,(IX+$07)  ;
 $6CFE JR NZ,$6D04     ;
 $6D00 NEG             ;
 $6D02 XOR $03         ;
*$6D04 ADD A,(IX+$05)  ;
 $6D07 ADD A,(IX+$02)  ;
 $6D0A CP $20          ;
 $6D0C JR C,$6D27      ;
 $6D0E CP $A0          ;
 $6D10 JR NC,$6D2D     ;
 $6D12 LD (IX+$02),A   ;
*$6D15 CALL $75CC      ;
 $6D18 JP $74EE        ;
*$6D1B LD (IX+$04),$FE ;
 $6D1F JR $6CF5        ;
*$6D21 LD (IX+$04),$02 ;
 $6D25 JR $6CF5        ;
*$6D27 LD (IX+$05),$02 ;
 $6D2B JR $6D15        ;
*$6D2D LD (IX+$05),$FE ;
 $6D31 JR $6D15        ;
*$6D33 CALL $6EAC      ;
 $6D36 JR $6D04        ;

; Routine at 6D38
;
; Used by the routine at #R$6C31.
c$6D38 CALL $6D45    ; Call #R$6D45.
 $6D3B LD HL,$5F35   ; #REGhl=#R$5F35.
 $6D3E LD DE,$6D87   ; #REGde=#R$6D87.
 $6D41 LD C,$07      ; #REGc=#N$07.
 $6D43 JR $6D67      ; Jump to #R$6D67.
*$6D45 XOR A         ; {Write #N$00 to #R$5F29.
 $6D46 LD ($5F29),A  ; }
 $6D49 LD A,$1E      ; {Write #N$1E to #R$7515(#N$7516).
 $6D4B LD ($7516),A  ; }
 $6D4E CALL $74E2    ; Call #R$74E2.
 $6D51 CALL $74D4    ; Call #R$74D4.
 $6D54 LD HL,$6D7D   ; #REGhl=#R$6D7D.
 $6D57 LD A,($5F2D)  ; #REGa=#R$5F2D.
 $6D5A LD C,$06      ; #REGc=#N$06.
 $6D5C RLCA          ;
 $6D5D AND %00001111 ; Keep only bits 0-3.
 $6D5F LD E,A        ; {Create an offset in #REGde.
 $6D60 LD D,$00      ; }
 $6D62 ADD HL,DE     ; {#REGde=#REGhl + offset.
 $6D63 EX DE,HL      ; }
 $6D64 LD HL,$5F55   ; #REGhl=#R$5F55.
; This entry point is used by the routine at #R$6D87.
*$6D67 LD (HL),C     ;
 $6D68 INC HL        ;
 $6D69 LD (HL),$F0   ;
 $6D6B INC HL        ;
 $6D6C LD (HL),$68   ;
 $6D6E INC HL        ;
 $6D6F LD A,(DE)     ;
 $6D70 LD C,A        ;
 $6D71 INC DE        ;
 $6D72 LD A,(DE)     ;
 $6D73 LD (HL),A     ;
 $6D74 INC HL        ;
 $6D75 LD (HL),C     ;
 $6D76 INC HL        ;
 $6D77 LD (HL),$00   ;
 $6D79 INC HL        ;
 $6D7A LD (HL),$00   ;
 $6D7C RET           ;

; Data block at 6D7D
b$6D7D DEFB $04,$46,$08,$44,$10
 $6D82 DEFB $42,$12,$46,$14,$43

; Routine at 6D87
c$6D87 DEFB $01,$47    ;
 $6D89 LD A,(IX+$00)   ; #REGa=#REGix+#N$00.
 $6D8C PUSH AF         ; Stash #REGaf on the stack.
 $6D8D CP $07          ;
 $6D8F JR NZ,$6D97     ;
 $6D91 LD A,($5F29)    ;
 $6D94 AND A           ;
 $6D95 JR Z,$6DF0      ;
*$6D97 LD A,(IX+$05)   ;
 $6D9A AND A           ;
 $6D9B JR NZ,$6DB6     ;
 $6D9D INC (IX+$05)    ;
 $6DA0 LD A,(IX+$04)   ;
 $6DA3 LD (IX+$00),A   ;
 $6DA6 CALL $7617      ; Call #R$7617.
 $6DA9 POP AF          ; Restore #REGaf from the stack.
 $6DAA LD (IX+$00),A   ;
 $6DAD RET             ; Return.
; 1
*$6DAE LD A,$02        ; #REGa=#N$02.
 $6DB0 JR $6DD3        ; Jump to #R$6DD3.
; 2
*$6DB2 LD A,$01        ; #REGa=#N$01.
 $6DB4 JR $6DD3        ; Jump to #R$6DD3.
; 2
*$6DB6 LD A,(IX+$04)   ;
 $6DB9 LD (IX+$00),A   ;
 $6DBC CALL $76D0      ; Call #R$76D0.
 $6DBF LD A,($5F1D)    ;
 $6DC2 AND %00000011   ; Keep only bits 0-1.
 $6DC4 JR NZ,$6DD9     ;
 $6DC6 LD A,(IX+$04)   ;
 $6DC9 CP $01          ;
 $6DCB JR Z,$6DAE      ;
 $6DCD CP $02          ;
 $6DCF JR Z,$6DB2      ;
 $6DD1 XOR $01         ;
*$6DD3 LD (IX+$04),A   ;
 $6DD6 LD (IX+$00),A   ;
*$6DD9 LD A,(IX+$01)   ;
 $6DDC SUB $02         ;
 $6DDE LD (IX+$01),A   ;
 $6DE1 CP $90          ;
 $6DE3 CALL C,$6E11    ;
 $6DE6 CP $F8          ;
 $6DE8 JR NC,$6E03     ;
 $6DEA CALL $75CC      ; Call #R$75CC.
 $6DED CALL $74EE      ; Call #R$74EE.
; 3
*$6DF0 POP AF          ; Restore #REGaf from the stack.
 $6DF1 LD (IX+$00),A   ;
 $6DF4 LD A,($5C78)    ; #HTML(#REGa=<a
                       ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $6DF7 AND %00000111   ; Keep only bits 0-2.
 $6DF9 RET NZ          ;
 $6DFA LD A,(IX+$03)   ;
 $6DFD CP $47          ;
 $6DFF RET NZ          ;
 $6E00 JP $6854        ;
*$6E03 CALL $7607      ;
 $6E06 LD (IX+$00),$00 ;
 $6E0A POP AF          ;
 $6E0B CP $07          ;
 $6E0D JP Z,$5FE1      ;
 $6E10 RET             ; Return.
*$6E11 LD A,($5F29)    ;
 $6E14 AND A           ;
 $6E15 RET NZ          ;
 $6E16 INC A           ;
 $6E17 LD ($5F29),A    ;
 $6E1A LD HL,$5F35     ; #REGhl=#R$5F35.
 $6E1D LD DE,$6D87     ; #REGde=#R$6D87.
 $6E20 LD C,$07        ; #REGc=#N$07.
 $6E22 JP $6D67        ; Jump to #R$6D67.

; Routine at 6E25
;
; Used by the routine at #R$7198.
c$6E25 DEC (IX+$07)    ;
 $6E28 JR Z,$6EA8      ;
 $6E2A LD A,(IX+$01)   ;
 $6E2D ADD A,(IX+$04)  ;
 $6E30 CP $04          ;
 $6E32 JR C,$6E7A      ;
 $6E34 CP $C4          ;
 $6E36 JR NC,$6E8F     ;
 $6E38 LD (IX+$01),A   ;
*$6E3B LD A,(IX+$02)   ;
 $6E3E ADD A,(IX+$05)  ;
 $6E41 CP $20          ;
 $6E43 JR C,$6E95      ;
 $6E45 CP $A0          ;
 $6E47 JR NC,$6EC0     ;
 $6E49 LD (IX+$02),A   ;
 $6E4C LD A,(IX+$01)   ;
 $6E4F SUB $68         ;
 $6E51 JP P,$6E5C      ;
 $6E54 SET 7,(IX+$06)  ;
 $6E58 NEG             ;
 $6E5A JR $6E60        ;
*$6E5C RES 7,(IX+$06)  ;
*$6E60 CP $34          ;
 $6E62 JR NC,$6E6A     ;
 $6E64 SET 1,(IX+$06)  ;
 $6E68 JR $6E6E        ;
*$6E6A RES 1,(IX+$06)  ;
*$6E6E LD A,(IX+$04)   ;
 $6E71 AND $80         ;
 $6E73 XOR (IX+$06)    ;
 $6E76 LD (IX+$06),A   ;
 $6E79 RET             ;
*$6E7A LD (IX+$04),$04 ;
*$6E7E LD A,(IX+$05)   ;
 $6E81 AND A           ;
 $6E82 JR NZ,$6E3B     ;
 $6E84 LD A,R          ;
 $6E86 AND $04         ;
 $6E88 SUB $02         ;
 $6E8A LD (IX+$05),A   ;
 $6E8D JR $6E3B        ;
*$6E8F LD (IX+$04),$FC ;
 $6E93 JR $6E7E        ;
*$6E95 LD (IX+$05),$04 ;
*$6E99 LD A,(IX+$04)   ;
 $6E9C AND A           ;
 $6E9D RET NZ          ;
 $6E9E LD A,R          ;
 $6EA0 AND $04         ;
 $6EA2 SUB $02         ;
 $6EA4 LD (IX+$04),A   ;
 $6EA7 RET             ;
*$6EA8 RES 7,(IX+$00)  ;
; This entry point is used by the routines at #R$68C4 and #R$6C7A.
*$6EAC LD A,R          ;
 $6EAE AND $04         ;
 $6EB0 SUB $02         ;
 $6EB2 LD (IX+$04),A   ;
 $6EB5 LD A,R          ;
 $6EB7 RRA             ;
 $6EB8 AND $04         ;
 $6EBA SUB $02         ;
 $6EBC LD (IX+$05),A   ;
 $6EBF RET             ;
*$6EC0 LD (IX+$02),A   ;
 $6EC3 INC (IX+$07)    ;
 $6EC6 CP $C0          ;
 $6EC8 JR NC,$6F39     ;
 $6ECA CP $B8          ;
 $6ECC JR NC,$6EEC     ;
 $6ECE CALL $6F57      ;
 $6ED1 RET NC          ;
*$6ED2 LD A,(IX+$02)   ;
 $6ED5 CP $A8          ;
 $6ED7 JR NC,$6EDF     ;
 $6ED9 LD (IX+$05),$FC ;
 $6EDD JR $6E99        ;
*$6EDF LD A,(IX+$04)   ;
 $6EE2 NEG             ;
 $6EE4 LD (IX+$04),A   ;
 $6EE7 LD (IX+$05),$04 ;
 $6EEB RET             ;
*$6EEC CALL $6F57      ;
 $6EEF JR C,$6ED2      ;
 $6EF1 LD A,B          ;
 $6EF2 AND A           ;
 $6EF3 JR NZ,$6F1E     ;
*$6EF5 CALL $6C7A      ;
 $6EF8 LD A,(IX+$00)   ;
 $6EFB RRCA            ;
 $6EFC AND $0F         ;
 $6EFE LD C,A          ;
 $6EFF LD B,$00        ;
 $6F01 LD HL,$6F47     ;
 $6F04 ADD HL,BC       ;
 $6F05 LD C,(HL)       ;
 $6F06 CALL $7415      ;
 $6F09 LD (IX+$00),$28 ;
 $6F0D LD (IX+$02),$A0 ;
 $6F11 LD (IX+$03),$46 ;
 $6F15 RET             ;
*$6F16 CALL $68D4      ;
*$6F19 LD (IX+$00),$00 ;
 $6F1D RET             ;
*$6F1E LD A,(IX+$00)   ;
 $6F21 AND $3F         ;
 $6F23 CP $18          ;
 $6F25 JR C,$6F16      ;
 $6F27 LD A,(IX+$03)   ;
 $6F2A CP $47          ;
 $6F2C JR NZ,$6F34     ;
 $6F2E LD BC,$0150     ;
 $6F31 CALL $7415      ;
*$6F34 CALL $68E7      ;
 $6F37 JR $6F19        ;
*$6F39 BIT 1,(IX+$06)  ;
 $6F3D JR Z,$6F1E      ;
 $6F3F BIT 7,(IX+$06)  ;
 $6F43 JR Z,$6EF5      ;
 $6F45 JR $6F1E        ;
 $6F47 NOP             ;
 $6F48 NOP             ;
 $6F49 LD D,L          ;
 $6F4A NOP             ;
 $6F4B LD H,L          ;
 $6F4C NOP             ;
 $6F4D NOP             ;
 $6F4E NOP             ;
 $6F4F LD (HL),L       ;
 $6F50 ADD A,L         ;
 $6F51 SUB L           ;
 $6F52 NOP             ;
 $6F53 NOP             ;
 $6F54 NOP             ;
 $6F55 NOP             ;
 $6F56 NOP             ;
*$6F57 LD B,$03        ;
 $6F59 LD A,(IX+$01)   ;
 $6F5C CP $C0          ;
 $6F5E JR NC,$6F76     ;
 $6F60 AND A           ;
 $6F61 JP P,$6F6A      ;
 $6F64 NEG             ;
 $6F66 SUB $40         ;
 $6F68 AND $7F         ;
*$6F6A DEC B           ;
 $6F6B JR Z,$6F71      ;
 $6F6D SUB $20         ;
 $6F6F JR NC,$6F6A     ;
*$6F71 NEG             ;
 $6F73 CP $0F          ;
 $6F75 RET             ;
*$6F76 SCF             ;
 $6F77 RET             ;
 $6F78 CALL $76D0      ;
 $6F7B LD A,(IX+$01)   ;
 $6F7E ADD A,(IX+$04)  ;
 $6F81 CP $C4          ;
 $6F83 JR NC,$6FA4     ;
 $6F85 CP $01          ;
 $6F87 JR C,$6FA4      ;
 $6F89 LD C,A          ;
 $6F8A LD A,(IX+$02)   ;
 $6F8D ADD A,(IX+$05)  ;
 $6F90 CP $A8          ;
 $6F92 JR NC,$6FA4     ;
 $6F94 CP $20          ;
 $6F96 JR C,$6FA4      ;
 $6F98 LD (IX+$02),A   ;
 $6F9B LD (IX+$01),C   ;
 $6F9E CALL $75CC      ;
 $6FA1 JP $74EE        ;
; This entry point is used by the routine at #R$7198.
*$6FA4 CALL $7617      ;
 $6FA7 LD (IX+$00),$26 ;
 $6FAB LD (IX+$07),$03 ;
 $6FAF RET             ;
*$6FB0 IN A,($1F)      ;
 $6FB2 CPL             ;
 $6FB3 RET             ;
; This entry point is used by the routine at #R$7048.
*$6FB4 LD A,($5F0C)    ;
 $6FB7 AND $06         ;
 $6FB9 CP $02          ;
 $6FBB JR Z,$6FB0      ;
 $6FBD CP $04          ;
 $6FBF JR Z,$6FD7      ;
 $6FC1 LD A,$FB        ;
 $6FC3 OUT ($FD),A     ;
 $6FC5 IN A,($FE)      ;
 $6FC7 LD C,A          ;
 $6FC8 RRA             ;
 $6FC9 AND $01         ;
 $6FCB LD E,A          ;
 $6FCC LD A,C          ;
 $6FCD RLA             ;
 $6FCE AND $02         ;
 $6FD0 OR E            ;
 $6FD1 LD E,A          ;
 $6FD2 LD A,C          ;
 $6FD3 AND $1C         ;
 $6FD5 OR E            ;
 $6FD6 RET             ;
*$6FD7 LD A,$EF        ;
 $6FD9 OUT ($FD),A     ;
 $6FDB IN A,($FE)      ;
 $6FDD LD C,A          ;
 $6FDE AND $08         ;
 $6FE0 LD E,A          ;
 $6FE1 LD A,C          ;
 $6FE2 RRCA            ;
 $6FE3 RRCA            ;
 $6FE4 AND $45         ;
 $6FE6 OR E            ;
 $6FE7 LD E,A          ;
 $6FE8 RRCA            ;
 $6FE9 RRCA            ;
 $6FEA AND $10         ;
 $6FEC OR E            ;
 $6FED AND $1F         ;
 $6FEF LD E,A          ;
 $6FF0 LD A,$F7        ;
 $6FF2 OUT ($FD),A     ;
 $6FF4 IN A,($FE)      ;
 $6FF6 RRA             ;
 $6FF7 RRA             ;
 $6FF8 RRA             ;
 $6FF9 AND $02         ;
 $6FFB OR E            ;
 $6FFC RET             ;

; Routine at 6FFD
;
; Used by the routines at #R$5FE1 and #R$68C4.
c$6FFD LD HL,$5FAF   ; #REGhl=#R$5FAF.
 $7000 LD DE,$5F35   ; #REGde=#R$5F35.
 $7003 LD BC,$0008   ; #REGbc=#N$0008.
 $7006 LDIR          ;
 $7008 LD A,$80      ; #REGa=#N$80.
 $700A LD HL,$5F0C   ; #REGhl=#R$5F0C.
 $700D BIT 0,(HL)    ;
 $700F JR Z,$7013    ;
 $7011 ADD A,$7F     ;
*$7013 LD ($5F25),A  ;
 $7016 LD A,($5F2E)  ; {Decrease #R$5F2E by one.
 $7019 DEC A         ;
 $701A LD ($5F2E),A  ; }
 $701D JP $7378      ; Jump to #R$7378.

; Flash Score Label
;
; Used by the routine at #R$7048.
;
; .
;
; Controller for handling whether to action 1UP or 2UP score label.
@label=ScoreLabelFlash
c$7020 LD A,($5F21)  ; #REGa=#R$5F21.
 $7023 AND A         ; {If the current player is 2UP then jump to #R$7043.
 $7024 JR NZ,$7043   ; }
; Flash 1UP score label.
 $7026 LD HL,$0018   ; #REGhl=#N($00,$02,$03),#N($18,$02,$03) (position of the
                     ; 1UP score label).
; Set flash state for the 3-attributes of the score label.
@label=FlashText
*$7029 CALL $7534    ; Call #R$7534.
 $702C LD B,$03      ; #REGb=#N$03 (counter for the three letters in a score
                     ; label).
@label=FlashText_Loop
*$702E LD A,(HL)     ; Fetch the attribute byte.
 $702F OR %10000000  ; Ensure bit 7 is set (the flash bit).
 $7031 LD (HL),A     ; Write the attribute byte back.
 $7032 INC HL        ; Increase the attribute pointer by one.
 $7033 DJNZ $702E    ; Decrease counter by one and loop back to #R$702E until
                     ; counter is zero.
 $7035 RET           ; Return.
; Unset flash state for the 3-attributes of the score label.
@label=UnsetFlashText
*$7036 CALL $7534    ; Call #R$7534.
 $7039 LD B,$03      ; #REGb=#N$03 (counter for the three letters in a score
                     ; label).
@label=UnsetFlashText_Loop
*$703B LD A,(HL)     ; Fetch the attribute byte.
 $703C AND %01111111 ; Keep only bits 0-6 (i.e. everything except the flash
                     ; bit).
 $703E LD (HL),A     ; Write the attribute byte back.
 $703F INC HL        ; Increase the attribute pointer by one.
 $7040 DJNZ $703B    ; Decrease counter by one and loop back to #R$703B until
                     ; counter is zero.
 $7042 RET           ; Return.
; Flash 2UP score label.
@label=FlashScoreLabel2UP
*$7043 LD HL,$00D8   ; #REGhl=#N($00,$02,$03),#N($D8,$02,$03) (position of the
                     ; 2UP score label).
 $7046 JR $7029      ; Jump to #R$7029.

; Routine at 7048
@label=GamePlayEntry
c$7048 LD HL,$5F25     ; {If #R$5F25 is zero, jump to #R$706B.
 $704B LD A,(HL)       ;
 $704C AND A           ;
 $704D JR Z,$706B      ; }
 $704F DEC (HL)        ; Decrement #R$5F25 by one.
 $7050 JR NZ,$7020     ; Jump to #R$7020 if the delay timer is still active.
 $7052 LD A,($5F21)    ; {If #R$5F21 says this is a 2UP game, jump to #R$7066.
 $7055 AND A           ;
 $7056 JR NZ,$7066     ; }
; Handle turning off flash for 1UP score label.
 $7058 LD HL,$0018     ; #REGhl=#N($00,$02,$03),#N($18,$02,$03) (position of
                       ; the 1UP score label).
@label=Game_UnsetFlash
*$705B CALL $7036      ; Call #R$7036.
 $705E CALL $7617      ; Call #R$7617.
 $7061 CALL $6882      ; Call #R$6882.
 $7064 JR $706B        ; Jump to #R$706B.
; Handle turning off flash for 2UP score label.
@label=Game2UP_UnsetFlash
*$7066 LD HL,$00D8     ; #REGhl=#N($00,$02,$03),#N($D8,$02,$03) (position of
                       ; the 2UP score label).
 $7069 JR $705B        ; Jump to #R$705B.
; Init.
@label=GamePlay_Start
*$706B CALL $76D0      ; Call #R$76D0.
 $706E CALL $6FB4      ; Call #R$6FB4.
 $7071 BIT 4,A         ;
 $7073 JR Z,$70EF      ;
 $7075 LD (IX+$06),$00 ;
*$7079 BIT 0,A         ;
 $707B LD DE,$0000     ;
 $707E JR Z,$70D9      ;
 $7080 BIT 1,A         ;
 $7082 JR Z,$70E0      ;
 $7084 LD (IX+$04),$00 ;
*$7088 BIT 3,A         ;
 $708A JR Z,$70E4      ;
 $708C BIT 2,A         ;
 $708E JR Z,$70EB      ;
 $7090 LD (IX+$05),$00 ;
*$7094 LD A,(IX+$01)   ;
 $7097 ADD A,(IX+$04)  ;
 $709A LD E,$00        ;
 $709C CP $01          ;
 $709E JR C,$70AA      ;
 $70A0 CP $C4          ;
 $70A2 JR NC,$70AA     ;
 $70A4 LD (IX+$01),A   ;
 $70A7 LD E,(IX+$04)   ;
*$70AA LD A,(IX+$02)   ;
 $70AD ADD A,(IX+$05)  ;
 $70B0 LD D,$00        ;
 $70B2 CP $28          ;
 $70B4 JR C,$70C0      ;
 $70B6 CP $A0          ;
 $70B8 JR NC,$70C0     ;
 $70BA LD (IX+$02),A   ;
 $70BD LD D,(IX+$05)   ;
*$70C0 LD A,E          ;
 $70C1 OR D            ;
 $70C2 JR Z,$70D3      ;
 $70C4 LD ($5F2B),DE   ;
 $70C8 LD A,($5C78)    ;
 $70CB RRA             ;
 $70CC RRA             ;
 $70CD AND $01         ;
 $70CF INC A           ;
 $70D0 LD (IX+$00),A   ;
*$70D3 CALL $75CC      ;
 $70D6 JP $74EE        ;
*$70D9 LD E,$02        ;
*$70DB LD (IX+$04),E   ;
 $70DE JR $7088        ;
*$70E0 LD E,$FE        ;
 $70E2 JR $70DB        ;
*$70E4 LD D,$FE        ;
*$70E6 LD (IX+$05),D   ;
 $70E9 JR $7094        ;
*$70EB LD D,$02        ;
 $70ED JR $70E6        ;
*$70EF PUSH AF         ;
 $70F0 LD A,(IX+$06)   ;
 $70F3 INC (IX+$06)    ;
 $70F6 AND $07         ;
 $70F8 JR NZ,$7109     ;
 $70FA LD HL,$5F3D     ;
 $70FD LD B,$02        ;
 $70FF LD DE,$0008     ;
*$7102 LD A,(HL)       ;
 $7103 AND A           ;
 $7104 JR Z,$710D      ;
 $7106 ADD HL,DE       ;
 $7107 DJNZ $7102      ;
*$7109 POP AF          ;
 $710A JP $7079        ;
*$710D LD (HL),$03     ;
 $710F PUSH HL         ;
 $7110 INC HL          ;
 $7111 LD A,(IX+$01)   ;
 $7114 LD (HL),A       ;
 $7115 INC HL          ;
 $7116 LD A,(IX+$02)   ;
 $7119 LD (HL),A       ;
 $711A INC HL          ;
 $711B LD (HL),$47     ;
 $711D INC HL          ;
 $711E LD DE,($5F2B)   ;
 $7122 LD A,E          ;
 $7123 SLA A           ;
 $7125 ADD A,E         ;
 $7126 LD (HL),A       ;
 $7127 INC HL          ;
 $7128 LD A,D          ;
 $7129 SLA A           ;
 $712B ADD A,D         ;
 $712C LD (HL),A       ;
 $712D POP HL          ;
 $712E PUSH IX         ;
 $7130 PUSH HL         ;
 $7131 POP IX          ;
 $7133 CALL $7617      ;
 $7136 POP IX          ;
 $7138 CALL $6825      ;
 $713B JR $7109        ;

; Routine at 713D
;
; Used by the routines at #R$64E8 and #R$7198.
c$713D LD HL,$5F35   ; #REGhl=#R$5F35.
 $7140 LD B,$0A      ; #REGb=#N$0A.
 $7142 JR $7149      ; Jump to #R$7149.
 $7144 LD HL,$5F5D   ; #REGhl=#R$5F5D.
 $7147 LD B,$09      ; #REGb=#N$09.
*$7149 LD DE,$0008   ; #REGde=#N$0008.
*$714C LD (HL),$00   ;
 $714E ADD HL,DE     ;
 $714F DJNZ $714C    ; Decrease counter by one and loop back to #R$714C until
                     ; counter is zero.
 $7151 RET           ; Return.

; Routine at 7152
c$7152 LD A,($5F23)  ; {Return if #R$5F23 is not zero.
 $7155 AND A         ;
 $7156 RET NZ        ; }
 $7157 LD HL,$0100   ; #REGhl=#N$0100.
*$715A DEC HL        ; Decrease #REGhl by one.
 $715B LD A,L        ; {Jump to #R$715A if #REGhl is not zero.
 $715C OR H          ;
 $715D JR NZ,$715A   ; }
 $715F RET           ; Return.

; Frame Update
;
; Used by the routine at #R$6428.
@label=FrameUpdate
c$7160 DI            ; Disable interrupts.
 $7161 LD A,($5C78)  ; {#HTML(Store <a
 $7164 LD ($5F22),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                     ; at #R$5F22.)}
 $7167 LD A,$01      ; {Set #R$5F23 to #N$01 (frame has updated).
 $7169 LD ($5F23),A  ; }
 $716C PUSH IX       ; Stash #REGix on the stack.
 $716E LD HL,$5F55   ; {Write #R$5F55 to #N$71AC.
 $7171 LD ($71AC),HL ; }
; Self modifying code;
@ssub=ld ($71BE),hl ; Modify `JP, nnnn` - rocket object
 $7174 LD A,$C3      ; {#HTML(Write #N$C3 to #R$71BE and #R$7198 to
 $7176 LD ($71BE),A  ; #R$71BE(#N$71BF), i.e. <strong>JP #R$7198</strong>).
 $7179 LD HL,$7198   ;
 $717C LD ($71BF),HL ; }
 $717F LD IX,$5F35   ; #REGix=#R$5F35.
 $7183 JP $6463      ; Jump to #R$6463.

; Routine at 7186
;
; Used by the routines at #R$6428 and #R$7198.
;
; .
;
; Self modifying code; this updates the address for #REGbc (at #R$71AB).
c$7186 LD HL,$5F85   ; {Write #R$5F85 to #R$71AB(#N$71AC).
 $7189 LD ($71AC),HL ; }
; Self modifying code; this updates the command at #R$71BE to "LD HL, (xx)".
 $718C LD A,$2A      ; {Write #N$2A to #R$71BE.
 $718E LD ($71BE),A  ; }
; Self modifying code; this updates the address for #REGhl (at #R$71BE).
 $7191 LD HL,$5F1D   ; {Write #R$5F1D to #R$71BE(#N$71BF).
 $7194 LD ($71BF),HL ; }
 $7197 RET           ; Return.

; Routine at 7198
c$7198 CALL $7186                           ; Call #R$7186.
 $719B POP IX                               ; Restore #REGix from the stack.
 $719D XOR A                                ; {Write #N$00 to #R$5F23.
 $719E LD ($5F23),A                         ; }
 $71A1 EI                                   ; Enable interrupts.
 $71A2 RET                                  ; Return.
 $71A3 LD DE,$0008                          ; {#REGix=#REGix + #N$0008.
 $71A6 ADD IX,DE                            ; }
 $71A8 PUSH IX                              ; {#REGhl=#REGix (using the stack
 $71AA POP HL                               ; to make the transfer).}
 $71AB LD BC,$5F85                          ; #REGbc=#N$5F85(see #R$7186).
 $71AE AND A                                ;
 $71AF SBC HL,BC                            ; #REGhl=#REGhl - #REGbc.
 $71B1 JP C,$6463                           ; If there is any carry-over, jump
                                            ; to #R$6463.
; Holding "SHIFT" during an interlude pauses the game.
*$71B4 LD A,$FE                             ; {Read from the keyboard;
 $71B6 OUT ($FD),A                          ; #TABLE(default,centre,centre,centre,centre,centre,centre)
 $71B8 IN A,($FE)                           ; { =h,r2 Port Number | =h,c5 Bit }
                                            ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                                            ; { #N$FE | SHIFT | Z | X | C | V }
                                            ; TABLE#}
 $71BA BIT 0,A                              ; Has key "SHIFT" been pressed?
 $71BC JR Z,$71B4                           ; If it has then jump to #R$71B4.
 $71BE LD HL,($5F1D)                        ; #REGhl=#N$5F1D(see #R$7191).
 $71C1 INC HL                               ;
 $71C2 LD ($5F1D),HL                        ;
 $71C5 LD A,($5F1B)                         ;
 $71C8 LD ($5F1C),A                         ;
 $71CB LD B,A                               ;
 $71CC LD A,($5F2F)                         ;
 $71CF OR B                                 ;
 $71D0 JR NZ,$71D8                          ;
 $71D2 CALL $713D                           ; Call #R$713D.
 $71D5 CALL $6C3C                           ; Call #R$6C3C.
*$71D8 LD A,($5F1B)                         ;
 $71DB CP $06                               ;
 $71DD JR NC,$7211                          ;
 $71DF LD A,($5F1D)                         ;
 $71E2 LD B,A                               ;
 $71E3 LD A,R                               ;
 $71E5 ADD A,B                              ;
 $71E6 AND %00011111                        ; Keep only bits 0-4.
 $71E8 JR NZ,$7211                          ;
 $71EA LD A,($5F25)                         ;
 $71ED AND A                                ;
 $71EE JR NZ,$7211                          ;
 $71F0 LD A,($5F2F)                         ;
 $71F3 AND A                                ;
 $71F4 JR Z,$7211                           ;
 $71F6 LD A,($5F35)                         ;
 $71F9 AND %00111111                        ; Keep only bits 0-5.
 $71FB DEC A                                ;
 $71FC JR Z,$7201                           ;
 $71FE DEC A                                ;
 $71FF JR NZ,$7211                          ;
*$7201 LD HL,$5F55                          ;
 $7204 LD B,$06                             ;
 $7206 LD DE,$0008                          ;
*$7209 LD A,(HL)                            ;
 $720A AND A                                ;
 $720B JP Z,$7214                           ;
 $720E ADD HL,DE                            ;
 $720F DJNZ $7209                           ;
*$7211 JP $6457                             ; Jump to #R$6457.
*$7214 EX DE,HL                             ;
 $7215 LD HL,$7279                          ;
 $7218 PUSH BC                              ;
 $7219 LD BC,$0008                          ;
 $721C PUSH DE                              ;
 $721D LDIR                                 ;
 $721F POP IX                               ;
 $7221 LD A,$08                             ;
 $7223 LD (IX+$00),A                        ;
 $7226 LD A,($5F2D)                         ;
 $7229 AND $07                              ;
 $722B LD C,A                               ;
 $722C SLA A                                ;
 $722E ADD A,C                              ;
 $722F RLA                                  ;
 $7230 RLA                                  ;
 $7231 RLA                                  ;
 $7232 AND %01111000                        ; Keep only bits 3-6.
 $7234 ADD A,$2F                            ;
 $7236 LD (IX+$02),A                        ;
 $7239 LD HL,$6D7D                          ;
 $723C SLA C                                ;
 $723E LD B,$00                             ;
 $7240 ADD HL,BC                            ;
 $7241 LD A,(HL)                            ;
 $7242 LD (IX+$00),A                        ;
 $7245 INC HL                               ;
 $7246 LD A,(HL)                            ;
 $7247 LD (IX+$03),A                        ;
 $724A LD A,($5F2D)                         ;
 $724D SRL A                                ;
 $724F SRL A                                ;
 $7251 SRL A                                ;
 $7253 POP BC                               ;
 $7254 CP $04                               ;
 $7256 JR C,$725A                           ;
 $7258 LD A,$04                             ;
*$725A INC A                                ;
 $725B SUB B                                ;
 $725C JP M,$7271                           ;
 $725F LD A,R                               ;
 $7261 AND %00000011                        ; Keep only bits 0-1.
 $7263 JR NZ,$7266                          ;
 $7265 INC A                                ;
*$7266 SLA A                                ;
 $7268 ADD A,$1C                            ;
 $726A LD (IX+$00),A                        ;
 $726D LD (IX+$03),$45                      ; Set the colour to #N$45.
*$7271 CALL $7617                           ; Call #R$7617.
 $7274 CALL $67E2                           ; Call #R$67E2.
 $7277 JR $7211                             ; Jump to #R$7211.
 $7279 DEFB $04,$DA,$2F,$46,$FE,$02,$00,$00 ;
 $7281 DEFB $CD,$D0,$76,$21,$1B,$5F,$34,$DD ;
 $7289 DEFB $7E,$01,$FE,$C8,$30,$73,$CD,$46 ;
 $7291 DEFB $6A,$1D,$CA,$73,$6A,$CD,$17,$73 ;
 $7299 DEFB $DD,$CB,$00,$7E,$20,$6E,$DD,$36 ;
 $72A1 DEFB $03,$46                         ;
; This entry point is used by the routine at #R$68C4.
*$72A3 LD A,(IX+$02)                        ;
 $72A6 ADD A,(IX+$05)                       ;
 $72A9 CP $21                               ;
 $72AB JR C,$72DA                           ;
 $72AD CP $A0                               ;
 $72AF JR NC,$72EE                          ;
 $72B1 LD (IX+$02),A                        ;
; This entry point is used by the routine at #R$68C4.
*$72B4 LD A,(IX+$01)                        ;
 $72B7 ADD A,(IX+$04)                       ;
 $72BA LD (IX+$01),A                        ;
 $72BD CP $04                               ;
 $72BF JR C,$72E4                           ;
 $72C1 CP $C0                               ;
 $72C3 JR NC,$72F8                          ;
*$72C5 INC (IX+$07)                         ;
 $72C8 LD A,(IX+$07)                        ;
 $72CB RRA                                  ;
 $72CC AND $01                              ;
 $72CE XOR (IX+$00)                         ;
 $72D1 LD (IX+$00),A                        ;
; This entry point is used by the routine at #R$65E8.
*$72D4 CALL $75CC                           ;
 $72D7 JP $74EE                             ;
*$72DA LD (IX+$05),$02                      ;
 $72DE SET 0,(IX+$06)                       ;
 $72E2 JR $72B4                             ;
*$72E4 LD (IX+$04),$02                      ;
 $72E8 SET 1,(IX+$06)                       ;
 $72EC JR $72C5                             ;
*$72EE LD (IX+$05),$FE                      ;
 $72F2 RES 0,(IX+$06)                       ;
 $72F6 JR $72B4                             ;
*$72F8 LD (IX+$04),$FE                      ;
 $72FC RES 1,(IX+$06)                       ;
 $7300 JR $72C5                             ;
 $7302 LD A,R                               ;
 $7304 AND $04                              ;
 $7306 SUB $02                              ;
 $7308 LD (IX+$05),A                        ;
 $730B JR $72B4                             ;
; This entry point is used by the routines at #R$65E8, #R$68C4 and #R$6C7A.
*$730D CALL $6E25                           ;
 $7310 LD A,(IX+$00)                        ;
 $7313 AND A                                ;
 $7314 RET Z                                ;
 $7315 JR $72D4                             ;
; This entry point is used by the routines at #R$65E8, #R$68C4 and #R$6C7A.
*$7317 LD DE,$0008                          ;
 $731A LD HL,$5F3D                          ;
 $731D LD B,$02                             ;
*$731F PUSH HL                              ;
 $7320 LD A,(HL)                            ;
 $7321 AND A                                ;
 $7322 JR Z,$734E                           ;
 $7324 CP $26                               ;
 $7326 JR NC,$734E                          ;
 $7328 INC HL                               ;
 $7329 LD A,(HL)                            ;
 $732A SUB (IX+$01)                         ;
 $732D JP P,$7336                           ;
 $7330 NEG                                  ;
 $7332 LD C,$0A                             ;
 $7334 JR $7338                             ;
*$7336 LD C,$12                             ;
*$7338 CP C                                 ;
 $7339 JR NC,$734E                          ;
 $733B INC HL                               ;
 $733C LD A,(HL)                            ;
 $733D SUB (IX+$02)                         ;
 $7340 JP P,$7349                           ;
 $7343 NEG                                  ;
 $7345 LD C,$12                             ;
 $7347 JR $734B                             ;
*$7349 LD C,$0A                             ;
*$734B CP C                                 ;
 $734C JR C,$7353                           ;
*$734E POP HL                               ;
 $734F ADD HL,DE                            ;
 $7350 DJNZ $731F                           ;
 $7352 RET                                  ;
*$7353 LD (IX+$03),$47                      ;
 $7357 SET 7,(IX+$00)                       ;
 $735B LD (IX+$07),$40                      ;
 $735F INC HL                               ;
 $7360 INC HL                               ;
 $7361 LD A,(HL)                            ;
 $7362 LD (IX+$04),A                        ;
 $7365 INC HL                               ;
 $7366 LD A,(HL)                            ;
 $7367 LD (IX+$05),A                        ;
 $736A POP HL                               ;
 $736B PUSH IX                              ;
 $736D PUSH HL                              ;
 $736E POP IX                               ;
 $7370 CALL $6FA4                           ;
 $7373 POP IX                               ;
 $7375 JP $683E                             ;
; This entry point is used by the routines at #R$5FE1 and #R$6FFD.
*$7378 LD HL,$0002                          ;
 $737B LD ($5F2B),HL                        ;
 $737E LD HL,$0040                          ;
 $7381 CALL $76E3                           ;
 $7384 CALL $73BD                           ;
 $7387 AND A                                ;
 $7388 JR Z,$73A6                           ;
 $738A CALL $7399                           ;
*$738D LD HL,$00B0                          ;
 $7390 CALL $76E3                           ;
 $7393 CALL $73CB                           ;
 $7396 AND A                                ;
 $7397 JR Z,$73AB                           ;
*$7399 ADD A,$30                            ;
 $739B CALL $7468                           ;
 $739E LD DE,$73B5                          ;
 $73A1 PUSH BC                              ;
 $73A2 PUSH DE                              ;
 $73A3 JP $7478                             ;
*$73A6 CALL $73AB                           ;
 $73A9 JR $738D                             ;
*$73AB LD A,$20                             ;
 $73AD CALL $7468                           ;
 $73B0 LD A,$20                             ;
 $73B2 JP $7468                             ;
 $73B5 JR $73DB                             ;
 $73B7 INC A                                ;
 $73B8 LD A,(HL)                            ;
 $73B9 LD E,D                               ;
 $73BA INC A                                ;
 $73BB INC A                                ;
 $73BC LD H,(HL)                            ;
*$73BD LD A,($5F21)                         ;
 $73C0 AND A                                ;
 $73C1 JR NZ,$73C7                          ;
*$73C3 LD A,($5F2E)                         ;
 $73C6 RET                                  ;
*$73C7 LD A,($5F32)                         ;
 $73CA RET                                  ;
*$73CB LD A,($5F21)                         ;
 $73CE AND A                                ;
 $73CF JR Z,$73C7                           ;
 $73D1 JR $73C3                             ;
; This entry point is used by the routine at #R$6BE0.
*$73D3 LD HL,($5F0E)                        ;
 $73D6 LD DE,($5F11)                        ;
 $73DA LD A,L                               ;
*$73DB LD L,H                               ;
 $73DC LD H,A                               ;
 $73DD LD A,E                               ;
 $73DE LD E,D                               ;
 $73DF LD D,A                               ;
 $73E0 AND A                                ;
 $73E1 SBC HL,DE                            ;
 $73E3 JR C,$73F1                           ;
 $73E5 JR NZ,$7410                          ;
 $73E7 LD A,($5F10)                         ;
 $73EA LD E,A                               ;
 $73EB LD A,($5F13)                         ;
 $73EE CP E                                 ;
 $73EF JR C,$7410                           ;
*$73F1 LD HL,$5F11                          ;
*$73F4 PUSH HL                              ;
 $73F5 LD DE,$5F09                          ;
 $73F8 LD B,$03                             ;
*$73FA LD A,(DE)                            ;
 $73FB CP (HL)                              ;
 $73FC JR C,$7406                           ;
 $73FE JR NZ,$7404                          ;
 $7400 INC HL                               ;
 $7401 INC DE                               ;
 $7402 DJNZ $73FA                           ;
*$7404 POP HL                               ;
 $7405 RET                                  ;
*$7406 POP HL                               ;
 $7407 LD DE,$5F09                          ;
 $740A LD BC,$0003                          ;
 $740D LDIR                                 ;
 $740F RET                                  ;
*$7410 LD HL,$5F0E                          ;
 $7413 JR $73F4                             ;
; This entry point is used by the routines at #R$65E8, #R$6C3C and #R$6E25.
*$7415 LD A,($5F21)                         ;
 $7418 AND A                                ;
 $7419 JR NZ,$7420                          ;
 $741B LD HL,$5F10                          ;
 $741E JR $7423                             ;
*$7420 LD HL,$5F13                          ;
*$7423 LD A,(HL)                            ;
 $7424 ADD A,C                              ;
 $7425 DAA                                  ;
 $7426 LD (HL),A                            ;
 $7427 DEC HL                               ;
 $7428 LD A,(HL)                            ;
 $7429 ADC A,B                              ;
 $742A DAA                                  ;
 $742B LD (HL),A                            ;
 $742C DEC HL                               ;
 $742D LD A,(HL)                            ;
 $742E ADC A,$00                            ;
 $7430 DAA                                  ;
 $7431 LD (HL),A                            ;
 $7432 LD A,($5F21)                         ;
 $7435 AND A                                ;
 $7436 JR NZ,$7440                          ;

; Print Scores
;
; Used by the routine at #R$5FB7.
;
; .
;
; Sets up the 1UP score.
@label=Score_1UP
c$7438 LD HL,$4021   ; #REGhl=#N$4021 (screen buffer address).
 $743B LD DE,$5F0E   ; #REGde=#R$5F0E.
 $743E JR $744E      ; Jump to #R$744E.
; Sets up the 2UP score.
@label=Score_2UP
*$7440 LD HL,$4039   ; #REGhl=#N$4039 (screen buffer address).
 $7443 LD DE,$5F11   ; #REGde=#R$5F11.
 $7446 JR $744E      ; Jump to #R$744E.
; Sets up the HI score.
@label=Score_HI
*$7448 LD HL,$402D   ; #REGhl=#N$402D (screen buffer address).
 $744B LD DE,$5F09   ; #REGde=#R$5F09.
; Prints the score.
@label=PrintScore
*$744E LD B,$03      ; #REGb=#N$03.
; This entry point is used by the routine at #R$6C7A.
@label=PrintScore_Loop
*$7450 LD A,(DE)     ; #REGa=#REGde.
 $7451 RRCA          ; {#REGa=#REGa / #N$10.
 $7452 RRCA          ;
 $7453 RRCA          ;
 $7454 RRCA          ; }
 $7455 AND %00001111 ; Keep only bits 0-3.
 $7457 ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $7459 CALL $7468    ; Call #R$7468.
 $745C LD A,(DE)     ; #REGa=#REGde.
 $745D AND %00001111 ; Keep only bits 0-3.
 $745F ADD A,$30     ; #REGa=#REGa + #N$30 (convert to ASCII).
 $7461 CALL $7468    ; Call #R$7468.
 $7464 INC DE        ; Increment #REGde by one.
 $7465 DJNZ $7450    ; Decrease counter by one and loop back to #R$7450 until
                     ; counter is zero.
 $7467 RET           ; Return.

; Print Character
;
; Used by the routines at #R$5FE1, #R$7198, #R$7438 and #R$7488.
;
; A ASCII value to print
; HL Screen address
@label=PrintScreen
c$7468 PUSH BC       ; {Stash #REGbc, #REGde and #REGhl on the stack.
 $7469 PUSH DE       ;
 $746A PUSH HL       ; }
 $746B LD L,A        ; {Create an offset in #REGhl.
 $746C LD H,$00      ; }
 $746E ADD HL,HL     ; {#REGhl=#REGhl * 8.
 $746F ADD HL,HL     ;
 $7470 ADD HL,HL     ; }
 $7471 LD DE,($5C36) ; #HTML(#REGde=<a
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C36.html">CHARS</a>.)
 $7475 ADD HL,DE     ; {#REGde=#REGhl + #N$3C00. For examples of usage;
 $7476 EX DE,HL      ; #TABLE(default,centre,centre,centre,centre,centre)
                     ; { =h Letter | =h ASCII Value | =h * 8 (offset) | =h CHARS + offset }
                     ; #FOREACH($55,$4C,$54,$49,$4D,$41,$54,$45)(value,
                     ; { #LET(result=$3C00 + value * $08) "#CHR(value)" | #N(value) | #N(value * 8) | #HTML(<a href="https://skoolkid.github.io/rom/asm/3D00.html##N({result}, 2, 3, 1, 1)()">#N({result})) }
                     ; )
                     ; TABLE#}
; Print the character to the screen.
 $7477 POP HL        ; Restore #REGhl, containing the screen buffer location,
                     ; from the stack.
; This entry point is used by the routine at #R$7198.
*$7478 LD B,$08      ; #REGb=#N$08 (#N$08 rows of pixels).
@label=PrintScreen_Loop
*$747A LD A,(DE)     ; {Copy a byte from the font data to the screen buffer.
 $747B LD (HL),A     ; }
 $747C INC DE        ; Increment the font data by one.
 $747D INC H         ; Move onto the next pixel line.
 $747E DJNZ $747A    ; Decrease counter by one and loop back to #R$747A until
                     ; counter is zero.
 $7480 POP DE        ; {Restore #REGde and #REGbc from the stack.
 $7481 POP BC        ; }
; Reset #REGhl and move to the next column, ready to print the next character.
 $7482 LD A,H        ; {#REGh=#REGh - #N$08 (reset the display line).
 $7483 SUB $08       ;
 $7485 LD H,A        ; }
 $7486 INC L         ; Increment screen column by one.
 $7487 RET           ; Return.

; Print String
;
; Used by the routines at #R$5FE1, #R$6332, #R$6BE0 and #R$74AE.
;
; DE Pointer to string data
@label=PrintString
c$7488 PUSH HL       ; Stash #REGhl on the stack.
 $7489 CALL $76E3    ; Call #R$76E3.
 $748C LD A,(DE)     ; Fetch the attribute byte.
 $748D EX AF,AF'     ; Switch to the shadow #REGaf register.
 $748E INC DE        ; Increment #REGde by one to point to the text of the
                     ; string.
 $748F EXX           ; Switch to the shadow registers.
 $7490 POP HL        ; Restore #REGhl from the stack.
 $7491 CALL $7534    ; Call #R$7534.
; This entry point is used by the routine at #R$63E0.
@label=PrintString_Loop
*$7494 EXX           ; Switch back to the normal registers.
 $7495 LD A,(DE)     ; Fetch the character to print.
 $7496 BIT 7,A       ; {If bit 7 is set (which signifies the end of the
 $7498 JR NZ,$74A5   ; string), jump to #R$74A5.}
 $749A CALL $7468    ; Call #R$7468.
 $749D INC DE        ; Increment #REGde by one.
 $749E EXX           ; Switch to the shadow registers.
 $749F EX AF,AF'     ; Switch to the shadow #REGaf register.
 $74A0 LD (HL),A     ; Copy the attribute byte to the screen.
 $74A1 INC L         ; Increment #REGl by one.
 $74A2 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $74A3 JR $7494      ; Jump to #R$7494.
; Because the last character contains the terminator, it needs to be handled
; separately.
@label=PrintString_LastCharacter
*$74A5 AND %01111111 ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
 $74A7 CALL $7468    ; Call #R$7468.
 $74AA EXX           ; Switch to the shadow registers.
 $74AB EX AF,AF'     ; Switch to the shadow #REGaf register.
 $74AC LD (HL),A     ; Copy the attribute byte to the screen.
 $74AD RET           ; Return.

; Print Banner
;
; Used by the routine at #R$5FB7.
;
; .
;
; Prints "1UP".
@label=PrintBanner
c$74AE LD HL,$0018       ; #REGhl=#N($0018, 4, 4).
 $74B1 LD DE,$74C9       ; #REGde=#R$74C9.
 $74B4 CALL $7488        ; Call #R$7488.
; Prints "HI".
 $74B7 LD HL,$0078       ; #REGhl=#N($0078, 4, 4).
 $74BA LD DE,$74D1       ; #REGde=#R$74D1.
 $74BD CALL $7488        ; Call #R$7488.
; Prints "2UP".
 $74C0 LD HL,$00D8       ; #REGhl=#N($00D8, 4, 4).
 $74C3 LD DE,$74CD       ; #REGde=#R$74CD.
 $74C6 JP $7488          ; Jump to #R$7488.
; Banner text data.
@label=1UP_Text
 $74C9 DEFM $47          ; {"1UP" (#N(#PEEK(#PC)) is the attribute).
 $74CA DEFM "1U","P"+$80 ; }
@label=2UP_Text
 $74CD DEFM $47          ; {"2UP" (#N(#PEEK(#PC)) is the attribute).
 $74CE DEFM "2U","P"+$80 ; }
@label=HI_Text
 $74D1 DEFM $78          ; {"HI" (#N(#PEEK(#PC)) is the attribute).
 $74D2 DEFM "H","I"+$80  ; }

; Reset Screen Buffer
;
; Used by the routines at #R$5FB7, #R$6428 and #R$6D38.
@label=ResetScreen
c$74D4 LD HL,$4000   ; #REGhl=#R$4000(screen buffer).
 $74D7 LD B,$58      ; #REGb=#N$58 (i.e. finish once we reach the start of
                     ; #R$5800(attribute buffer)).
 $74D9 LD C,$00      ; #REGc=#N$00 (value to write).
; Continue on to #R$74DB to blank the screen buffer.

; Reset Routine
;
; Used by the routine at #R$74E2.
;
; HL Target address
; B Single byte representing the MSB of the end address (will always end on LSB
; . #N$00)
; C Value to write
@label=ResetCopier
c$74DB LD (HL),C     ; Write #REGc to the target address.
 $74DC INC HL        ; Increment the target address by one.
 $74DD LD A,H        ; {Are we finished yet? Check the MSB of the target vs.
 $74DE CP B          ; #REGb.}
 $74DF JR C,$74DB    ; Keep looping back to #R$74DB until there is no
                     ; carry-over.
 $74E1 RET           ; Return.

; Reset Attribute Buffer
;
; Used by the routines at #R$5FB7, #R$6428 and #R$6D38.
@label=ResetAttributes
c$74E2 XOR A         ; {Set the border to black.
 $74E3 OUT ($FE),A   ; }
 $74E5 LD HL,$5800   ; #REGhl=#R$5800(attribute buffer).
 $74E8 LD B,$5B      ; #REGb=#N$5B (i.e. finish once we reach the end of the
                     ; #R$5800(attribute buffer)).
 $74EA LD C,$00      ; #REGc=#N$00 (value to write).
 $74EC JR $74DB      ; Jump to #R$74DB.

; Routine at 74EE
;
; Used by the routines at #R$64E8, #R$65E8, #R$68C4, #R$6C7A, #R$6D87, #R$6E25,
; #R$7048 and #R$7198.
c$74EE EXX           ;
 $74EF LD HL,($5F1F) ; #REGhl=#R$5F1F.
 $74F2 CALL $7534    ; Call #R$7534.
 $74F5 LD A,($5F18)  ;
 $74F8 LD B,A        ;
 $74F9 LD A,($5F17)  ;
 $74FC RRCA          ;
 $74FD RRCA          ;
 $74FE INC A         ;
 $74FF RRCA          ;
 $7500 AND %00011111 ; Keep only bits 0-4.
 $7502 INC A         ;
 $7503 LD C,A        ;
 $7504 LD D,(IX+$03) ;
 $7507 LD E,B        ;
*$7508 PUSH HL       ;
*$7509 LD A,H        ;
 $750A CP $5B        ;
 $750C JR NC,$7526   ;
 $750E CP $58        ;
 $7510 JR C,$7526    ;
 $7512 LD A,L        ;
 $7513 AND %00011111 ; Keep only bits 0-4.
 $7515 CP $1A        ;
 $7517 JR NC,$7526   ;
 $7519 LD (HL),D     ;
 $751A INC L         ;
 $751B LD A,L        ;
 $751C AND %00011111 ; Keep only bits 0-4.
 $751E JR NZ,$7524   ;
 $7520 LD A,L        ;
 $7521 SUB $20       ;
 $7523 LD L,A        ;
*$7524 DJNZ $7509    ; Decrease counter by one and loop back to #R$7509 until
                     ; counter is zero.
*$7526 POP HL        ;
 $7527 PUSH BC       ;
 $7528 AND A         ;
 $7529 LD BC,$0020   ; #REGbc=#N$0020.
 $752C SBC HL,BC     ;
 $752E POP BC        ;
 $752F LD B,E        ;
 $7530 DEC C         ;
 $7531 JR NZ,$7508   ;
 $7533 RET           ; Return.

; Calculate Attribute Address
;
; Used by the routines at #R$5FE1, #R$63E0, #R$7020, #R$7488 and #R$74EE.
;
;   HL Pixel address co-ordinates
; O:HL Attribute buffer address
;
; Converts a given pixel address to the associated attribute buffer address.
@label=AttributeAddress
c$7534 LD A,L        ; Horizontal co-ordinate.
 $7535 RRCA          ; {Divide by #N08.
 $7536 RRCA          ;
 $7537 RRCA          ; }
 $7538 AND %00011111 ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                     ; horizontal screen values).
 $753A LD L,A        ; Store this back in #REGl.
 $753B LD A,H        ; Vertical co-ordinate.
 $753C RLCA          ; {Times by #N$04.
 $753D RLCA          ; }
 $753E LD C,A        ; Store this in #REGc temporarily.
 $753F AND %11100000 ; Keep only bits 5-7.
 $7541 OR L          ; Set the bits from #REGl.
 $7542 LD L,A        ; #REGl=#REGa.
 $7543 LD A,C        ; Fetch the stored value from #REGc.
 $7544 AND %00000011 ; Keep only bits 0-1.
 $7546 OR %01011000  ; Set MSB of the attribute buffer #N$58. This ensures our
                     ; value is >= #R$5800.
 $7548 LD H,A        ; Store this back in #REGh.
 $7549 RET           ; Return.

; Routine at 754A
;
; Used by the routines at #R$7557 and #R$7584.
c$754A LD A,H        ;
 $754B SUB $9F       ;
 $754D JP M,$7554    ;
 $7550 LD H,$9F      ;
 $7552 LD C,A        ;
 $7553 RET           ;
*$7554 LD C,$00      ;
 $7556 RET           ;

; Routine at 7557
;
; Used by the routine at #R$75CC.
c$7557 CALL $7623    ; Call #R$7623.
; This entry point is used by the routines at #R$7584 and #R$75CC.
*$755A LD HL,($5F14) ; #REGhl=#R$5F14.
 $755D LD A,L        ;
 $755E DEC A         ;
 $755F RLCA          ;
 $7560 AND %00001110 ; Keep only bits 1-3.
 $7562 CP $0E        ;
 $7564 JR NZ,$7568   ;
 $7566 LD A,$F1      ;
*$7568 LD ($767B),A  ;
 $756B CALL $754A    ; Call #R$754A.
 $756E CALL $76E3    ; Call #R$76E3.
 $7571 LD A,(DE)     ;
 $7572 SUB C         ;
 $7573 JR NC,$7576   ;
 $7575 XOR A         ; #REGa=#N$00.
*$7576 LD ($5F19),A  ; Write #REGa to #R$5F19.
 $7579 SLA C         ;
 $757B LD B,$00      ; #REGb=#N$00.
 $757D EX DE,HL      ;
 $757E ADD HL,BC     ;
 $757F EX DE,HL      ;
; This entry point is used by the routine at #R$7584.
*$7580 LD C,$00      ;
 $7582 INC DE        ;
 $7583 RET           ;

; Routine at 7584
;
; Used by the routine at #R$75CC.
c$7584 CALL $7635    ; Call #R$7635.
; This entry point is used by the routine at #R$75CC.
*$7587 LD L,(IX+$01) ;
 $758A LD H,(IX+$02) ;
 $758D LD A,L        ;
 $758E DEC A         ;
 $758F RLCA          ;
 $7590 AND %00001110 ; Keep only bits 1-3.
 $7592 CP $0E        ;
 $7594 JR NZ,$7598   ;
 $7596 LD A,$F1      ;
*$7598 LD ($76B9),A  ;
 $759B LD A,$02      ;
 $759D JR Z,$75A0    ;
 $759F INC A         ;
*$75A0 LD ($5F18),A  ;
 $75A3 CALL $754A    ; Call #R$754A.
 $75A6 LD ($5F1F),HL ;
 $75A9 CALL $76E3    ; Call #R$76E3.
 $75AC LD A,(DE)     ;
 $75AD SUB C         ;
 $75AE JR NC,$75B1   ;
 $75B0 XOR A         ; #REGa=#N$00.
*$75B1 LD ($5F1A),A  ;
 $75B4 LD ($5F17),A  ;
 $75B7 LD B,$00      ; #REGb=#N$00.
 $75B9 SLA C         ;
 $75BB EX DE,HL      ;
 $75BC ADD HL,BC     ;
 $75BD EX DE,HL      ;
 $75BE JR $7580      ; Jump to #R$7580.
 $75C0 PUSH DE       ;
 $75C1 CALL $755A    ;
 $75C4 EXX           ;
 $75C5 POP DE        ;
 $75C6 CALL $7587    ; Call #R$7587.
 $75C9 EXX           ;
 $75CA JR $75D3      ; Jump to #R$75D3.

; Routine at 75CC
;
; Used by the routines at #R$64E8, #R$68C4, #R$6C7A, #R$6D87, #R$6E25, #R$7048
; and #R$7198.
c$75CC CALL $7584    ;
 $75CF EXX           ;
 $75D0 CALL $7557    ;
; This entry point is used by the routine at #R$7584.
*$75D3 LD A,($5F15)  ;
 $75D6 SUB (IX+$02)  ;
 $75D9 JP Z,$7654    ;
 $75DC JP M,$75EE    ;
 $75DF LD C,A        ;
 $75E0 LD A,($5F19)  ;
 $75E3 CP C          ;
 $75E4 JP C,$7654    ;
 $75E7 SUB C         ;
 $75E8 LD ($5F19),A  ;
 $75EB JP $763A      ;
*$75EE EXX           ;
 $75EF NEG           ;
 $75F1 LD C,A        ;
 $75F2 LD A,($5F1A)  ;
 $75F5 CP C          ;
 $75F6 JP C,$7653    ;
 $75F9 SUB C         ;
 $75FA JP $7667      ;
 $75FD CALL $7587    ;
 $7600 JR $761A      ;
 $7602 CALL $755A    ;
 $7605 JR $760A      ;
; This entry point is used by the routine at #R$6D87.
*$7607 CALL $7557    ;
*$760A EXX           ;
 $760B XOR A         ;
 $760C LD C,A        ;
 $760D LD ($5F1A),A  ;
 $7610 LD ($5F17),A  ;
 $7613 EXX           ;
 $7614 JP $763A      ;
; This entry point is used by the routines at #R$65E8, #R$68C4, #R$6D87,
; #R$6E25, #R$7048 and #R$7198.
*$7617 CALL $7584    ;
*$761A EXX           ;
 $761B XOR A         ;
 $761C LD ($5F19),A  ;
 $761F LD C,A        ;
 $7620 JP $763A      ;

; Fetch Sprite
;
; Used by the routine at #R$7557.
;
; O:DE The sprite memory address
@label=GetDefaultSprite
c$7623 LD A,($5F16)  ; #REGa=#R$5F16.
@label=GetSprite
*$7626 DEC A         ; Decrease #REGa by one.
 $7627 RLCA          ; Multiply by 2 as the table contains addresses.
 $7628 AND %01111110 ; Keep only bits 1-6.
 $762A LD HL,$7702   ; #REGhl=#R$7702(sprite lookup table).
 $762D LD C,A        ; {Calculate the lookup address (#REGhl + offset).
 $762E LD B,$00      ;
 $7630 ADD HL,BC     ; }
 $7631 LD E,(HL)     ; {#REGde=fetch sprite address pointed to by #REGhl.
 $7632 INC HL        ;
 $7633 LD D,(HL)     ; }
 $7634 RET           ; Return.
; This entry point is used by the routine at #R$7584.
@label=ActorGetSprite
*$7635 LD A,(IX+$00) ; Load the sprite ID from the currently active actor.
 $7638 JR $7626      ; Jump to #R$7626.

; Routine at 763A
;
; Used by the routine at #R$75CC.
c$763A LD A,C                               ;
 $763B AND A                                ;
 $763C JR Z,$764E                           ;
 $763E DEC C                                ;
 $763F CALL $7671                           ;
 $7642 EXX                                  ;
 $7643 LD A,C                               ;
 $7644 AND A                                ;
 $7645 JR Z,$764B                           ;
*$7647 DEC C                                ;
 $7648 CALL $76AF                           ;
*$764B EXX                                  ;
 $764C JR $763A                             ;
*$764E EXX                                  ;
 $764F LD A,C                               ;
 $7650 AND A                                ;
 $7651 JR NZ,$7647                          ;
; This entry point is used by the routine at #R$75CC.
*$7653 EXX                                  ;
; This entry point is used by the routine at #R$75CC.
*$7654 LD A,($5F19)                         ;
 $7657 LD C,A                               ;
 $7658 LD A,($5F1A)                         ;
 $765B OR C                                 ;
 $765C RET Z                                ;
 $765D XOR A                                ;
 $765E LD ($5F19),A                         ;
 $7661 EXX                                  ;
 $7662 LD A,($5F1A)                         ;
 $7665 LD C,A                               ;
 $7666 XOR A                                ;
; This entry point is used by the routine at #R$75CC.
*$7667 LD ($5F1A),A                         ;
 $766A EXX                                  ;
 $766B JR $763A                             ;
 $766D EX DE,HL                             ;
 $766E EX (SP),HL                           ;
 $766F JR $768F                             ;
*$7671 PUSH HL                              ;
 $7672 EX DE,HL                             ;
 $7673 PUSH DE                              ;
 $7674 LD D,(HL)                            ;
 $7675 INC HL                               ;
 $7676 LD E,(HL)                            ;
 $7677 INC HL                               ;
 $7678 EX DE,HL                             ;
 $7679 XOR A                                ;
*$767A JR $767A                             ;
 $767C DEFB $29,$8F,$29,$8F,$29,$8F,$29,$8F ;
 $7684 DEFB $29,$8F,$29,$8F,$29,$8F,$EB,$E3 ;
 $768C DEFB $AE,$77,$2C                     ;
*$768F LD A,D                               ;
 $7690 XOR (HL)                             ;
 $7691 LD (HL),A                            ;
 $7692 INC L                                ;
 $7693 LD A,E                               ;
 $7694 XOR (HL)                             ;
 $7695 LD (HL),A                            ;
 $7696 POP DE                               ;
 $7697 POP HL                               ;
 $7698 DEC H                                ;
 $7699 LD A,H                               ;
 $769A CPL                                  ;
 $769B AND $07                              ;
 $769D RET NZ                               ;
 $769E LD A,L                               ;
 $769F SUB $20                              ;
 $76A1 LD L,A                               ;
 $76A2 CPL                                  ;
 $76A3 AND $E0                              ;
 $76A5 RET Z                                ;
 $76A6 LD A,H                               ;
 $76A7 ADD A,$08                            ;
 $76A9 LD H,A                               ;
 $76AA RET                                  ;
 $76AB EX DE,HL                             ;
 $76AC EX (SP),HL                           ;
 $76AD JR $768F                             ;
*$76AF PUSH HL                              ;
 $76B0 EX DE,HL                             ;
 $76B1 PUSH DE                              ;
 $76B2 LD D,(HL)                            ;
 $76B3 INC HL                               ;
 $76B4 LD E,(HL)                            ;
 $76B5 INC HL                               ;
 $76B6 EX DE,HL                             ;
 $76B7 XOR A                                ;
*$76B8 JR $76B8                             ;
 $76BA ADD HL,HL                            ;
 $76BB ADC A,A                              ;
 $76BC ADD HL,HL                            ;
 $76BD ADC A,A                              ;
 $76BE ADD HL,HL                            ;
 $76BF ADC A,A                              ;
 $76C0 ADC HL,HL                            ;
 $76C2 ADC A,A                              ;
 $76C3 ADD HL,HL                            ;
 $76C4 ADC A,A                              ;
 $76C5 ADD HL,HL                            ;
 $76C6 ADC A,A                              ;
 $76C7 ADD HL,HL                            ;
 $76C8 ADC A,A                              ;
 $76C9 EX DE,HL                             ;
 $76CA EX (SP),HL                           ;
 $76CB XOR (HL)                             ;
 $76CC LD (HL),A                            ;
 $76CD INC L                                ;
 $76CE JR $768F                             ;

; Test...
;
; Used by the routines at #R$64E8, #R$65E8, #R$68C4, #R$6C7A, #R$6D87, #R$6E25
; and #R$7048.
@@label=ActorUpdateMove
c$76D0 LD A,(IX+$01) ; {Copy actor X position to active actor X position.
 $76D3 LD ($5F14),A  ; }
 $76D6 LD A,(IX+$02) ; {Copy actor Y position to active actor Y position.
 $76D9 LD ($5F15),A  ; }
 $76DC LD A,(IX+$00) ; {Copy actor movement to active actor movement.
 $76DF LD ($5F16),A  ; }
 $76E2 RET           ; Return.

; Calculate Screen Address
;
; Used by the routines at #R$5FE1, #R$63E0, #R$7198, #R$7488, #R$7557 and
; #R$7584.
@label=ScreenAddress
c$76E3 LD A,L        ; #REGa=#REGl.
 $76E4 RRCA          ; {#REGa=#REGa / 4.
 $76E5 RRCA          ;
 $76E6 RRCA          ; }
 $76E7 AND %00011111 ; Keep only bits 0-4.
 $76E9 LD L,A        ; #REGl=#REGa.
 $76EA LD A,H        ; #REGa=#REGh.
 $76EB RLCA          ; {#REGa=#REGa * 2.
 $76EC RLCA          ; }
 $76ED AND %11100000 ; Keep only bits 5-7.
 $76EF OR L          ;
 $76F0 LD L,A        ; #REGl=#REGa.
 $76F1 LD A,H        ; #REGa=#REGh.
 $76F2 AND %00000111 ; Keep only bits 0-2.
 $76F4 EX AF,AF'     ; Switch to the shadow #REGaf register.
 $76F5 LD A,H        ; #REGa=#REGh.
 $76F6 RRCA          ; {#REGa=#REGa / 4.
 $76F7 RRCA          ;
 $76F8 RRCA          ; }
 $76F9 AND %00011000 ; Keep only bits 3-4.
 $76FB OR $40        ;
 $76FD LD H,A        ; #REGh=#REGa.
 $76FE EX AF,AF'     ; Switch to the shadow #REGaf register.
 $76FF OR H          ;
 $7700 LD H,A        ; #REGh=#REGa.
 $7701 RET           ; Return.

; Sprites Table
@label=SpritesTable
w$7702 DEFW $7883    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7704 DEFW $78AC    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7706 DEFW $791C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7708 DEFW $7933    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $770A DEFW $794E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $770C DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $770E DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7710 DEFW $79AF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7712 DEFW $79CE    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7714 DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7716 DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7718 DEFW $78E2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $771A DEFW $78D5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $771C DEFW $78FF    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $771E DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7720 DEFW $796D    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7722 DEFW $798E    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7724 DEFW $7A29    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7726 DEFW $7A4C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7728 DEFW $79ED    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $772A DEFW $7A0C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $772C DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $772E DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7730 DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7732 DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7734 DEFW $7AD2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7736 DEFW $7AD2    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7738 DEFW $7AF3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $773A DEFW $7AF3    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $773C DEFW $7AB1    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $773E DEFW $7AB1    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7740 DEFW $7A90    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7742 DEFW $7A90    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7744 DEFW $7A6F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7746 DEFW $7A6F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7748 DEFW $7B14    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $774A DEFW $7B2F    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $774C DEFW $785B    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $774E DEFW $786C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7750 DEFW $7807    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7752 DEFW $781C    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7754 DEFW $7831    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7756 DEFW $7846    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7758 DEFW $7762    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $775A DEFW $7783    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $775C DEFW $77A4    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $775E DEFW $77C5    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
 $7760 DEFW $77E6    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                     ; $100)(#EVAL((#PC - $7702) / 2)).
; View the equivalent code in;
; #LIST
; { #ATICATAC$A4BE }
; { #JETPAC$0000 }
; { #LUNARJETMAN$0000 }
; { #PSSST$761A }
; { #TRANZAM$0000 }
; LIST#

; Sprite: Cake
;
; .
;
; .
;
; Sprite #N$2B - Cake 1
b$7762 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7763 DEFB $07,$FF,$05,$CF,$07,$CF,$06,$FC ; {#SPRITE(#PC,7)(cake-01)
 $776B DEFB $07,$5C,$03,$67,$03,$FF,$01,$AF ;
 $7773 DEFB $00,$F3,$00,$3F,$00,$0F,$00,$01 ;
 $777B DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; Sprite #N$2C - Cake 2
 $7783 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7784 DEFB $FF,$FF,$3F,$FE,$B0,$FD,$F0,$DC ; {#SPRITE(#PC,7)(cake-02)
 $778C DEFB $FF,$CC,$8F,$EE,$46,$3F,$65,$17 ;
 $7794 DEFB $75,$91,$8D,$D9,$FE,$3F,$FF,$FF ;
 $779C DEFB $38,$F1,$07,$F1,$00,$7F,$00,$00 ; }
; Sprite #N$2D - Cake 3
 $77A4 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $77A5 DEFB $FF,$E2,$23,$D2,$DD,$DA,$45,$E7 ; {#SPRITE(#PC,7)(cake-03)
 $77AD DEFB $45,$FF,$23,$FF,$FF,$C7,$9F,$C7 ;
 $77B5 DEFB $FF,$FC,$C7,$1A,$C6,$8A,$7E,$8B ;
 $77BD DEFB $EC,$EC,$C7,$1F,$FD,$F3,$FF,$FE ; }
; Sprite #N$2E - Cake 4
 $77C5 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $77C6 DEFB $3F,$FF,$5F,$EF,$DF,$FF,$3C,$71 ; {#SPRITE(#PC,7)(cake-04)
 $77CE DEFB $FA,$22,$1A,$22,$1B,$AE,$FC,$71 ;
 $77D6 DEFB $7F,$FF,$38,$9F,$38,$F3,$BF,$EF ;
 $77DE DEFB $71,$FC,$FF,$E0,$FE,$00,$00,$00 ; }
; Sprite #N$2F - Cake 5
 $77E6 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $77E7 DEFB $FF,$E0,$FB,$E0,$FF,$E0,$CC,$E0 ; {#SPRITE(#PC,7)(cake-05)
 $77EF DEFB $FF,$E0,$F3,$40,$9E,$C0,$FD,$80 ;
 $77F7 DEFB $CF,$00,$BC,$00,$F0,$00,$80,$00 ;
 $77FF DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; Data block at 7807
;
; .
;
; .
;
; Frame 1.
b$7807 DEFB $0A                             ; width = #PEEK(#PC) bytes.
 $7808 DEFB $02,$80,$06,$60,$06,$20,$00,$80 ; {#SPRITE(#PC,7)(batter-01*)
 $7810 DEFB $01,$80,$03,$C0,$0F,$F0,$1F,$60 ;
 $7818 DEFB $1F,$00,$0E,$00                 ; }
; Frame 2.
 $781C DEFB $0A                             ; width = #PEEK(#PC) bytes.
 $781D DEFB $01,$40,$0F,$60,$0C,$38,$00,$98 ; {#SPRITE(#PC,7)(batter-02*)
 $7825 DEFB $19,$00,$3E,$40,$3C,$60,$18,$3C ;
 $782D DEFB $00,$3C,$00,$1C                 ; }
; Frame 3.
 $7831 DEFB $0A                             ; width = #PEEK(#PC) bytes.
 $7832 DEFB $00,$0C,$12,$1C,$3D,$78,$19,$30 ; {#SPRITE(#PC,7)(batter-03*)
 $783A DEFB $01,$8E,$63,$CF,$E3,$8F,$F0,$0E ;
 $7842 DEFB $7C,$3C,$00,$00                 ; }
; Frame 4.
 $7846 DEFB $0A                             ; width = #PEEK(#PC) bytes.
 $7847 DEFB $5A,$0E,$98,$4C,$18,$09,$4B,$90 ; {#SPRITE(#PC,7)(batter-04*)
 $784F DEFB $03,$82,$55,$A0,$00,$84,$10,$20 ;
 $7857 DEFB $04,$04,$00,$80                 ; }
; #UDGARRAY*batter-01,50;batter-02;batter-03;batter-04(batter)

; Sprite: Flour Explosion
;
; .
;
; .
;
; Frame 1.
b$785B DEFB $08                             ; width = #PEEK(#PC) bytes.
 $785C DEFB $00,$C0,$03,$D8,$1B,$3C,$3E,$FC ; {#SPRITE(#PC,7)(explosion-01*)
 $7864 DEFB $37,$FC,$3F,$B0,$16,$60,$07,$C0 ; }
; Frame 2.
 $786C DEFB $0B                             ; width = #PEEK(#PC) bytes.
 $786D DEFB $3C,$7E,$7E,$E7,$7F,$DB,$3F,$FB ; {#SPRITE(#PC,7)(explosion-02*)
 $7875 DEFB $77,$FE,$EF,$FE,$EF,$FF,$FE,$DE ;
 $787D DEFB $77,$3C,$07,$EC,$01,$C0         ; }
; #UDGARRAY*explosion-02,50;explosion-01(explosion)

; Sprite: Charlie the Chef
;
; .
;
; .
;
; Sprite #N$00 - Frame 1.
b$7883 DEFB $14                             ; width = #PEEK(#PC) bytes.
 $7884 DEFB $1C,$60,$1C,$00,$03,$E0,$0F,$D8 ; {#UDGARRAY2,attr=7,scale=4,step=2,mask=1,flip=2;(#PC)-(#PC+$11)-$01-$10(charlie-01)
 $788C DEFB $2E,$BC,$6F,$DC,$7E,$FC,$3F,$F8 ;
 $7894 DEFB $0F,$E0,$09,$20,$15,$50,$17,$D0 ;
 $789C DEFB $09,$20,$07,$C0,$00,$00,$07,$C0 ;
 $78A4 DEFB $3F,$E0,$3F,$F8,$3F,$F8,$0B,$B0 ; }
; Sprite #N$01 - Frame 2.
 $78AC DEFB $14                             ; width = #PEEK(#PC) bytes.
 $78AD DEFB $0C,$70,$00,$70,$0F,$80,$37,$E0 ; {#UDGARRAY2,attr=7,scale=4,step=2,mask=1,flip=2;(#PC)-(#PC+$11)-$01-$10(charlie-02)
 $78B5 DEFB $7A,$E8,$77,$EC,$7E,$FC,$3F,$F8 ;
 $78BD DEFB $0F,$E0,$09,$20,$15,$50,$17,$D0 ;
 $78C5 DEFB $09,$20,$07,$C0,$00,$00,$07,$C0 ;
 $78CD DEFB $0F,$F8,$3F,$F8,$3F,$F8,$1B,$A0 ; }
 $78D5 DEFB $06                             ; width = #PEEK(#PC) bytes.
 $78D6 DEFB $07,$C0,$07,$C0,$3F,$E0,$3F,$F8 ; {#SPRITE(#PC,7)(charlie-hat)
 $78DE DEFB $3F,$F8,$0B,$B0                 ; }
 $78E2 DEFB $0E                             ; width = #PEEK(#PC) bytes.
 $78E3 DEFB $3C,$70,$3C,$70,$03,$80,$0F,$F0 ; {#SPRITE(#PC,7)(whoknows15)
 $78EB DEFB $36,$D8,$37,$D8,$3E,$F8,$3F,$F8 ;
 $78F3 DEFB $0F,$E0,$09,$20,$15,$50,$17,$D0 ;
 $78FB DEFB $09,$20,$07,$C0                 ; }
 $78FF DEFB $0E                             ; width = #PEEK(#PC) bytes.
 $7900 DEFB $07,$C0,$09,$20,$17,$D0,$15,$50 ; {#SPRITE(#PC,7)(whoknows16)
 $7908 DEFB $09,$20,$0F,$E0,$3F,$F8,$3E,$F8 ;
 $7910 DEFB $37,$D8,$36,$D8,$0F,$E0,$03,$80 ;
 $7918 DEFB $1C,$70,$1C,$70                 ; }

; Sprite: Flour Bag
;
; .
;
; .
;
; Sprite #N$02.
b$791C DEFB $0B                             ; width = #PEEK(#PC) bytes
 $791D DEFB $00,$40,$00,$C0,$07,$E0,$3E,$70 ; {#SPRITE(#PC,7)(flour)
 $7925 DEFB $0E,$70,$0E,$38,$0E,$78,$06,$18 ;
 $792D DEFB $07,$FC,$03,$C0,$02,$00         ; }

; Sprite: Colonel Custard
;
; .
;
; .
;
; Sprite #N$03 - Frame 1.
b$7933 DEFB $0D                             ; width = #PEEK(#PC) bytes
 $7934 DEFB $1F,$FC,$3F,$FE,$3F,$FE,$7F,$FF ; {#SPRITE(#PC,6)(custard-01*)
 $793C DEFB $7F,$FF,$78,$8F,$74,$97,$56,$B7 ;
 $7944 DEFB $29,$CE,$27,$FE,$13,$FC,$0F,$F8 ;
 $794C DEFB $03,$E0                         ; }
; Sprite #N$04 - Frame 2.
 $794E DEFB $0F                             ; width = #PEEK(#PC) bytes
 $794F DEFB $00,$00,$07,$F8,$1F,$FC,$3F,$FE ; {#SPRITE(#PC,6)(custard-02*)
 $7957 DEFB $3F,$FE,$7F,$FF,$7F,$FF,$78,$8F ;
 $795F DEFB $74,$97,$56,$B7,$29,$CE,$27,$FE ;
 $7967 DEFB $13,$FC,$0F,$F8,$03,$E0         ; }
; #UDGARRAY*custard-02,50;custard-01(custard)

; Sprite: Chunky Chocolate
;
; .
;
; .
;
; Frame 1.
b$796D DEFB $10                             ; width = #PEEK(#PC) bytes
 $796E DEFB $1F,$06,$3F,$9F,$2F,$FF,$2F,$FF ; {#SPRITE(#PC,2)(chocolate-01*)
 $7976 DEFB $7F,$FF,$7F,$FF,$F1,$1F,$A9,$2E ;
 $797E DEFB $A8,$2C,$76,$DC,$39,$3C,$1F,$FE ;
 $7986 DEFB $17,$FE,$17,$FE,$0B,$FC,$06,$78 ; }
; Frame 2.
 $798E DEFB $10                             ; width = #PEEK(#PC) bytes
 $798F DEFB $78,$18,$DE,$7C,$BF,$FE,$BF,$FE ; {#SPRITE(#PC,2)(chocolate-02*)
 $7997 DEFB $BF,$FF,$7F,$FF,$31,$1E,$29,$2C ;
 $799F DEFB $28,$2C,$36,$DC,$79,$3E,$5F,$FE ;
 $79A7 DEFB $5F,$FE,$6F,$FC,$33,$38,$1E,$00 ; }
; #UDGARRAY*chocolate-01,50;chocolate-02(chocolate)

; Sprite: Sneaky Sugar
;
; .
;
; .
;
; Frame 1.
b$79AF DEFB $0F                             ; width = #PEEK(#PC) bytes
 $79B0 DEFB $04,$A0,$29,$04,$20,$51,$8B,$2A ; {#SPRITE(#PC,4)(sugar-01*)
 $79B8 DEFB $51,$15,$8F,$F4,$28,$89,$94,$96 ;
 $79C0 DEFB $54,$15,$17,$74,$A8,$8D,$0F,$F0 ;
 $79C8 DEFB $51,$56,$2A,$A8,$05,$20         ; }
; Frame 2.
 $79CE DEFB $0F                             ; width = #PEEK(#PC) bytes
 $79CF DEFB $04,$20,$12,$88,$44,$24,$AA,$AA ; {#SPRITE(#PC,4)(sugar-02*)
 $79D7 DEFB $55,$50,$8E,$ED,$51,$10,$69,$2E ;
 $79DF DEFB $A8,$28,$AE,$EB,$51,$14,$1E,$EA ;
 $79E7 DEFB $A2,$94,$59,$4A,$0A,$20         ; }
; #UDGARRAY*sugar-01,50;sugar-02(sugar)

; Sprite: Mixed Peel
;
; .
;
; .
;
; Frame 1.
b$79ED DEFB $0F                             ; width = #PEEK(#PC) bytes
 $79EE DEFB $3F,$81,$7F,$C7,$FF,$DE,$F3,$DE ; {#SPRITE(#PC,3)(peel-01*)
 $79F6 DEFB $F7,$DC,$77,$C0,$2F,$E0,$1F,$F0 ;
 $79FE DEFB $3F,$F8,$31,$88,$29,$48,$2D,$68 ;
 $7A06 DEFB $33,$98,$1F,$F0,$0F,$E0         ; }
; Frame 2.
 $7A0C DEFB $0E                             ; width = #PEEK(#PC) bytes
 $7A0D DEFB $3F,$80,$7F,$C0,$F3,$DF,$F7,$DF ; {#SPRITE(#PC,3)(peel-02*)
 $7A15 DEFB $77,$CE,$2F,$E0,$1F,$F0,$3F,$F8 ;
 $7A1D DEFB $23,$18,$25,$28,$2D,$68,$33,$98 ;
 $7A25 DEFB $1F,$F0,$0F,$E0                 ; }
; #UDGARRAY*peel-01,50;peel-02(peel)

; Sprite: Crafty Cheese
;
; .
;
; .
;
; Frame 1.
b$7A29 DEFB $11                             ; width = #PEEK(#PC) bytes
 $7A2A DEFB $0E,$00,$0E,$30,$7F,$FF,$78,$8F ; {#SPRITE(#PC,6)(cheese-01*)
 $7A32 DEFB $34,$96,$56,$B5,$51,$C5,$2F,$FA ;
 $7A3A DEFB $37,$F6,$17,$F4,$0B,$E8,$0D,$D8 ;
 $7A42 DEFB $05,$D0,$02,$A0,$03,$60,$01,$40 ;
 $7A4A DEFB $00,$80                         ; }
; Frame 2.
 $7A4C DEFB $11                             ; width = #PEEK(#PC) bytes
 $7A4D DEFB $00,$38,$06,$38,$7F,$FF,$78,$8F ; {#SPRITE(#PC,6)(cheese-02*)
 $7A55 DEFB $34,$96,$56,$B5,$51,$C5,$2F,$FA ;
 $7A5D DEFB $37,$F6,$17,$F4,$0B,$E8,$0D,$D8 ;
 $7A65 DEFB $05,$D0,$02,$A0,$03,$60,$01,$40 ;
 $7A6D DEFB $00,$80                         ; }
; #UDGARRAY*cheese-01,50;cheese-02(cheese)

; Sprite: Bernie Bolt
;
; Sprite #N$21.
b$7A6F DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7A70 DEFB $00,$0C,$00,$3E,$00,$5F,$00,$DF ; {#SPRITE(#PC,7)(bolt)
 $7A78 DEFB $01,$6F,$3B,$72,$65,$BC,$ED,$C8 ;
 $7A80 DEFB $CE,$F0,$AF,$20,$77,$C0,$FB,$A0 ;
 $7A88 DEFB $7C,$20,$3D,$E0,$1B,$C0,$07,$80 ; }

; Sprite: Wally Washer
;
; Sprite #N$1F + #N$20.
b$7A90 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7A91 DEFB $03,$E0,$0F,$F8,$1F,$FC,$3F,$FC ; {#SPRITE(#PC,7)(washer)
 $7A99 DEFB $7C,$7E,$7B,$BD,$F5,$3D,$F6,$3D ;
 $7AA1 DEFB $F4,$7B,$F8,$FB,$FF,$F6,$7F,$EE ;
 $7AA9 DEFB $7F,$DC,$3F,$38,$08,$F0,$07,$C0 ; }

; Sprite: Terry Tack
;
; Sprite #N$1E.
b$7AB1 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7AB2 DEFB $00,$03,$00,$07,$1F,$0E,$3F,$DC ; {#SPRITE(#PC,7)(tack)
 $7ABA DEFB $7F,$B8,$BF,$70,$BE,$E8,$BD,$D8 ;
 $7AC2 DEFB $BD,$BC,$9E,$7C,$5F,$FC,$4F,$FC ;
 $7ACA DEFB $27,$FC,$11,$F8,$0C,$10,$03,$E0 ; }

; Sprite: Mike The Pike
b$7AD2 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7AD3 DEFB $00,$FE,$04,$CF,$04,$CF,$16,$7F ; {#SPRITE(#PC,7)(pike)
 $7ADB DEFB $13,$79,$19,$F9,$4C,$FF,$67,$E7 ;
 $7AE3 DEFB $33,$B0,$1F,$98,$CE,$CE,$FE,$60 ;
 $7AEB DEFB $FB,$38,$39,$80,$1C,$C0,$1C,$00 ; }

; Sprite: Tin Tin Can
b$7AF3 DEFB $10                             ; width = #PEEK(#PC) bytes.
 $7AF4 DEFB $06,$7F,$03,$3E,$03,$3E,$03,$32 ; {#SPRITE(#PC,7)(tin-can)
 $7AFC DEFB $03,$32,$03,$32,$03,$32,$03,$32 ;
 $7B04 DEFB $03,$3E,$3B,$3E,$7E,$7F,$FC,$00 ;
 $7B0C DEFB $F8,$00,$F8,$00,$F0,$00,$60,$00 ; }

; Sprite: Bin Monster
;
; .
;
; .
;
; Sprite #N$23 - Frame 1.
b$7B14 DEFB $0D                             ; width = #PEEK(#PC) bytes.
 $7B15 DEFB $03,$C0,$03,$C0,$02,$30,$05,$FC ; {#SPRITE(#PC,7)(monster-01*)
 $7B1D DEFB $03,$0E,$0E,$F3,$07,$FC,$1E,$96 ;
 $7B25 DEFB $1E,$9F,$0E,$E8,$0F,$08,$07,$EE ;
 $7B2D DEFB $01,$F0                         ; }
; Sprite #N$24 - Frame 2.
 $7B2F DEFB $0D                             ; width = #PEEK(#PC) bytes.
 $7B30 DEFB $03,$C0,$03,$C0,$0C,$40,$3F,$A0 ; {#SPRITE(#PC,7)(monster-02*)
 $7B38 DEFB $70,$C0,$CF,$70,$BF,$E0,$69,$78 ;
 $7B40 DEFB $F9,$78,$97,$70,$10,$F0,$77,$E0 ;
 $7B48 DEFB $0F,$80                         ; }
; #UDGARRAY*monster-01,50;monster-02(monster)

; Cupboard Graphic
;
; .
;
; .
;
; ID: "#EVAL((#PC - $7B4A) / $08)".
@label=CupboardGraphic
b$7B4A DEFB %00000000                       ; {#UDG(#PC)
 $7B4B DEFB %00000000                       ;
 $7B4C DEFB %00000000                       ;
 $7B4D DEFB %00000000                       ;
 $7B4E DEFB %00000000                       ;
 $7B4F DEFB %00000000                       ;
 $7B50 DEFB %00000000                       ;
 $7B51 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B52 DEFB %11111111                       ; {#UDG(#PC)
 $7B53 DEFB %11111111                       ;
 $7B54 DEFB %11111111                       ;
 $7B55 DEFB %11111111                       ;
 $7B56 DEFB %11111111                       ;
 $7B57 DEFB %11111111                       ;
 $7B58 DEFB %11111111                       ;
 $7B59 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B5A DEFB %00111111                       ; {#UDG(#PC)
 $7B5B DEFB %00111111                       ;
 $7B5C DEFB %00000000                       ;
 $7B5D DEFB %00011111                       ;
 $7B5E DEFB %10011100                       ;
 $7B5F DEFB %10011010                       ;
 $7B60 DEFB %11011001                       ;
 $7B61 DEFB %01011001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B62 DEFB %11111111                       ; {#UDG(#PC)
 $7B63 DEFB %11111111                       ;
 $7B64 DEFB %00000000                       ;
 $7B65 DEFB %11111111                       ;
 $7B66 DEFB %11111100                       ;
 $7B67 DEFB %01111011                       ;
 $7B68 DEFB %01110001                       ;
 $7B69 DEFB %01110000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B6A DEFB %11111111                       ; {#UDG(#PC)
 $7B6B DEFB %11111111                       ;
 $7B6C DEFB %00000000                       ;
 $7B6D DEFB %11111111                       ;
 $7B6E DEFB %00111111                       ;
 $7B6F DEFB %10011110                       ;
 $7B70 DEFB %11001110                       ;
 $7B71 DEFB %11101110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B72 DEFB %11111100                       ; {#UDG(#PC)
 $7B73 DEFB %11111100                       ;
 $7B74 DEFB %00000000                       ;
 $7B75 DEFB %11111000                       ;
 $7B76 DEFB %00111001                       ;
 $7B77 DEFB %10011001                       ;
 $7B78 DEFB %01011011                       ;
 $7B79 DEFB %01011010                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B7A DEFB %01111001                       ; {#UDG(#PC)
 $7B7B DEFB %00111001                       ;
 $7B7C DEFB %00111001                       ;
 $7B7D DEFB %00011001                       ;
 $7B7E DEFB %00011001                       ;
 $7B7F DEFB %00011001                       ;
 $7B80 DEFB %00011001                       ;
 $7B81 DEFB %00011001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B82 DEFB %01110000                       ; {#UDG(#PC)
 $7B83 DEFB %01110000                       ;
 $7B84 DEFB %01110000                       ;
 $7B85 DEFB %01110000                       ;
 $7B86 DEFB %01110000                       ;
 $7B87 DEFB %01110000                       ;
 $7B88 DEFB %01110000                       ;
 $7B89 DEFB %01110000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B8A DEFB %11101110                       ; {#UDG(#PC)
 $7B8B DEFB %11101110                       ;
 $7B8C DEFB %11101110                       ;
 $7B8D DEFB %11101110                       ;
 $7B8E DEFB %11101110                       ;
 $7B8F DEFB %11101110                       ;
 $7B90 DEFB %11101110                       ;
 $7B91 DEFB %11101110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B92 DEFB %01011110                       ; {#UDG(#PC)
 $7B93 DEFB %01011100                       ;
 $7B94 DEFB %01011100                       ;
 $7B95 DEFB %01011000                       ;
 $7B96 DEFB %01011000                       ;
 $7B97 DEFB %01011000                       ;
 $7B98 DEFB %01011000                       ;
 $7B99 DEFB %01011000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7B9A DEFB %00011001                       ; {#UDG(#PC)
 $7B9B DEFB %00011001                       ;
 $7B9C DEFB %00011001                       ;
 $7B9D DEFB %00011001                       ;
 $7B9E DEFB %00011001                       ;
 $7B9F DEFB %00011001                       ;
 $7BA0 DEFB %00011001                       ;
 $7BA1 DEFB %00011001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BA2 DEFB %00000011                       ; {#UDG(#PC)
 $7BA3 DEFB %00000011                       ;
 $7BA4 DEFB %00000011                       ;
 $7BA5 DEFB %00000011                       ;
 $7BA6 DEFB %00000011                       ;
 $7BA7 DEFB %00000001                       ;
 $7BA8 DEFB %00000001                       ;
 $7BA9 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BAA DEFB %01111100                       ; {#UDG(#PC)
 $7BAB DEFB %01111110                       ;
 $7BAC DEFB %01111111                       ;
 $7BAD DEFB %01111111                       ;
 $7BAE DEFB %10111111                       ;
 $7BAF DEFB %10111111                       ;
 $7BB0 DEFB %11111110                       ;
 $7BB1 DEFB %01111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BB2 DEFB %01011000                       ; {#UDG(#PC)
 $7BB3 DEFB %01011000                       ;
 $7BB4 DEFB %01011000                       ;
 $7BB5 DEFB %01011000                       ;
 $7BB6 DEFB %01011000                       ;
 $7BB7 DEFB %01011000                       ;
 $7BB8 DEFB %01011000                       ;
 $7BB9 DEFB %01011000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BBA DEFB %00011001                       ; {#UDG(#PC)
 $7BBB DEFB %00011001                       ;
 $7BBC DEFB %00011010                       ;
 $7BBD DEFB %00011000                       ;
 $7BBE DEFB %00011111                       ;
 $7BBF DEFB %00000000                       ;
 $7BC0 DEFB %00111111                       ;
 $7BC1 DEFB %01111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BC2 DEFB %01110000                       ; {#UDG(#PC)
 $7BC3 DEFB %01110001                       ;
 $7BC4 DEFB %01111011                       ;
 $7BC5 DEFB %11111100                       ;
 $7BC6 DEFB %11111111                       ;
 $7BC7 DEFB %00000000                       ;
 $7BC8 DEFB %11111111                       ;
 $7BC9 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BCA DEFB %11101110                       ; {#UDG(#PC)
 $7BCB DEFB %11001110                       ;
 $7BCC DEFB %10011110                       ;
 $7BCD DEFB %00111111                       ;
 $7BCE DEFB %11111111                       ;
 $7BCF DEFB %00000000                       ;
 $7BD0 DEFB %11111111                       ;
 $7BD1 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BD2 DEFB %01011000                       ; {#UDG(#PC)
 $7BD3 DEFB %01011000                       ;
 $7BD4 DEFB %10011000                       ;
 $7BD5 DEFB %00111000                       ;
 $7BD6 DEFB %11111000                       ;
 $7BD7 DEFB %00000000                       ;
 $7BD8 DEFB %11111100                       ;
 $7BD9 DEFB %11111110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BDA DEFB %11111111                       ; {#UDG(#PC)
 $7BDB DEFB %11111111                       ;
 $7BDC DEFB %11111111                       ;
 $7BDD DEFB %01111111                       ;
 $7BDE DEFB %01111111                       ;
 $7BDF DEFB %01111111                       ;
 $7BE0 DEFB %00111111                       ;
 $7BE1 DEFB %00111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BE2 DEFB %00111111                       ; {#UDG(#PC)
 $7BE3 DEFB %00011111                       ;
 $7BE4 DEFB %00011111                       ;
 $7BE5 DEFB %00001111                       ;
 $7BE6 DEFB %00001111                       ;
 $7BE7 DEFB %00000111                       ;
 $7BE8 DEFB %00000111                       ;
 $7BE9 DEFB %00000011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BEA DEFB %00111011                       ; {#UDG(#PC)
 $7BEB DEFB %01110111                       ;
 $7BEC DEFB %11101111                       ;
 $7BED DEFB %11011111                       ;
 $7BEE DEFB %11011111                       ;
 $7BEF DEFB %11111111                       ;
 $7BF0 DEFB %01111111                       ;
 $7BF1 DEFB %00111110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BF2 DEFB %11111111                       ; {#UDG(#PC)
 $7BF3 DEFB %11111111                       ;
 $7BF4 DEFB %11111111                       ;
 $7BF5 DEFB %01111111                       ;
 $7BF6 DEFB %00111111                       ;
 $7BF7 DEFB %00011111                       ;
 $7BF8 DEFB %00001111                       ;
 $7BF9 DEFB %00000011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7BFA DEFB %11111111                       ; {#UDG(#PC)
 $7BFB DEFB %01111111                       ;
 $7BFC DEFB %00011111                       ;
 $7BFD DEFB %00000111                       ;
 $7BFE DEFB %00000001                       ;
 $7BFF DEFB %00000000                       ;
 $7C00 DEFB %00000000                       ;
 $7C01 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C02 DEFB %11111111                       ; {#UDG(#PC)
 $7C03 DEFB %11111111                       ;
 $7C04 DEFB %11111111                       ;
 $7C05 DEFB %11111111                       ;
 $7C06 DEFB %11111111                       ;
 $7C07 DEFB %00000000                       ;
 $7C08 DEFB %00000000                       ;
 $7C09 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C0A DEFB %11111111                       ; {#UDG(#PC)
 $7C0B DEFB %11111110                       ;
 $7C0C DEFB %11111000                       ;
 $7C0D DEFB %11100000                       ;
 $7C0E DEFB %10000000                       ;
 $7C0F DEFB %00000000                       ;
 $7C10 DEFB %00000000                       ;
 $7C11 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C12 DEFB %11111111                       ; {#UDG(#PC)
 $7C13 DEFB %11111111                       ;
 $7C14 DEFB %11111111                       ;
 $7C15 DEFB %11111110                       ;
 $7C16 DEFB %11111100                       ;
 $7C17 DEFB %11111000                       ;
 $7C18 DEFB %11110000                       ;
 $7C19 DEFB %11000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C1A DEFB %10000000                       ; {#UDG(#PC)
 $7C1B DEFB %00000000                       ;
 $7C1C DEFB %00000000                       ;
 $7C1D DEFB %00000000                       ;
 $7C1E DEFB %00000000                       ;
 $7C1F DEFB %00000000                       ;
 $7C20 DEFB %00000000                       ;
 $7C21 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C22 DEFB %11000000                       ; {#UDG(#PC)
 $7C23 DEFB %11000000                       ;
 $7C24 DEFB %11000000                       ;
 $7C25 DEFB %11000000                       ;
 $7C26 DEFB %11000000                       ;
 $7C27 DEFB %10000000                       ;
 $7C28 DEFB %10000000                       ;
 $7C29 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C2A DEFB %11111100                       ; {#UDG(#PC)
 $7C2B DEFB %11111000                       ;
 $7C2C DEFB %11111000                       ;
 $7C2D DEFB %11110000                       ;
 $7C2E DEFB %11110000                       ;
 $7C2F DEFB %11100000                       ;
 $7C30 DEFB %11100000                       ;
 $7C31 DEFB %11000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C32 DEFB %11111111                       ; {#UDG(#PC)
 $7C33 DEFB %11111111                       ;
 $7C34 DEFB %11111111                       ;
 $7C35 DEFB %11111110                       ;
 $7C36 DEFB %11111110                       ;
 $7C37 DEFB %11111110                       ;
 $7C38 DEFB %11111100                       ;
 $7C39 DEFB %11111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C3A DEFB %00000001                       ; {#UDG(#PC)
 $7C3B DEFB %00000000                       ;
 $7C3C DEFB %00000000                       ;
 $7C3D DEFB %00000000                       ;
 $7C3E DEFB %00000000                       ;
 $7C3F DEFB %00000000                       ;
 $7C40 DEFB %00000000                       ;
 $7C41 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C42 DEFB %11111111                       ; {#UDG(#PC)
 $7C43 DEFB %11111111                       ;
 $7C44 DEFB %11000000                       ;
 $7C45 DEFB %11000000                       ;
 $7C46 DEFB %11001111                       ;
 $7C47 DEFB %11001111                       ;
 $7C48 DEFB %11001100                       ;
 $7C49 DEFB %11001100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C4A DEFB %11111111                       ; {#UDG(#PC)
 $7C4B DEFB %11111111                       ;
 $7C4C DEFB %00000000                       ;
 $7C4D DEFB %00000000                       ;
 $7C4E DEFB %11111111                       ;
 $7C4F DEFB %11111111                       ;
 $7C50 DEFB %00111000                       ;
 $7C51 DEFB %10010010                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C52 DEFB %11111111                       ; {#UDG(#PC)
 $7C53 DEFB %11111111                       ;
 $7C54 DEFB %00000000                       ;
 $7C55 DEFB %00000000                       ;
 $7C56 DEFB %11111111                       ;
 $7C57 DEFB %11111111                       ;
 $7C58 DEFB %11001100                       ;
 $7C59 DEFB %01000100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C5A DEFB %11111111                       ; {#UDG(#PC)
 $7C5B DEFB %11111111                       ;
 $7C5C DEFB %00000000                       ;
 $7C5D DEFB %00000000                       ;
 $7C5E DEFB %11111111                       ;
 $7C5F DEFB %11111111                       ;
 $7C60 DEFB %10000010                       ;
 $7C61 DEFB %11001110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C62 DEFB %11111111                       ; {#UDG(#PC)
 $7C63 DEFB %11111111                       ;
 $7C64 DEFB %00000000                       ;
 $7C65 DEFB %00000000                       ;
 $7C66 DEFB %11111111                       ;
 $7C67 DEFB %11111111                       ;
 $7C68 DEFB %00011001                       ;
 $7C69 DEFB %01001001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C6A DEFB %11111111                       ; {#UDG(#PC)
 $7C6B DEFB %11111111                       ;
 $7C6C DEFB %00000011                       ;
 $7C6D DEFB %00000011                       ;
 $7C6E DEFB %11110011                       ;
 $7C6F DEFB %11110011                       ;
 $7C70 DEFB %00110011                       ;
 $7C71 DEFB %00110011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C72 DEFB %11001100                       ; {#UDG(#PC)
 $7C73 DEFB %11001100                       ;
 $7C74 DEFB %11001100                       ;
 $7C75 DEFB %11001100                       ;
 $7C76 DEFB %11001111                       ;
 $7C77 DEFB %11001111                       ;
 $7C78 DEFB %11001111                       ;
 $7C79 DEFB %11001111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C7A DEFB %10010010                       ; {#UDG(#PC)
 $7C7B DEFB %00110000                       ;
 $7C7C DEFB %11110010                       ;
 $7C7D DEFB %11110010                       ;
 $7C7E DEFB %11111111                       ;
 $7C7F DEFB %11111111                       ;
 $7C80 DEFB %11111111                       ;
 $7C81 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C82 DEFB %01000100                       ; {#UDG(#PC)
 $7C83 DEFB %01001000                       ;
 $7C84 DEFB %01001000                       ;
 $7C85 DEFB %01001100                       ;
 $7C86 DEFB %11111111                       ;
 $7C87 DEFB %11111111                       ;
 $7C88 DEFB %11111111                       ;
 $7C89 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C8A DEFB %11001110                       ; {#UDG(#PC)
 $7C8B DEFB %11001110                       ;
 $7C8C DEFB %11001110                       ;
 $7C8D DEFB %11001110                       ;
 $7C8E DEFB %11111111                       ;
 $7C8F DEFB %11111111                       ;
 $7C90 DEFB %11111111                       ;
 $7C91 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C92 DEFB %01001000                       ; {#UDG(#PC)
 $7C93 DEFB %00011000                       ;
 $7C94 DEFB %01001111                       ;
 $7C95 DEFB %01001000                       ;
 $7C96 DEFB %11111111                       ;
 $7C97 DEFB %11111111                       ;
 $7C98 DEFB %11111111                       ;
 $7C99 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7C9A DEFB %00110011                       ; {#UDG(#PC)
 $7C9B DEFB %00110011                       ;
 $7C9C DEFB %00110011                       ;
 $7C9D DEFB %00110011                       ;
 $7C9E DEFB %11110011                       ;
 $7C9F DEFB %11110011                       ;
 $7CA0 DEFB %11110011                       ;
 $7CA1 DEFB %11110011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CA2 DEFB %11001111                       ; {#UDG(#PC)
 $7CA3 DEFB %11001111                       ;
 $7CA4 DEFB %11001111                       ;
 $7CA5 DEFB %11001111                       ;
 $7CA6 DEFB %11001111                       ;
 $7CA7 DEFB %11001111                       ;
 $7CA8 DEFB %11001111                       ;
 $7CA9 DEFB %11001111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CAA DEFB %00000000                       ; {#UDG(#PC)
 $7CAB DEFB %00000000                       ;
 $7CAC DEFB %00001111                       ;
 $7CAD DEFB %00001000                       ;
 $7CAE DEFB %00110000                       ;
 $7CAF DEFB %00100000                       ;
 $7CB0 DEFB %00100000                       ;
 $7CB1 DEFB %00100000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CB2 DEFB %00000000                       ; {#UDG(#PC)
 $7CB3 DEFB %00000000                       ;
 $7CB4 DEFB %11111111                       ;
 $7CB5 DEFB %00000000                       ;
 $7CB6 DEFB %00000000                       ;
 $7CB7 DEFB %00000011                       ;
 $7CB8 DEFB %00000110                       ;
 $7CB9 DEFB %00000101                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CBA DEFB %00000000                       ; {#UDG(#PC)
 $7CBB DEFB %00000000                       ;
 $7CBC DEFB %11111111                       ;
 $7CBD DEFB %00000000                       ;
 $7CBE DEFB %00000000                       ;
 $7CBF DEFB %11000000                       ;
 $7CC0 DEFB %01100000                       ;
 $7CC1 DEFB %11100000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CC2 DEFB %00000000                       ; {#UDG(#PC)
 $7CC3 DEFB %00000000                       ;
 $7CC4 DEFB %11110000                       ;
 $7CC5 DEFB %00010000                       ;
 $7CC6 DEFB %00001100                       ;
 $7CC7 DEFB %00000100                       ;
 $7CC8 DEFB %00000100                       ;
 $7CC9 DEFB %00000100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CCA DEFB %11110011                       ; {#UDG(#PC)
 $7CCB DEFB %11110011                       ;
 $7CCC DEFB %11110011                       ;
 $7CCD DEFB %11110011                       ;
 $7CCE DEFB %11110011                       ;
 $7CCF DEFB %11110011                       ;
 $7CD0 DEFB %11110011                       ;
 $7CD1 DEFB %11110011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CD2 DEFB %00100000                       ; {#UDG(#PC)
 $7CD3 DEFB %00100000                       ;
 $7CD4 DEFB %00100000                       ;
 $7CD5 DEFB %00110000                       ;
 $7CD6 DEFB %00001000                       ;
 $7CD7 DEFB %00001111                       ;
 $7CD8 DEFB %00000000                       ;
 $7CD9 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CDA DEFB %00000101                       ; {#UDG(#PC)
 $7CDB DEFB %00000111                       ;
 $7CDC DEFB %00000011                       ;
 $7CDD DEFB %00000000                       ;
 $7CDE DEFB %00000000                       ;
 $7CDF DEFB %11111111                       ;
 $7CE0 DEFB %00000000                       ;
 $7CE1 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CE2 DEFB %11100000                       ; {#UDG(#PC)
 $7CE3 DEFB %11100000                       ;
 $7CE4 DEFB %11000000                       ;
 $7CE5 DEFB %00000000                       ;
 $7CE6 DEFB %00000000                       ;
 $7CE7 DEFB %11111111                       ;
 $7CE8 DEFB %00000000                       ;
 $7CE9 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CEA DEFB %00000100                       ; {#UDG(#PC)
 $7CEB DEFB %00000100                       ;
 $7CEC DEFB %00000100                       ;
 $7CED DEFB %00001100                       ;
 $7CEE DEFB %00010000                       ;
 $7CEF DEFB %11110000                       ;
 $7CF0 DEFB %00000000                       ;
 $7CF1 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CF2 DEFB %11001111                       ; {#UDG(#PC)
 $7CF3 DEFB %11001111                       ;
 $7CF4 DEFB %11001111                       ;
 $7CF5 DEFB %11001111                       ;
 $7CF6 DEFB %11000000                       ;
 $7CF7 DEFB %11000000                       ;
 $7CF8 DEFB %11111111                       ;
 $7CF9 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7CFA DEFB %11111111                       ; {#UDG(#PC)
 $7CFB DEFB %11111111                       ;
 $7CFC DEFB %11111111                       ;
 $7CFD DEFB %11111111                       ;
 $7CFE DEFB %00000000                       ;
 $7CFF DEFB %00000000                       ;
 $7D00 DEFB %11111111                       ;
 $7D01 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D02 DEFB %11110011                       ; {#UDG(#PC)
 $7D03 DEFB %11110011                       ;
 $7D04 DEFB %11110011                       ;
 $7D05 DEFB %11110011                       ;
 $7D06 DEFB %00000011                       ;
 $7D07 DEFB %00000011                       ;
 $7D08 DEFB %11111111                       ;
 $7D09 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D0A DEFB %00111111                       ; {#UDG(#PC)
 $7D0B DEFB %00100110                       ;
 $7D0C DEFB %00100110                       ;
 $7D0D DEFB %00111111                       ;
 $7D0E DEFB %00000000                       ;
 $7D0F DEFB %00011100                       ;
 $7D10 DEFB %00011001                       ;
 $7D11 DEFB %00111011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D12 DEFB %11111111                       ; {#UDG(#PC)
 $7D13 DEFB %01100110                       ;
 $7D14 DEFB %01100110                       ;
 $7D15 DEFB %11111111                       ;
 $7D16 DEFB %00000000                       ;
 $7D17 DEFB %11111111                       ;
 $7D18 DEFB %11111110                       ;
 $7D19 DEFB %11111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D1A DEFB %11111111                       ; {#UDG(#PC)
 $7D1B DEFB %01100110                       ;
 $7D1C DEFB %01100110                       ;
 $7D1D DEFB %11111111                       ;
 $7D1E DEFB %00000000                       ;
 $7D1F DEFB %00000000                       ;
 $7D20 DEFB %00000000                       ;
 $7D21 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D22 DEFB %11111111                       ; {#UDG(#PC)
 $7D23 DEFB %01100110                       ;
 $7D24 DEFB %01100110                       ;
 $7D25 DEFB %11111111                       ;
 $7D26 DEFB %00000000                       ;
 $7D27 DEFB %11111111                       ;
 $7D28 DEFB %01111111                       ;
 $7D29 DEFB %00111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D2A DEFB %11111100                       ; {#UDG(#PC)
 $7D2B DEFB %01100100                       ;
 $7D2C DEFB %01100100                       ;
 $7D2D DEFB %11111100                       ;
 $7D2E DEFB %00000000                       ;
 $7D2F DEFB %11111000                       ;
 $7D30 DEFB %11111000                       ;
 $7D31 DEFB %11111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D32 DEFB %00110011                       ; {#UDG(#PC)
 $7D33 DEFB %00110111                       ;
 $7D34 DEFB %01110111                       ;
 $7D35 DEFB %01110111                       ;
 $7D36 DEFB %01110111                       ;
 $7D37 DEFB %01110111                       ;
 $7D38 DEFB %01111011                       ;
 $7D39 DEFB %00111011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D3A DEFB %11111000                       ; {#UDG(#PC)
 $7D3B DEFB %11110000                       ;
 $7D3C DEFB %11110000                       ;
 $7D3D DEFB %11100000                       ;
 $7D3E DEFB %11000000                       ;
 $7D3F DEFB %11000000                       ;
 $7D40 DEFB %11000000                       ;
 $7D41 DEFB %10000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D42 DEFB %00011110                       ; {#UDG(#PC)
 $7D43 DEFB %00001111                       ;
 $7D44 DEFB %00001110                       ;
 $7D45 DEFB %00000111                       ;
 $7D46 DEFB %00000011                       ;
 $7D47 DEFB %00000011                       ;
 $7D48 DEFB %00000011                       ;
 $7D49 DEFB %00000001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D4A DEFB %11111100                       ; {#UDG(#PC)
 $7D4B DEFB %11111100                       ;
 $7D4C DEFB %11111110                       ;
 $7D4D DEFB %01111110                       ;
 $7D4E DEFB %01111110                       ;
 $7D4F DEFB %01111110                       ;
 $7D50 DEFB %10111110                       ;
 $7D51 DEFB %10111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D52 DEFB %00111011                       ; {#UDG(#PC)
 $7D53 DEFB %00011011                       ;
 $7D54 DEFB %00011111                       ;
 $7D55 DEFB %00001111                       ;
 $7D56 DEFB %00001111                       ;
 $7D57 DEFB %00000111                       ;
 $7D58 DEFB %00000111                       ;
 $7D59 DEFB %00001101                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D5A DEFB %10000000                       ; {#UDG(#PC)
 $7D5B DEFB %10000000                       ;
 $7D5C DEFB %10000000                       ;
 $7D5D DEFB %10000000                       ;
 $7D5E DEFB %10000000                       ;
 $7D5F DEFB %10000000                       ;
 $7D60 DEFB %11000000                       ;
 $7D61 DEFB %11000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D62 DEFB %00000001                       ; {#UDG(#PC)
 $7D63 DEFB %00000001                       ;
 $7D64 DEFB %00000001                       ;
 $7D65 DEFB %00000001                       ;
 $7D66 DEFB %00000001                       ;
 $7D67 DEFB %00000001                       ;
 $7D68 DEFB %00000011                       ;
 $7D69 DEFB %00000011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D6A DEFB %10111100                       ; {#UDG(#PC)
 $7D6B DEFB %10111000                       ;
 $7D6C DEFB %10111000                       ;
 $7D6D DEFB %10110000                       ;
 $7D6E DEFB %10110000                       ;
 $7D6F DEFB %10100000                       ;
 $7D70 DEFB %01100000                       ;
 $7D71 DEFB %01110000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D72 DEFB %11000000                       ; {#UDG(#PC)
 $7D73 DEFB %00110000                       ;
 $7D74 DEFB %00001100                       ;
 $7D75 DEFB %00000011                       ;
 $7D76 DEFB %00000010                       ;
 $7D77 DEFB %00000010                       ;
 $7D78 DEFB %00000010                       ;
 $7D79 DEFB %00000010                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D7A DEFB %00000000                       ; {#UDG(#PC)
 $7D7B DEFB %00000000                       ;
 $7D7C DEFB %00000000                       ;
 $7D7D DEFB %11111111                       ;
 $7D7E DEFB %00000000                       ;
 $7D7F DEFB %00000000                       ;
 $7D80 DEFB %00000000                       ;
 $7D81 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D82 DEFB %00000011                       ; {#UDG(#PC)
 $7D83 DEFB %00001100                       ;
 $7D84 DEFB %00110000                       ;
 $7D85 DEFB %11000000                       ;
 $7D86 DEFB %01000000                       ;
 $7D87 DEFB %01000000                       ;
 $7D88 DEFB %01000000                       ;
 $7D89 DEFB %01000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D8A DEFB %00000010                       ; {#UDG(#PC)
 $7D8B DEFB %00000010                       ;
 $7D8C DEFB %00000010                       ;
 $7D8D DEFB %00000010                       ;
 $7D8E DEFB %00000011                       ;
 $7D8F DEFB %00001100                       ;
 $7D90 DEFB %00110000                       ;
 $7D91 DEFB %11000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D92 DEFB %00000000                       ; {#UDG(#PC)
 $7D93 DEFB %00000000                       ;
 $7D94 DEFB %00000000                       ;
 $7D95 DEFB %00000000                       ;
 $7D96 DEFB %11111111                       ;
 $7D97 DEFB %00000000                       ;
 $7D98 DEFB %00000000                       ;
 $7D99 DEFB %00000000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7D9A DEFB %01000000                       ; {#UDG(#PC)
 $7D9B DEFB %01000000                       ;
 $7D9C DEFB %01000000                       ;
 $7D9D DEFB %01000000                       ;
 $7D9E DEFB %11000000                       ;
 $7D9F DEFB %00110000                       ;
 $7DA0 DEFB %00001100                       ;
 $7DA1 DEFB %00000011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DA2 DEFB %11111111                       ; {#UDG(#PC)
 $7DA3 DEFB %11111111                       ;
 $7DA4 DEFB %10011100                       ;
 $7DA5 DEFB %10011100                       ;
 $7DA6 DEFB %10011100                       ;
 $7DA7 DEFB %10011100                       ;
 $7DA8 DEFB %10000100                       ;
 $7DA9 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DAA DEFB %11111111                       ; {#UDG(#PC)
 $7DAB DEFB %11111111                       ;
 $7DAC DEFB %00100101                       ;
 $7DAD DEFB %11100101                       ;
 $7DAE DEFB %01100101                       ;
 $7DAF DEFB %11110011                       ;
 $7DB0 DEFB %00110011                       ;
 $7DB1 DEFB %11111111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DB2 DEFB %00110001                       ; {#UDG(#PC)
 $7DB3 DEFB %01010101                       ;
 $7DB4 DEFB %11010000                       ;
 $7DB5 DEFB %01000111                       ;
 $7DB6 DEFB %00110010                       ;
 $7DB7 DEFB %01010101                       ;
 $7DB8 DEFB %11010000                       ;
 $7DB9 DEFB %01111000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DBA DEFB %01001000                       ; {#UDG(#PC)
 $7DBB DEFB %11001001                       ;
 $7DBC DEFB %00100001                       ;
 $7DBD DEFB %00000000                       ;
 $7DBE DEFB %01000000                       ;
 $7DBF DEFB %00000110                       ;
 $7DC0 DEFB %01011000                       ;
 $7DC1 DEFB %00001110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DC2 DEFB %00000000                       ; {#UDG(#PC)
 $7DC3 DEFB %01110001                       ;
 $7DC4 DEFB %00100011                       ;
 $7DC5 DEFB %01111100                       ;
 $7DC6 DEFB %10111000                       ;
 $7DC7 DEFB %00111000                       ;
 $7DC8 DEFB %11111010                       ;
 $7DC9 DEFB %11001001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DCA DEFB %10101111                       ; {#UDG(#PC)
 $7DCB DEFB %11010011                       ;
 $7DCC DEFB %11111110                       ;
 $7DCD DEFB %00100001                       ;
 $7DCE DEFB %00000000                       ;
 $7DCF DEFB %01011000                       ;
 $7DD0 DEFB %00000110                       ;
 $7DD1 DEFB %01011011                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DD2 DEFB %00001110                       ; {#UDG(#PC)
 $7DD3 DEFB %00000000                       ;
 $7DD4 DEFB %00011000                       ;
 $7DD5 DEFB %11101101                       ;
 $7DD6 DEFB %11011001                       ;
 $7DD7 DEFB %00101010                       ;
 $7DD8 DEFB %00011111                       ;
 $7DD9 DEFB %01011111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DDA DEFB %11001101                       ; {#UDG(#PC)
 $7DDB DEFB %00110100                       ;
 $7DDC DEFB %01110101                       ;
 $7DDD DEFB %00111010                       ;
 $7DDE DEFB %00011000                       ;
 $7DDF DEFB %01011111                       ;
 $7DE0 DEFB %01000111                       ;
 $7DE1 DEFB %00111010                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DE2 DEFB %00010111                       ; {#UDG(#PC)
 $7DE3 DEFB %01011111                       ;
 $7DE4 DEFB %00001111                       ;
 $7DE5 DEFB %00001111                       ;
 $7DE6 DEFB %00111100                       ;
 $7DE7 DEFB %00001111                       ;
 $7DE8 DEFB %11100110                       ;
 $7DE9 DEFB %00011111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DEA DEFB %00111100                       ; {#UDG(#PC)
 $7DEB DEFB %01001111                       ;
 $7DEC DEFB %11011101                       ;
 $7DED DEFB %01010110                       ;
 $7DEE DEFB %00000011                       ;
 $7DEF DEFB %01011000                       ;
 $7DF0 DEFB %11100101                       ;
 $7DF1 DEFB %01111100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DF2 DEFB %11111110                       ; {#UDG(#PC)
 $7DF3 DEFB %01011011                       ;
 $7DF4 DEFB %00110000                       ;
 $7DF5 DEFB %00011000                       ;
 $7DF6 DEFB %11111110                       ;
 $7DF7 DEFB %01011000                       ;
 $7DF8 DEFB %00111000                       ;
 $7DF9 DEFB %00010100                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7DFA DEFB %01111101                       ; {#UDG(#PC)
 $7DFB DEFB %11100110                       ;
 $7DFC DEFB %00011111                       ;
 $7DFD DEFB %11111110                       ;
 $7DFE DEFB %00011010                       ;
 $7DFF DEFB %00110000                       ;
 $7E00 DEFB %00001101                       ;
 $7E01 DEFB %01110010                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E02 DEFB %00101100                       ; {#UDG(#PC)
 $7E03 DEFB %01111101                       ;
 $7E04 DEFB %11100110                       ;
 $7E05 DEFB %00011111                       ;
 $7E06 DEFB %00100000                       ;
 $7E07 DEFB %00000100                       ;
 $7E08 DEFB %01111101                       ;
 $7E09 DEFB %11010110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E0A DEFB %00100000                       ; {#UDG(#PC)
 $7E0B DEFB %01101111                       ;
 $7E0C DEFB %00010000                       ;
 $7E0D DEFB %11100011                       ;
 $7E0E DEFB %11100001                       ;
 $7E0F DEFB %11000101                       ;
 $7E10 DEFB %10100111                       ;
 $7E11 DEFB %00000001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E12 DEFB %00100000                       ; {#UDG(#PC)
 $7E13 DEFB %00000000                       ;
 $7E14 DEFB %11101101                       ;
 $7E15 DEFB %01000010                       ;
 $7E16 DEFB %11000001                       ;
 $7E17 DEFB %01000011                       ;
 $7E18 DEFB %00001101                       ;
 $7E19 DEFB %00100000                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E1A DEFB %11010101                       ; {#UDG(#PC)
 $7E1B DEFB %11001001                       ;
 $7E1C DEFB %01111101                       ;
 $7E1D DEFB %00001111                       ;
 $7E1E DEFB %00001111                       ;
 $7E1F DEFB %00001111                       ;
 $7E20 DEFB %11100110                       ;
 $7E21 DEFB %00011111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E22 DEFB %01101111                       ; {#UDG(#PC)
 $7E23 DEFB %01111100                       ;
 $7E24 DEFB %00000111                       ;
 $7E25 DEFB %00000111                       ;
 $7E26 DEFB %01001111                       ;
 $7E27 DEFB %11100110                       ;
 $7E28 DEFB %11100000                       ;
 $7E29 DEFB %10110101                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E2A DEFB %01101111                       ; {#UDG(#PC)
 $7E2B DEFB %01111001                       ;
 $7E2C DEFB %11100110                       ;
 $7E2D DEFB %00000011                       ;
 $7E2E DEFB %11110110                       ;
 $7E2F DEFB %01011000                       ;
 $7E30 DEFB %01100111                       ;
 $7E31 DEFB %11001001                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E32 DEFB %01111100                       ; {#UDG(#PC)
 $7E33 DEFB %11010110                       ;
 $7E34 DEFB %10011111                       ;
 $7E35 DEFB %11111010                       ;
 $7E36 DEFB %01010100                       ;
 $7E37 DEFB %01110101                       ;
 $7E38 DEFB %00100110                       ;
 $7E39 DEFB %10011111                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E3A DEFB %01001111                       ; {#UDG(#PC)
 $7E3B DEFB %11001001                       ;
 $7E3C DEFB %00001110                       ;
 $7E3D DEFB %00000000                       ;
 $7E3E DEFB %11001001                       ;
 $7E3F DEFB %11001101                       ;
 $7E40 DEFB %00100011                       ;
 $7E41 DEFB %01110110                       ; }
; ID: "#EVAL((#PC - $7B4A) / $08)".
 $7E42 DEFB %00101010                       ; {#UDG(#PC)
 $7E43 DEFB %00010100                       ;
 $7E44 DEFB %01011111                       ;
 $7E45 DEFB %01111101                       ;
 $7E46 DEFB %00111101                       ;
 $7E47 DEFB %00000111                       ;
 $7E48 DEFB %11100110                       ;
 $7E49 DEFB %00001110                       ; }
 $7E4A DEFB $FE,$0E,$20,$02,$3E,$F1,$32,$7B
 $7E52 DEFB $76,$CD,$4A,$75,$CD,$E3,$76,$1A
 $7E5A DEFB $91,$30,$01,$AF,$32,$19,$5F,$CB
 $7E62 DEFB $21,$06,$00,$EB,$09,$EB,$0E,$00
 $7E6A DEFB $13,$C9,$CD,$35,$76,$DD,$6E,$01
 $7E72 DEFB $DD,$66,$02,$7D,$3D,$07,$E6,$0E
 $7E7A DEFB $FE,$0E,$20,$02,$3E,$F1,$32,$B9
 $7E82 DEFB $76,$3E,$02,$28,$01,$3C,$32,$18
 $7E8A DEFB $5F,$CD,$4A,$75,$22,$1F,$5F,$CD
 $7E92 DEFB $E3,$76,$1A,$91,$30,$01,$AF,$32
 $7E9A DEFB $1A,$5F,$32,$17,$5F,$06,$00,$CB
 $7EA2 DEFB $21,$EB,$09,$EB,$18,$C0,$D5,$CD
 $7EAA DEFB $5A,$75,$D9,$D1,$CD,$87,$75,$D9
 $7EB2 DEFB $18,$07,$CD,$84,$75,$D9,$CD,$57
 $7EBA DEFB $75,$3A,$15,$5F,$DD,$96,$02,$CA
 $7EC2 DEFB $54,$76,$FA,$EE,$75,$4F,$3A,$19
 $7ECA DEFB $5F,$B9,$DA,$54,$76,$91,$32,$19
 $7ED2 DEFB $5F,$C3,$3A,$76,$D9,$ED,$44,$4F
 $7EDA DEFB $3A,$1A,$5F,$B9,$DA,$53,$76,$91
 $7EE2 DEFB $C3,$67,$76,$CD,$87,$75,$18,$18
 $7EEA DEFB $CD,$5A,$75,$18,$03,$CD,$57,$75
 $7EF2 DEFB $D9,$AF,$4F,$32,$1A,$5F,$32,$17
 $7EFA DEFB $5F,$D9,$C3,$3A,$76,$CD,$84,$75
 $7F02 DEFB $D9,$AF,$32,$19,$5F,$4F,$C3,$3A
 $7F0A DEFB $76,$3A,$16,$5F,$3D,$07,$E6,$7E
 $7F12 DEFB $21,$02,$77,$4F,$06,$00,$09,$5E
 $7F1A DEFB $23,$56,$C9,$DD,$7E,$00,$18,$EC
 $7F22 DEFB $79,$A7,$28,$10,$0D,$CD,$71,$76
 $7F2A DEFB $D9,$79,$A7,$28,$04,$0D,$CD,$AF
 $7F32 DEFB $76,$D9,$18,$EC,$D9,$79,$A7,$20
 $7F3A DEFB $F4,$D9,$3A,$19,$5F,$4F,$3A,$1A
 $7F42 DEFB $5F,$B1,$C8,$AF,$32,$19,$5F,$D9
 $7F4A DEFB $3A,$1A,$5F,$4F,$AF,$32,$1A,$5F
 $7F52 DEFB $D9,$18,$CD,$EB,$E3,$18,$1E,$E5
 $7F5A DEFB $EB,$D5,$56,$23,$5E,$23,$EB,$AF
 $7F62 DEFB $18,$FE,$29,$8F,$29,$8F,$29,$8F
 $7F6A DEFB $29,$8F,$29,$8F,$29,$8F,$29,$8F
 $7F72 DEFB $EB,$E3,$AE,$77,$2C,$7A,$AE,$77
 $7F7A DEFB $2C,$7B,$AE,$77,$D1,$E1,$25,$7C
 $7F82 DEFB $2F,$E6,$07,$C0,$7D,$D6,$20,$6F
 $7F8A DEFB $2F,$E6,$E0,$C8,$7C,$C6,$08,$67
 $7F92 DEFB $C9,$EB,$E3,$18,$E0,$E5,$EB,$D5
 $7F9A DEFB $56,$23,$5E,$23,$EB,$AF,$18,$FE
 $7FA2 DEFB $29,$8F,$29,$8F,$29,$8F,$ED,$6A
 $7FAA DEFB $8F,$29,$8F,$29,$8F,$29,$8F,$EB
 $7FB2 DEFB $E3,$AE,$77,$2C,$18,$BF,$DD,$7E
 $7FBA DEFB $01,$32,$14,$5F,$DD,$7E,$02,$32
 $7FC2 DEFB $15,$5F,$DD,$7E,$00,$32,$16,$5F
 $7FCA DEFB $C9,$7D,$0F,$0F,$0F,$E6,$1F,$6F
 $7FD2 DEFB $7C,$07,$07,$E6,$E0,$B5,$6F,$7C
 $7FDA DEFB $E6,$07,$08,$7C,$0F,$0F,$0F,$E6
 $7FE2 DEFB $18,$F6,$40,$67,$08,$B4,$67,$C9
 $7FEA DEFB $83,$78,$AC,$78,$1C,$79,$33,$79
 $7FF2 DEFB $4E,$79,$07,$78,$07,$78,$AF,$79
 $7FFA DEFB $CE,$79,$07,$78,$07,$07

i$8000

; Data block at B800
b$B800 DEFB $00

